/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AVFAudio.framework/AVFAudio
 */

@interface AVAudioDeviceTestService : NSObject <AVAudioDeviceTestServiceProtocol> {
    AVAudioSession * _currentSession;
    AVAudioEngine * _engine;
    long long  _extensionHandle;
    AVAudioSession * _hearingTestSession;
    AVAudioUnitEQ * _inputFilter;
    AVAudioFile * _inputTapFile;
    id  _interruptionObserver;
    id  _mediaservicesLostObserver;
    id  _mediaservicesResetObserver;
    AVAudioUnit * _multichannelMixer;
    AVAudioNode * _nodeToCaptureData;
    AVAudioUnitEQ * _outputFilter;
    AVAudioPlayerNode * _player;
    id  _routeChangeObserver;
    AVAudioSourceNode * _sourceNode;
    id  _systemVolumeObserver;
    bool  _testServiceSupportedOnHardware;
    NSObject<OS_dispatch_queue> * _toneQueue;
    NSObject<OS_os_transaction> * _transaction;
    NSNumber * _userVolumeBeforeHearingTest;
    struct unique_ptr<PulseTone, std::default_delete<PulseTone>> { 
        struct __compressed_pair<PulseTone *, std::default_delete<PulseTone>> { 
            struct PulseTone {} *__value_; 
        } __ptr_; 
    }  mPulseToneHandler;
}

@property (retain) AVAudioSession *currentSession;
@property (retain) AVAudioEngine *engine;
@property long long extensionHandle;
@property (nonatomic, retain) AVAudioSession *hearingTestSession;
@property (retain) AVAudioUnitEQ *inputFilter;
@property (retain) AVAudioFile *inputTapFile;
@property (retain) id interruptionObserver;
@property (retain) id mediaservicesLostObserver;
@property (retain) id mediaservicesResetObserver;
@property (retain) AVAudioUnit *multichannelMixer;
@property (retain) AVAudioNode *nodeToCaptureData;
@property (retain) AVAudioUnitEQ *outputFilter;
@property (retain) AVAudioPlayerNode *player;
@property (retain) id routeChangeObserver;
@property (nonatomic, retain) AVAudioSourceNode *sourceNode;
@property (retain) id systemVolumeObserver;
@property bool testServiceSupportedOnHardware;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *toneQueue;
@property (nonatomic, retain) NSObject<OS_os_transaction> *transaction;
@property (nonatomic, retain) NSNumber *userVolumeBeforeHearingTest;

- (id).cxx_construct;
- (void).cxx_destruct;
- (double)calculateCrossCorrelationPeakRelativeToSource:(id)arg1 capture:(id)arg2;
- (void)cancel;
- (void)checkSequenceValidity:(id)arg1 completion:(id /* block */)arg2;
- (void)cleanUp;
- (void)cleanUpObservers;
- (void)configureDataSources:(id)arg1 session:(id)arg2;
- (void)configureMultiChannelMixerForOutputChannel:(long long)arg1 totalChannels:(long long)arg2;
- (id)convertBufferFor:(id)arg1 sourceBuffer:(id)arg2;
- (void)createAudioEngineAndProcessingChain:(id)arg1 session:(id)arg2 sourceNodeBlock:(id /* block */)arg3;
- (bool)createAudioEngineAndPulseToneHandlerFor:(id)arg1;
- (id)currentSession;
- (void)dealloc;
- (id)engine;
- (long long)extensionHandle;
- (id)hearingTestSession;
- (id)init;
- (id)inputFilter;
- (id)inputTapFile;
- (id)interruptionObserver;
- (bool)isMixerOutputEnabled;
- (bool)isOutputRouteBluetooth:(id)arg1 session:(id)arg2;
- (bool)isPlaybackForTestEnabled;
- (id)mediaservicesLostObserver;
- (id)mediaservicesResetObserver;
- (id)multichannelMixer;
- (id)nodeToCaptureData;
- (id)outputFilter;
- (void)passExtensionToken:(id)arg1;
- (void)playback:(id)arg1 filePath:(id)arg2 completion:(id /* block */)arg3;
- (void)playbackTone:(id)arg1 completion:(id /* block */)arg2;
- (id)player;
- (void)removeSystemVolumeObserver;
- (void)resetVolume:(float)arg1;
- (id)routeChangeObserver;
- (void)setCurrentSession:(id)arg1;
- (void)setEngine:(id)arg1;
- (void)setExtensionHandle:(long long)arg1;
- (void)setHearingTestSession:(id)arg1;
- (void)setInputFilter:(id)arg1;
- (void)setInputTapFile:(id)arg1;
- (void)setInterruptionObserver:(id)arg1;
- (void)setMediaservicesLostObserver:(id)arg1;
- (void)setMediaservicesResetObserver:(id)arg1;
- (void)setMultichannelMixer:(id)arg1;
- (void)setNodeToCaptureData:(id)arg1;
- (void)setOutputFilter:(id)arg1;
- (void)setPlayer:(id)arg1;
- (void)setRouteChangeObserver:(id)arg1;
- (void)setSourceNode:(id)arg1;
- (void)setSystemVolumeObserver:(id)arg1;
- (void)setTestServiceSupportedOnHardware:(bool)arg1;
- (void)setToneQueue:(id)arg1;
- (void)setTransaction:(id)arg1;
- (void)setUserVolumeBeforeHearingTest:(id)arg1;
- (bool)setVolume:(id)arg1;
- (bool)setVolume:(id)arg1 session:(id)arg2;
- (void)setupAudioEngineFor:(id)arg1 sourceNodeBlock:(id /* block */)arg2;
- (void)setupAudioSessionFor:(id)arg1 playbackOnly:(bool)arg2 completion:(id /* block */)arg3;
- (void)setupAudioSessionForHearingTest:(id /* block */)arg1;
- (void)setupAudioSessionForHearingTestWithStatus:(id /* block */)arg1 success:(id /* block */)arg2;
- (void)setupMultiChannelMixerForOutputChannel:(id)arg1 completion:(id /* block */)arg2;
- (void)setupObservers:(id /* block */)arg1;
- (void)setupVolumeObserverForVolume:(float)arg1 completion:(id /* block */)arg2;
- (id)sourceNode;
- (void)startRecording:(id)arg1 filePath:(id)arg2 completion:(id /* block */)arg3;
- (void)startWithSequence:(id)arg1 completion:(id /* block */)arg2;
- (void)stopAudioSession:(id /* block */)arg1;
- (void)stopPlayback;
- (void)stopRecording:(id /* block */)arg1;
- (id)stringForInterruptionReason:(unsigned long long)arg1;
- (id)stringForRouteChangeReason:(unsigned long long)arg1;
- (id)systemVolumeObserver;
- (bool)testServiceSupportedOnHardware;
- (id)toneQueue;
- (id)transaction;
- (id)userVolumeBeforeHearingTest;

@end
