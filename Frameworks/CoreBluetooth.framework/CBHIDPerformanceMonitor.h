/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth
 */

@interface CBHIDPerformanceMonitor : NSObject <CBActivatable> {
    bool  _activateCalled;
    NSArray * _devices;
    NSObject<OS_dispatch_queue> * _dispatchQueue;
    id /* block */  _excessiveIntervalHandler;
    bool  _finishWait;
    struct IOHIDDeviceInterface {} ** _hidInterface;
    struct __IOHIDManager { } * _hidManager;
    bool  _hidOpen;
    struct IOCFPlugInInterfaceStruct {} ** _hidPluginInterface;
    unsigned int  _hidProductID;
    unsigned int  _hidService;
    bool  _hidStartedErrorRateMode;
    double  _intervalMs;
    bool  _invalidateCalled;
    bool  _invalidateDone;
    id /* block */  _invalidationHandler;
    CBPacketLoggerClient * _packetLoggerClient;
    bool  _startWait;
    unsigned short  _statsLastConnectionHandle;
    BOOL  _statsLastRSSI;
    unsigned long long  _statsPacketCountActual;
    unsigned long long  _statsPacketCountExpected;
    unsigned long long  _statsPacketIntervalMicsExpected;
    unsigned long long  _statsPacketIntervalMicsMax;
    unsigned long long  _statsPacketMicsEnd;
    unsigned long long  _statsPacketMicsPrevious;
    unsigned long long  _statsPacketMicsStart;
    id /* block */  _summaryHandler;
    NSString * _targetBTAddrData;
    NSString * _targetBTAddrKey;
    CBDevice * _targetDevice;
    unsigned long long  _targetDeviceIndex;
    NSArray * _targetDevices;
    double  _testSeconds;
    double  _testSecondsActual;
    NSObject<OS_dispatch_source> * _timeoutTimer;
    NSObject<OS_dispatch_queue> * _workQueue;
}

@property (nonatomic, copy) NSArray *devices;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *dispatchQueue;
@property (nonatomic, copy) id /* block */ excessiveIntervalHandler;
@property (nonatomic) double intervalMs;
@property (nonatomic, copy) id /* block */ invalidationHandler;
@property (nonatomic, copy) id /* block */ summaryHandler;
@property (nonatomic) double testSeconds;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *workQueue;

- (void).cxx_destruct;
- (void)_activateWithCompletion:(id /* block */)arg1;
- (bool)_findDevicesAndReturnError:(id*)arg1;
- (bool)_hidSetFeatureWithReportID:(unsigned char)arg1 value:(unsigned char)arg2 error:(id*)arg3;
- (bool)_hidStartAndReturnError:(id*)arg1;
- (bool)_hidStartPERAndRetunError:(id*)arg1;
- (void)_hidStop;
- (bool)_hidStopPERAndRetunError:(id*)arg1;
- (void)_invalidate;
- (void)_invalidated;
- (bool)_isAppleOldHIDs:(unsigned int)arg1;
- (bool)_isMac;
- (void)_packetLoggerProcessPacketData:(id)arg1;
- (void)_packetLoggerStart;
- (void)_packetLoggerStop;
- (void)_rssiAndHandleRead;
- (void)_testEnd;
- (void)_testEnded;
- (void)_testStart;
- (void)_timerStart;
- (void)activateWithCompletion:(id /* block */)arg1;
- (id)devices;
- (id)dispatchQueue;
- (id /* block */)excessiveIntervalHandler;
- (id)init;
- (double)intervalMs;
- (void)invalidate;
- (id /* block */)invalidationHandler;
- (void)setDevices:(id)arg1;
- (void)setDispatchQueue:(id)arg1;
- (void)setExcessiveIntervalHandler:(id /* block */)arg1;
- (void)setIntervalMs:(double)arg1;
- (void)setInvalidationHandler:(id /* block */)arg1;
- (void)setSummaryHandler:(id /* block */)arg1;
- (void)setTestSeconds:(double)arg1;
- (void)setWorkQueue:(id)arg1;
- (id /* block */)summaryHandler;
- (double)testSeconds;
- (id)workQueue;

@end
