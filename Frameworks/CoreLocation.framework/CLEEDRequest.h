/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreLocation.framework/CoreLocation
 */

@interface CLEEDRequest : NSObject <NSSecureCoding> {
    NSUUID * _ID;
    NSString * _geofenceID;
    long long  _numMediaSelectIterations;
    NSString * _partnerID;
    NSString * _psapID;
    double  _receivedTimeToAcceptTime;
    double  _receivedTimeToFirstUserResponse;
    NSDate * _requestDate;
    double  _requestReceivedTime;
    long long  _requestStatusAtFirstUserResponse;
    long long  _requestTransmissionTime;
    long long  _state;
    long long  _type;
}

@property (nonatomic, readonly, retain) NSUUID *ID;
@property (nonatomic, readonly, retain) NSString *geofenceID;
@property (nonatomic) long long numMediaSelectIterations;
@property (nonatomic, readonly, retain) NSString *partnerID;
@property (nonatomic, readonly, retain) NSString *psapID;
@property (nonatomic) double receivedTimeToAcceptTime;
@property (nonatomic) double receivedTimeToFirstUserResponse;
@property (nonatomic, readonly, retain) NSDate *requestDate;
@property (nonatomic) double requestReceivedTime;
@property (nonatomic) long long requestStatusAtFirstUserResponse;
@property (nonatomic) long long requestTransmissionTime;
@property (nonatomic) long long state;
@property (nonatomic, readonly) long long type;

+ (id)createRequestFromCachedDict:(id)arg1 error:(long long*)arg2;
+ (id)createRequestFromDict:(id)arg1 baseURL:(id)arg2 sessionID:(id)arg3 partnerAdrPublicKeyData:(id)arg4 deviceSessionPrivateKey:(struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*)arg5 deviceSessionSecret:(id)arg6 error:(long long*)arg7;
+ (id)getCallIDFromDict:(id)arg1;
+ (id)getDecryptedControlRequestData:(id)arg1 sessionID:(id)arg2 partnerAdrPublicKeyData:(id)arg3 deviceSessionPrivateKey:(struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*)arg4 deviceSessionSecret:(id)arg5 combinedSecret:(id*)arg6 error:(long long*)arg7;
+ (id)getDecryptedPartnerSessionSecret:(id)arg1 sessionID:(id)arg2 partnerID:(id)arg3 partnerAdrPublicKeyData:(id)arg4 deviceSessionPrivateKey:(struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*)arg5;
+ (id)getDecryptedRequestDict:(id)arg1 requestID:(id)arg2 combinedSecret:(id)arg3 sharedInfoPrefix:(id)arg4;
+ (id)getPartnerIDFromDict:(id)arg1;
+ (long long)getSessionStartTimeFromDict:(id)arg1;
+ (id)getSharedInfoPrefixFromSessionID:(id)arg1 partnerID:(id)arg2 partnerAdrPublicKeyData:(id)arg3 deviceSessionPrivateKey:(struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*)arg4;
+ (long long)requestTypeFromDict:(id)arg1;
+ (bool)supportsSecureCoding;
+ (id)toCLEEDRequestString:(long long)arg1;
+ (long long)toCLEEDRequestType:(id)arg1;
+ (id)toEEDControlResponseStatus:(long long)arg1;
+ (bool)validateDerivedSessionSecrets:(id)arg1 sharedInfoPrefix:(id)arg2 partnerKeyConfirmation:(id)arg3;

- (id)ID;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)geofenceID;
- (id)getRequestDict;
- (id)getResponseDataDictionary;
- (id)initWithCoder:(id)arg1;
- (id)initWithDictionary:(id)arg1 decryptedRequestData:(id)arg2 baseURL:(id)arg3 error:(long long*)arg4;
- (id)initWithDictionary:(id)arg1 error:(long long*)arg2;
- (id)initWithID:(id)arg1 psapID:(id)arg2 partnerID:(id)arg3 geofenceID:(id)arg4 requestDate:(id)arg5 requestType:(long long)arg6 state:(long long)arg7;
- (long long)numMediaSelectIterations;
- (id)partnerID;
- (id)psapID;
- (double)receivedTimeToAcceptTime;
- (double)receivedTimeToFirstUserResponse;
- (id)requestDate;
- (double)requestReceivedTime;
- (long long)requestStatusAtFirstUserResponse;
- (long long)requestTransmissionTime;
- (void)setNumMediaSelectIterations:(long long)arg1;
- (void)setReceivedTimeToAcceptTime:(double)arg1;
- (void)setReceivedTimeToFirstUserResponse:(double)arg1;
- (void)setRequestReceivedTime:(double)arg1;
- (void)setRequestStatusAtFirstUserResponse:(long long)arg1;
- (void)setRequestTransmissionTime:(long long)arg1;
- (void)setState:(long long)arg1;
- (long long)state;
- (long long)type;
- (void)updateDurationInformationForCA:(bool)arg1;

@end
