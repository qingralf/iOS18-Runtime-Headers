/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreLocation.framework/CoreLocation
 */

@interface CLServiceSessionInternal : NSObject <CLIdentifiableClientProtocol> {
    id /* block */  _clientCallback;
    void * _locationdConnection;
    int  _sessionType;
    bool  _shouldBeRunning;
    CLDispatchSilo * _silo;
    NSString * identityToken;
    CLLocationManager * manager;
    NSData * storageToken;
    id /* block */  weakClient;
}

@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSString *identityToken;
@property (nonatomic, retain) CLLocationManager *manager;
@property (nonatomic, readonly) int sessionType;
@property bool shouldBeRunning;
@property (nonatomic, retain) NSData *storageToken;
@property (readonly) Class superclass;
@property (nonatomic) id /* block */ weakClient;

+ (id)alwaysSessionWithLocationManager:(id)arg1 queue:(id)arg2 handler:(id /* block */)arg3;
+ (id)passiveSessionWithLocationManager:(id)arg1 queue:(id)arg2 handler:(id /* block */)arg3;
+ (id)sessionWithLocationManager:(id)arg1 type:(int)arg2 queue:(id)arg3 handler:(id /* block */)arg4;
+ (id)whenInUseSessionWithLocationManager:(id)arg1 queue:(id)arg2 handler:(id /* block */)arg3;

- (void).cxx_destruct;
- (void)createConnection;
- (void)dealloc;
- (void)destroyConnection;
- (void)handleMessage:(struct shared_ptr<CLConnectionMessage> { struct CLConnectionMessage {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (void)handleMessageDiagnostics:(struct shared_ptr<CLConnectionMessage> { struct CLConnectionMessage {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (id)identityToken;
- (id)initWithLocationManager:(id)arg1 serviceSessionType:(int)arg2 queue:(id)arg3 handler:(id /* block */)arg4;
- (void)invalidate;
- (void)manageConnection;
- (id)manager;
- (int)sessionType;
- (void)setIdentityToken:(id)arg1;
- (void)setManager:(id)arg1;
- (void)setShouldBeRunning:(bool)arg1;
- (void)setStorageToken:(id)arg1;
- (void)setWeakClient:(id /* block */)arg1;
- (bool)shouldBeRunning;
- (id)storageToken;
- (void)tearDown;
- (void)updateIdentityToken:(id)arg1 withStorageToken:(id)arg2;
- (id /* block */)weakClient;

@end
