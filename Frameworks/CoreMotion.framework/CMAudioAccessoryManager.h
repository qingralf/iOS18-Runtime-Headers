/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreMotion.framework/CoreMotion
 */

@interface CMAudioAccessoryManager : NSObject {
    id  _internal;
    struct unique_ptr<CMResampleAccessoryDeviceMotion, std::default_delete<CMResampleAccessoryDeviceMotion>> { 
        struct __compressed_pair<CMResampleAccessoryDeviceMotion *, std::default_delete<CMResampleAccessoryDeviceMotion>> { 
            struct CMResampleAccessoryDeviceMotion {} *__value_; 
        } __ptr_; 
    }  _resampleAccessoryDeviceMotion;
}

@property (getter=_isAudioAccessoryAccelerometerAvailable, nonatomic, readonly) bool _audioAccessoryAccelerometerAvailable;
@property (setter=_setAudioAccessoryAccelerometerUpdateInterval:, nonatomic) double _audioAccessoryAccelerometerUpdateInterval;
@property (getter=_isAudioAccessoryActivityAvailable, nonatomic, readonly) bool _audioAccessoryActivityAvailable;
@property (setter=_setAudioAccessoryActivityUpdateInterval:, nonatomic) double _audioAccessoryActivityUpdateInterval;
@property (getter=_isAudioAccessoryDeviceMotionAvailable, nonatomic, readonly) bool _audioAccessoryDeviceMotionAvailable;
@property (setter=_setAudioAccessoryDeviceMotionUpdateInterval:, nonatomic) double _audioAccessoryDeviceMotionUpdateInterval;
@property (getter=_isAudioAccessoryGyroAvailable, nonatomic, readonly) bool _audioAccessoryGyroAvailable;
@property (setter=_setAudioAccessoryGyroUpdateInterval:, nonatomic) double _audioAccessoryGyroUpdateInterval;
@property (getter=_isAudioAccessoryHeartRateAvailable, nonatomic, readonly) bool _audioAccessoryHeartRateAvailable;
@property (setter=_setAudioAccessoryHeartRateUpdateInterval:, nonatomic) double _audioAccessoryHeartRateUpdateInterval;
@property (getter=_isAudioAccessoryMagnetometerAvailable, nonatomic, readonly) bool _audioAccessoryMagnetometerAvailable;
@property (setter=_setAudioAccessoryMagnetometerUpdateInterval:, nonatomic) double _audioAccessoryMagnetometerUpdateInterval;
@property (getter=_isAudioAccessoryPPGAvailable, nonatomic, readonly) bool _audioAccessoryPPGAvailable;

+ (bool)_isAvailable;
+ (bool)_selectActiveAudioRouteForAccelerometerWithBTAddress:(id)arg1 modelID:(id)arg2;
+ (bool)_selectActiveAudioRouteForDeviceMotionWithBTAddress:(id)arg1 modelID:(id)arg2;
+ (bool)_selectActiveAudioRouteForGyroWithBTAddress:(id)arg1 modelID:(id)arg2;
+ (bool)_selectActiveAudioRouteForHeartRateWithBTAddress:(id)arg1 modelID:(id)arg2;
+ (bool)_selectActiveAudioRouteForMagnetometerWithBTAddress:(id)arg1 modelID:(id)arg2;
+ (bool)_selectActiveAudioRouteForPPGWithBTAddress:(id)arg1 modelID:(id)arg2;
+ (bool)_selectActiveAudioRouteWithBTAddress:(id)arg1 modelID:(id)arg2;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_audioAccessoryAccelerometerData;
- (double)_audioAccessoryAccelerometerUpdateInterval;
- (double)_audioAccessoryActivityUpdateInterval;
- (double)_audioAccessoryDeviceMotionUpdateInterval;
- (id)_audioAccessoryGyroData;
- (double)_audioAccessoryGyroUpdateInterval;
- (double)_audioAccessoryHeartRateUpdateInterval;
- (id)_audioAccessoryMagnetometerData;
- (double)_audioAccessoryMagnetometerUpdateInterval;
- (bool)_isAudioAccessoryAccelerometerAvailable;
- (void)_isAudioAccessoryAccelerometerAvailablePrivate;
- (bool)_isAudioAccessoryActivityAvailable;
- (void)_isAudioAccessoryActivityAvailablePrivate;
- (bool)_isAudioAccessoryDeviceMotionAvailable;
- (void)_isAudioAccessoryDeviceMotionAvailablePrivate;
- (bool)_isAudioAccessoryGyroAvailable;
- (void)_isAudioAccessoryGyroAvailablePrivate;
- (bool)_isAudioAccessoryHeartRateAvailable;
- (void)_isAudioAccessoryHeartRateAvailablePrivate;
- (bool)_isAudioAccessoryMagnetometerAvailable;
- (void)_isAudioAccessoryMagnetometerAvailablePrivate;
- (bool)_isAudioAccessoryPPGAvailable;
- (void)_isAudioAccessoryPPGAvailablePrivate;
- (void)_setAudioAccessoryAccelerometerUpdateInterval:(double)arg1;
- (void)_setAudioAccessoryAccelerometerUpdateIntervalPrivate:(double)arg1;
- (void)_setAudioAccessoryActivityUpdateInterval:(double)arg1;
- (void)_setAudioAccessoryActivityUpdateIntervalPrivate:(double)arg1;
- (void)_setAudioAccessoryDeviceMotionUpdateInterval:(double)arg1;
- (void)_setAudioAccessoryDeviceMotionUpdateIntervalPrivate:(double)arg1;
- (void)_setAudioAccessoryGyroUpdateInterval:(double)arg1;
- (void)_setAudioAccessoryGyroUpdateIntervalPrivate:(double)arg1;
- (void)_setAudioAccessoryHeartRateUpdateInterval:(double)arg1;
- (void)_setAudioAccessoryHeartRateUpdateIntervalPrivate:(double)arg1;
- (void)_setAudioAccessoryMagnetometerUpdateInterval:(double)arg1;
- (void)_setAudioAccessoryMagnetometerUpdateIntervalPrivate:(double)arg1;
- (void)_startAudioAccessoryAccelerometerUpdatesPrivateToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)_startAudioAccessoryAccelerometerUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)_startAudioAccessoryActivityUpdatesPrivate:(id)arg1 withHandler:(id /* block */)arg2;
- (void)_startAudioAccessoryActivityUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)_startAudioAccessoryDeviceMotionStatusUpdatesPrivate:(id)arg1 withHandler:(id /* block */)arg2;
- (void)_startAudioAccessoryDeviceMotionStatusUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)_startAudioAccessoryDeviceMotionUpdatesPrivate:(id)arg1 lowLatencyMode:(bool)arg2 withHandler:(id /* block */)arg3;
- (void)_startAudioAccessoryDeviceMotionUpdatesToQueue:(id)arg1 lowLatencyMode:(bool)arg2 withHandler:(id /* block */)arg3;
- (void)_startAudioAccessoryGyroUpdatesPrivateToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)_startAudioAccessoryGyroUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)_startAudioAccessoryHeartRateUpdatesPrivateToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)_startAudioAccessoryHeartRateUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)_startAudioAccessoryMagnetometerUpdatesPrivateToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)_startAudioAccessoryMagnetometerUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)_startAudioAccessoryPPGUpdatesPrivateToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)_startAudioAccessoryPPGUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)_stopAudioAccessoryAccelerometerUpdates;
- (void)_stopAudioAccessoryAccelerometerUpdatesPrivate;
- (void)_stopAudioAccessoryActivityUpdates;
- (void)_stopAudioAccessoryActivityUpdatesPrivate;
- (void)_stopAudioAccessoryDeviceMotionStatusUpdates;
- (void)_stopAudioAccessoryDeviceMotionStatusUpdatesPrivate;
- (void)_stopAudioAccessoryDeviceMotionUpdates;
- (void)_stopAudioAccessoryDeviceMotionUpdatesPrivate;
- (void)_stopAudioAccessoryGyroUpdates;
- (void)_stopAudioAccessoryGyroUpdatesPrivate;
- (void)_stopAudioAccessoryHeartRateUpdates;
- (void)_stopAudioAccessoryHeartRateUpdatesPrivate;
- (void)_stopAudioAccessoryMagnetometerUpdates;
- (void)_stopAudioAccessoryMagnetometerUpdatesPrivate;
- (void)_stopAudioAccessoryPPGUpdates;
- (void)_stopAudioAccessoryPPGUpdatesPrivate;
- (void)dealloc;
- (void)deallocPrivate;
- (id)init;
- (id)initPrivate;
- (void)onAudioAccessoryAccelerometer:(const struct Sample { double x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; } x2; unsigned long long x3; unsigned short x4; }*)arg1;
- (void)onAudioAccessoryActivity:(const void*)arg1;
- (void)onAudioAccessoryDeviceMotion:(const void*)arg1;
- (void)onAudioAccessoryDeviceMotionConfig:(const void*)arg1;
- (void)onAudioAccessoryDeviceMotionStatus:(const int*)arg1;
- (void)onAudioAccessoryGyro:(const struct Sample { double x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; } x2; unsigned long long x3; unsigned short x4; float x5; }*)arg1;
- (void)onAudioAccessoryHeartRate:(const struct Sample { double x1; unsigned int x2; float x3; unsigned long long x4; unsigned int x5; }*)arg1;
- (void)onAudioAccessoryMagnetometer:(const struct Sample { double x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; } x2; unsigned long long x3; unsigned short x4; float x5; }*)arg1;
- (void)onAudioAccessoryPPG:(const struct Sample { double x1; unsigned long long x2; unsigned char x3; unsigned char x4; unsigned char x5[3]; unsigned char x6[3]; unsigned char x7[3]; unsigned char x8[3]; unsigned char x9[3]; unsigned char x10[3]; unsigned char x11[2]; unsigned char x12[2]; }*)arg1;

@end
