/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreMotion.framework/CoreMotion
 */

@interface CMHistoricalDataStore : NSObject {
    NSDictionary * fConfiguration;
    struct sqlite3 { } * fDb;
    NSObject<OS_dispatch_queue> * fInternalQueue;
    struct unique_ptr<CLConnectionClient, std::default_delete<CLConnectionClient>> { 
        struct __compressed_pair<CLConnectionClient *, std::default_delete<CLConnectionClient>> { 
            struct CLConnectionClient {} *__value_; 
        } __ptr_; 
    }  fLocationdConnection;
    CMHistoricalFetchToken * fToken;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_cacheTableNamesForToken:(id)arg1;
- (bool)_setConfiguration:(id)arg1;
- (void)cacheAllRecordIds;
- (id)cardioTableNames;
- (void)closeDBConnection;
- (id)coldDBPath;
- (void)dealloc;
- (void)fetchCardioSamplesFrom:(double)arg1 to:(double)arg2 queryToken:(id)arg3 withHandler:(id /* block */)arg4;
- (void)fetchMobilitySamplesFrom:(double)arg1 to:(double)arg2 queryToken:(id)arg3 withHandler:(id /* block */)arg4;
- (unsigned long long)getFirstRecordIdForTable:(const char *)arg1;
- (unsigned long long)getLastRecordIdForTable:(const char *)arg1;
- (unsigned long long)getPageSize;
- (unsigned long long)getRecordIdForTable:(const char *)arg1 ascending:(bool)arg2;
- (id)init;
- (void)initializeWithToken:(id)arg1 type:(unsigned long long)arg2 start:(double)arg3 end:(double)arg4;
- (int)isDbOpenAndValid;
- (void)markCursorDone;
- (id)mobilityTableNames;
- (void)nextHistoricalFetchWithCount:(unsigned long long)arg1 withHandler:(id /* block */)arg2;
- (id)parseCardioTypeFromSql:(struct sqlite3_stmt { }*)arg1 datatype:(unsigned long long)arg2;
- (id)parseMobilityTypeFromSql:(struct sqlite3_stmt { }*)arg1 dataype:(unsigned long long)arg2;
- (int)populateArray:(id)arg1 fromSql:(struct sqlite3_stmt { }*)arg2 query:(id)arg3;
- (bool)queryConfigurationFromDaemon;
- (void)resetToken;
- (id)tableNameForCardioType:(unsigned long long)arg1;
- (id)tableNameForCurrentType:(unsigned long long)arg1;
- (id)tableNameForMobilityType:(unsigned long long)arg1;
- (const char *)tableNameFromToken;
- (id)tableNames;
- (bool)tokenSanityChecks;

@end
