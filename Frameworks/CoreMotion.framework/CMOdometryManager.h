/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreMotion.framework/CoreMotion
 */

@interface CMOdometryManager : NSObject {
    id /* block */  _backgroundInertialOdometryHandler;
    NSOperationQueue * _backgroundInertialOdometryQueue;
    id  _internal;
    struct unique_ptr<CLConnectionClient, std::default_delete<CLConnectionClient>> { 
        struct __compressed_pair<CLConnectionClient *, std::default_delete<CLConnectionClient>> { 
            struct CLConnectionClient {} *__value_; 
        } __ptr_; 
    }  _locationdConnection;
    unsigned long long  _referenceFrameBIO;
    NSObject<OS_dispatch_queue> * _xpcQueue;
}

@property (nonatomic) double odometryUpdateInterval;

+ (bool)isAvailable;
+ (bool)isBackgroundAvailable;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
- (void)deallocPrivate;
- (void)feedOdometryData:(const struct InertialOdometryData { double x1; struct { unsigned long long x_2_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_2_1_2; struct { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_2_1_3; unsigned long long x_2_1_4; unsigned long long x_2_1_5; unsigned long long x_2_1_6[3]; unsigned long long x_2_1_7; float x_2_1_8[4]; float x_2_1_9; unsigned char x_2_1_10; } x2; }*)arg1;
- (id)init;
- (id)initPrivate;
- (double)odometryUpdateInterval;
- (void)sendOdometryToClientPrivate;
- (void)setOdometryUpdateInterval:(double)arg1;
- (void)setOdometryUpdateIntervalPrivate:(double)arg1;
- (void)setupBIO;
- (void)startBackgroundUpdatesPrivateUsingReferenceFrame:(unsigned long long)arg1 toQueue:(id)arg2 withHandler:(id /* block */)arg3;
- (void)startBackgroundUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)startBackgroundUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2 usingReferenceFrame:(unsigned long long)arg3;
- (void)startBackgroundUpdatesUsingReferenceFrame:(unsigned long long)arg1 toQueue:(id)arg2 withHandler:(id /* block */)arg3;
- (void)startOdometryUpdatesPrivateUsingReferenceFrame:(unsigned long long)arg1 toQueue:(id)arg2 withHandler:(id /* block */)arg3;
- (void)startOdometryUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)startOdometryUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2 usingReferenceFrame:(unsigned long long)arg3;
- (void)startOdometryUpdatesUsingReferenceFrame:(unsigned long long)arg1 toQueue:(id)arg2 withHandler:(id /* block */)arg3;
- (void)stopBackgroundUpdates;
- (void)stopBackgroundUpdatesPrivate;
- (void)stopOdometryUpdates;
- (void)stopOdometryUpdatesPrivate;
- (void)teardownBIO;

@end
