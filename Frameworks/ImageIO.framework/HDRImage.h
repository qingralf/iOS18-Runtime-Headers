/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/ImageIO.framework/ImageIO
 */

@interface HDRImage : NSObject {
    NSDictionary * _flexGTCInfo;
    HDRFlexRangeParameters * _flexRangeParams;
    struct __CVBuffer { } * _gainMapBuffer;
    int  _gainMapOrientation;
    struct CGColorSpace { } * _gainMapSpace;
    float  _headroom;
    struct __CVBuffer { } * _imageBuffer;
    struct CGColorSpace { } * _imageSpace;
    int  _orientation;
    int  _toneMappingMode;
    long long  _type;
}

@property (nonatomic, readonly) struct CGColorSpace { }*colorSpace;
@property (nonatomic, readonly, copy) NSDictionary *flexGTCInfo;
@property (nonatomic, copy) HDRFlexRangeParameters *flexRangeParams;
@property (nonatomic, readonly) struct __CVBuffer { }*gainMapBuffer;
@property (nonatomic) int gainMapOrientation;
@property (nonatomic, readonly) bool hasGainMap;
@property (nonatomic) float headroom;
@property (nonatomic, readonly) unsigned long long height;
@property (nonatomic, readonly) struct __CVBuffer { }*imageBuffer;
@property (nonatomic) int orientation;
@property (nonatomic) int toneMappingMode;
@property (nonatomic, readonly) long long type;
@property (nonatomic, readonly) unsigned long long width;

+ (struct CGImageMetadata { }*)createGainMapMetadataWithHeadroom:(float)arg1;
+ (id)curveDataFromFlexGTCInfo:(id)arg1;
+ (id)flexRangeParametersWithHeadroom:(float)arg1 options:(id)arg2;
+ (float)gainMapHeadroomForHDRGain:(float)arg1 gainMapValue:(float)arg2;
+ (id)gainMapHeadroomFromFlexGTCInfo:(id)arg1;
+ (bool)getColorTRC:(struct { int x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; float x_2_1_5; float x_2_1_6; float x_2_1_7; float x_2_1_8; } x2; void *x3; }*)arg1 matrix:(struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_1_1[3]; } x1; }*)arg2 toneMapping:(struct { int x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; float x_2_1_5; float x_2_1_6; float x_2_1_7; float x_2_1_8; } x2; void *x3; struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_2_1[3]; } x_4_1_1; } x4; }*)arg3 fromEDR:(float)arg4 toTargetSpace:(struct CGColorSpace { }*)arg5;
+ (bool)getColorTRC:(struct { int x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; float x_2_1_5; float x_2_1_6; float x_2_1_7; float x_2_1_8; } x2; void *x3; }*)arg1 matrix:(struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_1_1[3]; } x1; }*)arg2 toneMapping:(struct { int x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; float x_2_1_5; float x_2_1_6; float x_2_1_7; float x_2_1_8; } x2; void *x3; struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_2_1[3]; } x_4_1_1; } x4; }*)arg3 fromSourceSpace:(struct CGColorSpace { }*)arg4 headroom:(float)arg5 toEDR:(float)arg6 toneMappingMode:(int)arg7;
+ (bool)getColorTRC:(struct { int x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; float x_2_1_5; float x_2_1_6; float x_2_1_7; float x_2_1_8; } x2; void *x3; }*)arg1 matrix:(struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_1_1[3]; } x1; }*)arg2 toneMapping:(struct { int x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; float x_2_1_5; float x_2_1_6; float x_2_1_7; float x_2_1_8; } x2; void *x3; struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_2_1[3]; } x_4_1_1; } x4; }*)arg3 fromSourceSpace:(struct CGColorSpace { }*)arg4 toTargetSpace:(struct CGColorSpace { }*)arg5 options:(id)arg6;
+ (bool)getComponentMin:(/* Warning: Unrecognized filer type: '1' using 'void*' */ void**)arg1 componentMax:(/* Warning: Unrecognized filer type: '2' using 'void*' */ void**)arg2 forPixelType:(int)arg3 componentRange:(id)arg4 bitDepth:(unsigned short)arg5;
+ (bool)getGainMapHeadroom:(float*)arg1 fromFlexGTCInfo:(id)arg2;
+ (bool)getGainMapHeadroom:(float*)arg1 fromMetadata:(struct CGImageMetadata { }*)arg2;
+ (bool)getGainMapHeadroom:(float*)arg1 fromProperties:(id)arg2;
+ (bool)getGainMapMin:(float*)arg1 max:(float*)arg2 fromFlexGTCInfo:(id)arg3;
+ (bool)getGainMapVersionMajor:(unsigned long long*)arg1 minor:(unsigned long long*)arg2 fromMetadata:(struct CGImageMetadata { }*)arg3;
+ (bool)getInputPixelRange:(struct { }*)arg1 forPixelType:(int)arg2 componentRange:(id)arg3 bitDepth:(unsigned short)arg4 isFloat:(bool)arg5;
+ (bool)getInputPixelType:(int*)arg1 range:(struct { }*)arg2 YCCMatrix:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; }*)arg3 forBuffer:(struct __CVBuffer { }*)arg4;
+ (bool)getInputYCCMatrix:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; }*)arg1 forYCCMatrixString:(id)arg2;
+ (bool)getOutputPixelRange:(struct { }*)arg1 forPixelType:(int)arg2 componentRange:(id)arg3 bitDepth:(unsigned short)arg4 isFloat:(bool)arg5;
+ (bool)getOutputPixelType:(int*)arg1 range:(struct { }*)arg2 YCCMatrix:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; }*)arg3 chromaSubsampling:(/* Warning: Unrecognized filer type: '4' using 'void*' */ void**)arg4 forBuffer:(struct __CVBuffer { }*)arg5;
+ (bool)getOutputYCCMatrix:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; }*)arg1 forYCCMatrixString:(id)arg2;
+ (bool)getPixelType:(int*)arg1 YCCMatrixString:(id*)arg2 chromaSubsampling:(/* Warning: Unrecognized filer type: '3' using 'void*' */ void**)arg3 componentRange:(id*)arg4 bitDepth:(unsigned short*)arg5 isFloat:(bool*)arg6 forBuffer:(struct __CVBuffer { }*)arg7;
+ (bool)supportsSourceColorSpace:(struct CGColorSpace { }*)arg1;
+ (bool)supportsTargetColorSpace:(struct CGColorSpace { }*)arg1;
+ (id)tableDataWithFloatValues:(const float*)arg1 count:(unsigned long long)arg2;

- (void).cxx_destruct;
- (struct CGColorSpace { }*)colorSpace;
- (void)dealloc;
- (id)flexGTCInfo;
- (id)flexGTCInfoWithCurveData:(id)arg1 headroom:(float)arg2 identifier:(id)arg3;
- (id)flexRangeParams;
- (struct __CVBuffer { }*)gainMapBuffer;
- (struct CGColorSpace { }*)gainMapColorSpace;
- (int)gainMapOrientation;
- (void)gainMapSize;
- (bool)getInputColorTransform:(struct { struct { int x_1_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; float x_2_2_5; float x_2_2_6; float x_2_2_7; float x_2_2_8; } x_1_1_2; void *x_1_1_3; } x1; struct { int x_2_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; float x_2_2_5; float x_2_2_6; float x_2_2_7; float x_2_2_8; } x_2_1_2; void *x_2_1_3; struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_3_1[3]; } x_4_2_1; bool x_4_2_2; } x_2_1_4; } x2; }*)arg1 toEDR:(float)arg2;
- (bool)getInputGainMapColorMatrix:(struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_1_1[3]; } x1; }*)arg1;
- (bool)getInputGainMapPixelTransform:(struct { int x1; struct { } x2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_1_1[3]; } x3; }*)arg1;
- (bool)getInputGainMapTransform:(struct { struct { int x_1_1_1; struct { } x_1_1_2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_2_1[3]; } x_1_1_3; } x1; struct { struct { int x_1_2_1; struct { } x_1_2_2; } x_2_1_1; struct { struct { void*x_1_3_1[3]; } x_2_2_1; } x_2_1_2; } x2; }*)arg1 toEDR:(float)arg2 needsGainMap:(bool*)arg3 baseIsSDR:(bool*)arg4;
- (bool)getInputImagePixelTransform:(struct { int x1; struct { } x2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_1_1[3]; } x3; }*)arg1;
- (bool)getInputImageTransform:(struct { struct { int x_1_1_1; struct { } x_1_1_2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_2_1[3]; } x_1_1_3; } x1; struct { struct { int x_1_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_1_2_2; void *x_1_2_3; } x_2_1_1; struct { int x_2_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_2_2_2; void *x_2_2_3; struct { struct { void*x_1_4_1[3]; } x_4_3_1; bool x_4_3_2; } x_2_2_4; } x_2_1_2; } x2; }*)arg1 toEDR:(float)arg2;
- (bool)getInputTransform:(struct { unsigned int x1; struct { struct { int x_1_2_1; struct { } x_1_2_2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_3_1[3]; } x_1_2_3; } x_2_1_1; struct { struct { int x_1_3_1; struct { float x_2_4_1; float x_2_4_2; float x_2_4_3; float x_2_4_4; float x_2_4_5; float x_2_4_6; float x_2_4_7; float x_2_4_8; } x_1_3_2; void *x_1_3_3; } x_2_2_1; struct { int x_2_3_1; struct { float x_2_4_1; float x_2_4_2; float x_2_4_3; float x_2_4_4; float x_2_4_5; float x_2_4_6; float x_2_4_7; float x_2_4_8; } x_2_3_2; void *x_2_3_3; struct { struct { void*x_1_5_1[3]; } x_4_4_1; bool x_4_4_2; } x_2_3_4; } x_2_2_2; } x_2_1_2; struct { struct { int x_1_3_1; struct { } x_1_3_2; struct { void*x_3_4_1[3]; } x_1_3_3; } x_3_2_1; struct { struct { int x_1_4_1; struct { } x_1_4_2; } x_2_3_1; struct { struct { void*x_1_5_1[3]; } x_2_4_1; } x_2_3_2; } x_3_2_2; } x_2_1_3; } x2; }*)arg1 toEDR:(float)arg2;
- (bool)getOutputColorTransform:(struct { struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_2_1[3]; } x_1_1_1; bool x_1_1_2; } x1; struct { int x_2_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; float x_2_2_5; float x_2_2_6; float x_2_2_7; float x_2_2_8; } x_2_1_2; void *x_2_1_3; } x2; }*)arg1 fromEDR:(float)arg2;
- (bool)getOutputGainMapColorMatrix:(struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_1_1[3]; } x1; }*)arg1 lumaWeights:(/* Warning: Unrecognized filer type: '2' using 'void*' */ void**)arg2 isLuma:(bool*)arg3;
- (bool)getOutputGainMapPixelTransform:(struct { int x1; struct { } x2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_1_1[3]; } x3; }*)arg1;
- (bool)getOutputGainMapTransform:(struct { struct { struct { int x_1_2_1; struct { } x_1_2_2; } x_1_1_1; struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_3_1[3]; } x_2_2_1; } x_1_1_2; } x1; }*)arg1 fromEDR:(float)arg2 needsGainMap:(bool*)arg3 baseIsSDR:(bool*)arg4;
- (bool)getOutputImagePixelTransform:(struct { int x1; struct { } x2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_1_1[3]; } x3; }*)arg1;
- (bool)getOutputImageTransform:(struct { struct { struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_3_1[3]; } x_1_2_1; bool x_1_2_2; } x_1_1_1; struct { int x_2_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_2_2_2; void *x_2_2_3; } x_1_1_2; } x1; struct { int x_2_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; float x_2_2_5; float x_2_2_6; float x_2_2_7; float x_2_2_8; } x_2_1_2; void *x_2_1_3; } x2; }*)arg1 fromEDR:(float)arg2;
- (bool)getOutputTransform:(struct { unsigned int x1; struct { struct { struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_4_1[3]; } x_1_3_1; bool x_1_3_2; } x_1_2_1; struct { int x_2_3_1; struct { float x_2_4_1; float x_2_4_2; float x_2_4_3; float x_2_4_4; float x_2_4_5; float x_2_4_6; float x_2_4_7; float x_2_4_8; } x_2_3_2; void *x_2_3_3; } x_1_2_2; } x_2_1_1; struct { int x_2_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_2_2_2; void *x_2_2_3; } x_2_1_2; } x2; struct { int x_3_1_1; struct { } x_3_1_2; struct { void*x_3_2_1[3]; } x_3_1_3; bool x_3_1_4; } x3; bool x4; }*)arg1 fromEDR:(float)arg2;
- (bool)hasGainMap;
- (float)headroom;
- (unsigned long long)height;
- (struct __CVBuffer { }*)imageBuffer;
- (void)imageSize;
- (id)init;
- (id)initWithImageBuffer:(struct __CVBuffer { }*)arg1;
- (id)initWithImageBuffer:(struct __CVBuffer { }*)arg1 gainMapBuffer:(struct __CVBuffer { }*)arg2;
- (id)initWithImageBuffer:(struct __CVBuffer { }*)arg1 gainMapBuffer:(struct __CVBuffer { }*)arg2 flexRangeParameters:(id)arg3;
- (id)initWithImageBuffer:(struct __CVBuffer { }*)arg1 gainMapBuffer:(struct __CVBuffer { }*)arg2 gainMapMetadata:(struct CGImageMetadata { }*)arg3 imageProperties:(id)arg4;
- (id)inputTransformToEDR:(float)arg1;
- (int)orientation;
- (id)outputTransformFromEDR:(float)arg1;
- (void)setFlexRangeParams:(id)arg1;
- (void)setGainMapOrientation:(int)arg1;
- (void)setHeadroom:(float)arg1;
- (void)setOrientation:(int)arg1;
- (void)setToneMappingMode:(int)arg1;
- (int)toneMappingMode;
- (long long)type;
- (unsigned long long)width;

@end
