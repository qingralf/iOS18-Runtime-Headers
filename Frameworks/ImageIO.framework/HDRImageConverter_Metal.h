/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/ImageIO.framework/ImageIO
 */

@interface HDRImageConverter_Metal : HDRImageConverter {
    <MTLBinaryArchive> * _metalArchive;
    <MTLBinaryArchive> * _metalBinaryArchive;
    <MTLCommandQueue> * _metalCommandQueue;
    <MTLDevice> * _metalDevice;
    <MTLLibrary> * _metalLibrary;
    struct __CVMetalTextureCache { } * _metalTextureCache;
}

@property (nonatomic, readonly) <MTLBinaryArchive> *metalArchive;
@property (nonatomic, readonly) <MTLBinaryArchive> *metalBinaryArchive;
@property (nonatomic, readonly) <MTLCommandQueue> *metalCommandQueue;
@property (nonatomic, readonly) <MTLDevice> *metalDevice;
@property (nonatomic, readonly) <MTLLibrary> *metalLibrary;
@property (nonatomic, readonly) struct __CVMetalTextureCache { }*metalTextureCache;

+ (id)metalDevice;
+ (id)selectMetalDevice;

- (void).cxx_destruct;
- (bool)canUseImageBlocks;
- (bool)commitAndWaitUntilCompleted:(id)arg1;
- (struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })computeGridSizeForThreadGroupSize:(struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })arg1 outputSize:(struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })arg2;
- (bool)computeLumaGainHistogram:(void *)arg1 scale:(void *)arg2 image:(void *)arg3 transform:(void *)arg4 gainMap:(void *)arg5 transform:(void *)arg6; // needs 6 arg types, found 5: struct { unsigned int x1[32][32]; }*, struct __CVBuffer { }*, const struct { struct { int x_1_1_1; struct { } x_1_1_2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_2_1[3]; } x_1_1_3; } x1; struct { struct { int x_1_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_1_2_2; void *x_1_2_3; } x_2_1_1; struct { int x_2_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_2_2_2; void *x_2_2_3; struct { struct { void*x_1_4_1[3]; } x_4_3_1; bool x_4_3_2; } x_2_2_4; } x_2_1_2; } x2; }*, struct __CVBuffer { }*, const struct { struct { int x_1_1_1; struct { } x_1_1_2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_2_1[3]; } x_1_1_3; } x1; struct { struct { int x_1_2_1; struct { } x_1_2_2; } x_2_1_1; struct { struct { void*x_1_3_1[3]; } x_2_2_1; } x_2_1_2; } x2; }*
- (struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })computeThreadGroupSizeForOutputSize:(struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })arg1 pipelineState:(id)arg2;
- (id)conversionFunctionWithName:(id)arg1 subsampling:(/* Warning: Unrecognized filer type: '2' using 'void*' */ void**)arg2;
- (bool)convertImage:(struct __CVBuffer { }*)arg1 transform:(const struct { struct { int x_1_1_1; struct { } x_1_1_2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_2_1[3]; } x_1_1_3; } x1; struct { struct { int x_1_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_1_2_2; void *x_1_2_3; } x_2_1_1; struct { int x_2_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_2_2_2; void *x_2_2_3; struct { struct { void*x_1_4_1[3]; } x_4_3_1; bool x_4_3_2; } x_2_2_4; } x_2_1_2; } x2; }*)arg2 alternate:(const struct { struct { int x_1_1_1; struct { } x_1_1_2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_2_1[3]; } x_1_1_3; } x1; struct { struct { int x_1_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_1_2_2; void *x_1_2_3; } x_2_1_1; struct { int x_2_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_2_2_2; void *x_2_2_3; struct { struct { void*x_1_4_1[3]; } x_4_3_1; bool x_4_3_2; } x_2_2_4; } x_2_1_2; } x2; }*)arg3 gainMap:(struct __CVBuffer { }*)arg4 transform:(const struct { struct { int x_1_1_1; struct { } x_1_1_2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_2_1[3]; } x_1_1_3; } x1; struct { struct { int x_1_2_1; struct { } x_1_2_2; } x_2_1_1; struct { struct { void*x_1_3_1[3]; } x_2_2_1; } x_2_1_2; } x2; }*)arg5 alternate:(const struct { struct { int x_1_1_1; struct { } x_1_1_2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_2_1[3]; } x_1_1_3; } x1; struct { struct { int x_1_2_1; struct { } x_1_2_2; } x_2_1_1; struct { struct { void*x_1_3_1[3]; } x_2_2_1; } x_2_1_2; } x2; }*)arg6 toImage:(struct __CVBuffer { }*)arg7 transform:(const struct { struct { struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_3_1[3]; } x_1_2_1; bool x_1_2_2; } x_1_1_1; struct { int x_2_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_2_2_2; void *x_2_2_3; } x_1_1_2; } x1; struct { int x_2_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; float x_2_2_5; float x_2_2_6; float x_2_2_7; float x_2_2_8; } x_2_1_2; void *x_2_1_3; } x2; }*)arg8 gainMap:(struct __CVBuffer { }*)arg9 transform:(const struct { struct { struct { int x_1_2_1; struct { } x_1_2_2; } x_1_1_1; struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_3_1[3]; } x_2_2_1; } x_1_1_2; } x1; }*)arg10;
- (bool)convertImage:(struct __CVBuffer { }*)arg1 transform:(const struct { struct { int x_1_1_1; struct { } x_1_1_2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_2_1[3]; } x_1_1_3; } x1; struct { struct { int x_1_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_1_2_2; void *x_1_2_3; } x_2_1_1; struct { int x_2_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_2_2_2; void *x_2_2_3; struct { struct { void*x_1_4_1[3]; } x_4_3_1; bool x_4_3_2; } x_2_2_4; } x_2_1_2; } x2; }*)arg2 alternate:(const struct { struct { int x_1_1_1; struct { } x_1_1_2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_2_1[3]; } x_1_1_3; } x1; struct { struct { int x_1_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_1_2_2; void *x_1_2_3; } x_2_1_1; struct { int x_2_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_2_2_2; void *x_2_2_3; struct { struct { void*x_1_4_1[3]; } x_4_3_1; bool x_4_3_2; } x_2_2_4; } x_2_1_2; } x2; }*)arg3 toImage:(struct __CVBuffer { }*)arg4 transform:(const struct { struct { struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_3_1[3]; } x_1_2_1; bool x_1_2_2; } x_1_1_1; struct { int x_2_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_2_2_2; void *x_2_2_3; } x_1_1_2; } x1; struct { int x_2_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; float x_2_2_5; float x_2_2_6; float x_2_2_7; float x_2_2_8; } x_2_1_2; void *x_2_1_3; } x2; }*)arg5 gainMap:(struct __CVBuffer { }*)arg6 transform:(const struct { struct { struct { int x_1_2_1; struct { } x_1_2_2; } x_1_1_1; struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_3_1[3]; } x_2_2_1; } x_1_1_2; } x1; }*)arg7;
- (bool)convertImage:(struct __CVBuffer { }*)arg1 transform:(const struct { struct { int x_1_1_1; struct { } x_1_1_2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_2_1[3]; } x_1_1_3; } x1; struct { struct { int x_1_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_1_2_2; void *x_1_2_3; } x_2_1_1; struct { int x_2_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_2_2_2; void *x_2_2_3; struct { struct { void*x_1_4_1[3]; } x_4_3_1; bool x_4_3_2; } x_2_2_4; } x_2_1_2; } x2; }*)arg2 gainMap:(struct __CVBuffer { }*)arg3 transform:(const struct { struct { int x_1_1_1; struct { } x_1_1_2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_2_1[3]; } x_1_1_3; } x1; struct { struct { int x_1_2_1; struct { } x_1_2_2; } x_2_1_1; struct { struct { void*x_1_3_1[3]; } x_2_2_1; } x_2_1_2; } x2; }*)arg4 toImage:(struct __CVBuffer { }*)arg5 transform:(const struct { struct { struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_3_1[3]; } x_1_2_1; bool x_1_2_2; } x_1_1_1; struct { int x_2_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_2_2_2; void *x_2_2_3; } x_1_1_2; } x1; struct { int x_2_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; float x_2_2_5; float x_2_2_6; float x_2_2_7; float x_2_2_8; } x_2_1_2; void *x_2_1_3; } x2; }*)arg6;
- (bool)convertImage:(struct __CVBuffer { }*)arg1 transform:(const struct { struct { int x_1_1_1; struct { } x_1_1_2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_2_1[3]; } x_1_1_3; } x1; struct { struct { int x_1_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_1_2_2; void *x_1_2_3; } x_2_1_1; struct { int x_2_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_2_2_2; void *x_2_2_3; struct { struct { void*x_1_4_1[3]; } x_4_3_1; bool x_4_3_2; } x_2_2_4; } x_2_1_2; } x2; }*)arg2 toImage:(struct __CVBuffer { }*)arg3 transform:(const struct { struct { struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_3_1[3]; } x_1_2_1; bool x_1_2_2; } x_1_1_1; struct { int x_2_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; float x_2_3_5; float x_2_3_6; float x_2_3_7; float x_2_3_8; } x_2_2_2; void *x_2_2_3; } x_1_1_2; } x1; struct { int x_2_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; float x_2_2_5; float x_2_2_6; float x_2_2_7; float x_2_2_8; } x_2_1_2; void *x_2_1_3; } x2; }*)arg4;
- (void)dealloc;
- (id)description;
- (void)encodeInputColorTransform:(const struct { struct { int x_1_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; float x_2_2_5; float x_2_2_6; float x_2_2_7; float x_2_2_8; } x_1_1_2; void *x_1_1_3; } x1; struct { int x_2_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; float x_2_2_5; float x_2_2_6; float x_2_2_7; float x_2_2_8; } x_2_1_2; void *x_2_1_3; struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_3_1[3]; } x_4_2_1; bool x_4_2_2; } x_2_1_4; } x2; }*)arg1 toBuffer:(id)arg2 offset:(unsigned long long)arg3 withArgumentEncoder:(id)arg4 computeEncoder:(id)arg5 index:(unsigned long long)arg6;
- (void)encodeInputGainTransform:(const struct { struct { int x_1_1_1; struct { } x_1_1_2; } x1; struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_2_1[3]; } x_2_1_1; } x2; }*)arg1 toBuffer:(id)arg2 offset:(unsigned long long)arg3 withArgumentEncoder:(id)arg4 computeEncoder:(id)arg5 index:(unsigned long long)arg6;
- (void)encodeInputImage:(struct __CVBuffer { }*)arg1 transform:(const struct { int x1; struct { } x2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_1_1[3]; } x3; }*)arg2 toBuffer:(id)arg3 offset:(unsigned long long)arg4 withArgumentEncoder:(id)arg5 computeEncoder:(id)arg6 index:(unsigned long long)arg7 textures:(id)arg8;
- (void)encodeOutputColorTransform:(const struct { struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_2_1[3]; } x_1_1_1; bool x_1_1_2; } x1; struct { int x_2_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; float x_2_2_5; float x_2_2_6; float x_2_2_7; float x_2_2_8; } x_2_1_2; void *x_2_1_3; } x2; }*)arg1 toBuffer:(id)arg2 offset:(unsigned long long)arg3 withArgumentEncoder:(id)arg4 computeEncoder:(id)arg5 index:(unsigned long long)arg6;
- (void)encodeOutputGainTransform:(const struct { struct { int x_1_1_1; struct { } x_1_1_2; } x1; struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_2_1[3]; } x_2_1_1; } x2; }*)arg1 toBuffer:(id)arg2 offset:(unsigned long long)arg3 withArgumentEncoder:(id)arg4 computeEncoder:(id)arg5 index:(unsigned long long)arg6;
- (void)encodeOutputImage:(struct __CVBuffer { }*)arg1 transform:(const struct { int x1; struct { } x2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_1_1[3]; } x3; }*)arg2 toBuffer:(id)arg3 offset:(unsigned long long)arg4 withArgumentEncoder:(id)arg5 computeEncoder:(id)arg6 index:(unsigned long long)arg7 textures:(id)arg8;
- (id)init;
- (bool)isPixelFormatSupported:(unsigned int)arg1;
- (id)metalArchive;
- (id)metalBinaryArchive;
- (id)metalBinaryArchiveFileForHarvest;
- (id)metalCommandQueue;
- (id)metalComputePipelineStateWithFunction:(id)arg1;
- (id)metalDevice;
- (id)metalLibrary;
- (id)metalLibraryFunctionWithName:(id)arg1;
- (id)metalLibraryFunctionWithName:(id)arg1 functionConstant:(id)arg2;
- (unsigned long long)metalPixelFormatForPixelFormat:(unsigned int)arg1 plane:(unsigned int)arg2;
- (struct __CVMetalTextureCache { }*)metalTextureCache;
- (struct __CVBuffer { }*)metalTextureFromBuffer:(struct __CVBuffer { }*)arg1 plane:(unsigned int)arg2;
- (id)metalTextureFromCubeData:(id)arg1;
- (id)metalTextureFromTableData:(id)arg1;

@end
