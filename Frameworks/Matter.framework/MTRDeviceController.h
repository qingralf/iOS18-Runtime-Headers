/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Matter.framework/Matter
 */

@interface MTRDeviceController : NSObject <HomeKitDaemon.HMDMTRDeviceController> {
    struct MTRAttestationTrustStoreBridge { int (**x1)(); id x2; } * _attestationTrustStoreBridge;
    NSObject<OS_dispatch_queue> * _chipWorkQueue;
    MTRCommissionableBrowser * _commissionableBrowser;
    MTRAsyncWorkQueue * _concurrentSubscriptionPool;
    MTRDeviceControllerDataStore * _controllerDataStore;
    void * _defaultDACVerifier;
    NSMutableArray * _delegates;
    void * _deviceAttestationDelegateBridge;
    struct MTRDeviceControllerDelegateBridge { int (**x1)(); id x2; id x3; id x4; unsigned long long x5; } * _deviceControllerDelegateBridge;
    NSNumber * _fabricID;
    NSNumber * _nodeID;
    NSMapTable * _nodeIDToDeviceMap;
    struct MTRP256KeypairBridge { 
        int (**_vptr$ECPKeypair)(); 
        struct P256PublicKey { 
            int (**_vptr$ECPKey)(); 
            unsigned char bytes[65]; 
        } mPublicKey; 
        struct P256KeypairContext { 
            unsigned char mBytes[512]; 
        } mKeypair; 
        bool mInitialized; 
        <MTRKeypair> *mKeypair; 
        struct P256PublicKey { 
            int (**_vptr$ECPKey)(); 
            unsigned char bytes[65]; 
        } mPubkey; 
    }  _operationalKeypairBridge;
    <MTROTAProviderDelegate> * _otaProviderDelegate;
    NSObject<OS_dispatch_queue> * _otaProviderDelegateQueue;
    void * _partialDACVerifier;
    NSData * _rootPublicKey;
    NSMutableArray * _serverEndpoints;
    struct MTRP256KeypairBridge { 
        int (**_vptr$ECPKeypair)(); 
        struct P256PublicKey { 
            int (**_vptr$ECPKey)(); 
            unsigned char bytes[65]; 
        } mPublicKey; 
        struct P256KeypairContext { 
            unsigned char mBytes[512]; 
        } mKeypair; 
        bool mInitialized; 
        <MTRKeypair> *mKeypair; 
        struct P256PublicKey { 
            int (**_vptr$ECPKey)(); 
            unsigned char bytes[65]; 
        } mPubkey; 
    }  _signingKeypairBridge;
    MTRDeviceStorageBehaviorConfiguration * _storageBehaviorConfiguration;
    struct atomic<std::optional<unsigned long long>> { 
        struct __cxx_atomic_impl<std::optional<unsigned long long>, std::__cxx_atomic_base_impl<std::optional<unsigned long long>>> { 
            _Atomic struct optional<unsigned long long> {} __a_value; 
        } __a_; 
    }  _storedCompressedFabricID;
    struct atomic<unsigned char> { 
        struct __cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>> { 
            _Atomic unsigned char __a_value; 
        } __a_; 
    }  _storedFabricIndex;
    <MTRDeviceControllerDelegate> * _strongDelegateForSetDelegateAPI;
    struct atomic<bool> { 
        struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { 
            _Atomic bool __a_value; 
        } __a_; 
    }  _suspended;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _underlyingDeviceMapLock;
    NSUUID * _uniqueIdentifier;
}

@property (retain) NSObject<OS_dispatch_queue> *chipWorkQueue;
@property (nonatomic, readonly) NSNumber *compressedFabricID;
@property (nonatomic, readonly) MTRAsyncWorkQueue *concurrentSubscriptionPool;
@property (nonatomic, readonly) MTRDeviceControllerDataStore *controllerDataStore;
@property (nonatomic, readonly) NSNumber *controllerNodeID;
@property (nonatomic, readonly) NSNumber *controllerNodeId;
@property (nonatomic, readonly) <NSCopying> *controllerXPCID;
@property (readonly) struct os_unfair_lock_s { unsigned int x1; }*deviceMapLock;
@property (nonatomic, retain) NSNumber *fabricID;
@property (readonly) unsigned char fabricIndex;
@property (nonatomic, readonly) <NSCopying> *hdm_controllerXPCID;
@property (nonatomic, retain) NSNumber *nodeID;
@property (nonatomic, readonly) NSMapTable *nodeIDToDeviceMap;
@property (nonatomic, readonly) <MTROTAProviderDelegate> *otaProviderDelegate;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *otaProviderDelegateQueue;
@property (nonatomic, retain) NSData *rootPublicKey;
@property (getter=isRunning, nonatomic, readonly) bool running;
@property (getter=isSuspended, nonatomic, readonly) bool suspended;
@property (nonatomic, retain) NSUUID *uniqueIdentifier;

// Image: /System/Library/Frameworks/Matter.framework/Matter

+ (bool)checkForError:(struct ChipError { unsigned int x1; char *x2; unsigned int x3; })arg1 logMsg:(id)arg2 error:(id*)arg3;
+ (id)computePASEVerifierForSetupPasscode:(id)arg1 iterations:(id)arg2 salt:(id)arg3 error:(id*)arg4;
+ (id)decodeXPCReadParams:(id)arg1;
+ (id)decodeXPCResponseValues:(id)arg1;
+ (id)decodeXPCSubscribeParams:(id)arg1;
+ (id)encodeXPCReadParams:(id)arg1;
+ (id)encodeXPCResponseValues:(id)arg1;
+ (id)encodeXPCSubscribeParams:(id)arg1;
+ (id)sharedControllerWithID:(id)arg1 xpcConnectBlock:(id /* block */)arg2;
+ (id)sharedControllerWithId:(id)arg1 xpcConnectBlock:(id /* block */)arg2;
+ (id)xpcInterfaceForClientProtocol;
+ (id)xpcInterfaceForServerProtocol;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_callDelegatesWithBlock:(id /* block */)arg1 logString:(const char *)arg2;
- (void)_clearDeviceControllerDelegates;
- (void)_controllerResumed;
- (void)_controllerSuspended;
- (unsigned long long)_iterateDelegateInfoWithBlock:(id /* block */)arg1;
- (void)_notifyDelegatesOfSuspendState;
- (id)_setupDeviceForNodeID:(id)arg1 prefetchedClusterData:(id)arg2;
- (void)addDeviceControllerDelegate:(id)arg1 queue:(id)arg2;
- (bool)addServerEndpoint:(id)arg1;
- (void)asyncDispatchToMatterQueue:(id /* block */)arg1 errorHandler:(id /* block */)arg2;
- (id)attestationChallengeForDeviceID:(id)arg1;
- (id)baseDeviceForNodeID:(id)arg1;
- (bool)cancelCommissioningForNodeID:(id)arg1 error:(id*)arg2;
- (bool)checkIsRunning;
- (bool)checkIsRunning:(id*)arg1;
- (id)chipWorkQueue;
- (bool)commissionDevice:(unsigned long long)arg1 commissioningParams:(id)arg2 error:(id*)arg3;
- (bool)commissionNodeWithID:(id)arg1 commissioningParams:(id)arg2 error:(id*)arg3;
- (id)compressedFabricID;
- (id)computePaseVerifier:(unsigned int)arg1 iterations:(unsigned int)arg2 salt:(id)arg3;
- (id)concurrentSubscriptionPool;
- (bool)continueCommissioningDevice:(void*)arg1 ignoreAttestationFailure:(bool)arg2 error:(id*)arg3;
- (void)controller:(id)arg1 commissioningComplete:(id)arg2 nodeID:(id)arg3 metrics:(id)arg4;
- (void)controller:(id)arg1 commissioningSessionEstablishmentDone:(id)arg2;
- (void)controller:(id)arg1 readCommissioningInfo:(id)arg2;
- (void)controller:(id)arg1 statusUpdate:(long long)arg2;
- (id)controllerDataStore;
- (id)controllerNodeID;
- (id)controllerNodeId;
- (id)description;
- (id)deviceBeingCommissionedWithNodeID:(id)arg1 error:(id*)arg2;
- (id)deviceForNodeID:(id)arg1;
- (struct os_unfair_lock_s { unsigned int x1; }*)deviceMapLock;
- (id)fabricID;
- (unsigned char)fabricIndex;
- (id)fetchAttestationChallengeForDeviceId:(unsigned long long)arg1;
- (bool)getBaseDevice:(unsigned long long)arg1 queue:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)getDeviceBeingCommissioned:(unsigned long long)arg1 error:(id*)arg2;
- (void)getSessionForCommissioneeDevice:(unsigned long long)arg1 completion:(id /* block */)arg2;
- (void)getSessionForNode:(unsigned long long)arg1 completion:(id /* block */)arg2;
- (id)initForSubclasses:(bool)arg1;
- (id)initWithParameters:(id)arg1 error:(id*)arg2;
- (bool)isRunning;
- (bool)isSuspended;
- (id)nodeID;
- (id)nodeIDToDeviceMap;
- (bool)openPairingWindow:(unsigned long long)arg1 duration:(unsigned long long)arg2 error:(id*)arg3;
- (id)openPairingWindowWithPIN:(unsigned long long)arg1 duration:(unsigned long long)arg2 discriminator:(unsigned long long)arg3 setupPIN:(unsigned long long)arg4 error:(id*)arg5;
- (id)otaProviderDelegate;
- (id)otaProviderDelegateQueue;
- (bool)pairDevice:(unsigned long long)arg1 address:(id)arg2 port:(unsigned short)arg3 setupPINCode:(unsigned int)arg4 error:(id*)arg5;
- (bool)pairDevice:(unsigned long long)arg1 discriminator:(unsigned short)arg2 setupPINCode:(unsigned int)arg3 error:(id*)arg4;
- (bool)pairDevice:(unsigned long long)arg1 onboardingPayload:(id)arg2 error:(id*)arg3;
- (void)preWarmCommissioningSession;
- (void)removeDevice:(id)arg1;
- (void)removeDeviceControllerDelegate:(id)arg1;
- (void)removeServerEndpoint:(id)arg1;
- (void)removeServerEndpoint:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (void)removeServerEndpointInternal:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (void)resume;
- (id)rootPublicKey;
- (void)setChipWorkQueue:(id)arg1;
- (void)setDeviceControllerDelegate:(id)arg1 queue:(id)arg2;
- (void)setFabricID:(id)arg1;
- (void)setNocChainIssuer:(id)arg1 queue:(id)arg2;
- (void)setNodeID:(id)arg1;
- (bool)setOperationalCertificateIssuer:(id)arg1 queue:(id)arg2;
- (void)setPairingDelegate:(id)arg1 queue:(id)arg2;
- (void)setRootPublicKey:(id)arg1;
- (void)setUniqueIdentifier:(id)arg1;
- (bool)setupCommissioningSessionWithDiscoveredDevice:(id)arg1 payload:(id)arg2 newNodeID:(id)arg3 error:(id*)arg4;
- (bool)setupCommissioningSessionWithPayload:(id)arg1 newNodeID:(id)arg2 error:(id*)arg3;
- (void)shutdown;
- (bool)startBrowseForCommissionables:(id)arg1 queue:(id)arg2;
- (bool)stopBrowseForCommissionables;
- (bool)stopDevicePairing:(unsigned long long)arg1 error:(id*)arg2;
- (void)suspend;
- (void)syncRunOnWorkQueue:(id /* block */)arg1 error:(id*)arg2;
- (bool)syncRunOnWorkQueueWithBoolReturnValue:(id /* block */)arg1 error:(id*)arg2;
- (id)syncRunOnWorkQueueWithReturnValue:(id /* block */)arg1 error:(id*)arg2;
- (id)uniqueIdentifier;

// Image: /System/Library/PrivateFrameworks/HomeDataModel.framework/HomeDataModel

- (id)hdm_controllerXPCID;

// Image: /System/Library/PrivateFrameworks/HomeKitDaemon.framework/HomeKitDaemon

- (id)deviceFor:(id)arg1;

@end
