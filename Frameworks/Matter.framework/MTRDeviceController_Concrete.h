/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Matter.framework/Matter
 */

@interface MTRDeviceController_Concrete : MTRDeviceController {
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _assertionLock;
    struct MTRAttestationTrustStoreBridge { int (**x1)(); id x2; } * _attestationTrustStoreBridge;
    NSObject<OS_dispatch_queue> * _chipWorkQueue;
    MTRCommissionableBrowser * _commissionableBrowser;
    MTRAsyncWorkQueue * _concurrentSubscriptionPool;
    MTRDeviceControllerDataStore * _controllerDataStore;
    NSNumber * _controllerNodeID;
    void * _cppCommissioner;
    void * _defaultDACVerifier;
    void * _deviceAttestationDelegateBridge;
    struct MTRDeviceControllerDelegateBridge { int (**x1)(); id x2; id x3; id x4; unsigned long long x5; } * _deviceControllerDelegateBridge;
    MTRDeviceControllerFactory * _factory;
    unsigned long long  _keepRunningAssertionCounter;
    void * _operationalCredentialsDelegate;
    struct MTRP256KeypairBridge { 
        int (**_vptr$ECPKeypair)(); 
        struct P256PublicKey { 
            int (**_vptr$ECPKey)(); 
            unsigned char bytes[65]; 
        } mPublicKey; 
        struct P256KeypairContext { 
            unsigned char mBytes[512]; 
        } mKeypair; 
        bool mInitialized; 
        <MTRKeypair> *mKeypair; 
        struct P256PublicKey { 
            int (**_vptr$ECPKey)(); 
            unsigned char bytes[65]; 
        } mPubkey; 
    }  _operationalKeypairBridge;
    <MTROTAProviderDelegate> * _otaProviderDelegate;
    NSObject<OS_dispatch_queue> * _otaProviderDelegateQueue;
    void * _partialDACVerifier;
    NSMutableArray * _serverEndpoints;
    bool  _shouldAdvertiseOperational;
    bool  _shutdownPending;
    struct MTRP256KeypairBridge { 
        int (**_vptr$ECPKeypair)(); 
        struct P256PublicKey { 
            int (**_vptr$ECPKey)(); 
            unsigned char bytes[65]; 
        } mPublicKey; 
        struct P256KeypairContext { 
            unsigned char mBytes[512]; 
        } mKeypair; 
        bool mInitialized; 
        <MTRKeypair> *mKeypair; 
        struct P256PublicKey { 
            int (**_vptr$ECPKey)(); 
            unsigned char bytes[65]; 
        } mPubkey; 
    }  _signingKeypairBridge;
    MTRDeviceStorageBehaviorConfiguration * _storageBehaviorConfiguration;
    struct atomic<std::optional<unsigned long long>> { 
        struct __cxx_atomic_impl<std::optional<unsigned long long>, std::__cxx_atomic_base_impl<std::optional<unsigned long long>>> { 
            _Atomic struct optional<unsigned long long> {} __a_value; 
        } __a_; 
    }  _storedCompressedFabricID;
    struct atomic<unsigned char> { 
        struct __cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>> { 
            _Atomic unsigned char __a_value; 
        } __a_; 
    }  _storedFabricIndex;
}

@property (nonatomic, readonly) struct MTRAttestationTrustStoreBridge { int (**x1)(); id x2; }*attestationTrustStoreBridge;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *chipWorkQueue;
@property (nonatomic, readonly) MTRCommissionableBrowser *commissionableBrowser;
@property (nonatomic, readonly) MTRAsyncWorkQueue *concurrentSubscriptionPool;
@property (nonatomic, readonly) void*cppCommissioner;
@property (nonatomic, readonly) void*defaultDACVerifier;
@property (nonatomic, readonly) void*deviceAttestationDelegateBridge;
@property (nonatomic, readonly) struct MTRDeviceControllerDelegateBridge { int (**x1)(); id x2; id x3; id x4; unsigned long long x5; }*deviceControllerDelegateBridge;
@property (nonatomic, readonly) MTRDeviceControllerFactory *factory;
@property (nonatomic, readonly) void*operationalCredentialsDelegate;
@property (nonatomic, readonly) <MTROTAProviderDelegate> *otaProviderDelegate;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *otaProviderDelegateQueue;
@property (nonatomic, readonly) void*partialDACVerifier;
@property (nonatomic, readonly) NSMutableArray *serverEndpoints;
@property (nonatomic, readonly) bool shouldAdvertiseOperational;
@property (nonatomic, readonly) MTRDeviceStorageBehaviorConfiguration *storageBehaviorConfiguration;

+ (bool)checkForError:(struct ChipError { unsigned int x1; char *x2; unsigned int x3; })arg1 logMsg:(id)arg2 error:(id*)arg3;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_controllerResumed;
- (void)_controllerSuspended;
- (id)_setupDeviceForNodeID:(id)arg1 prefetchedClusterData:(id)arg2;
- (id)accessGrantsForClusterPath:(id)arg1;
- (void)addRunAssertion;
- (bool)addServerEndpoint:(id)arg1;
- (void)asyncDispatchToMatterQueue:(id /* block */)arg1 errorHandler:(id /* block */)arg2;
- (void)asyncGetCommissionerOnMatterQueue:(id /* block */)arg1 errorHandler:(id /* block */)arg2;
- (id)attestationChallengeForDeviceID:(id)arg1;
- (struct MTRAttestationTrustStoreBridge { int (**x1)(); id x2; }*)attestationTrustStoreBridge;
- (id)baseDeviceForNodeID:(id)arg1;
- (bool)cancelCommissioningForNodeID:(id)arg1 error:(id*)arg2;
- (bool)checkForInitError:(bool)arg1 logMsg:(id)arg2;
- (bool)checkForStartError:(struct ChipError { unsigned int x1; char *x2; unsigned int x3; })arg1 logMsg:(id)arg2;
- (bool)checkIsRunning;
- (bool)checkIsRunning:(id*)arg1;
- (id)chipWorkQueue;
- (void)cleanup;
- (void)cleanupAfterStartup;
- (void)clearDeviceAttestationDelegateBridge;
- (void)clearPendingShutdown;
- (bool)commissionNodeWithID:(id)arg1 commissioningParams:(id)arg2 error:(id*)arg3;
- (id)commissionableBrowser;
- (id)compressedFabricID;
- (id)concurrentSubscriptionPool;
- (bool)continueCommissioningDevice:(void*)arg1 ignoreAttestationFailure:(bool)arg2 error:(id*)arg3;
- (id)controllerDataStore;
- (id)controllerNodeID;
- (void*)cppCommissioner;
- (void*)defaultDACVerifier;
- (void)deinitFromFactory;
- (id)description;
- (void*)deviceAttestationDelegateBridge;
- (id)deviceBeingCommissionedWithNodeID:(id)arg1 error:(id*)arg2;
- (struct MTRDeviceControllerDelegateBridge { int (**x1)(); id x2; id x3; id x4; unsigned long long x5; }*)deviceControllerDelegateBridge;
- (void)directlyGetSessionForNode:(unsigned long long)arg1 completion:(id /* block */)arg2;
- (void)downloadLogFromNodeWithID:(id)arg1 type:(long long)arg2 timeout:(double)arg3 queue:(id)arg4 completion:(id /* block */)arg5;
- (unsigned char)fabricIndex;
- (id)factory;
- (id)fetchAttestationChallengeForDeviceId:(unsigned long long)arg1;
- (void)finalShutdown;
- (bool)getBaseDevice:(unsigned long long)arg1 queue:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)getSessionForCommissioneeDevice:(unsigned long long)arg1 completion:(id /* block */)arg2;
- (void)getSessionForNode:(unsigned long long)arg1 completion:(id /* block */)arg2;
- (id)initWithFactory:(id)arg1 queue:(id)arg2 storageDelegate:(id)arg3 storageDelegateQueue:(id)arg4 otaProviderDelegate:(id)arg5 otaProviderDelegateQueue:(id)arg6 uniqueIdentifier:(id)arg7 concurrentSubscriptionPoolSize:(unsigned long long)arg8 storageBehaviorConfiguration:(id)arg9 startSuspended:(bool)arg10;
- (id)initWithParameters:(id)arg1 error:(id*)arg2;
- (void)invalidateCASESessionForNode:(id)arg1;
- (bool)isRunning;
- (struct ChipError { unsigned int x1; char *x2; unsigned int x3; })isRunningOnFabric:(void*)arg1 fabricIndex:(unsigned char)arg2 isRunning:(bool*)arg3;
- (bool)matchesPendingShutdownControllerWithOperationalCertificate:(id)arg1 andRootCertificate:(id)arg2;
- (id)neededReadPrivilegeForClusterID:(id)arg1 attributeID:(id)arg2;
- (bool)openPairingWindow:(unsigned long long)arg1 duration:(unsigned long long)arg2 error:(id*)arg3;
- (id)openPairingWindowWithPIN:(unsigned long long)arg1 duration:(unsigned long long)arg2 discriminator:(unsigned long long)arg3 setupPIN:(unsigned long long)arg4 error:(id*)arg5;
- (void*)operationalCredentialsDelegate;
- (void)operationalInstanceAdded:(id)arg1;
- (id)otaProviderDelegate;
- (id)otaProviderDelegateQueue;
- (bool)pairDevice:(unsigned long long)arg1 address:(id)arg2 port:(unsigned short)arg3 setupPINCode:(unsigned int)arg4 error:(id*)arg5;
- (bool)pairDevice:(unsigned long long)arg1 discriminator:(unsigned short)arg2 setupPINCode:(unsigned int)arg3 error:(id*)arg4;
- (bool)pairDevice:(unsigned long long)arg1 onboardingPayload:(id)arg2 error:(id*)arg3;
- (void*)partialDACVerifier;
- (void)preWarmCommissioningSession;
- (void)removeRunAssertion;
- (void)removeServerEndpointInternal:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (void)removeServerEndpointOnMatterQueue:(id)arg1;
- (id)serverEndpoints;
- (unsigned char)sessionTransportTypeForDevice:(id)arg1;
- (void)setNocChainIssuer:(id)arg1 queue:(id)arg2;
- (bool)setOperationalCertificateIssuer:(id)arg1 queue:(id)arg2;
- (void)setPairingDelegate:(id)arg1 queue:(id)arg2;
- (bool)setupCommissioningSessionWithDiscoveredDevice:(id)arg1 payload:(id)arg2 newNodeID:(id)arg3 error:(id*)arg4;
- (bool)setupCommissioningSessionWithPayload:(id)arg1 newNodeID:(id)arg2 error:(id*)arg3;
- (bool)shouldAdvertiseOperational;
- (void)shutDownCppController;
- (void)shutdown;
- (bool)startBrowseForCommissionables:(id)arg1 queue:(id)arg2;
- (bool)startup:(id)arg1;
- (bool)stopBrowseForCommissionables;
- (id)storageBehaviorConfiguration;
- (void)syncRunOnWorkQueue:(id /* block */)arg1 error:(id*)arg2;
- (bool)syncRunOnWorkQueueWithBoolReturnValue:(id /* block */)arg1 error:(id*)arg2;
- (id)syncRunOnWorkQueueWithReturnValue:(id /* block */)arg1 error:(id*)arg2;

@end
