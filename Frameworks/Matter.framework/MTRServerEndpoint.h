/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Matter.framework/Matter
 */

@interface MTRServerEndpoint : NSObject {
    NSMutableSet * _accessGrants;
    MTRDeviceController * _deviceController;
    NSArray * _deviceTypes;
    NSNumber * _endpointID;
    struct optional<unsigned short> { 
        union { 
            BOOL __null_state_; 
            unsigned short __val_; 
        } ; 
        bool __engaged_; 
    }  _endpointIndex;
    NSSet * _matterAccessGrants;
    struct unique_ptr<EmberAfCluster[], std::default_delete<EmberAfCluster[]>> { 
        struct __compressed_pair<EmberAfCluster *, std::default_delete<EmberAfCluster[]>> { 
            struct EmberAfCluster {} *__value_; 
        } __ptr_; 
    }  _matterClusterMetadata;
    struct unique_ptr<unsigned int[], std::default_delete<unsigned int[]>> { 
        struct __compressed_pair<unsigned int *, std::default_delete<unsigned int[]>> { 
            unsigned int *__value_; 
        } __ptr_; 
    }  _matterDataVersions;
    struct unique_ptr<EmberAfDeviceType[], std::default_delete<EmberAfDeviceType[]>> { 
        struct __compressed_pair<EmberAfDeviceType *, std::default_delete<EmberAfDeviceType[]>> { 
            struct { /* ? */ } *__value_; 
        } __ptr_; 
    }  _matterDeviceTypes;
    struct { 
        struct EmberAfCluster {} *cluster; 
        unsigned char clusterCount; 
        unsigned short endpointSize; 
    }  _matterEndpointMetadata;
    NSMutableArray * _serverClusters;
}

@property (nonatomic, readonly, copy) NSArray *accessGrants;
@property (nonatomic, readonly, copy) NSArray *deviceTypes;
@property (nonatomic, readonly, copy) NSNumber *endpointID;
@property (nonatomic, readonly) NSSet *matterAccessGrants;
@property (nonatomic, readonly, copy) NSArray *serverClusters;

+ (id)rootNodeEndpoint;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)accessGrants;
- (void)addAccessGrant:(id)arg1;
- (bool)addServerCluster:(id)arg1;
- (bool)associateWithController:(id)arg1;
- (id)description;
- (id)deviceTypes;
- (id)endpointID;
- (id)initWithEndpointID:(id)arg1 deviceTypes:(id)arg2;
- (void)invalidate;
- (id)matterAccessGrants;
- (id)matterAccessGrantsForCluster:(id)arg1;
- (void)registerMatterEndpoint;
- (void)removeAccessGrant:(id)arg1;
- (id)serverClusters;
- (void)unregisterMatterEndpoint;

@end
