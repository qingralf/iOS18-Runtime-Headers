/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Network.framework/Network
 */

@interface NWPBParameters : PBCodable <NSCopying> {
    NSString * _account;
    unsigned int  _addressFamily;
    int  _dataMode;
    NSString * _effectiveBundleID;
    NSString * _effectiveProcessUUID;
    bool  _fastOpen;
    struct { 
        unsigned int addressFamily : 1; 
        unsigned int dataMode : 1; 
        unsigned int ipProtocol : 1; 
        unsigned int multipathService : 1; 
        unsigned int requiredInterfaceType : 1; 
        unsigned int trafficClass : 1; 
        unsigned int fastOpen : 1; 
        unsigned int keepalive : 1; 
        unsigned int longOutstandingQueries : 1; 
        unsigned int noFallback : 1; 
        unsigned int prohibitExpensive : 1; 
        unsigned int reduceBuffering : 1; 
        unsigned int reuseLocalAddress : 1; 
        unsigned int useAWDL : 1; 
        unsigned int useP2P : 1; 
    }  _has;
    unsigned int  _ipProtocol;
    bool  _keepalive;
    NWPBEndpoint * _localEndpoint;
    bool  _longOutstandingQueries;
    NSData * _metadata;
    unsigned int  _multipathService;
    bool  _noFallback;
    NSMutableArray * _preferredAgents;
    bool  _prohibitExpensive;
    NSMutableArray * _prohibitedAgents;
    struct { 
        int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _prohibitedInterfaceSubTypes;
    struct { 
        int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _prohibitedInterfaceTypes;
    NSMutableArray * _prohibitedInterfaces;
    NSString * _realProcessUUID;
    bool  _reduceBuffering;
    NSMutableArray * _requiredAgents;
    NWPBInterface * _requiredInterface;
    int  _requiredInterfaceType;
    bool  _reuseLocalAddress;
    unsigned int  _trafficClass;
    NSString * _url;
    bool  _useAWDL;
    bool  _useP2P;
}

- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (id)dictionaryRepresentation;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (bool)readFrom:(id)arg1;
- (void)writeTo:(id)arg1;

@end
