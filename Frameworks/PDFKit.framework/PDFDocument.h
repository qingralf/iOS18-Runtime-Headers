/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/PDFKit.framework/PDFKit
 */

@interface PDFDocument : NSObject <NSCopying> {
    unsigned int  _accessPermissions;
    NSArray * _accessibilityPageElements;
    PDFAKDocumentAdaptor * _akDocumentAdaptor;
    PDFAKPageOverlayViewProvider * _akPageOverlayViewProvider;
    bool  _allowsCommenting;
    bool  _allowsContentAccessibility;
    bool  _allowsCopying;
    bool  _allowsDocumentAssembly;
    bool  _allowsDocumentChanges;
    bool  _allowsFormFieldEntry;
    bool  _allowsPrinting;
    NSDictionary * _appendedAttributes;
    NSObject<OS_dispatch_queue> * _asyncSearchQueue;
    NSDictionary * _attributes;
    NSMutableIndexSet * _bookmarkedPages;
    bool  _createdWithHighLatencyDataProvider;
    bool  _dataDetectorsEnabled;
    id  _delegate;
    struct CGPDFDocument { } * _document;
    NSArray * _documentCatalogMetadata;
    bool  _documentChanged;
    bool  _documentHasBurnInAnnotations;
    bool  _documentHasPageWithApplicationData;
    unsigned long long  _documentRedactionCount;
    NSURL * _documentURL;
    long long  _findCharIndex;
    PDFSelection * _findInstance;
    int  _findModel;
    unsigned long long  _findOptions;
    long long  _findPageIndex;
    NSMutableArray * _findResults;
    NSArray * _findStrings;
    bool  _finding;
    PDFForm * _formData;
    bool  _formDataLoaded;
    NSObject<OS_dispatch_queue> * _formFillingQueue;
    NSIndexSet * _initialBookmarkedPageIndices;
    bool  _isEncrypted;
    bool  _isUnlocked;
    long long  _lastFindCharIndex;
    long long  _lastFindPageIndex;
    bool  _limitedSearch;
    int  _majorVersion;
    int  _minorVersion;
    PDFOutline * _outline;
    NSString * _ownerPassword;
    <PDFDocumentPageChangeDelegate> * _pageChangeDelegate;
    unsigned long long  _pageCount;
    NSMutableDictionary * _pageDictionaryIndices;
    NSMutableDictionary * _pageIndices;
    NSMutableArray * _pages;
    struct { 
        bool pagesAdded; 
        bool blankPagesAdded; 
        bool pagesRemoved; 
        bool pagesExchanged; 
    }  _pagesChanged;
    NSOrderedSet * _pagesOrderedSet;
    <PDFAKControllerDelegateProtocol> * _pdfAKControllerDelegateForDeferredSetup;
    long long  _permission;
    NSMutableIndexSet * _preloadingPageIndexes;
    PDFRenderingProperties * _renderingProperties;
    bool  _respondsToClassForAnnotationClass;
    bool  _respondsToClassForAnnotationType;
    bool  _respondsToClassForPage;
    bool  _respondsToDidBeginDocumentFind;
    bool  _respondsToDidBeginPageFind;
    bool  _respondsToDidEndDocumentFind;
    bool  _respondsToDidEndPageFind;
    bool  _respondsToDidFindMatch;
    bool  _respondsToDidMatchString;
    bool  _respondsToDidReceiveAnalysis;
    bool  _respondsToDidUnlock;
    bool  _respondsToHandleTabFrom;
    bool  _respondsToPrintJobTitle;
    bool  _respondsToShouldReadAKInkAnnotations;
    bool  _subclassOverridesPageAtIndex;
    NSObject<OS_dispatch_queue> * _textExtractionQueue;
    NSString * _userPassword;
    NSString * _xmpNameSpace;
    NSString * _xmpPrefix;
    NSString * _xmpRootPath;
}

@property (nonatomic, readonly) unsigned long long accessPermissions;
@property (nonatomic, readonly) bool allowsCommenting;
@property (nonatomic, readonly) bool allowsContentAccessibility;
@property (nonatomic, readonly) bool allowsCopying;
@property (nonatomic, readonly) bool allowsDocumentAssembly;
@property (nonatomic, readonly) bool allowsDocumentChanges;
@property (nonatomic, readonly) bool allowsFormFieldEntry;
@property (nonatomic, readonly) bool allowsPrinting;
@property (nonatomic) <PDFDocumentDelegate> *delegate;
@property (nonatomic, copy) NSDictionary *documentAttributes;
@property (nonatomic, readonly) struct CGPDFDocument { }*documentRef;
@property (nonatomic, readonly) NSURL *documentURL;
@property (nonatomic, readonly) bool isEncrypted;
@property (nonatomic, readonly) bool isFinding;
@property (nonatomic, readonly) bool isLocked;
@property (nonatomic, readonly) long long majorVersion;
@property (nonatomic, readonly) long long minorVersion;
@property (nonatomic, retain) PDFOutline *outlineRoot;
@property (nonatomic, readonly) Class pageClass;
@property (nonatomic, readonly) unsigned long long pageCount;
@property (nonatomic, readonly) long long permissionsStatus;
@property (nonatomic, readonly) PDFSelection *selectionForEntireDocument;
@property (nonatomic, readonly) NSString *string;

+ (id)_getDocumentID:(struct CGPDFDocument { }*)arg1;
+ (bool)isValidPassword:(id)arg1;
+ (bool)pdfDocumentAppendModeActiveForThisThread;
+ (void)setPDFDocumentAppendModeActiveForThisThread:(bool)arg1;

- (void).cxx_destruct;
- (id)PDFAKControllerDelegate;
- (id)_SASLSanitize:(id)arg1;
- (id)_addEncryptionFromOptions:(id)arg1;
- (id)_bookmarksCatalog;
- (bool)_canSaveWithEncryption;
- (void)_commonInit;
- (struct CGPDFName { }*)_convertCFStringToCGPDFName:(void*)arg1 forKey:(struct __CFString { }*)arg2;
- (id)_convertWriteOptions:(id)arg1;
- (struct CGPDFAnnotation { }*)_createCGPDFAnnotationForAnnotation:(id)arg1;
- (void)_createDocumentWithDataProvider:(struct CGDataProvider { }*)arg1;
- (struct __CFDictionary { }*)_createInfoDictionary;
- (id)_dataFromXMP:(struct __CFData { }*)arg1 withRootPath:(id)arg2 keys:(id)arg3;
- (id)_documentCatalogMetadataForRootPath:(id)arg1 withKeys:(id)arg2;
- (id)_findString:(id)arg1 fromSelection:(id)arg2 withOptions:(unsigned long long)arg3;
- (id)_getNearestOutline:(id)arg1 forDestination:(id)arg2;
- (bool)_isCommonlyMappedToNothing:(id)arg1;
- (bool)_isNonAsciiSpace:(id)arg1;
- (id)_namedDestination:(id)arg1 forNameDictionary:(struct CGPDFDictionary { }*)arg2;
- (void)_notifyAKAdaptorPagePlaceholder:(id)arg1 wasReplacedWithPage:(id)arg2 atIndex:(unsigned long long)arg3;
- (id)_rawPageAtIndex:(unsigned long long)arg1;
- (void)_sanitizeAnnotationArray:(struct __CFArray { }*)arg1;
- (void)_sanitizeAnnotationDictionary:(struct __CFDictionary { }*)arg1;
- (void)_setDocumentCatalogMetadata:(id)arg1 withNSpace:(id)arg2 prefix:(id)arg3 rootPath:(id)arg4;
- (bool)_writeAppendMode:(struct CGDataConsumer { }*)arg1;
- (unsigned long long)accessPermissions;
- (id)akController;
- (id)akDocumentAdaptor;
- (bool)allowsCommenting;
- (bool)allowsContentAccessibility;
- (bool)allowsCopying;
- (bool)allowsDocumentAssembly;
- (bool)allowsDocumentChanges;
- (bool)allowsFormFieldEntry;
- (bool)allowsPrinting;
- (Class)annotationSubclassForType:(id)arg1;
- (id)annotationsForFieldName:(id)arg1;
- (void)asyncFindString:(id)arg1 withDelegate:(id)arg2 onQueue:(id)arg3;
- (void)asyncFindStrings:(id)arg1 withDelegate:(id)arg2 onQueue:(id)arg3;
- (void)asyncFindStrings:(id)arg1 withOptions:(unsigned long long)arg2 withDelegate:(id)arg3 onQueue:(id)arg4;
- (void)beginBatchPageChanges;
- (void)beginFindString:(id)arg1 withOptions:(unsigned long long)arg2;
- (void)beginFindStrings:(id)arg1 withOptions:(unsigned long long)arg2;
- (id)bookmarkedPages;
- (bool)bookmarksChanged;
- (void)callDelegateDidReceiveAnalysis:(id)arg1 forPage:(id)arg2;
- (bool)callDelegateHandleTabFrom:(id)arg1 direction:(unsigned long long)arg2;
- (bool)callShouldReadAKInkAnnotations;
- (bool)canSaveWithAppendModeUsingOptions:(id)arg1;
- (bool)canSaveWithTextFromOCR;
- (void)cancelFindString;
- (void)cleanupFind;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)coreFindString:(id)arg1;
- (void)coreFindStrings:(id)arg1;
- (bool)createdWithWithHighLatencyDataProvider;
- (id)dataRepresentation;
- (id)dataRepresentationWithOptions:(id)arg1;
- (void)dealloc;
- (void)decrementRedactionCount;
- (id)delegate;
- (void)didMatchString:(id)arg1;
- (id)documentAttributes;
- (bool)documentChanged;
- (struct CGPDFDocument { }*)documentRef;
- (id)documentURL;
- (bool)enableDataDetectors;
- (void)enableDocumentMRUMode:(bool)arg1;
- (void)enableLimitedSearch;
- (void)endBatchPageChanges;
- (void)exchangePageAtIndex:(unsigned long long)arg1 withPageAtIndex:(unsigned long long)arg2;
- (bool)findOnPage;
- (id)findPageWithCGPDFDictionaryPageRef:(struct CGPDFDictionary { }*)arg1;
- (id)findString:(id)arg1 fromSelection:(id)arg2 withOptions:(unsigned long long)arg3;
- (id)findString:(id)arg1 withOptions:(unsigned long long)arg2;
- (id)findStringPerPage:(id)arg1 fromSelection:(id)arg2 withOptions:(unsigned long long)arg3;
- (id)findStrings:(id)arg1 withinSelection:(id)arg2 withOptions:(unsigned long long)arg3;
- (id)formData;
- (id)formFillingQueue;
- (bool)hasHighLatencyDataProvider;
- (void)incrementRedactionCount;
- (unsigned long long)indexForPage:(id)arg1;
- (id)init;
- (id)initWithData:(id)arg1;
- (id)initWithProvider:(struct CGDataProvider { }*)arg1;
- (id)initWithURL:(id)arg1;
- (void)insertPage:(id)arg1 atIndex:(unsigned long long)arg2;
- (bool)isEncrypted;
- (bool)isFinding;
- (bool)isLinearized;
- (bool)isLocked;
- (bool)isSimpleSelectionEnabled;
- (id)linearizedRangesForPage:(id)arg1;
- (long long)majorVersion;
- (long long)minorVersion;
- (id)namedDestination:(id)arg1;
- (struct __CFData { }*)newXMPFromData:(id)arg1 preserveExistingXMPMetadata:(bool)arg2;
- (void)normalizeFindOptions:(unsigned long long)arg1;
- (id)outlineItemForSelection:(id)arg1;
- (id)outlineRoot;
- (id)pageAnnotationChanges;
- (id)pageAtIndex:(unsigned long long)arg1;
- (Class)pageClass;
- (unsigned long long)pageCount;
- (id)passwordUsedForUnlocking;
- (long long)permissionsStatus;
- (void)preloadDataOfPagesInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 onQueue:(id)arg2 completion:(id /* block */)arg3;
- (void)redo:(id)arg1;
- (void)removePageAtIndex:(unsigned long long)arg1;
- (id)renderingProperties;
- (void)requirePasswordsIfNeededUsingPresentingViewController:(id)arg1 completion:(id /* block */)arg2;
- (void)resetFormFields:(id)arg1;
- (void)resetPageAnnotationChanges;
- (void)revert;
- (void)scheduledFindOnPage:(id)arg1;
- (id)selectionForEntireDocument;
- (id)selectionFromPage:(id)arg1 atCharacterIndex:(unsigned long long)arg2 toPage:(id)arg3 atCharacterIndex:(unsigned long long)arg4;
- (id)selectionFromPage:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 toPage:(id)arg3 atPoint:(struct CGPoint { double x1; double x2; })arg4;
- (id)selectionFromPage:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 toPage:(id)arg3 atPoint:(struct CGPoint { double x1; double x2; })arg4 type:(int)arg5;
- (id)selectionFromPage:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 toPage:(id)arg3 atPoint:(struct CGPoint { double x1; double x2; })arg4 withGranularity:(unsigned long long)arg5;
- (void)setBookmarked:(bool)arg1 atPageIndex:(unsigned long long)arg2;
- (void)setDelegate:(id)arg1;
- (void)setDocument:(struct CGPDFDocument { }*)arg1;
- (void)setDocumentAttributes:(id)arg1;
- (void)setDocumentHasBurnInAnnotations:(bool)arg1;
- (void)setEnableDataDetectors:(bool)arg1;
- (void)setFormData:(id)arg1;
- (void)setHasHighLatencyDataProvider:(bool)arg1;
- (void)setHasPageWithApplicationData:(bool)arg1;
- (void)setOutlineRoot:(id)arg1;
- (void)setPDFAKControllerDelegate:(id)arg1;
- (void)setPageChangeDelegate:(id)arg1;
- (void)setRenderingProperties:(id)arg1;
- (void)setShowsAnnotations:(bool)arg1;
- (void)setupAKDocumentAdaptorIfNecessaryWithView:(id)arg1;
- (bool)showsAnnotations;
- (id)string;
- (id)textExtractionQueue;
- (void)undo:(id)arg1;
- (bool)unlockWithPassword:(id)arg1;
- (void)updateBookmarksInPDFDocument;
- (bool)validateRedo:(id)arg1;
- (bool)validateUndo:(id)arg1;
- (bool)viewPreferenceRightToLeft;
- (bool)writeToConsumer:(struct CGDataConsumer { }*)arg1 withOptions:(id)arg2;
- (bool)writeToFile:(id)arg1;
- (bool)writeToFile:(id)arg1 withOptions:(id)arg2;
- (bool)writeToURL:(id)arg1;
- (bool)writeToURL:(id)arg1 withOptions:(id)arg2;

@end
