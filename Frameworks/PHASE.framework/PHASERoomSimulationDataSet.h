/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/PHASE.framework/PHASE
 */

@interface PHASERoomSimulationDataSet : NSObject {
    struct vector<float, std::allocator<float>> { 
        float *__begin_; 
        float *__end_; 
        struct __compressed_pair<float *, std::allocator<float>> { 
            float *__value_; 
        } __end_cap_; 
    }  _directionalHistogramData;
    struct DebugDirectionalMetadata { 
        unsigned long long mNumDirectionalEvents; 
        struct vector<Phase::Vector<float, 3>, std::allocator<Phase::Vector<float, 3>>> { 
            void *__begin_; 
            void *__end_; 
            struct __compressed_pair<Phase::Vector<float, 3> *, std::allocator<Phase::Vector<float, 3>>> { 
                void *__value_; 
            } __end_cap_; 
        } mDirections; 
        struct vector<float, std::allocator<float>> { 
            float *__begin_; 
            float *__end_; 
            struct __compressed_pair<float *, std::allocator<float>> { 
                float *__value_; 
            } __end_cap_; 
        } mDelaysInSeconds; 
        struct vector<std::vector<float>, std::allocator<std::vector<float>>> { 
            void *__begin_; 
            void *__end_; 
            struct __compressed_pair<std::vector<float> *, std::allocator<std::vector<float>>> { 
                void *__value_; 
            } __end_cap_; 
        } mSubbandGains; 
        struct vector<unsigned char, std::allocator<unsigned char>> { 
            char *__begin_; 
            char *__end_; 
            struct __compressed_pair<unsigned char *, std::allocator<unsigned char>> { 
                char *__value_; 
            } __end_cap_; 
        } mInvertPolarity; 
    }  _earlyResponseMetadata;
    struct vector<std::vector<float __attribute__((ext_vector_type(3)))>, std::allocator<std::vector<float __attribute__((ext_vector_type(3)))>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::vector<float __attribute__((ext_vector_type(3)))> *, std::allocator<std::vector<float __attribute__((ext_vector_type(3)))>>>="__value_"^v {}  _imageSourceIntersectionPoints;
    struct vector<float __attribute__((ext_vector_type(3))), std::allocator<float __attribute__((ext_vector_type(3)))>>="__begin_"^"__end_"^"__end_cap_"{__compressed_pair<float * __attribute__((ext_vector_type(3))), std::allocator<float __attribute__((ext_vector_type(3)))>>="__value_"^ {}  _imageSourcePoints;
    struct DebugDirectionalMetadata { 
        unsigned long long mNumDirectionalEvents; 
        struct vector<Phase::Vector<float, 3>, std::allocator<Phase::Vector<float, 3>>> { 
            void *__begin_; 
            void *__end_; 
            struct __compressed_pair<Phase::Vector<float, 3> *, std::allocator<Phase::Vector<float, 3>>> { 
                void *__value_; 
            } __end_cap_; 
        } mDirections; 
        struct vector<float, std::allocator<float>> { 
            float *__begin_; 
            float *__end_; 
            struct __compressed_pair<float *, std::allocator<float>> { 
                float *__value_; 
            } __end_cap_; 
        } mDelaysInSeconds; 
        struct vector<std::vector<float>, std::allocator<std::vector<float>>> { 
            void *__begin_; 
            void *__end_; 
            struct __compressed_pair<std::vector<float> *, std::allocator<std::vector<float>>> { 
                void *__value_; 
            } __end_cap_; 
        } mSubbandGains; 
        struct vector<unsigned char, std::allocator<unsigned char>> { 
            char *__begin_; 
            char *__end_; 
            struct __compressed_pair<unsigned char *, std::allocator<unsigned char>> { 
                char *__value_; 
            } __end_cap_; 
        } mInvertPolarity; 
    }  _lateReverberationMetadata;
    unsigned long long  _listenerHandle;
    unsigned long long  _numHistogramFrequencies;
    unsigned long long  _numHistogramTimeSteps;
    unsigned long long  _numImageSources;
    struct vector<float __attribute__((ext_vector_type(3))), std::allocator<float __attribute__((ext_vector_type(3)))>>="__begin_"^"__end_"^"__end_cap_"{__compressed_pair<float * __attribute__((ext_vector_type(3))), std::allocator<float __attribute__((ext_vector_type(3)))>>="__value_"^ {}  _rayIntersectPoints;
    struct vector<float __attribute__((ext_vector_type(3))), std::allocator<float __attribute__((ext_vector_type(3)))>>="__begin_"^"__end_"^"__end_cap_"{__compressed_pair<float * __attribute__((ext_vector_type(3))), std::allocator<float __attribute__((ext_vector_type(3)))>>="__value_"^ {}  _rayOriginPoints;
    struct DebugRoomData { 
        float mRoomVolume; 
        float mSurfaceArea; 
        float mMeanFreePath; 
        struct vector<float, std::allocator<float>> { 
            float *__begin_; 
            float *__end_; 
            struct __compressed_pair<float *, std::allocator<float>> { 
                float *__value_; 
            } __end_cap_; 
        } mMeanAbsorption; 
        struct vector<float, std::allocator<float>> { 
            float *__begin_; 
            float *__end_; 
            struct __compressed_pair<float *, std::allocator<float>> { 
                float *__value_; 
            } __end_cap_; 
        } mEquivalentAbsorptionArea; 
        struct vector<float, std::allocator<float>> { 
            float *__begin_; 
            float *__end_; 
            struct __compressed_pair<float *, std::allocator<float>> { 
                float *__value_; 
            } __end_cap_; 
        } mRt60; 
        struct vector<float, std::allocator<float>> { 
            float *__begin_; 
            float *__end_; 
            struct __compressed_pair<float *, std::allocator<float>> { 
                float *__value_; 
            } __end_cap_; 
        } mCenterFrequencies; 
    }  _roomData;
    unsigned long long  _sourceHandle;
    struct vector<float, std::allocator<float>> { 
        float *__begin_; 
        float *__end_; 
        struct __compressed_pair<float *, std::allocator<float>> { 
            float *__value_; 
        } __end_cap_; 
    }  _timeFrequencyHistogramData;
}

@property (nonatomic) unsigned long long listenerHandle;
@property (nonatomic) unsigned long long numHistogramFrequencies;
@property (nonatomic) unsigned long long numHistogramTimeSteps;
@property (nonatomic) unsigned long long numImageSources;
@property (nonatomic) unsigned long long sourceHandle;

+ (unsigned long long)getEntityHandleAsInt:(id)arg1;

- (id).cxx_construct;
- (void).cxx_destruct;
- (float)getCenterFrequencyAtSubband:(long long)arg1;
- (float)getEarlyMetadataDelayAt:(long long)arg1;
- (void)getEarlyMetadataDirectionAt:(long long)arg1;
- (float)getEarlyMetadataPolarityAt:(long long)arg1;
- (float)getEarlyMetadataSubbandGainAt:(long long)arg1 subbandIndex:(long long)arg2;
- (long long)getEarlyResponseMetadataSize;
- (float)getEquivalentAbsorptionAreaAtSubband:(long long)arg1;
- (long long)getHistogramContainerSize;
- (long long)getImageSourceContainerSize;
- (void)getImageSourceIntersectionAt:(long long)arg1 intersectionIndex:(long long)arg2;
- (long long)getImageSourceIntersectionContainerSize:(long long)arg1;
- (void)getImageSourceLocationAtIndex:(long long)arg1;
- (void)getIntersectionAtIndex:(long long)arg1;
- (long long)getIntersectionContainerSize;
- (float)getLateMetadataDelayAt:(long long)arg1;
- (void)getLateMetadataDirectionAt:(long long)arg1;
- (float)getLateMetadataPolarityAt:(long long)arg1;
- (float)getLateMetadataSubbandGainAt:(long long)arg1 subbandIndex:(long long)arg2;
- (long long)getLateReverbMetadataSize;
- (float)getMeanAbsorptionAtSubband:(long long)arg1;
- (float)getMeanFreePath;
- (void)getOriginAtIndex:(long long)arg1;
- (unsigned long long)getRoomDataSubbandCount;
- (float)getRoomVolume;
- (float)getRt60AtSubband:(long long)arg1;
- (float)getSurfaceArea;
- (float)getTimeHistogramBin:(long long)arg1 timeIndex:(long long)arg2;
- (id)init;
- (id)initWithRoomSimulationDebugView:(const void*)arg1;
- (unsigned long long)listenerHandle;
- (unsigned long long)numHistogramFrequencies;
- (unsigned long long)numHistogramTimeSteps;
- (unsigned long long)numImageSources;
- (void)setListenerHandle:(unsigned long long)arg1;
- (void)setNumHistogramFrequencies:(unsigned long long)arg1;
- (void)setNumHistogramTimeSteps:(unsigned long long)arg1;
- (void)setNumImageSources:(unsigned long long)arg1;
- (void)setSourceHandle:(unsigned long long)arg1;
- (unsigned long long)sourceHandle;

@end
