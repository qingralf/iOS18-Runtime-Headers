/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/PencilKit.framework/PencilKit
 */

@interface PKTiledView : UIView <PKAutoRefineViewDelegate, PKHoverControllerDelegate, PKPaletteViewHoverDelegate, PKRulerDelegate, PKRulerHostingDelegate, PKTiledCanvasViewDelegate, UIDropInteractionDelegate_Private, UIEditMenuInteractionDelegate, UIGestureRecognizerDelegate, UIScrollViewDelegate, _UIScrollViewLayoutObserver, _UIScrollViewScrollObserver> {
    long long  __maxFileFormatVersion;
    long long  _aggd_cachedVisibleStrokeCount;
    bool  _aggd_didMergeWithCollaborator;
    bool  _allowSnapToShape;
    PKAnalyticsSession * _analyticsSession;
    UIView * _attachmentContainerView;
    PKAutoRefineController * _autoRefineController;
    NSArray * _cachedAdditionalStrokes;
    <PKDrawingUUID> * _cachedDrawingUUIDForAdditionalStrokes;
    <PKDrawingVersion> * _cachedDrawingVersionForAdditionalStrokes;
    NSArray * _cachedVisibleStrokesWithAdditionalStrokesForDirtyDrawing;
    PKTiledCanvasView * _canvasView;
    long long  _canvasViewZOrderPolicy;
    bool  _combiningStrokesEnabled;
    <UICoordinateSpace> * _contentCoordinateSpace;
    UIView * _contentSnapshottingView;
    bool  _cropDrawingAttachmentsWhenViewIsSmaller;
    PKDrawing * _currentDrawingBeingCopiedToCanvas;
    NSUUID * _currentPreviewDrawingUUID;
    Class  _defaultDrawingClass;
    double  _delayHoverPreviewUntil;
    NSObject<PKTiledViewDelegate> * _delegate;
    bool  _didDisableScrollViewPanGestureRecognizer;
    id /* block */  _didScrollBlock;
    PKDrawing * _dirtyDrawing;
    bool  _disableTileRendering;
    bool  _disableUndoManager;
    bool  _drawBitmapEraserMask;
    bool  _drawingEnabled;
    unsigned long long  _drawingPolicy;
    UITouch * _drawingTouchThatHitNothing;
    SEL  _drawingUndoSelector;
    id  _drawingUndoTarget;
    UIDropInteraction * _dropInteraction;
    UIEditMenuInteraction * _editMenuInteraction;
    bool  _editMenuVisible;
    NSOrderedSet * _eraseOrLassoPreviewStrokes;
    PKDrawing * _erasePreviewDrawing;
    NSArray * _externalAttachments;
    double  _extraHoverPreviewDelay;
    UIPanGestureRecognizer * _generationToolGestureRecognizer;
    PKTiledGestureView * _gestureView;
    id /* block */  _hideCanvasBlock;
    PKHoverController * _hoverController;
    id /* block */  _hoverConvertToShapeBlock;
    bool  _hoverIsKnownToBeUnsupported;
    bool  _hoverPreviewActive;
    double  _hoverPreviewStartTimestamp;
    bool  _isDoingInteractiveResize;
    bool  _isLayingOut;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastContentOffset;
    double  _lastZoomScale;
    PKLinedPaper * _linedPaper;
    PKAttachmentView * _liveAttachment;
    long long  _maximumSupportedContentVersion;
    bool  _needUpdateAfterBackgroundTraitCollectionChange;
    UIGestureRecognizer * _pencilLongPressGestureRecognizer;
    PKPencilStatisticsManager * _pencilStatisticsManager;
    NSUUID * _previouslySelectedDrawingUUID;
    PKTiledViewAnimationController * _refineAnimationController;
    PKRulerController * _rulerController;
    bool  _rulerEnabled;
    <PKRulerHostingDelegate> * _rulerHostingDelegate;
    bool  _safeToStartDrawing;
    UIScrollView * _scrollView;
    PKSelectionController * _selectionController;
    bool  _selectionHidden;
    bool  _shouldAdjustStrokeTransformAtEndOfStroke;
    bool  _shouldBeginHoverPreview;
    bool  _shouldHideCanvasAfterScroll;
    bool  _shouldResetBaseRollAngleOnNextStroke;
    bool  _showDebugOutlines;
    UIPanGestureRecognizer * _simultaneousDrawingGestureRecognizer;
    bool  _sixChannelBlending;
    bool  _sixChannelBlendingDisableSnapshotting;
    PKStrokePreviewView * _strokePreviewView;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _strokeTransformAdjustment;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _strokeTransformAtStartOfStroke;
    bool  _supportsCopyAsText;
    bool  _symbolPreviewActive;
    PKTileController * _tileController;
    long long  _tileLevel;
    double  _tileScale;
    double  _tileSize;
    struct { 
        unsigned int delegateSupportsEndedStroke : 1; 
        unsigned int delegateSupportsEndedStrokeShapeStrokes : 1; 
        unsigned int delegateSupportsAttachmentViews : 1; 
        unsigned int delegateSupportsWillCreateSnapshot : 1; 
        unsigned int delegateSupportsSnapshottingDisabled : 1; 
        unsigned int delegateSupportsDidChangeHiddenState : 1; 
        unsigned int delegateSupportsHoverShouldBeActiveAt : 1; 
        unsigned int delegateSupportsDidRefineStrokes : 1; 
    }  _tiledViewFlags;
    double  _timestampForLatestUserInteraction;
    PKToolPreviewView * _toolPreviewView;
    NSMutableArray * _undoManagersRegisteredWith;
    id /* block */  _updateAttachmentBoundsBlock;
    id /* block */  _updateVisibleTilesAfterZoomOutBlock;
    PKWelcomeController * _welcomeController;
}

@property (getter=_isDrawingEnabled, setter=_setDrawingEnabled:, nonatomic) bool _drawingEnabled;
@property (nonatomic, readonly) bool _hasSelection;
@property (nonatomic) long long _maxFileFormatVersion;
@property (nonatomic) bool aggd_didMergeWithCollaborator;
@property (nonatomic) bool allowSnapToShape;
@property (nonatomic, readonly) bool allowsFingerDrawing;
@property (nonatomic) UIView *attachmentContainerView;
@property (nonatomic, retain) PKTiledCanvasView *canvasView;
@property (nonatomic) long long canvasViewZOrderPolicy;
@property (nonatomic, readonly) double canvasZoomScale;
@property (nonatomic) bool combiningStrokesEnabled;
@property (nonatomic, retain) <UICoordinateSpace> *contentCoordinateSpace;
@property (nonatomic) UIView *contentSnapshottingView;
@property (nonatomic) bool cropDrawingAttachmentsWhenViewIsSmaller;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (nonatomic, retain) Class defaultDrawingClass;
@property (nonatomic) NSObject<PKTiledViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool disableTileRendering;
@property (nonatomic) bool disableUndoManager;
@property (nonatomic) bool drawBitmapEraserMask;
@property (nonatomic, readonly) PKController *drawingController;
@property (nonatomic) unsigned long long drawingPolicy;
@property (nonatomic, readonly) UITouch *drawingTouchThatHitNothing;
@property (nonatomic) SEL drawingUndoSelector;
@property (nonatomic) id drawingUndoTarget;
@property (nonatomic, readonly) UIEditMenuInteraction *editMenuInteraction;
@property (nonatomic) bool editMenuVisible;
@property (nonatomic, readonly) long long effectiveMaximumSupportedContentVersion;
@property (nonatomic, readonly) UIPanGestureRecognizer *generationToolGestureRecognizer;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) PKHoverController *hoverController;
@property (nonatomic, copy) PKInk *ink;
@property (nonatomic, readonly) double inputScale;
@property (nonatomic) bool insertSpaceEnabled;
@property (nonatomic) bool isAutoRefineEnabled;
@property (nonatomic, readonly) bool isInNotesTextView;
@property (nonatomic, readonly) bool isReadOnlyView;
@property (nonatomic, copy) PKLinedPaper *linedPaper;
@property (nonatomic) long long maximumSupportedContentVersion;
@property (nonatomic, readonly) CAMetalLayer *metalLayer;
@property (nonatomic, retain) UIImage *paperTexture;
@property (nonatomic, readonly) UIGestureRecognizer *pencilLongPressGestureRecognizer;
@property (nonatomic, readonly) PKTiledViewAnimationController *refineAnimationController;
@property (nonatomic, readonly) PKRulerController *rulerController;
@property (nonatomic) bool rulerEnabled;
@property (nonatomic) <PKRulerHostingDelegate> *rulerHostingDelegate;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } rulerTransform;
@property (nonatomic, readonly) double rulerWidth;
@property (nonatomic, readonly) UIScrollView *scrollView;
@property (nonatomic, readonly) PKSelectionController *selectionController;
@property (nonatomic) bool selectionHidden;
@property (nonatomic, readonly) PKStrokeSelectionImage *selectionImage;
@property (nonatomic, readonly) PKSelectionInteraction *selectionInteraction;
@property (nonatomic, readonly) bool selectionSupportsCopyAsText;
@property (nonatomic, readonly) bool selectionSupportsSnapToShape;
@property (nonatomic, readonly) bool selectionSupportsTranslate;
@property (nonatomic, readonly) UIView *selectionView;
@property (nonatomic) bool showDebugOutlines;
@property (nonatomic, readonly) UIPanGestureRecognizer *simultaneousDrawingGestureRecognizer;
@property (nonatomic) bool sixChannelBlending;
@property (nonatomic) bool sixChannelBlendingDisableSnapshotting;
@property (readonly) Class superclass;
@property (nonatomic) bool supportsCopyAsText;
@property (nonatomic, retain) PKTileController *tileController;
@property (nonatomic, readonly) double timestampForLatestUserInteraction;
@property (nonatomic, retain) PKWelcomeController *welcomeController;

+ (id)newInlineDrawingOfClass:(Class)arg1;
+ (bool)showDebugOutlines;

- (void).cxx_destruct;
- (id)_accessibilityUserTestingChildren;
- (long long)_activeSixChannelBlendingMode;
- (id)_activeToolPicker;
- (void)_addAttachmentsUnderView:(id)arg1 toArray:(id)arg2;
- (id)_adornmentViewsToHitTest;
- (id)_attachmentForUUID:(id)arg1;
- (void)_beginAnalyticsSessionIfNecessary;
- (void)_cancelCurrentStrokeAndReduceMemoryFootprint;
- (void)_cancelHideCanvasIfNecessary;
- (void)_canvasView:(id)arg1 didCompleteRefinementEntry:(id)arg2;
- (void)_canvasView:(id)arg1 didFinishRenderingNewStrokes:(id)arg2 inDrawing:(id)arg3 forPreview:(bool)arg4;
- (void)_canvasView:(id)arg1 eraserMoved:(struct CGPoint { double x1; double x2; })arg2 attachment:(id)arg3;
- (void)_canvasViewDidEraseStrokes:(id)arg1;
- (void)_canvasViewWillBeginDrawing:(id)arg1 startPoint:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; double x13; long long x14; long long x15; })arg2 forPreview:(bool)arg3;
- (void)_canvasViewWillCreateSnapshot;
- (void)_clearSelectionIfNecessary;
- (void)_copyAll:(id)arg1;
- (void)_copyFromCanvas:(id)arg1 intoAttachment:(id)arg2 hideCanvas:(bool)arg3 strokes:(id)arg4;
- (void)_createHoverControllerIfNecessary;
- (id)_createPKStrokesFromCHDrawing:(id)arg1 inputScale:(double)arg2 sourceStroke:(id)arg3 ink:(id)arg4;
- (id)_createPKStrokesFromCHDrawing:(id)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 inputScale:(double)arg3 sourceStroke:(id)arg4;
- (id)_currentStroke;
- (void)_didAddDrawingAttachmentView;
- (void)_didEndInteractiveResize;
- (void)_disableScrollViewPanGestureIfNecessary;
- (void)_dismissInsertSpaceHandlesIfNecessary;
- (long long)_dropInteraction:(id)arg1 dataOwnerForSession:(id)arg2;
- (void)_endAnalyticsSessionsIfNecessary;
- (void)_endHoverToolPreview;
- (void)_externalElementsSelectionDidChange;
- (void)_findSelectionTranscriptionWithCompletion:(id /* block */)arg1;
- (void)_finishCombiningStrokesIfNecessaryForAttachment:(id)arg1;
- (void)_flushCaches;
- (void)_getAllHandwritingTranscription:(id)arg1;
- (void)_handleDrawingDidChangeForAttachment:(id)arg1;
- (void)_handleDrawingDidChangeForAttachment:(id)arg1 didChangeVisibleStrokes:(bool)arg2;
- (void)_handlePencilSqueezeInteractionDidChangePaletteViewVisibilityNotification:(id)arg1;
- (void)_handleSingleTapAtLocation:(struct CGPoint { double x1; double x2; })arg1 forAttachment:(id)arg2;
- (bool)_hasSelection;
- (void)_hideCanvas;
- (id)_hitAttachment:(struct CGPoint { double x1; double x2; })arg1;
- (id)_hitAttachment:(struct CGPoint { double x1; double x2; })arg1 includeStandinAttachment:(bool)arg2;
- (id)_hitAttachment:(struct CGPoint { double x1; double x2; })arg1 includeStandinAttachment:(bool)arg2 expandBottomAttachment:(bool)arg3;
- (bool)_isDrawingEnabled;
- (bool)_isScrollViewSizeAnimating;
- (bool)_isValidDropPointForStrokes:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_isValidDropPointForStrokes:(struct CGPoint { double x1; double x2; })arg1 didInsertNewAttachment:(bool*)arg2;
- (bool)_isVirtualDevice;
- (bool)_isZoomingOrResizing;
- (void)_keepPencilShadowVisible;
- (double)_latestLatency;
- (double)_layerContentsScale;
- (void)_layoutSubviews;
- (void)_layoutSubviewsUpdateTilesForRendering:(bool)arg1;
- (id)_liveDrawing;
- (long long)_maxFileFormatVersion;
- (id)_newStrokesFromApplyingTransformations:(id)arg1 strokeGroups:(id)arg2 drawing:(id)arg3 originalStrokes:(id)arg4;
- (void)_observeScrollViewDidScroll:(id)arg1;
- (void)_pauseHoverPreviewForTimeInterval:(double)arg1;
- (void)_reenableScrollViewPanGestureIfNecessary;
- (void)_resetDrawingState;
- (void)_resetSelectedStrokeStateForRenderer;
- (void)_sceneDidActivate:(id)arg1;
- (void)_sceneWillDeactivate:(id)arg1;
- (void)_scrollViewDidLayoutSubviews:(id)arg1;
- (void)_scrollViewDidScroll;
- (bool)_scrollViewIsScrollingOrZoomingOrResizing;
- (void)_selectionRefreshWithChangeToDrawings:(id)arg1 completion:(id /* block */)arg2;
- (void)_selectionRefreshWithChangeToDrawings:(id)arg1 overrideAdditionalStrokes:(id)arg2 completion:(id /* block */)arg3;
- (void)_setAdditionalStrokes:(id)arg1 inDrawing:(id)arg2 completion:(id /* block */)arg3;
- (void)_setAdditionalStrokes:(id)arg1 inDrawing:(id)arg2 invalidateTiles:(bool)arg3;
- (void)_setAdditionalStrokes:(id)arg1 inDrawing:(id)arg2 invalidateTiles:(bool)arg3 forceOffscreen:(bool)arg4 completion:(id /* block */)arg5;
- (void)_setDrawingEnabled:(bool)arg1;
- (void)_setExternalAttachments:(id)arg1;
- (void)_setupPencilShadowViewIfNecessary;
- (void)_share:(id)arg1;
- (bool)_shouldExpandBottomAttachmentForDragAndDrop;
- (bool)_shouldPreventScrollViewPanGestureWhilePreviewing;
- (bool)_shouldUpdateHeightOfAttachments;
- (void)_showEditMenuFromLocation:(struct CGPoint { double x1; double x2; })arg1 forAttachment:(id)arg2;
- (bool)_sixChannelBlendingIsActive;
- (bool)_snapshottingDisabled;
- (void)_straightenStrokes:(id)arg1 drawing:(id)arg2 completionBlock:(id /* block */)arg3;
- (id)_tilesForAttachment:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 invert:(bool)arg3;
- (bool)_toolPickerIsOrWillBeVisible;
- (void)_toolPickerVisibilityDidChange;
- (long long)_totalVisibleStrokes;
- (void)_transientlyUpdateHeightOfAttachment:(id)arg1 delta:(double)arg2;
- (void)_updateAttachmentHeightIfNecessaryForDrawing:(id)arg1;
- (void)_updateAttachmentOnscreenBounds;
- (void)_updateDrawingGestureEnablement;
- (void)_updateDrawingGestureEnablementWithInk:(id)arg1;
- (void)_updateForToolPickerVisibilityChange:(id)arg1;
- (bool)_updateHeightOfAttachmentIfNecessary:(id)arg1;
- (void)_updatePencilShadowView:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; double x13; long long x14; long long x15; })arg1;
- (void)_updateRemoteEffect;
- (void)_updateSymbolPreviewViewForTouch:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; double x13; long long x14; long long x15; })arg1 attachment:(id)arg2 alpha:(double)arg3;
- (void)_updateToolPreviewIndicatorInputPoint:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; double x13; long long x14; long long x15; })arg1;
- (id)_visibleAttachments;
- (id)_visibleTilesForAttachment:(id)arg1;
- (void)_willBeginInteractiveResize;
- (bool)aggd_didMergeWithCollaborator;
- (bool)allowSnapToShape;
- (bool)allowsFingerDrawing;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })attachmentBoundsForDrawing:(id)arg1;
- (id)attachmentContainerView;
- (id)attachmentForHoverPreviewAt:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; double x13; long long x14; long long x15; })arg1;
- (id)attachmentForUUID:(id)arg1;
- (id)attachmentViews;
- (id)attachments;
- (void)autoRefineTask:(id)arg1 synthesizeRefinedDrawingForStrokes:(id)arg2 transcription:(id)arg3 drawingUUID:(id)arg4 completionBlock:(id /* block */)arg5;
- (void)blitOldTilesIntoNewTiles:(id)arg1 completion:(id /* block */)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsForDrawing:(id)arg1;
- (bool)canBecomeFirstResponder;
- (void)cancelTileGenerationInvalidateTiles:(bool)arg1;
- (id)canvasView;
- (id)canvasView:(id)arg1 attachmentViewForDrawing:(id)arg2;
- (void)canvasView:(id)arg1 beganStroke:(id)arg2;
- (void)canvasView:(id)arg1 cancelledStroke:(id)arg2;
- (void)canvasView:(id)arg1 drawingDidChange:(id)arg2;
- (bool)canvasView:(id)arg1 drawingIsShared:(id)arg2;
- (void)canvasView:(id)arg1 endedStroke:(id)arg2 shapeStrokes:(id)arg3;
- (void)canvasView:(id)arg1 registerMultiStepUndoCommands:(id)arg2;
- (void)canvasView:(id)arg1 registerUndoCommands:(id)arg2;
- (bool)canvasView:(id)arg1 shouldBeginDrawingWithTouch:(id)arg2;
- (bool)canvasView:(id)arg1 shouldDelayDrawingBeganWithTouch:(id)arg2;
- (bool)canvasView:(id)arg1 shouldDiscardEndedStroke:(id /* block */)arg2 drawing:(id)arg3;
- (bool)canvasView:(id)arg1 shouldDiscardTapStrokeAt:(struct CGPoint { double x1; double x2; })arg2 drawing:(id)arg3;
- (void)canvasView:(id)arg1 textStrokesCoveredByStroke:(id)arg2 drawing:(id)arg3 completion:(id /* block */)arg4;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })canvasView:(id)arg1 transformForStroke:(id)arg2;
- (bool)canvasViewAllowSnapToShape:(id)arg1;
- (id)canvasViewContentCoordinateSpace:(id)arg1;
- (void)canvasViewDidBeginDrawing:(id)arg1;
- (void)canvasViewDidEndDrawing:(id)arg1;
- (void)canvasViewDrawingMoved:(id)arg1 withTouch:(id)arg2;
- (void)canvasViewInvalidateTiles:(id)arg1;
- (long long)canvasViewMaximumSupportedContentVersion:(id)arg1;
- (bool)canvasViewShouldCombineStrokes:(id)arg1;
- (id)canvasViewTouchView:(id)arg1;
- (void)canvasViewWillBeginNewStroke:(id)arg1 withTouch:(id)arg2 location:(struct CGPoint { double x1; double x2; })arg3;
- (long long)canvasViewZOrderPolicy;
- (double)canvasZoomScale;
- (void)changeStrokesUsingTransformations:(id)arg1 strokeGroups:(id)arg2 drawing:(id)arg3 originalStrokes:(id)arg4;
- (void)clearRefinableStrokes;
- (bool)combiningStrokesEnabled;
- (void)commitSelectionIfNecessaryWithCompletion:(id /* block */)arg1;
- (id)contentCoordinateSpace;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })contentCoordinateSpaceTransform;
- (id)contentSnapshottingView;
- (struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; double x13; long long x14; long long x15; })convertInputPoint:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; double x13; long long x14; long long x15; })arg1 toAttachment:(id)arg2;
- (void)convertToShapeAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)copy:(id)arg1;
- (void)copyTranscriptionOfSelection;
- (void)createSticker:(id)arg1;
- (bool)cropDrawingAttachmentsWhenViewIsSmaller;
- (void)cut:(id)arg1;
- (void)dealloc;
- (Class)defaultDrawingClass;
- (id)delegate;
- (void)delete:(id)arg1;
- (void)didChangeDrawing:(id)arg1;
- (id)didChangeDrawing:(id)arg1 undoable:(bool)arg2;
- (void)didMoveToWindow;
- (bool)disableTileRendering;
- (bool)disableUndoManager;
- (bool)drawBitmapEraserMask;
- (id)drawingController;
- (id)drawingGestureRecognizer;
- (unsigned long long)drawingPolicy;
- (id)drawingTouchThatHitNothing;
- (SEL)drawingUndoSelector;
- (id)drawingUndoTarget;
- (bool)dropInteraction:(id)arg1 canHandleSession:(id)arg2;
- (void)dropInteraction:(id)arg1 performDrop:(id)arg2;
- (id)dropInteraction:(id)arg1 sessionDidUpdate:(id)arg2;
- (void)duplicate:(id)arg1;
- (id)editMenuInteraction;
- (id)editMenuInteraction:(id)arg1 menuForConfiguration:(id)arg2 suggestedActions:(id)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })editMenuInteraction:(id)arg1 targetRectForConfiguration:(id)arg2;
- (void)editMenuInteraction:(id)arg1 willDismissMenuForConfiguration:(id)arg2 animator:(id)arg3;
- (void)editMenuInteraction:(id)arg1 willPresentMenuForConfiguration:(id)arg2 animator:(id)arg3;
- (bool)editMenuVisible;
- (long long)effectiveMaximumSupportedContentVersion;
- (void)enumerateRefinableStrokesWithOptions:(unsigned long long)arg1 usingBlock:(id /* block */)arg2;
- (struct { id x1; id x2; id x3; })generateStrokeDataFromApplyingTransformations:(id)arg1 strokeGroups:(id)arg2 drawing:(id)arg3 originalStrokes:(id)arg4;
- (id)generateTile:(struct CGPoint { double x1; double x2; })arg1 inAttachment:(id)arg2 rendering:(bool)arg3 offscreen:(bool)arg4 overrideAdditionalStrokes:(id)arg5;
- (id)generationToolGestureRecognizer;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (void)getAttachment:(id)arg1 tileTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg2 strokeTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg3 paperTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg4;
- (void)getAttachment:(id)arg1 tileTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg2 strokeTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg3 paperTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg4 scrollViewContentOffset:(struct CGPoint { double x1; double x2; })arg5;
- (struct vector<AttachmentTileInfo, std::allocator<AttachmentTileInfo>> { struct AttachmentTileInfo {} *x1; struct AttachmentTileInfo {} *x2; struct __compressed_pair<AttachmentTileInfo *, std::allocator<AttachmentTileInfo>> { struct AttachmentTileInfo {} *x_3_1_1; } x3; })getVisibleTiles:(id)arg1;
- (bool)hasRefinableStrokes;
- (id)hitAttachment:(struct CGPoint { double x1; double x2; })arg1;
- (id)hitAttachment:(struct CGPoint { double x1; double x2; })arg1 includeStandinAttachment:(bool)arg2;
- (id)hitAttachment:(struct CGPoint { double x1; double x2; })arg1 includeStandinAttachment:(bool)arg2 expandBottomAttachment:(bool)arg3;
- (bool)hitSelectionAt:(struct CGPoint { double x1; double x2; })arg1;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)hoverController;
- (void)hoverController:(id)arg1 didBegin:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; double x13; long long x14; long long x15; })arg2;
- (void)hoverController:(id)arg1 didUpdate:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; double x13; long long x14; long long x15; })arg2;
- (void)hoverController:(id)arg1 holdGestureMeanTouch:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; double x13; long long x14; long long x15; })arg2 latestTouch:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; double x13; long long x14; long long x15; })arg3;
- (void)hoverController:(id)arg1 intentionalHoverWithDuration:(double)arg2;
- (bool)hoverController:(id)arg1 shouldBeActiveAt:(struct CGPoint { double x1; double x2; })arg2;
- (void)hoverControllerDidEnd:(id)arg1;
- (void)hoverControllerHoldGestureEnded:(id)arg1;
- (id)hoverGestureRecognizer;
- (id)initInScrollView:(id)arg1;
- (id)initInScrollView:(id)arg1 defaultDrawingClass:(Class)arg2;
- (id)initInScrollView:(id)arg1 sixChannelBlending:(bool)arg2 defaultDrawingClass:(Class)arg3;
- (id)initInScrollView:(id)arg1 sixChannelBlending:(bool)arg2 defaultDrawingClass:(Class)arg3 readOnly:(bool)arg4;
- (id)ink;
- (double)inputScale;
- (bool)insertAttachmentIfInBlankSpace:(struct CGPoint { double x1; double x2; })arg1;
- (void)insertCanvasView:(id)arg1 intoScrollView:(id)arg2;
- (void)insertSpace:(id)arg1;
- (void)insertSpaceAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (bool)insertSpaceEnabled;
- (bool)invertColors;
- (bool)isAutoRefineEnabled;
- (bool)isDrawing;
- (bool)isGenerationModelAvailable;
- (bool)isInNotesTextView;
- (bool)isReadOnlyView;
- (bool)isRefinableStroke:(id)arg1;
- (void)layoutSubviews;
- (id)linedPaper;
- (id)liveAttachment;
- (long long)maximumSupportedContentVersion;
- (id)metalLayer;
- (bool)needToUpdateViewFrame;
- (void)newCanvasView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })newViewFrame;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)paletteViewHoverDidSwitchToolsViaPencilInteraction:(id)arg1;
- (struct CGPoint { double x1; double x2; })paletteViewHoverLocation:(id)arg1;
- (id)paletteViewHoverView:(id)arg1;
- (void)paletteViewPencilDidTap:(id)arg1;
- (id)paperTexture;
- (void)paste:(id)arg1;
- (id)pencilLongPressGestureRecognizer;
- (void)performUndo:(id)arg1;
- (struct CGPoint { double x1; double x2; })pointInStrokeSpace:(struct CGPoint { double x1; double x2; })arg1 inDrawing:(id)arg2;
- (void)purgeNonVisibleTiles;
- (void)refine:(id)arg1 strokes:(id)arg2 drawing:(id)arg3;
- (id)refineAnimationController;
- (void)refineSelection;
- (void)registerUndoCommand:(id)arg1;
- (void)registerUndoCommands:(id)arg1;
- (void)registerUndoCommands:(id)arg1 andChangeToDrawing:(id)arg2;
- (void)renderAttachment:(id)arg1 intoCanvas:(id)arg2 showing:(bool)arg3;
- (void)replaceInkTexture:(id)arg1 image:(struct CGImage { }*)arg2;
- (void)replayCanvasViewDrawingMoved:(id)arg1 inputPoint:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; double x13; long long x14; long long x15; })arg2 inputType:(long long)arg3;
- (void)resizeTiles:(id)arg1 completion:(id /* block */)arg2;
- (void)resumeWorkAfterDrawing;
- (id)rulerController;
- (bool)rulerEnabled;
- (bool)rulerHostWantsSharedRuler;
- (id)rulerHostingDelegate;
- (id)rulerHostingView;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })rulerTransform;
- (id)rulerView;
- (double)rulerWidth;
- (id)scrollView;
- (void)selectAll:(id)arg1;
- (id)selectedStrokeIdsForAttachment:(id)arg1;
- (id)selectionController;
- (void)selectionDidChange;
- (bool)selectionHidden;
- (id)selectionImage;
- (id)selectionInteraction;
- (bool)selectionSupportsCopyAsText;
- (void)selectionSupportsRefinement:(id /* block */)arg1;
- (bool)selectionSupportsSnapToShape;
- (bool)selectionSupportsTranslate;
- (id)selectionView;
- (void)setAggd_didMergeWithCollaborator:(bool)arg1;
- (void)setAllowSnapToShape:(bool)arg1;
- (void)setAttachmentContainerView:(id)arg1;
- (void)setCanvasView:(id)arg1;
- (void)setCanvasViewZOrderPolicy:(long long)arg1;
- (void)setCombiningStrokesEnabled:(bool)arg1;
- (void)setContentCoordinateSpace:(id)arg1;
- (void)setContentSnapshottingView:(id)arg1;
- (void)setCropDrawingAttachmentsWhenViewIsSmaller:(bool)arg1;
- (void)setDefaultDrawingClass:(Class)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisableTileRendering:(bool)arg1;
- (void)setDisableUndoManager:(bool)arg1;
- (void)setDrawBitmapEraserMask:(bool)arg1;
- (void)setDrawingPolicy:(unsigned long long)arg1;
- (void)setDrawingUndoSelector:(SEL)arg1;
- (void)setDrawingUndoTarget:(id)arg1;
- (void)setEditMenuVisible:(bool)arg1;
- (void)setHoverController:(id)arg1;
- (void)setInk:(id)arg1;
- (void)setInsertSpaceEnabled:(bool)arg1;
- (void)setIsAutoRefineEnabled:(bool)arg1;
- (void)setLinedPaper:(id)arg1;
- (void)setMaximumSupportedContentVersion:(long long)arg1;
- (void)setPaperTexture:(id)arg1;
- (void)setRulerEnabled:(bool)arg1;
- (void)setRulerHostingDelegate:(id)arg1;
- (void)setSelectedStrokeIds:(id)arg1 selectionType:(long long)arg2 forAttachment:(id)arg3;
- (void)setSelectedStrokesColor:(id)arg1;
- (void)setSelectionHidden:(bool)arg1;
- (void)setShowDebugOutlines:(bool)arg1;
- (void)setSixChannelBlending:(bool)arg1;
- (void)setSixChannelBlendingDisableSnapshotting:(bool)arg1;
- (void)setSupportsCopyAsText:(bool)arg1;
- (void)setTileController:(id)arg1;
- (void)setWelcomeController:(id)arg1;
- (void)set_maxFileFormatVersion:(long long)arg1;
- (void)setupGestures;
- (void)setupRefineAnimationFrom:(id)arg1 to:(id)arg2 inDrawing:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)setupStrokeInAnimationTo:(id)arg1 inDrawing:(id)arg2 completionHandler:(id /* block */)arg3;
- (bool)shouldStartToolPreviewWhenHovering;
- (bool)showDebugOutlines;
- (void)showImageWandTipWithController:(id)arg1 toolPicker:(id)arg2;
- (id)simultaneousDrawingGestureRecognizer;
- (bool)sixChannelBlending;
- (bool)sixChannelBlendingDisableSnapshotting;
- (id)smoothedHullForStroke:(id)arg1;
- (void)snapToShapeSelection;
- (id)standInAttachmentView;
- (void)startRefineAnimationWithDuration:(double)arg1;
- (void)startToolPreviewIfPossibleForInputPoint:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; double x13; long long x14; long long x15; })arg1;
- (void)startedDrawingInBlankSpaceWithTouch:(id)arg1 location:(struct CGPoint { double x1; double x2; })arg2;
- (void)stopRefineAnimation;
- (void)straighten:(id)arg1 strokes:(id)arg2 drawing:(id)arg3;
- (void)straightenSelection;
- (void)straightenStrokes:(id)arg1 drawing:(id)arg2 completionBlockWithStrokeTransformInfo:(id /* block */)arg3;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })strokeTransform;
- (bool)supportsCopyAsText;
- (void)suspendWorkForDrawing;
- (void)swapOffscreenCallback:(id /* block */)arg1;
- (id)tileController;
- (id)tileForOffset:(struct CGPoint { double x1; double x2; })arg1 inAttachment:(id)arg2 offscreen:(bool)arg3 tileZoomScale:(double)arg4;
- (bool)tileIsVisibleForOffset:(struct CGPoint { double x1; double x2; })arg1 inAttachment:(id)arg2 distanceToMiddle:(double*)arg3;
- (double)timestampForLatestUserInteraction;
- (bool)toolShadowShouldBeActive;
- (id)topView;
- (id)topZAttachment;
- (void)traitCollectionDidChange:(id)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformFromStrokeSpaceToViewInAttachment:(id)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformFromStrokeSpaceToViewInDrawing:(id)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformFromViewToStrokeSpaceInAttachment:(id)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformFromViewToStrokeSpaceInDrawing:(id)arg1;
- (void)transformingSelectionBegan;
- (void)transformingSelectionCancelled;
- (void)transformingSelectionChanged:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)transformingSelectionEnded;
- (void)translateSelection;
- (id)undoManager;
- (void)updateAfterTraitCollectionChange;
- (void)updateCurrentSelectionWithNewDrawingIfNecessary:(id)arg1;
- (void)updateEndAttachment;
- (void)updateExistingTiles:(bool)arg1;
- (void)updateForAllowedDrawingInput;
- (void)updateTilesForVisibleRect;
- (void)updateTilesForVisibleRectForceIfZooming:(bool)arg1;
- (void)updateTilesForVisibleRectOffscreenOverrideAdditionalStrokes:(id)arg1 withCallback:(id /* block */)arg2;
- (void)updateTilesForVisibleRectRendering:(bool)arg1 offscreen:(bool)arg2 overrideAdditionalStrokes:(id)arg3;
- (id)viewForAttachmentAtBlankSpace;
- (id)viewToMakeFirstResponderWhenHoveringOverAttachment:(id)arg1;
- (id)visibleAttachments;
- (id)visibleOnScreenStrokesForDrawing:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleOnscreenBoundsForDrawing:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleOnscreenBoundsForDrawing:(id)arg1 slack:(struct CGSize { double x1; double x2; })arg2;
- (id)welcomeController;

@end
