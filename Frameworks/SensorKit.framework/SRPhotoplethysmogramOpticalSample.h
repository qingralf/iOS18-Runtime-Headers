/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/SensorKit.framework/SensorKit
 */

@interface SRPhotoplethysmogramOpticalSample : NSObject <NSCopying, NSSecureCoding> {
    NSIndexSet * _activePhotodiodeIndexes;
    NSNumber * _backgroundNoise;
    NSNumber * _backgroundNoiseOffset;
    NSArray * _conditions;
    long long  _emitter;
    long long  _nanosecondsSinceStart;
    NSNumber * _normalizedReflectance;
    NSNumber * _pinkNoise;
    double  _rawEffectiveWavelength;
    double  _rawFrequency;
    double  _rawNominalWavelength;
    long long  _signalIdentifier;
    NSNumber * _whiteNoise;
}

@property (nonatomic, readonly) NSIndexSet *activePhotodiodeIndexes;
@property (nonatomic, readonly) NSNumber *backgroundNoise;
@property (nonatomic, readonly) NSNumber *backgroundNoiseOffset;
@property (nonatomic, readonly, copy) NSArray *conditions;
@property (nonatomic, readonly) NSMeasurement *effectiveWavelength;
@property (nonatomic, readonly) long long emitter;
@property (nonatomic, readonly) long long nanosecondsSinceStart;
@property (nonatomic, readonly) NSMeasurement *nominalWavelength;
@property (nonatomic, readonly) NSNumber *normalizedReflectance;
@property (nonatomic, readonly) NSNumber *pinkNoise;
@property (nonatomic, readonly) NSMeasurement *samplingFrequency;
@property (nonatomic, readonly) long long signalIdentifier;
@property (nonatomic, readonly) NSNumber *whiteNoise;

+ (bool)supportsSecureCoding;

- (id)activePhotodiodeIndexes;
- (id)backgroundNoise;
- (id)backgroundNoiseOffset;
- (id)conditions;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (id)effectiveWavelength;
- (long long)emitter;
- (void)encodeWithCoder:(id)arg1;
- (unsigned long long)hash;
- (id)initWithCoder:(id)arg1;
- (id)initWithEmitter:(long long)arg1 photodiodes:(id)arg2 signalIdentifier:(long long)arg3 nominalWavelength:(double)arg4 effectiveWavelength:(double)arg5 frequency:(double)arg6 timestamp:(long long)arg7 normalizedReflectance:(id)arg8 whiteNoise:(id)arg9 pinkNoise:(id)arg10 backgroundNoise:(id)arg11 backgrounNoiseOffset:(id)arg12 conditions:(id)arg13;
- (id)initWithHAPPGOpticalSample:(id)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToOpticalSample:(id)arg1;
- (long long)nanosecondsSinceStart;
- (id)nominalWavelength;
- (id)normalizedReflectance;
- (id)pinkNoise;
- (id)samplingFrequency;
- (long long)signalIdentifier;
- (id)whiteNoise;

@end
