/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Vision.framework/Vision
 */

@interface VNFgBgE5MLInstanceFeature : NSObject {
    float  _IoU;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _bbox;
    int  _cocoCategory;
    NSString * _cocoCategoryName;
    float  _cocoConfidence;
    struct CGSize { 
        double width; 
        double height; 
    }  _mapSize;
    int  _miyoshiCategory;
    NSString * _miyoshiCategoryName;
    float  _miyoshiConfidence;
    int  _queryID;
    struct vector<CGPoint, std::allocator<CGPoint>> { 
        struct CGPoint {} *__begin_; 
        struct CGPoint {} *__end_; 
        struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { 
            struct CGPoint {} *__value_; 
        } __end_cap_; 
    }  _segmentation;
    float  _stabilityScore;
}

@property float IoU;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bbox;
@property int cocoCategory;
@property (retain) NSString *cocoCategoryName;
@property float cocoConfidence;
@property struct CGSize { double x1; double x2; } mapSize;
@property int miyoshiCategory;
@property (retain) NSString *miyoshiCategoryName;
@property float miyoshiConfidence;
@property int queryID;
@property /* Warning: unhandled struct encoding: '{vector<CGPoint' */ struct  segmentation; /* unknown property attribute:  std::allocator<CGPoint>>=^{CGPoint}}} */
@property float stabilityScore;

- (id).cxx_construct;
- (void).cxx_destruct;
- (float)IoU;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bbox;
- (int)cocoCategory;
- (id)cocoCategoryName;
- (float)cocoConfidence;
- (id)initWithQueryID:(int)arg1 miyoshiConfidence:(float)arg2 cocoConfidence:(float)arg3 IoU:(float)arg4 stabilityScore:(float)arg5 miyoshiCategory:(int)arg6 cocoCategory:(int)arg7 miyoshiCategoryName:(id)arg8 cocoCategoryName:(id)arg9 bbox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg10 mapSize:(struct CGSize { double x1; double x2; })arg11 segmentation:(struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_1_1; } x3; })arg12;
- (struct CGSize { double x1; double x2; })mapSize;
- (int)miyoshiCategory;
- (id)miyoshiCategoryName;
- (float)miyoshiConfidence;
- (int)queryID;
- (struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_1_1; } x3; })segmentation;
- (void)setBbox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCocoCategory:(int)arg1;
- (void)setCocoCategoryName:(id)arg1;
- (void)setCocoConfidence:(float)arg1;
- (void)setIoU:(float)arg1;
- (void)setMapSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setMiyoshiCategory:(int)arg1;
- (void)setMiyoshiCategoryName:(id)arg1;
- (void)setMiyoshiConfidence:(float)arg1;
- (void)setQueryID:(int)arg1;
- (void)setSegmentation:(struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_1_1; } x3; })arg1;
- (void)setStabilityScore:(float)arg1;
- (float)stabilityScore;

@end
