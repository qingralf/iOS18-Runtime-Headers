/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Vision.framework/Vision
 */

@interface VNFgBgE5MLInstanceSegmenter : NSObject {
    VNFgBgE5MLInstanceSegmenterConfiguration * _configuration;
    VNFgBgE5MLProcess * _process;
}

@property (nonatomic, readonly) VNFgBgE5MLInstanceSegmenterConfiguration *configuration;
@property (nonatomic, readonly) VNFgBgE5MLProcess *process;

+ (id)instanceSegmenterWithConfiguration:(id)arg1 error:(id*)arg2;
+ (id)instanceSegmenterWithRevision:(long long)arg1 error:(id*)arg2;

- (void).cxx_destruct;
- (id)_initWithConfiguration:(id)arg1 e5mlProcess:(id)arg2;
- (id)composeInstanceFeatures:(id)arg1 miyoshiConfidence:(id)arg2 cocoConfidence:(id)arg3 predictionIoU:(id)arg4 stabilityScore:(id)arg5 decodeMatch:(id)arg6 isRotated:(bool)arg7 minimumMaskPixelCount:(unsigned long long)arg8 useInteractive:(bool)arg9;
- (void)computeConfidenceInput:(id)arg1 confidence:(float*)arg2 withQueryID:(int)arg3 category:(int*)arg4 invalidCategory:(int)arg5;
- (struct vector<std::vector<CGPoint>, std::allocator<std::vector<CGPoint>>> { void *x1; void *x2; struct __compressed_pair<std::vector<CGPoint> *, std::allocator<std::vector<CGPoint>>> { void *x_3_1_1; } x3; })computeSegmentation:(id)arg1 withQueryID:(int)arg2;
- (struct vector<std::vector<CGPoint>, std::allocator<std::vector<CGPoint>>> { void *x1; void *x2; struct __compressed_pair<std::vector<CGPoint> *, std::allocator<std::vector<CGPoint>>> { void *x_3_1_1; } x3; })computeVectorConnectedComponentSegmentation:(id)arg1 minimumMaskPixelCount:(unsigned long long)arg2 withQueryID:(int)arg3;
- (id)configuration;
- (struct ConnectedComponentResult { struct unique_ptr<unsigned long[], std::default_delete<unsigned long[]>> { struct __compressed_pair<unsigned long *, std::default_delete<unsigned long[]>> { unsigned long long *x_1_2_1; } x_1_1_1; } x1; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x_2_1_1; unsigned long long *x_2_1_2; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x_3_2_1; } x_2_1_3; } x2; struct vector<apple::vision::fgbg::ConnectedComponentResult::CCBoundary, std::allocator<apple::vision::fgbg::ConnectedComponentResult::CCBoundary>> { struct CCBoundary {} *x_3_1_1; struct CCBoundary {} *x_3_1_2; struct __compressed_pair<apple::vision::fgbg::ConnectedComponentResult::CCBoundary *, std::allocator<apple::vision::fgbg::ConnectedComponentResult::CCBoundary>> { struct CCBoundary {} *x_3_2_1; } x_3_1_3; } x3; struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x_4_1_1; struct CGPoint {} *x_4_1_2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_2_1; } x_4_1_3; } x4; })generateInstanceConnectedComponentsFromMLMultiArray:(id)arg1 maskThreshold:(float)arg2 queryID:(int)arg3 inverseColor:(bool)arg4;
- (struct ConnectedComponentResult { struct unique_ptr<unsigned long[], std::default_delete<unsigned long[]>> { struct __compressed_pair<unsigned long *, std::default_delete<unsigned long[]>> { unsigned long long *x_1_2_1; } x_1_1_1; } x1; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x_2_1_1; unsigned long long *x_2_1_2; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x_3_2_1; } x_2_1_3; } x2; struct vector<apple::vision::fgbg::ConnectedComponentResult::CCBoundary, std::allocator<apple::vision::fgbg::ConnectedComponentResult::CCBoundary>> { struct CCBoundary {} *x_3_1_1; struct CCBoundary {} *x_3_1_2; struct __compressed_pair<apple::vision::fgbg::ConnectedComponentResult::CCBoundary *, std::allocator<apple::vision::fgbg::ConnectedComponentResult::CCBoundary>> { struct CCBoundary {} *x_3_2_1; } x_3_1_3; } x3; struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x_4_1_1; struct CGPoint {} *x_4_1_2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_2_1; } x_4_1_3; } x4; })generateInstanceConnectedComponentsFromMask:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; })arg1;
- (struct ConnectedComponentResult { struct unique_ptr<unsigned long[], std::default_delete<unsigned long[]>> { struct __compressed_pair<unsigned long *, std::default_delete<unsigned long[]>> { unsigned long long *x_1_2_1; } x_1_1_1; } x1; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x_2_1_1; unsigned long long *x_2_1_2; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x_3_2_1; } x_2_1_3; } x2; struct vector<apple::vision::fgbg::ConnectedComponentResult::CCBoundary, std::allocator<apple::vision::fgbg::ConnectedComponentResult::CCBoundary>> { struct CCBoundary {} *x_3_1_1; struct CCBoundary {} *x_3_1_2; struct __compressed_pair<apple::vision::fgbg::ConnectedComponentResult::CCBoundary *, std::allocator<apple::vision::fgbg::ConnectedComponentResult::CCBoundary>> { struct CCBoundary {} *x_3_2_1; } x_3_1_3; } x3; struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x_4_1_1; struct CGPoint {} *x_4_1_2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_2_1; } x_4_1_3; } x4; })generateInstanceConnectedComponentsFromMask:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; })arg1 fillGapsAreaRatio:(float)arg2;
- (struct ConnectedComponentResult { struct unique_ptr<unsigned long[], std::default_delete<unsigned long[]>> { struct __compressed_pair<unsigned long *, std::default_delete<unsigned long[]>> { unsigned long long *x_1_2_1; } x_1_1_1; } x1; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x_2_1_1; unsigned long long *x_2_1_2; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x_3_2_1; } x_2_1_3; } x2; struct vector<apple::vision::fgbg::ConnectedComponentResult::CCBoundary, std::allocator<apple::vision::fgbg::ConnectedComponentResult::CCBoundary>> { struct CCBoundary {} *x_3_1_1; struct CCBoundary {} *x_3_1_2; struct __compressed_pair<apple::vision::fgbg::ConnectedComponentResult::CCBoundary *, std::allocator<apple::vision::fgbg::ConnectedComponentResult::CCBoundary>> { struct CCBoundary {} *x_3_2_1; } x_3_1_3; } x3; struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x_4_1_1; struct CGPoint {} *x_4_1_2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_2_1; } x_4_1_3; } x4; })generateInstanceConnectedComponentsFromMask:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; })arg1 inverseColor:(bool)arg2;
- (struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; })generateMaskForInstanceFeatures:(id)arg1 maskImageType:(int*)arg2;
- (struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; })generateMaskForLabel:(unsigned long long)arg1 fromConnectedComponents:(const void*)arg2 error:(id*)arg3;
- (struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; })generateMaskFromInstanceFeatures:(id)arg1 toCategory:(int)arg2 drawBox:(bool)arg3 maskImageType:(int*)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })getDetection:(const void*)arg1 mapSize:(struct CGSize { double x1; double x2; })arg2 isRotated:(bool)arg3;
- (bool)isFullyIntersection:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withRect2:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)modifyMask:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg1 forLabel:(unsigned long long)arg2 fromConnectedComponents:(const void*)arg3 error:(id*)arg4;
- (id)process;

@end
