/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/WebKit.framework/WebKit
 */

@interface WKMouseInteraction : NSObject <UIGestureRecognizerDelegate, UIInteraction> {
    bool  _cancelledOrExited;
    struct RetainPtr<UITouch> { 
        void *m_ptr; 
    }  _currentHoverTouch;
    struct RetainPtr<UITouch> { 
        void *m_ptr; 
    }  _currentMouseTouch;
    <WKMouseInteractionDelegate> * _delegate;
    bool  _enabled;
    struct optional<CGPoint> { 
        union { 
            BOOL __null_state_; 
            struct CGPoint { 
                double x; 
                double y; 
            } __val_; 
        } ; 
        bool __engaged_; 
    }  _lastLocation;
    struct RetainPtr<UIHoverGestureRecognizer> { 
        void *m_ptr; 
    }  _mouseHoverGestureRecognizer;
    struct RetainPtr<WKMouseTouchGestureRecognizer> { 
        void *m_ptr; 
    }  _mouseTouchGestureRecognizer;
    struct RetainPtr<UIHoverGestureRecognizer> { 
        void *m_ptr; 
    }  _pencilHoverGestureRecognizer;
    struct optional<long> { 
        union { 
            BOOL __null_state_; 
            long long __val_; 
        } ; 
        bool __engaged_; 
    }  _pressedButtonMask;
    bool  _touching;
    UIView * _view;
}

@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (nonatomic, readonly) <WKMouseInteractionDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=isEnabled, nonatomic) bool enabled;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) struct optional<CGPoint> { union { BOOL x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; bool x2; } lastLocation;
@property (nonatomic, readonly) UITouch *mouseTouch;
@property (nonatomic, readonly) UIGestureRecognizer *mouseTouchGestureRecognizer;
@property (readonly) Class superclass;
@property (nonatomic, readonly) UIView *view;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_activeGesture;
- (void)_forEachGesture:(id /* block */)arg1;
- (void)_hoverGestureRecognized:(id)arg1;
- (void)_resetCachedState;
- (void)_updateMouseTouches:(id)arg1;
- (struct optional<WebKit::NativeWebMouseEvent> { union { BOOL x_1_1_1; struct NativeWebMouseEvent { struct SingleThreadIntegralWrapper<unsigned int> { unsigned int x_1_3_1; } x_2_2_1; unsigned char x_2_2_2; struct OptionSet<WebKit::WebEventModifier> { unsigned char x_3_3_1; } x_2_2_3; struct WallTime { double x_4_3_1; } x_2_2_4; struct UUID { /* Warning: Unrecognized filer type: 'T' using 'void*' */ void*x_5_3_1; } x_2_2_5; BOOL x_2_2_6; unsigned short x_2_2_7; struct IntPoint { int x_8_3_1; int x_8_3_2; } x_2_2_8; struct IntPoint { int x_9_3_1; int x_9_3_2; } x_2_2_9; float x_2_2_10; float x_2_2_11; float x_2_2_12; struct IntPoint { int x_13_3_1; int x_13_3_2; } x_2_2_13; int x_2_2_14; double x_2_2_15; unsigned char x_2_2_16; unsigned int x_2_2_17; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl {} *x_1_4_1; } x_18_3_1; } x_2_2_18; bool x_2_2_19; struct Vector<WebKit::WebMouseEvent, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct WebMouseEvent {} *x_20_3_1; unsigned int x_20_3_2; unsigned int x_20_3_3; } x_2_2_20; } x_1_1_2; } x1; })createMouseEventWithType:(struct optional<WebKit::WebEventType> { union { BOOL x_1_1_1; unsigned char x_1_1_2; } x1; bool x2; })arg1 wasCancelled:(bool)arg2;
- (id)delegate;
- (void)didMoveToView:(id)arg1;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)hasGesture:(id)arg1;
- (id)initWithDelegate:(id)arg1;
- (bool)isEnabled;
- (struct optional<CGPoint> { union { BOOL x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; bool x2; })lastLocation;
- (struct CGPoint { double x1; double x2; })locationInView:(id)arg1;
- (id)mouseTouch;
- (id)mouseTouchGestureRecognizer;
- (void)setEnabled:(bool)arg1;
- (id)view;
- (void)willMoveToView:(id)arg1;

@end
