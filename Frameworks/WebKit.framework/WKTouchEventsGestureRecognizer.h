/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/WebKit.framework/WebKit
 */

@interface WKTouchEventsGestureRecognizer : UIGestureRecognizer {
    struct RetainPtr<NSMapTable<NSNumber *,UITouch *>> { 
        void *m_ptr; 
    }  _activeTouchesByIdentifier;
    bool  _defaultPrevented;
    bool  _dispatchingTouchEvents;
    bool  _isPotentialTap;
    struct WKTouchEvent { 
        unsigned char type; 
        double timestamp; 
        struct CGPoint { 
            double x; 
            double y; 
        } locationInScreenCoordinates; 
        struct CGPoint { 
            double x; 
            double y; 
        } locationInDocumentCoordinates; 
        double scale; 
        double rotation; 
        bool inJavaScriptGesture; 
        struct Vector<WebKit::WKTouchPoint, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { 
            struct WKTouchPoint {} *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } touchPoints; 
        struct Vector<WebKit::WKTouchEvent, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { 
            struct WKTouchEvent {} *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } coalescedEvents; 
        struct Vector<WebKit::WKTouchEvent, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { 
            struct WKTouchEvent {} *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } predictedEvents; 
        bool isPotentialTap; 
    }  _lastTouchEvent;
    struct optional<CGPoint> { 
        union { 
            BOOL __null_state_; 
            struct CGPoint { 
                double x; 
                double y; 
            } __val_; 
        } ; 
        bool __engaged_; 
    }  _lastTouchesBeganLocation;
    double  _lastTouchesBeganTime;
    double  _originalGestureAngle;
    double  _originalGestureDistance;
    bool  _passedHitTest;
    SEL  _touchAction;
    <WKTouchEventsGestureRecognizerDelegate> * _touchEventDelegate;
    id  _touchTarget;
    bool  _wasExplicitlyCancelled;
}

@property (nonatomic, readonly) NSMapTable *activeTouchesByIdentifier;
@property (getter=isDefaultPrevented, nonatomic) bool defaultPrevented;
@property (getter=isDispatchingTouchEvents, nonatomic, readonly) bool dispatchingTouchEvents;
@property (nonatomic, readonly) const void*lastTouchEvent;

+ (void)initialize;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)_hasActiveTouchesForEvent:(id)arg1;
- (void)_processTouches:(id)arg1 withEvent:(id)arg2 type:(unsigned char)arg3;
- (void)_recordTouches:(id)arg1 type:(unsigned char)arg2 coalescedTouches:(id)arg3 predictedTouches:(id)arg4;
- (struct WKTouchEvent { unsigned char x1; double x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; struct CGPoint { double x_4_1_1; double x_4_1_2; } x4; double x5; double x6; bool x7; struct Vector<WebKit::WKTouchPoint, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct WKTouchPoint {} *x_8_1_1; unsigned int x_8_1_2; unsigned int x_8_1_3; } x8; struct Vector<WebKit::WKTouchEvent, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct WKTouchEvent {} *x_9_1_1; unsigned int x_9_1_2; unsigned int x_9_1_3; } x9; struct Vector<WebKit::WKTouchEvent, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct WKTouchEvent {} *x_10_1_1; unsigned int x_10_1_2; unsigned int x_10_1_3; } x10; bool x11; })_touchEventForTouch:(id)arg1;
- (void)_updateTapStateWithTouches:(id)arg1;
- (void)_updateTapStateWithTouches:(id)arg1 type:(unsigned char)arg2;
- (id)activeTouchesByIdentifier;
- (bool)canBePreventedByGestureRecognizer:(id)arg1;
- (void)cancel;
- (id)initWithTarget:(id)arg1 action:(SEL)arg2 touchDelegate:(id)arg3;
- (bool)isDefaultPrevented;
- (bool)isDispatchingTouchEvents;
- (const void*)lastTouchEvent;
- (void)performAction;
- (void)reset;
- (void)setDefaultPrevented:(bool)arg1;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;

@end
