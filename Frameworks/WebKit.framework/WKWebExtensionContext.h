/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/WebKit.framework/WebKit
 */

@interface WKWebExtensionContext : NSObject <WKObject> {
    struct ObjectStorage<WebKit::WebExtensionContext> { 
        struct type { 
            unsigned char __lx[752]; 
        } data; 
    }  _webExtensionContext;
}

@property (readonly) struct Object { int (**x1)(); void *x2; }*_apiObject;
@property (nonatomic, readonly) NSURL *_backgroundContentURL;
@property (nonatomic, readonly) WKWebView *_backgroundWebView;
@property (nonatomic, readonly) void*_webExtensionContext;
@property (nonatomic, copy) NSURL *baseURL;
@property (nonatomic, readonly, copy) NSArray *commands;
@property (nonatomic, readonly, copy) NSSet *currentPermissionMatchPatterns;
@property (nonatomic, readonly, copy) NSSet *currentPermissions;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (nonatomic, copy) NSDictionary *deniedPermissionMatchPatterns;
@property (nonatomic, copy) NSDictionary *deniedPermissions;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly, copy) NSArray *errors;
@property (nonatomic, readonly) <WKWebExtensionWindow> *focusedWindow;
@property (nonatomic, copy) NSDictionary *grantedPermissionMatchPatterns;
@property (nonatomic, copy) NSDictionary *grantedPermissions;
@property (nonatomic, readonly) bool hasAccessToAllHosts;
@property (nonatomic, readonly) bool hasAccessToAllURLs;
@property (nonatomic) bool hasAccessToPrivateData;
@property (nonatomic, readonly) bool hasContentModificationRules;
@property (nonatomic, readonly) bool hasInjectedContent;
@property (nonatomic) bool hasRequestedOptionalAccessToAllHosts;
@property (readonly) unsigned long long hash;
@property (getter=isInspectable, nonatomic) bool inspectable;
@property (nonatomic, copy) NSString *inspectionName;
@property (getter=isLoaded, nonatomic, readonly) bool loaded;
@property (nonatomic, readonly, copy) NSSet *openTabs;
@property (nonatomic, readonly, copy) NSArray *openWindows;
@property (nonatomic, readonly, copy) NSURL *optionsPageURL;
@property (nonatomic, readonly, copy) NSURL *overrideNewTabPageURL;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *uniqueIdentifier;
@property (nonatomic, copy) NSSet *unsupportedAPIs;
@property (nonatomic, readonly) WKWebExtension *webExtension;
@property (nonatomic, readonly) WKWebExtensionController *webExtensionController;
@property (nonatomic, readonly, copy) WKWebViewConfiguration *webViewConfiguration;

+ (id)contextForExtension:(id)arg1;
+ (void)initialize;

- (struct Object { int (**x1)(); void *x2; }*)_apiObject;
- (id)_backgroundContentURL;
- (id)_backgroundWebView;
- (void)_objc_initiateDealloc;
- (void*)_webExtensionContext;
- (id)actionForTab:(id)arg1;
- (id)baseURL;
- (void)clearUserGestureInTab:(id)arg1;
- (id)commands;
- (id)currentPermissionMatchPatterns;
- (id)currentPermissions;
- (void)dealloc;
- (id)deniedPermissionMatchPatterns;
- (id)deniedPermissions;
- (void)didActivateTab:(id)arg1 previousActiveTab:(id)arg2;
- (void)didChangeTabProperties:(unsigned long long)arg1 forTab:(id)arg2;
- (void)didCloseTab:(id)arg1 windowIsClosing:(bool)arg2;
- (void)didCloseWindow:(id)arg1;
- (void)didDeselectTabs:(id)arg1;
- (void)didFocusWindow:(id)arg1;
- (void)didMoveTab:(id)arg1 fromIndex:(unsigned long long)arg2 inWindow:(id)arg3;
- (void)didOpenTab:(id)arg1;
- (void)didOpenWindow:(id)arg1;
- (void)didReplaceTab:(id)arg1 withTab:(id)arg2;
- (void)didSelectTabs:(id)arg1;
- (id)errors;
- (id)focusedWindow;
- (id)grantedPermissionMatchPatterns;
- (id)grantedPermissions;
- (bool)hasAccessToAllHosts;
- (bool)hasAccessToAllURLs;
- (bool)hasAccessToPrivateData;
- (bool)hasAccessToURL:(id)arg1;
- (bool)hasAccessToURL:(id)arg1 inTab:(id)arg2;
- (bool)hasActiveUserGestureInTab:(id)arg1;
- (bool)hasContentModificationRules;
- (bool)hasInjectedContent;
- (bool)hasInjectedContentForURL:(id)arg1;
- (bool)hasPermission:(id)arg1;
- (bool)hasPermission:(id)arg1 inTab:(id)arg2;
- (bool)hasRequestedOptionalAccessToAllHosts;
- (id)initForExtension:(id)arg1;
- (id)inspectionName;
- (bool)isInspectable;
- (bool)isLoaded;
- (void)loadBackgroundContentWithCompletionHandler:(id /* block */)arg1;
- (id)menuItemsForTab:(id)arg1;
- (id)openTabs;
- (id)openWindows;
- (id)optionsPageURL;
- (id)overrideNewTabPageURL;
- (void)performActionForTab:(id)arg1;
- (void)performCommand:(id)arg1;
- (bool)performCommandForKeyCommand:(id)arg1;
- (long long)permissionStatusForMatchPattern:(id)arg1;
- (long long)permissionStatusForMatchPattern:(id)arg1 inTab:(id)arg2;
- (long long)permissionStatusForPermission:(id)arg1;
- (long long)permissionStatusForPermission:(id)arg1 inTab:(id)arg2;
- (long long)permissionStatusForURL:(id)arg1;
- (long long)permissionStatusForURL:(id)arg1 inTab:(id)arg2;
- (void)setBaseURL:(id)arg1;
- (void)setDeniedPermissionMatchPatterns:(id)arg1;
- (void)setDeniedPermissions:(id)arg1;
- (void)setGrantedPermissionMatchPatterns:(id)arg1;
- (void)setGrantedPermissions:(id)arg1;
- (void)setHasAccessToPrivateData:(bool)arg1;
- (void)setHasRequestedOptionalAccessToAllHosts:(bool)arg1;
- (void)setInspectable:(bool)arg1;
- (void)setInspectionName:(id)arg1;
- (void)setPermissionStatus:(long long)arg1 forMatchPattern:(id)arg2;
- (void)setPermissionStatus:(long long)arg1 forMatchPattern:(id)arg2 expirationDate:(id)arg3;
- (void)setPermissionStatus:(long long)arg1 forPermission:(id)arg2;
- (void)setPermissionStatus:(long long)arg1 forPermission:(id)arg2 expirationDate:(id)arg3;
- (void)setPermissionStatus:(long long)arg1 forURL:(id)arg2;
- (void)setPermissionStatus:(long long)arg1 forURL:(id)arg2 expirationDate:(id)arg3;
- (void)setUniqueIdentifier:(id)arg1;
- (void)setUnsupportedAPIs:(id)arg1;
- (id)sidebarForTab:(id)arg1;
- (id)uniqueIdentifier;
- (id)unsupportedAPIs;
- (void)userGesturePerformedInTab:(id)arg1;
- (id)webExtension;
- (id)webExtensionController;
- (id)webViewConfiguration;

@end
