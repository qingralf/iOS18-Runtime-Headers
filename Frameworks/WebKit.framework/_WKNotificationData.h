/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/WebKit.framework/WebKit
 */

@interface _WKNotificationData : NSObject {
    struct NotificationData { 
        struct URL { 
            struct String { 
                struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                    struct StringImpl {} *m_ptr; 
                } m_impl; 
            } m_string; 
            unsigned int m_isValid : 1; 
            unsigned int m_protocolIsInHTTPFamily : 1; 
            unsigned int m_hasOpaquePath : 1; 
            unsigned int m_portLength : 3; 
            unsigned int m_schemeEnd : 26; 
            unsigned int m_userStart; 
            unsigned int m_userEnd; 
            unsigned int m_passwordEnd; 
            unsigned int m_hostEnd; 
            unsigned int m_pathAfterLastSlash; 
            unsigned int m_pathEnd; 
            unsigned int m_queryEnd; 
        } defaultActionURL; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } title; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } body; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } iconURL; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } tag; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } language; 
        unsigned char direction; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } originString; 
        struct URL { 
            struct String { 
                struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                    struct StringImpl {} *m_ptr; 
                } m_impl; 
            } m_string; 
            unsigned int m_isValid : 1; 
            unsigned int m_protocolIsInHTTPFamily : 1; 
            unsigned int m_hasOpaquePath : 1; 
            unsigned int m_portLength : 3; 
            unsigned int m_schemeEnd : 26; 
            unsigned int m_userStart; 
            unsigned int m_userEnd; 
            unsigned int m_passwordEnd; 
            unsigned int m_hostEnd; 
            unsigned int m_pathAfterLastSlash; 
            unsigned int m_pathEnd; 
            unsigned int m_queryEnd; 
        } serviceWorkerRegistrationURL; 
        struct UUID { 
            /* Warning: Unrecognized filer type: 'T' using 'void*' */ void*m_data; 
        } notificationID; 
        struct optional<WebCore::ProcessQualified<WTF::UUID>> { 
            union { 
                BOOL __null_state_; 
                struct ProcessQualified<WTF::UUID> { 
                    struct UUID { 
                        void*m_data; 
                    } m_object; 
                    struct ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long, WTF::SupportsObjectIdentifierNullState::Yes> { 
                        unsigned long long m_identifier; 
                    } m_processIdentifier; 
                } __val_; 
            } ; 
            bool __engaged_; 
        } contextIdentifier; 
        struct SessionID { 
            unsigned long long m_identifier; 
        } sourceSession; 
        struct MonotonicTime { 
            double m_value; 
        } creationTime; 
        struct Vector<unsigned char, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { 
            char *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } data; 
        struct optional<bool> { 
            union { 
                BOOL __null_state_; 
                bool __val_; 
            } ; 
            bool __engaged_; 
        } silent; 
    }  _coreData;
    NSUUID * _notificationUUID;
}

@property (nonatomic) unsigned long long alert;
@property (nonatomic) NSString *body;
@property (nonatomic) NSData *data;
@property (nonatomic) unsigned long long dir;
@property (nonatomic, readonly) NSString *identifier;
@property (nonatomic) NSString *lang;
@property (nonatomic) NSUUID *notificationUUID;
@property (nonatomic, readonly) NSString *origin;
@property (nonatomic, readonly) NSURL *securityOrigin;
@property (nonatomic) NSURL *serviceWorkerRegistrationURL;
@property (nonatomic) NSString *tag;
@property (nonatomic) NSString *title;
@property (nonatomic, readonly, copy) NSDictionary *userInfo;
@property (nonatomic, readonly) NSUUID *uuid;

- (id).cxx_construct;
- (void).cxx_destruct;
- (const void*)_getCoreData;
- (id)_init;
- (id)_initWithCoreData:(const void*)arg1;
- (unsigned long long)alert;
- (id)body;
- (id)data;
- (void)dealloc;
- (id)dictionaryRepresentation;
- (unsigned long long)dir;
- (id)identifier;
- (id)lang;
- (id)notificationUUID;
- (id)origin;
- (id)securityOrigin;
- (id)serviceWorkerRegistrationURL;
- (void)setAlert:(unsigned long long)arg1;
- (void)setBody:(id)arg1;
- (void)setData:(id)arg1;
- (void)setDir:(unsigned long long)arg1;
- (void)setLang:(id)arg1;
- (void)setNotificationUUID:(id)arg1;
- (void)setSecurityOrigin:(id)arg1;
- (void)setServiceWorkerRegistrationURL:(id)arg1;
- (void)setTag:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setUuid:(id)arg1;
- (id)tag;
- (id)title;
- (id)userInfo;
- (id)uuid;

@end
