/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/WebKit.framework/WebKit
 */

@interface _WKWebPushAction : NSObject {
    struct optional<WebCore::NotificationData> { 
        union { 
            BOOL __null_state_; 
            struct NotificationData { 
                struct URL { 
                    struct String { 
                        struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                            struct StringImpl {} *m_ptr; 
                        } m_impl; 
                    } m_string; 
                    unsigned int m_isValid : 1; 
                    unsigned int m_protocolIsInHTTPFamily : 1; 
                    unsigned int m_hasOpaquePath : 1; 
                    unsigned int m_portLength : 3; 
                    unsigned int m_schemeEnd : 26; 
                    unsigned int m_userStart; 
                    unsigned int m_userEnd; 
                    unsigned int m_passwordEnd; 
                    unsigned int m_hostEnd; 
                    unsigned int m_pathAfterLastSlash; 
                    unsigned int m_pathEnd; 
                    unsigned int m_queryEnd; 
                } defaultActionURL; 
                struct String { 
                    struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                        struct StringImpl {} *m_ptr; 
                    } m_impl; 
                } title; 
                struct String { 
                    struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                        struct StringImpl {} *m_ptr; 
                    } m_impl; 
                } body; 
                struct String { 
                    struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                        struct StringImpl {} *m_ptr; 
                    } m_impl; 
                } iconURL; 
                struct String { 
                    struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                        struct StringImpl {} *m_ptr; 
                    } m_impl; 
                } tag; 
                struct String { 
                    struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                        struct StringImpl {} *m_ptr; 
                    } m_impl; 
                } language; 
                unsigned char direction; 
                struct String { 
                    struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                        struct StringImpl {} *m_ptr; 
                    } m_impl; 
                } originString; 
                struct URL { 
                    struct String { 
                        struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                            struct StringImpl {} *m_ptr; 
                        } m_impl; 
                    } m_string; 
                    unsigned int m_isValid : 1; 
                    unsigned int m_protocolIsInHTTPFamily : 1; 
                    unsigned int m_hasOpaquePath : 1; 
                    unsigned int m_portLength : 3; 
                    unsigned int m_schemeEnd : 26; 
                    unsigned int m_userStart; 
                    unsigned int m_userEnd; 
                    unsigned int m_passwordEnd; 
                    unsigned int m_hostEnd; 
                    unsigned int m_pathAfterLastSlash; 
                    unsigned int m_pathEnd; 
                    unsigned int m_queryEnd; 
                } serviceWorkerRegistrationURL; 
                struct UUID { 
                    /* Warning: Unrecognized filer type: 'T' using 'void*' */ void*m_data; 
                } notificationID; 
                struct optional<WebCore::ProcessQualified<WTF::UUID>> { 
                    union { 
                        BOOL __null_state_; 
                        struct ProcessQualified<WTF::UUID> { 
                            struct UUID { 
                                void*m_data; 
                            } m_object; 
                            struct ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long, WTF::SupportsObjectIdentifierNullState::Yes> { 
                                unsigned long long m_identifier; 
                            } m_processIdentifier; 
                        } __val_; 
                    } ; 
                    bool __engaged_; 
                } contextIdentifier; 
                struct SessionID { 
                    unsigned long long m_identifier; 
                } sourceSession; 
                struct MonotonicTime { 
                    double m_value; 
                } creationTime; 
                struct Vector<unsigned char, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { 
                    char *m_buffer; 
                    unsigned int m_capacity; 
                    unsigned int m_size; 
                } data; 
                struct optional<bool> { 
                    union { 
                        BOOL __null_state_; 
                        bool __val_; 
                    } ; 
                    bool __engaged_; 
                } silent; 
            } __val_; 
        } ; 
        bool __engaged_; 
    }  _coreNotificationData;
    NSString * _pushPartition;
    NSString * _type;
    NSNumber * _version;
}

@property (nonatomic) /* Warning: unhandled struct encoding: '{optional<WebCore::NotificationData>=(?=c{NotificationData={URL={String={RefPtr<WTF::StringImpl' */ struct  coreNotificationData; /* unknown property attribute:  WTF::FastMalloc>=*II}{optional<bool>=(?=cB)B}})B} */
@property (nonatomic) NSString *pushPartition;
@property (nonatomic) NSString *type;
@property (nonatomic) NSNumber *version;

+ (id)_webPushActionWithNotificationResponse:(id)arg1;
+ (id)webPushActionWithDictionary:(id)arg1;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_nameForBackgroundTaskAndLogging;
- (unsigned long long)beginBackgroundTaskForHandling;
- (struct optional<WebCore::NotificationData> { union { BOOL x_1_1_1; struct NotificationData { struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl {} *x_1_5_1; } x_1_4_1; } x_1_3_1; unsigned int x_1_3_2 : 1; unsigned int x_1_3_3 : 1; unsigned int x_1_3_4 : 1; unsigned int x_1_3_5 : 3; unsigned int x_1_3_6 : 26; unsigned int x_1_3_7; unsigned int x_1_3_8; unsigned int x_1_3_9; unsigned int x_1_3_10; unsigned int x_1_3_11; unsigned int x_1_3_12; unsigned int x_1_3_13; } x_2_2_1; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl {} *x_1_4_1; } x_2_3_1; } x_2_2_2; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl {} *x_1_4_1; } x_3_3_1; } x_2_2_3; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl {} *x_1_4_1; } x_4_3_1; } x_2_2_4; } x_1_1_2; } x1; })coreNotificationData;
- (id)pushPartition;
- (void)setCoreNotificationData:(struct optional<WebCore::NotificationData> { union { BOOL x_1_1_1; struct NotificationData { struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl {} *x_1_5_1; } x_1_4_1; } x_1_3_1; unsigned int x_1_3_2 : 1; unsigned int x_1_3_3 : 1; unsigned int x_1_3_4 : 1; unsigned int x_1_3_5 : 3; unsigned int x_1_3_6 : 26; unsigned int x_1_3_7; unsigned int x_1_3_8; unsigned int x_1_3_9; unsigned int x_1_3_10; unsigned int x_1_3_11; unsigned int x_1_3_12; unsigned int x_1_3_13; } x_2_2_1; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl {} *x_1_4_1; } x_2_3_1; } x_2_2_2; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl {} *x_1_4_1; } x_3_3_1; } x_2_2_3; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl {} *x_1_4_1; } x_4_3_1; } x_2_2_4; } x_1_1_2; } x1; })arg1;
- (void)setPushPartition:(id)arg1;
- (void)setType:(id)arg1;
- (void)setVersion:(id)arg1;
- (id)type;
- (id)version;

@end
