/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ANSTKit.framework/ANSTKit
 */

@interface _ANSTISPInferencePostprocessorV1 : ANSTISPInferencePostprocessor {
    ANSTISPInferenceConfiguration * _configuration;
    struct AcANSTContext { } * _det;
    struct { 
        struct { 
            unsigned int height; 
            unsigned int width; 
            unsigned int channels; 
            int pixelFormat; 
            float scale; 
            float bias; 
        } netInputBufferDesc[2]; 
        struct { 
            unsigned int height; 
            unsigned int width; 
            unsigned int channels; 
            int pixelFormat; 
            float scale; 
            float bias; 
        } netOutputBufferDescs[25]; 
        BOOL netInputNames[2][64]; 
        BOOL netOutputNames[25][64]; 
        unsigned int maxResultCount; 
        unsigned int maxAssoCount; 
        unsigned int maxTrackCount; 
        float undetOverlapThreshold; 
        float oldObjOverlapThreshold; 
        float oldCrossClassObjOverlapThreshold; 
    }  _detParams;
    struct { 
        unsigned char data[202416]; 
    }  _detState;
    NSString * _inferenceInputImageDescriptorName;
    unsigned long long  _inferenceInputImageHeight;
    unsigned long long  _inferenceInputImageWidth;
    NSArray * _inferenceOutputTensorDescriptorNames;
    ANSTISPAlgorithmResult * _result;
}

+ (id)_semanticCategories;
+ (id)_semanticSegmentationMaskDescriptorNameOfCategory:(id)arg1;
+ (id)_semanticSegmentationMaskDescriptorsForInferenceDescriptor:(id)arg1 maskPixelFormatType:(unsigned int)arg2;

- (void).cxx_destruct;
- (bool)_getInputImageAcOrientation:(int*)arg1 withError:(id*)arg2;
- (bool)_populateAcANSTNetOutput:(int)arg1 intoSegmanticSegmentationMask:(id)arg2 withError:(id*)arg3;
- (void)dealloc;
- (id)initWithInferenceDescriptor:(id)arg1 error:(id*)arg2;
- (id)initWithInferenceInputDescriptors:(id)arg1 inferenceOutputDescriptors:(id)arg2 processedOutputDescriptors:(id)arg3 error:(id*)arg4;
- (bool)processWithError:(id*)arg1;
- (id)semanticSegmentationMaskDescriptorOfCategory:(id)arg1;
- (float)smudgeConfidence;
- (id)trackedObjectsOfCategory:(id)arg1;

@end
