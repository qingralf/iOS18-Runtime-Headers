/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AVConference.framework/AVConference
 */

@interface VCAudioHALPluginDevice : ASDAudioDevice <VCAudioHALPluginCaptureSource> {
    double  _clockFrequency;
    unsigned long long  _currentSeed;
    bool  _isRunning;
    VCAudioHALPluginMockAudioInject * _mockAudioInject;
    VCAudioHALPluginStream * _outputStream;
    unsigned int  _samplesPerFrame;
    NSObject<OS_dispatch_queue> * _timeQueue;
    struct VCAudioHALPluginTimestamp { 
        unsigned long long numberOfSlots; 
        struct vector<tagVCAudioHALPluginTimestampInfo, std::allocator<tagVCAudioHALPluginTimestampInfo> > { 
            struct tagVCAudioHALPluginTimestampInfo {} *__begin_; 
            struct tagVCAudioHALPluginTimestampInfo {} *__end_; 
            struct __compressed_pair<tagVCAudioHALPluginTimestampInfo *, std::allocator<tagVCAudioHALPluginTimestampInfo> > { 
                struct tagVCAudioHALPluginTimestampInfo {} *__value_; 
            } __end_cap_; 
        } timestamps; 
        struct atomic<unsigned long> { 
            struct __cxx_atomic_impl<unsigned long, std::__cxx_atomic_base_impl<unsigned long> > { 
                _Atomic unsigned long long __a_value; 
            } __a_; 
        } timestampIndex; 
        struct tagVCAudioHALPluginTimestampInfo { 
            double sampleTime; 
            unsigned long long hostTime; 
            unsigned long long seed; 
        } initLocklessTimestampInfo; 
    }  _timestamp;
    id /* block */  _willDoReadInputBlock;
    id /* block */  _willDoWriteMixBlock;
    id /* block */  _zeroTimestampBlock;
}

@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (id)sharedAudioHALPluginNullDevice;
+ (id)sharedAudioServerDriverPlugin;

- (id).cxx_construct;
- (void).cxx_destruct;
- (unsigned int)calculateIOBufferFrameSize:(unsigned int)arg1;
- (bool)changeSamplingRate:(double)arg1;
- (void)configureRemoteDeviceInfo:(id)arg1;
- (void)dealloc;
- (bool)getProperty:(const struct AudioObjectPropertyAddress { unsigned int x1; unsigned int x2; unsigned int x3; }*)arg1 withQualifierSize:(unsigned int)arg2 qualifierData:(const void*)arg3 dataSize:(unsigned int*)arg4 andData:(void*)arg5 forClient:(int)arg6;
- (id /* block */)getZeroTimestampBlock;
- (id)initWithConfig:(struct tagVCAudioHALPluginConfiguration { struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; unsigned int x_1_2_6; unsigned int x_1_2_7; unsigned int x_1_2_8; unsigned int x_1_2_9; } x_1_1_1; unsigned int x_1_1_2; } x1; void *x2; int (*x3)(); id x4; }*)arg1;
- (void)initialZeroTimestamp;
- (void)invalidate;
- (int)performStartIO;
- (int)performStopIO;
- (bool)start;
- (bool)stop;
- (void)updateZeroTimestamp:(unsigned long long)arg1;
- (id /* block */)willDoReadInputBlock;
- (id /* block */)willDoWriteMixBlock;

@end
