/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AVFCapture.framework/AVFCapture
 */

@interface AVCaptureSessionInternal : NSObject {
    NSMutableArray * _devicesObservingVideoZoomFactor;
    bool  authorizedToUseCameraInMultipleForegroundAppLayout;
    AVCaptureSystemStyleSlider * automaticallyAddedSystemParameterSlider;
    AVCaptureSystemStylePicker * automaticallyAddedSystemStylePicker;
    bool  automaticallyConfiguresApplicationAudioSession;
    bool  automaticallyConfiguresCaptureDeviceForWideColor;
    int  beginConfigRefCount;
    NSObject<OS_dispatch_semaphore> * captureServerConnectionDiedSemaphore;
    bool  checkIfFileAlreadyExistForMFO;
    NSObject<OS_dispatch_queue> * clientControlsQueue;
    bool  clientIsVOIP;
    NSMutableArray * committedAVCaptureSessionConfigurations;
    bool  configuresApplicationAudioSessionToMixWithOthers;
    NSMutableArray * connections;
    int  continuityCameraClientDeviceClass;
    bool  continuityCameraIsWired;
    NSMutableArray * controls;
    AVCaptureControlsOverlay * controlsOverlay;
    NSMutableArray * devicesToResetVideoZoomFactorAndMinMaxFrameDurations;
    struct OpaqueFigCaptureSession { } * figCaptureSession;
    bool  figCaptureSessionRunning;
    bool  figCaptureSessionStarted;
    struct OpaqueFigReentrantMutex { } * figCaptureSourceConfigChangeCacheMutex;
    int  graphRebuildFromCommitConfigRefCount;
    long long  graphRebuildSignalCount;
    struct ct_green_tea_logger_s { } * greenTeaLogger;
    float  hardwareCost;
    NSMutableArray * inputs;
    bool  interrupted;
    AVCaptureSessionConfiguration * liveAVCaptureSessionConfiguration;
    NSString * mediaEnvironment;
    bool  notifiesOnMainThread;
    NSMutableArray * outputs;
    NSMutableArray * recordingMovieFileOutputs;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  recordingMovieFileOutputsLock;
    AVRunLoopCondition * runLoopCondition;
    bool  running;
    id  serverConnectionDiedNotificationToken;
    FigCaptureSessionConfiguration * sessionConfig;
    NSString * sessionPreset;
    NSString * smartStyleAlertBundleName;
    NSString * smartStyleAlertOptOutDescription;
    long long  smartStyleControlMode;
    bool  smartStyleInThirdPartyAppsEnabled;
    bool  smartStyleInVideoModeEnabled;
    bool  smartStyleRenderingEnabled;
    bool  smartStyleRenderingOptedOut;
    bool  smartStyleRenderingOptedOutDefault;
    bool  smartStyleRenderingSupported;
    AVCaptureSmartStyle * smartStyleSetByClient;
    NSError * stopError;
    bool  suppressVideoEffects;
    struct OpaqueCMClock { } * synchronizationClock;
    id  systemSmartStyleObserver;
    NSObject<OS_tcc_identity> * tccIdentity;
    NSThread * threadWhichBeganConfiguration;
    bool  usesApplicationAudioSession;
    bool  videoInputDeviceUsed;
    NSHashTable * videoPreviewLayers;
    bool  waitingForFigCaptureSessionConfigurationToBecomeLive;
    bool  waitingForFigCaptureSessionToStart;
    bool  waitingForFigCaptureSessionToStop;
    AVWeakReference * weakReference;
    AVWeakReference * weakReferenceControlsDelegate;
    bool  xctestAuthorizedToStealDevice;
}

@end
