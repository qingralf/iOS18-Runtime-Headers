/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AXMediaUtilities.framework/AXMediaUtilities
 */

@interface AXMDataSonifier : NSObject {
    AVAudioSourceNode * _audioSourceNode;
    AVAudioUnitEffect * _compressor;
    AXMLiveContinuousSynth * _continuousScrubbingTone;
    AXMChartDescriptor * _currentChartDescriptor;
    double  _currentPlaybackTime;
    long long  _currentSeriesIndex;
    NSMutableOrderedSet * _dataCategories;
    int  _dataMode;
    AVAudioEngine * _engine;
    id /* block */  _function;
    int  _interpolationMode;
    bool  _isEndingScrubbing;
    bool  _isInLiveContinuousToneSession;
    NSTimer * _keyPitchUpdateTimer;
    NSArray * _keyPitches;
    AVAudioUnitEffect * _limiter;
    AXMAudioDataSource * _liveContinuousAudioDataSource;
    AXMLiveContinuousSynth * _liveContinuousDataTone;
    AXMAudioDataSourceMixer * _liveContinuousMixerDataSource;
    void * _liveTonePlaybackCallbackRenderingContext;
    AVAudioUnitEQ * _lowpassFilter;
    double  _maximumDiscreteToneLength;
    double  _maximumPlaybackFrequency;
    double  _maximumToneVolume;
    double  _minimumDiscreteToneLength;
    double  _minimumPlaybackFrequency;
    double  _minimumToneVolume;
    bool  _needsRenderSonification;
    bool  _paused;
    AVAudioUnitTimePitch * _pitchShifter;
    AXMAudioDataSource * _playbackChartDataAudioDataSource;
    AXMAudioDataSourceMixer * _playbackMixerDataSource;
    NSTimer * _playbackObserverUpdateTimer;
    NSPointerArray * _playbackObservers;
    unsigned long long  _playbackSampleCount;
    AXMAudioDataSource * _playbackTrendlineAudioDataSource;
    AVAudioPlayerNode * _player;
    bool  _playing;
    bool  _scrubbing;
    AXMAudioDataSource * _scrubbingContinuousAudioDataSource;
    AXMAudioDataSource * _scrubbingDiscreteAudioDataSource;
    void * _scrubbingDiscreteDataRenderingContext;
    AXMAudioDataSourceMixer * _scrubbingMixerDataSource;
    void * _scrubbingPlaybackCallbackRenderingContext;
    AXMAudioDataSource * _scrubbingTrendlineAudioDataSource;
    AVAudioEnvironmentNode * _stereoPanner;
    id /* block */  _trendlineFunction;
    AXMLiveContinuousSynth * _trendlineScrubbingTone;
    double  _userDefinedPlaybackDuration;
    bool  _usesBinauralPanning;
    double  audiographPlaybackDuration;
    AVAudioPCMBuffer * buffer;
    double  maxFrequency;
    double  minFrequency;
}

@property (nonatomic, retain) AVAudioSourceNode *audioSourceNode;
@property (nonatomic, retain) AVAudioUnitEffect *compressor;
@property (nonatomic, readonly) AXMLiveContinuousSynth *continuousScrubbingTone;
@property (nonatomic, retain) AXMChartDescriptor *currentChartDescriptor;
@property (nonatomic, readonly) double currentPlaybackPosition;
@property (nonatomic) double currentPlaybackTime;
@property (nonatomic, readonly) AXMDataSeriesDescriptor *currentSeries;
@property (nonatomic) long long currentSeriesIndex;
@property (nonatomic, readonly) NSMutableOrderedSet *dataCategories;
@property (nonatomic, readonly) int dataMode;
@property (nonatomic, retain) AVAudioEngine *engine;
@property (nonatomic, readonly) id /* block */ function;
@property (nonatomic, readonly) int interpolationMode;
@property (nonatomic, readonly) bool isEndingScrubbing;
@property (nonatomic, readonly) bool isInLiveContinuousToneSession;
@property (nonatomic, readonly) bool isPaused;
@property (nonatomic, readonly) bool isPlaying;
@property (nonatomic, readonly) bool isScrubbing;
@property (nonatomic, retain) NSTimer *keyPitchUpdateTimer;
@property (nonatomic, retain) NSArray *keyPitches;
@property (nonatomic, retain) AVAudioUnitEffect *limiter;
@property (nonatomic, retain) AXMAudioDataSource *liveContinuousAudioDataSource;
@property (nonatomic, readonly) AXMLiveContinuousSynth *liveContinuousDataTone;
@property (nonatomic, retain) AXMAudioDataSourceMixer *liveContinuousMixerDataSource;
@property (nonatomic, readonly) void*liveTonePlaybackCallbackRenderingContext;
@property (nonatomic, retain) AVAudioUnitEQ *lowpassFilter;
@property (nonatomic) double masterVolume;
@property (nonatomic) double maximumDiscreteToneLength;
@property (nonatomic) double maximumPlaybackFrequency;
@property (nonatomic) double maximumToneVolume;
@property (nonatomic) double minimumDiscreteToneLength;
@property (nonatomic) double minimumPlaybackFrequency;
@property (nonatomic) double minimumToneVolume;
@property (nonatomic) bool needsRenderSonification;
@property (nonatomic, retain) AVAudioUnitTimePitch *pitchShifter;
@property (nonatomic, retain) AXMAudioDataSource *playbackChartDataAudioDataSource;
@property (nonatomic) double playbackDuration;
@property (nonatomic, retain) AXMAudioDataSourceMixer *playbackMixerDataSource;
@property (nonatomic, retain) NSTimer *playbackObserverUpdateTimer;
@property (nonatomic, retain) NSPointerArray *playbackObservers;
@property (nonatomic, readonly) unsigned long long playbackSampleCount;
@property (nonatomic, retain) AXMAudioDataSource *playbackTrendlineAudioDataSource;
@property (nonatomic, retain) AVAudioPlayerNode *player;
@property (nonatomic, retain) AXMAudioDataSource *scrubbingContinuousAudioDataSource;
@property (nonatomic, retain) AXMAudioDataSource *scrubbingDiscreteAudioDataSource;
@property (nonatomic, readonly) void*scrubbingDiscreteDataRenderingContext;
@property (nonatomic, retain) AXMAudioDataSourceMixer *scrubbingMixerDataSource;
@property (nonatomic, readonly) void*scrubbingPlaybackCallbackRenderingContext;
@property (nonatomic, retain) AXMAudioDataSource *scrubbingTrendlineAudioDataSource;
@property (nonatomic, readonly) bool shouldPlayInStereo;
@property (nonatomic, retain) AVAudioEnvironmentNode *stereoPanner;
@property (nonatomic, copy) id /* block */ trendlineFunction;
@property (nonatomic, readonly) AXMLiveContinuousSynth *trendlineScrubbingTone;
@property (nonatomic) bool usesBinauralPanning;

+ (id)sharedInstance;

- (void).cxx_destruct;
- (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })_audioFormat;
- (double)_centsForFrequency:(double)arg1;
- (void)_initializeAXMAudioDataSources;
- (void)_initializeAudioChain;
- (void)_initializeAudioPlayerNode;
- (void)_initializeAudioSourceNode;
- (void)_initializeCompressor;
- (void)_initializeLimiter;
- (void)_initializeLiveToneDataSource;
- (void)_initializeLowpassFilter;
- (void)_initializePitchShifter;
- (void)_initializeStereoPanner;
- (id)_keyPitchesForContinuousSeries:(id)arg1;
- (id)_newContinuousToneEnvelope;
- (double)_normalizedKeyPitchForFrequency:(double)arg1;
- (void)_peakNormalizeBuffer:(void*)arg1 length:(unsigned long long)arg2 level:(double)arg3;
- (void)_regenerateTimeEncodingValuesForDataPoints;
- (void)_renderContinuousAudioForMultiSeries:(id)arg1;
- (void)_renderDiscreteAudioForSeries:(id)arg1;
- (void)_renderSeries:(id)arg1;
- (void)_setPanning:(float)arg1;
- (void)_setupMultiSeriesAudioChain;
- (void)_setupSingleSeriesAudioChain;
- (void)addPlaybackObserver:(id)arg1;
- (id)audioSourceNode;
- (void)beginContinuousPlayback;
- (void)beginLiveContinuousToneSession;
- (void)beginScrubbing;
- (id)compressor;
- (bool)containsMultipleSeries;
- (id)continuousScrubbingTone;
- (id)currentChartDescriptor;
- (double)currentContinuousPlaybackPosition;
- (double)currentDiscretePlaybackPosition;
- (double)currentPlaybackPosition;
- (double)currentPlaybackTime;
- (id)currentSeries;
- (long long)currentSeriesIndex;
- (id)dataCategories;
- (int)dataMode;
- (void)dealloc;
- (double)durationForDurationEncodingValue:(double)arg1;
- (void)endLiveContinuousToneSession;
- (void)endScrubbing;
- (id)engine;
- (double)frequencyForPitchEncodingValue:(double)arg1;
- (id /* block */)function;
- (id)init;
- (double)interpolatedPitchValueForNormalizedTimePosition:(double)arg1 inSeries:(id)arg2;
- (int)interpolationMode;
- (bool)isEndingScrubbing;
- (bool)isInLiveContinuousToneSession;
- (bool)isPaused;
- (bool)isPlaying;
- (bool)isScrubbing;
- (id)keyPitchForTime:(double)arg1;
- (id)keyPitchUpdateTimer;
- (id)keyPitches;
- (id)limiter;
- (id)liveContinuousAudioDataSource;
- (id)liveContinuousDataTone;
- (id)liveContinuousMixerDataSource;
- (void*)liveTonePlaybackCallbackRenderingContext;
- (float)lowpassCutoff;
- (id)lowpassFilter;
- (double)masterVolume;
- (double)maximumDiscreteToneLength;
- (double)maximumPlaybackFrequency;
- (double)maximumToneVolume;
- (double)minimumDiscreteToneLength;
- (double)minimumPlaybackFrequency;
- (double)minimumToneVolume;
- (bool)needsRenderSonification;
- (double)normalizedTimeEncodingValueForValue:(id)arg1;
- (double)normalizedValueForValue:(double)arg1 min:(double)arg2 max:(double)arg3;
- (void)pause;
- (id)pitchShifter;
- (void)play;
- (bool)playAudioPlayer;
- (void)playFrequencyAtTime:(double)arg1;
- (id)playbackChartDataAudioDataSource;
- (double)playbackDuration;
- (id)playbackMixerDataSource;
- (id)playbackObserverUpdateTimer;
- (id)playbackObservers;
- (unsigned long long)playbackSampleCount;
- (id)playbackTrendlineAudioDataSource;
- (id)player;
- (void)removePlaybackObserver:(id)arg1;
- (void)renderSonification;
- (unsigned long long)sampleIndexForTimeOffset:(double)arg1;
- (void)scrubToPlaybackFrame:(unsigned long long)arg1;
- (id)scrubbingContinuousAudioDataSource;
- (id)scrubbingDiscreteAudioDataSource;
- (void*)scrubbingDiscreteDataRenderingContext;
- (id)scrubbingMixerDataSource;
- (void*)scrubbingPlaybackCallbackRenderingContext;
- (id)scrubbingTrendlineAudioDataSource;
- (bool)series:(id)arg1 hasContinuousPitchDataForTimePosition:(double)arg2;
- (void)setAudioSourceNode:(id)arg1;
- (void)setCompressor:(id)arg1;
- (void)setContinuousPlaybackPosition:(double)arg1;
- (void)setCurrentChartDescriptor:(id)arg1;
- (void)setCurrentPlaybackTime:(double)arg1;
- (void)setCurrentSeriesIndex:(long long)arg1;
- (void)setDiscretePlaybackPosition:(double)arg1;
- (void)setEngine:(id)arg1;
- (void)setKeyPitchUpdateTimer:(id)arg1;
- (void)setKeyPitches:(id)arg1;
- (void)setLimiter:(id)arg1;
- (void)setLiveContinuousAudioDataSource:(id)arg1;
- (void)setLiveContinuousMixerDataSource:(id)arg1;
- (void)setLiveContinuousToneNormalizedFrequency:(double)arg1;
- (void)setLowpassCutoff:(float)arg1;
- (void)setLowpassFilter:(id)arg1;
- (void)setMasterVolume:(double)arg1;
- (void)setMasterVolume:(double)arg1 fadeDuration:(double)arg2;
- (void)setMaximumDiscreteToneLength:(double)arg1;
- (void)setMaximumPlaybackFrequency:(double)arg1;
- (void)setMaximumToneVolume:(double)arg1;
- (void)setMinimumDiscreteToneLength:(double)arg1;
- (void)setMinimumPlaybackFrequency:(double)arg1;
- (void)setMinimumToneVolume:(double)arg1;
- (void)setNeedsRenderSonification:(bool)arg1;
- (void)setPitchShifter:(id)arg1;
- (void)setPlaybackChartDataAudioDataSource:(id)arg1;
- (void)setPlaybackDuration:(double)arg1;
- (void)setPlaybackMixerDataSource:(id)arg1;
- (void)setPlaybackObserverUpdateTimer:(id)arg1;
- (void)setPlaybackObservers:(id)arg1;
- (void)setPlaybackPosition:(double)arg1;
- (void)setPlaybackTrendlineAudioDataSource:(id)arg1;
- (void)setPlayer:(id)arg1;
- (void)setScrubbingContinuousAudioDataSource:(id)arg1;
- (void)setScrubbingDiscreteAudioDataSource:(id)arg1;
- (void)setScrubbingMixerDataSource:(id)arg1;
- (void)setScrubbingTrendlineAudioDataSource:(id)arg1;
- (void)setStereoPanner:(id)arg1;
- (void)setTrendlineFunction:(id /* block */)arg1;
- (void)setUsesBinauralPanning:(bool)arg1;
- (bool)shouldIncrementToPitch:(double)arg1 by:(double)arg2;
- (bool)shouldPlayInStereo;
- (id)stereoPanner;
- (void)stopPlaying;
- (void)stopScrubbing;
- (double)timeOffsetForTimeEncodingValue:(id)arg1;
- (id /* block */)trendlineFunction;
- (id)trendlineScrubbingTone;
- (bool)usesBinauralPanning;
- (double)valueFromNormalizedValue:(double)arg1 min:(double)arg2 max:(double)arg3;
- (double)volumeForVolumeEncodingValue:(double)arg1;

@end
