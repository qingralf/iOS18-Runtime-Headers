/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AppleServiceToolkit.framework/AppleServiceToolkit
 */

@interface ASTSession : NSObject <ASTSessionSigningDelegate> {
    ASTSession * _activeSession;
    unsigned long long  _allowCellularSizeThreshold;
    ASTContext * _context;
    <ASTSessionDelegate> * _delegate;
    NSMutableArray * _destinations;
    ASTRepairSession * _repairSession;
    ASTRemoteServerSession * _serverSession;
    long long  _sessionEndReason;
    NSObject<OS_dispatch_group> * _sessionStartDispatchGroup;
    NSMutableSet * _startedSessions;
}

@property (nonatomic, retain) ASTSession *activeSession;
@property (nonatomic) unsigned long long allowCellularSizeThreshold;
@property (nonatomic, readonly, copy) ASTContext *context;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (nonatomic) <ASTSessionDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSMutableArray *destinations;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) ASTRepairSession *repairSession;
@property (nonatomic, retain) ASTRemoteServerSession *serverSession;
@property (nonatomic, readonly) long long sessionEndReason;
@property (nonatomic, retain) NSObject<OS_dispatch_group> *sessionStartDispatchGroup;
@property (nonatomic, readonly) bool shouldShowResults;
@property (nonatomic, retain) NSMutableSet *startedSessions;
@property (readonly) Class superclass;

+ (void)requestAsset:(id)arg1 completionHandler:(id /* block */)arg2;
+ (void)requestAsset:(id)arg1 serverURL:(id)arg2 endpoint:(id)arg3 completionHandler:(id /* block */)arg4;
+ (void)sessionExistsForIdentities:(id)arg1 ticketNumber:(id)arg2 completion:(id /* block */)arg3;
+ (void)sessionExistsForIdentities:(id)arg1 ticketNumber:(id)arg2 completionHandler:(id /* block */)arg3;
+ (void)sessionExistsForIdentities:(id)arg1 ticketNumber:(id)arg2 timeout:(double)arg3 completion:(id /* block */)arg4;
+ (void)sessionExistsForIdentities:(id)arg1 ticketNumber:(id)arg2 timeout:(double)arg3 completionHandler:(id /* block */)arg4;
+ (void)sessionExistsForSerialNumbers:(id)arg1 ticketNumber:(id)arg2 completionHandler:(id /* block */)arg3;
+ (void)sessionExistsForSerialNumbers:(id)arg1 ticketNumber:(id)arg2 timeout:(double)arg3 completionHandler:(id /* block */)arg4;
+ (void)sessionStatusForIdentities:(id)arg1 ticketNumber:(id)arg2 completionHandler:(id /* block */)arg3;
+ (void)sessionStatusForIdentities:(id)arg1 ticketNumber:(id)arg2 timeout:(double)arg3 completionHandler:(id /* block */)arg4;
+ (void)sessionStatusForIdentities:(id)arg1 ticketNumber:(id)arg2 timeout:(double)arg3 requestQueuedSuiteInfo:(bool)arg4 completionHandler:(id /* block */)arg5;
+ (id)sessionWithContext:(id)arg1;
+ (id)sessionWithIdentity:(id)arg1;
+ (id)sessionWithSerialNumber:(id)arg1;

- (void).cxx_destruct;
- (id)activeSession;
- (unsigned long long)allowCellularSizeThreshold;
- (void)archive;
- (id)context;
- (void)dealloc;
- (id)delegate;
- (id)destinationAssetDirectory;
- (id)destinationURLForAsset:(id)arg1;
- (id)destinations;
- (void)end;
- (void)fetchAsset:(id)arg1 sessionClass:(Class)arg2 serverURL:(id)arg3 endpoint:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)idle;
- (id)initWithContext:(id)arg1;
- (id)initWithIdentity:(id)arg1;
- (id)initWithSerialNumber:(id)arg1;
- (void)invalidate;
- (id)readContentsOfFileHandle:(id)arg1 error:(id*)arg2;
- (void)removeDownloadedAssets;
- (id)repairSession;
- (void)requestAsset:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)requestAsset:(id)arg1 serverURL:(id)arg2 endpoint:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)requestSuiteStart:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)requestSuiteSummary:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)requestSuitesAvailableWithCompletionHandler:(id /* block */)arg1;
- (bool)sendAuthInfoResult:(id)arg1 error:(id*)arg2;
- (bool)sendProfileResult:(id)arg1 error:(id*)arg2;
- (bool)sendTestResult:(id)arg1 error:(id*)arg2;
- (id)serverSession;
- (void)session:(id)arg1 cancelTest:(id)arg2;
- (void)session:(id)arg1 didEndWithError:(id)arg2;
- (void)session:(id)arg1 didPauseWithError:(id)arg2;
- (void)session:(id)arg1 generateAuthInfoWithNonce:(id)arg2;
- (void)session:(id)arg1 profile:(id)arg2 filteredByComponents:(id)arg3;
- (void)session:(id)arg1 signFile:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)session:(id)arg1 signPayload:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)session:(id)arg1 startTest:(id)arg2 parameters:(id)arg3 testResult:(id)arg4;
- (void)sessionDidResume:(id)arg1;
- (void)sessionDidStart:(id)arg1;
- (long long)sessionEndReason;
- (id)sessionStartDispatchGroup;
- (void)setActiveSession:(id)arg1;
- (void)setAllowCellularSizeThreshold:(unsigned long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDestinations:(id)arg1;
- (void)setRepairSession:(id)arg1;
- (void)setServerSession:(id)arg1;
- (void)setSessionStartDispatchGroup:(id)arg1;
- (void)setStartedSessions:(id)arg1;
- (bool)shouldEvictCachedAssetForName:(id)arg1;
- (bool)shouldShowResults;
- (void)start;
- (void)startWithMode:(int)arg1;
- (id)startedSessions;
- (void)updateAction:(id)arg1;

@end
