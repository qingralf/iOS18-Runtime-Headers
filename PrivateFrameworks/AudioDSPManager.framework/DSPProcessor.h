/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AudioDSPManager.framework/AudioDSPManager
 */

@interface DSPProcessor : NSObject <HAL_DSP_IOProcessor, HAL_DSP_PropertySet> {
    struct optional<adm::ConfigurationChangeRequest> { 
        union { 
            BOOL __null_state_; 
            struct ConfigurationChangeRequest { 
                bool mIsActivation; 
                struct IOContextDescription { 
                    struct set<std::string, std::less<std::string>, std::allocator<std::string>> { 
                        struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> { 
                            void *__begin_node_; 
                            struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> { 
                                struct __tree_end_node<std::__tree_node_base<void *> *> { 
                                    void *__left_; 
                                } __value_; 
                            } __pair1_; 
                            struct __compressed_pair<unsigned long, std::less<std::string>> { 
                                unsigned long long __value_; 
                            } __pair3_; 
                        } __tree_; 
                    } mSemantics; 
                    struct optional<CA::StreamDescription> { 
                        union { 
                            BOOL __null_state_; 
                            struct StreamDescription { 
                                double mSampleRate; 
                                unsigned int mFormatID; 
                                unsigned int mFormatFlags; 
                                unsigned int mBytesPerPacket; 
                                unsigned int mFramesPerPacket; 
                                unsigned int mBytesPerFrame; 
                                unsigned int mChannelsPerFrame; 
                                unsigned int mBitsPerChannel; 
                                unsigned int mReserved; 
                            } __val_; 
                        } ; 
                        bool __engaged_; 
                    } mRequestedInputFormat; 
                    struct optional<CA::StreamDescription> { 
                        union { 
                            BOOL __null_state_; 
                            struct StreamDescription { 
                                double mSampleRate; 
                                unsigned int mFormatID; 
                                unsigned int mFormatFlags; 
                                unsigned int mBytesPerPacket; 
                                unsigned int mFramesPerPacket; 
                                unsigned int mBytesPerFrame; 
                                unsigned int mChannelsPerFrame; 
                                unsigned int mBitsPerChannel; 
                                unsigned int mReserved; 
                            } __val_; 
                        } ; 
                        bool __engaged_; 
                    } mRequestedOutputFormat; 
                    struct optional<CA::ChannelLayout> { 
                        union { 
                            BOOL __null_state_; 
                            struct ChannelLayout { 
                                struct vector<char, std::allocator<char>> { 
                                    char *__begin_; 
                                    char *__end_; 
                                    struct __compressed_pair<char *, std::allocator<char>> { 
                                        char *__value_; 
                                    } __end_cap_; 
                                } mStorage; 
                            } __val_; 
                        } ; 
                        bool __engaged_; 
                    } mRequestedOutputChannelLayout; 
                    struct optional<unsigned int> { 
                        union { 
                            BOOL __null_state_; 
                            unsigned int __val_; 
                        } ; 
                        bool __engaged_; 
                    } mRequestedBufferFrameSize; 
                    struct vector<std::string, std::allocator<std::string>> { 
                        void *__begin_; 
                        void *__end_; 
                        struct __compressed_pair<std::string *, std::allocator<std::string>> { 
                            void *__value_; 
                        } __end_cap_; 
                    } mStreamIDs; 
                } mIOContextDescription; 
                struct vector<adm::DeviceDescription, std::allocator<adm::DeviceDescription>> { 
                    struct DeviceDescription {} *__begin_; 
                    struct DeviceDescription {} *__end_; 
                    struct __compressed_pair<adm::DeviceDescription *, std::allocator<adm::DeviceDescription>> { 
                        struct DeviceDescription {} *__value_; 
                    } __end_cap_; 
                } mDeviceDescriptions; 
            } __val_; 
        } ; 
        bool __engaged_; 
    }  _activeChangeRequest;
    struct optional<std::vector<adm::DeviceConfiguration>> { 
        union { 
            BOOL __null_state_; 
            struct vector<adm::DeviceConfiguration, std::allocator<adm::DeviceConfiguration>> { 
                struct DeviceConfiguration {} *__begin_; 
                struct DeviceConfiguration {} *__end_; 
                struct __compressed_pair<adm::DeviceConfiguration *, std::allocator<adm::DeviceConfiguration>> { 
                    struct DeviceConfiguration {} *__value_; 
                } __end_cap_; 
            } __val_; 
        } ; 
        bool __engaged_; 
    }  _activeDeviceConfigChanges;
    struct unique_ptr<adm::CustomPropertyManager, std::default_delete<adm::CustomPropertyManager>> { 
        struct __compressed_pair<adm::CustomPropertyManager *, std::default_delete<adm::CustomPropertyManager>> { 
            struct CustomPropertyManager {} *__value_; 
        } __ptr_; 
    }  _customPropertyManager;
    struct unique_ptr<adm::graph::GraphBuilder, std::default_delete<adm::graph::GraphBuilder>> { 
        struct __compressed_pair<adm::graph::GraphBuilder *, std::default_delete<adm::graph::GraphBuilder>> { 
            struct GraphBuilder {} *__value_; 
        } __ptr_; 
    }  _graphBuilder;
    bool  _hasRegisteredUIOrientation;
    <HAL_DSP_HostCallbacks> * _hostCallback;
    struct HostDescription { 
        struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
            struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                struct __rep { 
                    union { 
                        struct __short { 
                            BOOL __data_[23]; 
                            unsigned char __padding_[0]; 
                            unsigned int __size_ : 7; 
                            unsigned int __is_long_ : 1; 
                        } __s; 
                        struct __long { 
                            char *__data_; 
                            unsigned long long __size_; 
                            unsigned int __cap_ : 63; 
                            unsigned int __is_long_ : 1; 
                        } __l; 
                        struct __raw { 
                            unsigned long long __words[3]; 
                        } __r; 
                    } ; 
                } __value_; 
            } __r_; 
        } mBundleID; 
        struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
            struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                struct __rep { 
                    union { 
                        struct __short { 
                            BOOL __data_[23]; 
                            unsigned char __padding_[0]; 
                            unsigned int __size_ : 7; 
                            unsigned int __is_long_ : 1; 
                        } __s; 
                        struct __long { 
                            char *__data_; 
                            unsigned long long __size_; 
                            unsigned int __cap_ : 63; 
                            unsigned int __is_long_ : 1; 
                        } __l; 
                        struct __raw { 
                            unsigned long long __words[3]; 
                        } __r; 
                    } ; 
                } __value_; 
            } __r_; 
        } mIOContextUID; 
    }  _hostDescription;
    struct unique_ptr<adm::graph::NodeManager, std::default_delete<adm::graph::NodeManager>> { 
        struct __compressed_pair<adm::graph::NodeManager *, std::default_delete<adm::graph::NodeManager>> { 
            struct NodeManager {} *__value_; 
        } __ptr_; 
    }  _nodeManager;
    struct optional<adm::ConfigurationChangeRequest> { 
        union { 
            BOOL __null_state_; 
            struct ConfigurationChangeRequest { 
                bool mIsActivation; 
                struct IOContextDescription { 
                    struct set<std::string, std::less<std::string>, std::allocator<std::string>> { 
                        struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> { 
                            void *__begin_node_; 
                            struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> { 
                                struct __tree_end_node<std::__tree_node_base<void *> *> { 
                                    void *__left_; 
                                } __value_; 
                            } __pair1_; 
                            struct __compressed_pair<unsigned long, std::less<std::string>> { 
                                unsigned long long __value_; 
                            } __pair3_; 
                        } __tree_; 
                    } mSemantics; 
                    struct optional<CA::StreamDescription> { 
                        union { 
                            BOOL __null_state_; 
                            struct StreamDescription { 
                                double mSampleRate; 
                                unsigned int mFormatID; 
                                unsigned int mFormatFlags; 
                                unsigned int mBytesPerPacket; 
                                unsigned int mFramesPerPacket; 
                                unsigned int mBytesPerFrame; 
                                unsigned int mChannelsPerFrame; 
                                unsigned int mBitsPerChannel; 
                                unsigned int mReserved; 
                            } __val_; 
                        } ; 
                        bool __engaged_; 
                    } mRequestedInputFormat; 
                    struct optional<CA::StreamDescription> { 
                        union { 
                            BOOL __null_state_; 
                            struct StreamDescription { 
                                double mSampleRate; 
                                unsigned int mFormatID; 
                                unsigned int mFormatFlags; 
                                unsigned int mBytesPerPacket; 
                                unsigned int mFramesPerPacket; 
                                unsigned int mBytesPerFrame; 
                                unsigned int mChannelsPerFrame; 
                                unsigned int mBitsPerChannel; 
                                unsigned int mReserved; 
                            } __val_; 
                        } ; 
                        bool __engaged_; 
                    } mRequestedOutputFormat; 
                    struct optional<CA::ChannelLayout> { 
                        union { 
                            BOOL __null_state_; 
                            struct ChannelLayout { 
                                struct vector<char, std::allocator<char>> { 
                                    char *__begin_; 
                                    char *__end_; 
                                    struct __compressed_pair<char *, std::allocator<char>> { 
                                        char *__value_; 
                                    } __end_cap_; 
                                } mStorage; 
                            } __val_; 
                        } ; 
                        bool __engaged_; 
                    } mRequestedOutputChannelLayout; 
                    struct optional<unsigned int> { 
                        union { 
                            BOOL __null_state_; 
                            unsigned int __val_; 
                        } ; 
                        bool __engaged_; 
                    } mRequestedBufferFrameSize; 
                    struct vector<std::string, std::allocator<std::string>> { 
                        void *__begin_; 
                        void *__end_; 
                        struct __compressed_pair<std::string *, std::allocator<std::string>> { 
                            void *__value_; 
                        } __end_cap_; 
                    } mStreamIDs; 
                } mIOContextDescription; 
                struct vector<adm::DeviceDescription, std::allocator<adm::DeviceDescription>> { 
                    struct DeviceDescription {} *__begin_; 
                    struct DeviceDescription {} *__end_; 
                    struct __compressed_pair<adm::DeviceDescription *, std::allocator<adm::DeviceDescription>> { 
                        struct DeviceDescription {} *__value_; 
                    } __end_cap_; 
                } mDeviceDescriptions; 
            } __val_; 
        } ; 
        bool __engaged_; 
    }  _pendingChangeRequest;
    struct optional<std::vector<adm::DeviceConfiguration>> { 
        union { 
            BOOL __null_state_; 
            struct vector<adm::DeviceConfiguration, std::allocator<adm::DeviceConfiguration>> { 
                struct DeviceConfiguration {} *__begin_; 
                struct DeviceConfiguration {} *__end_; 
                struct __compressed_pair<adm::DeviceConfiguration *, std::allocator<adm::DeviceConfiguration>> { 
                    struct DeviceConfiguration {} *__value_; 
                } __end_cap_; 
            } __val_; 
        } ; 
        bool __engaged_; 
    }  _pendingDeviceConfigChanges;
    struct SystemConfiguration { 
        struct ConfigurationContext { 
            int mOS; 
            struct path { 
                struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                        struct __rep { 
                            union { 
                                struct __short { 
                                    BOOL __data_[23]; 
                                    unsigned char __padding_[0]; 
                                    unsigned int __size_ : 7; 
                                    unsigned int __is_long_ : 1; 
                                } __s; 
                                struct __long { 
                                    char *__data_; 
                                    unsigned long long __size_; 
                                    unsigned int __cap_ : 63; 
                                    unsigned int __is_long_ : 1; 
                                } __l; 
                                struct __raw { 
                                    unsigned long long __words[3]; 
                                } __r; 
                            } ; 
                        } __value_; 
                    } __r_; 
                } __pn_; 
            } mResourcePath; 
            struct path { 
                struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                        struct __rep { 
                            union { 
                                struct __short { 
                                    BOOL __data_[23]; 
                                    unsigned char __padding_[0]; 
                                    unsigned int __size_ : 7; 
                                    unsigned int __is_long_ : 1; 
                                } __s; 
                                struct __long { 
                                    char *__data_; 
                                    unsigned long long __size_; 
                                    unsigned int __cap_ : 63; 
                                    unsigned int __is_long_ : 1; 
                                } __l; 
                                struct __raw { 
                                    unsigned long long __words[3]; 
                                } __r; 
                            } ; 
                        } __value_; 
                    } __r_; 
                } __pn_; 
            } mTuningBasePath; 
            struct optional<int> { 
                union { 
                    BOOL __null_state_; 
                    int __val_; 
                } ; 
                bool __engaged_; 
            } mAcousticID; 
            struct optional<std::string> { 
                union { 
                    BOOL __null_state_; 
                    struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                        struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                            struct __rep { 
                                union { 
                                    struct __short { 
                                        BOOL __data_[23]; 
                                        unsigned char __padding_[0]; 
                                        unsigned int __size_ : 7; 
                                        unsigned int __is_long_ : 1; 
                                    } __s; 
                                    struct __long { 
                                        char *__data_; 
                                        unsigned long long __size_; 
                                        unsigned int __cap_ : 63; 
                                        unsigned int __is_long_ : 1; 
                                    } __l; 
                                    struct __raw { 
                                        unsigned long long __words[3]; 
                                    } __r; 
                                } ; 
                            } __value_; 
                        } __r_; 
                    } __val_; 
                } ; 
                bool __engaged_; 
            } mMacBoardID; 
            struct optional<std::string> { 
                union { 
                    BOOL __null_state_; 
                    struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                        struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                            struct __rep { 
                                union { 
                                    struct __short { 
                                        BOOL __data_[23]; 
                                        unsigned char __padding_[0]; 
                                        unsigned int __size_ : 7; 
                                        unsigned int __is_long_ : 1; 
                                    } __s; 
                                    struct __long { 
                                        char *__data_; 
                                        unsigned long long __size_; 
                                        unsigned int __cap_ : 63; 
                                        unsigned int __is_long_ : 1; 
                                    } __l; 
                                    struct __raw { 
                                        unsigned long long __words[3]; 
                                    } __r; 
                                } ; 
                            } __value_; 
                        } __r_; 
                    } __val_; 
                } ; 
                bool __engaged_; 
            } mHwModelName; 
        } mContext; 
        struct optional<unsigned int> { 
            union { 
                BOOL __null_state_; 
                unsigned int __val_; 
            } ; 
            bool __engaged_; 
        } mLayoutID; 
        struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
            struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                struct __rep { 
                    union { 
                        struct __short { 
                            BOOL __data_[23]; 
                            unsigned char __padding_[0]; 
                            unsigned int __size_ : 7; 
                            unsigned int __is_long_ : 1; 
                        } __s; 
                        struct __long { 
                            char *__data_; 
                            unsigned long long __size_; 
                            unsigned int __cap_ : 63; 
                            unsigned int __is_long_ : 1; 
                        } __l; 
                        struct __raw { 
                            unsigned long long __words[3]; 
                        } __r; 
                    } ; 
                } __value_; 
            } __r_; 
        } mHWIdentifier; 
        struct path { 
            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                    struct __rep { 
                        union { 
                            struct __short { 
                                BOOL __data_[23]; 
                                unsigned char __padding_[0]; 
                                unsigned int __size_ : 7; 
                                unsigned int __is_long_ : 1; 
                            } __s; 
                            struct __long { 
                                char *__data_; 
                                unsigned long long __size_; 
                                unsigned int __cap_ : 63; 
                                unsigned int __is_long_ : 1; 
                            } __l; 
                            struct __raw { 
                                unsigned long long __words[3]; 
                            } __r; 
                        } ; 
                    } __value_; 
                } __r_; 
            } __pn_; 
        } mTuningRootDirectory; 
        struct unordered_map<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>>> { 
            struct __hash_table<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>>> { 
                struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *> *>>> { 
                    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *> *>>> { 
                        void **__value_; 
                        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *> *>> { 
                            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *> *>> { 
                                unsigned long long __value_; 
                            } __data_; 
                        } __value_; 
                    } __ptr_; 
                } __bucket_list_; 
                struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *>>> { 
                    struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *> { 
                        void *__next_; 
                    } __value_; 
                } __p1_; 
                struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, std::hash<std::string>, std::equal_to<std::string>>> { 
                    unsigned long long __value_; 
                } __p2_; 
                struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, std::equal_to<std::string>, std::hash<std::string>>> { 
                    float __value_; 
                } __p3_; 
            } __table_; 
        } mIOSemanticToDSPMap; 
    }  _systemConfiguration;
}

@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)adaptToConfigurationChange:(id)arg1 withCallbacks:(void*)arg2 error:(id*)arg3;
- (void)dealloc;
- (id)doNegotiateConfigurationChange:(id)arg1 simulate:(bool)arg2 error:(id*)arg3;
- (void)dumpDiagnosticsWithNSObject:(id)arg1 name:(id)arg2;
- (id)getHostedDSPPropertyAtAddress:(struct AudioObjectPropertyAddress { unsigned int x1; unsigned int x2; unsigned int x3; })arg1 withQualifierData:(id)arg2;
- (id)getHostedDSPPropertyInfoArray;
- (id)getProcessorPropertySet;
- (bool)hasHostedDSPPropertyAtAddress:(struct AudioObjectPropertyAddress { unsigned int x1; unsigned int x2; unsigned int x3; })arg1;
- (id)initWithHostDescription:(id)arg1 hostCallback:(id)arg2 systemConfiguration:(struct SystemConfiguration { struct ConfigurationContext { int x_1_1_1; struct path { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __short { BOOL x_1_7_1[23]; unsigned char x_1_7_2[0]; unsigned int x_1_7_3 : 7; unsigned int x_1_7_4 : 1; } x_1_6_1; struct __long { char *x_2_7_1; unsigned long long x_2_7_2; unsigned int x_2_7_3 : 63; unsigned int x_2_7_4 : 1; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_1_3_1; } x_2_2_1; } x_1_1_2; struct path { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __short { BOOL x_1_7_1[23]; unsigned char x_1_7_2[0]; unsigned int x_1_7_3 : 7; unsigned int x_1_7_4 : 1; } x_1_6_1; struct __long { char *x_2_7_1; unsigned long long x_2_7_2; unsigned int x_2_7_3 : 63; unsigned int x_2_7_4 : 1; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_1_3_1; } x_3_2_1; } x_1_1_3; } x1; })arg3;
- (id)negotiateConfigurationChange:(id)arg1 error:(id*)arg2;
- (void)registerExternalNotification:(const void*)arg1;
- (bool)setHostedDSPPropertyAtAddress:(struct AudioObjectPropertyAddress { unsigned int x1; unsigned int x2; unsigned int x3; })arg1 withData:(id)arg2 error:(id*)arg3;
- (bool)setHostedDSPPropertyAtAddress:(struct AudioObjectPropertyAddress { unsigned int x1; unsigned int x2; unsigned int x3; })arg1 withData:(id)arg2 withQualifier:(id)arg3 error:(id*)arg4;
- (id)simulateConfigurationChange:(id)arg1 error:(id*)arg2;
- (void)unregisterExternalNotification;
- (bool)validateAdaptConfigurationChangeRequest:(const void*)arg1;

@end
