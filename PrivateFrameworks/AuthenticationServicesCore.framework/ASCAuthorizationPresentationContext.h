/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AuthenticationServicesCore.framework/AuthenticationServicesCore
 */

@interface ASCAuthorizationPresentationContext : NSObject <NSSecureCoding> {
    NSArray * _allowedCredentialsForSecurityKeyAssertion;
    NSString * _appIdentifier;
    AKAuthorizationRequest * _appleIDAuthorizationRequest;
    NSData * _auditTokenData;
    NSString * _bundleIdentifier;
    long long  _cableAuthenticatorRequirement;
    NSURL * _cableAuthenticatorURL;
    NSString * _destinationSiteForCrossSiteAssertion;
    WBSGlobalFrameIdentifier * _frameIdentifier;
    bool  _isCABLEAuthenticatorRequest;
    bool  _isConditionalRegistrationRequest;
    bool  _isProxiedRequest;
    NSMutableArray * _loginChoices;
    NSString * _overrideHeader;
    NSString * _overrideNoCredentialsErrorMessage;
    NSString * _overrideNoCredentialsErrorTitle;
    NSString * _overrideSubtitle;
    NSString * _overrideTitle;
    ASCPublicKeyCredentialAssertionOptions * _passkeyAssertionOptionsForExternalProvider;
    ASCPublicKeyCredentialCreationOptions * _passkeyCreationOptionsForExternalProvider;
    long long  _passkeyURLType;
    NSString * _platformUserVerificationPreference;
    NSArray * _proxiedAssociatedDomains;
    NSData * _proxiedIconData;
    NSNumber * _proxiedIconScale;
    NSString * _proxiedOriginDeviceName;
    unsigned long long  _requestTypes;
    NSString * _serviceName;
    unsigned long long  _serviceType;
    bool  _shouldAllowSecurityKeysFromCABLEView;
    bool  _shouldRequireCABLEAuthenticatorConsent;
    bool  _shouldUseFallbackPasskeyUI;
    NSString * _teamIdentifier;
    bool  _useAlternativeSecurityKeysIcon;
    NSString * _windowSceneIdentifier;
}

@property (nonatomic, readonly) long long _passkeyURLType;
@property (nonatomic, readonly, copy) NSArray *allowedCredentialsForSecurityKeyAssertion;
@property (nonatomic, readonly, copy) NSString *appIdentifier;
@property (nonatomic, retain) AKAuthorizationRequest *appleIDAuthorizationRequest;
@property (nonatomic, readonly) NSData *auditTokenData;
@property (nonatomic, readonly, copy) NSString *bundleIdentifier;
@property (nonatomic, readonly) long long cableAuthenticatorRequirement;
@property (nonatomic, readonly) NSURL *cableAuthenticatorURL;
@property (nonatomic, readonly, copy) NSArray *credentialLoginChoices;
@property (nonatomic, copy) NSString *destinationSiteForCrossSiteAssertion;
@property (nonatomic, readonly) long long externalPasskeyLoginChoiceCount;
@property (nonatomic, readonly, copy) WBSGlobalFrameIdentifier *frameIdentifier;
@property (nonatomic, readonly) bool hasExternalPasswords;
@property (nonatomic, readonly) bool hasPlatformCredentialRequest;
@property (nonatomic, readonly) long long iCloudKeychainPasskeyLoginChoiceCount;
@property (nonatomic, readonly) bool isCABLEAuthenticatorRequest;
@property (nonatomic, readonly) bool isCombinedPublicKeyCredentialRegistrationRequest;
@property (nonatomic, readonly) bool isConditionalRegistrationRequest;
@property (nonatomic) bool isProxiedRequest;
@property (nonatomic, readonly) bool isRegistrationRequest;
@property (nonatomic, readonly) NSArray *localAccountLoginChoices;
@property (nonatomic, readonly, copy) NSArray *loginChoices;
@property (nonatomic, readonly, copy) NSArray *otherAccountsLoginChoices;
@property (nonatomic, readonly) NSString *overrideHeader;
@property (nonatomic, readonly) NSString *overrideNoCredentialsErrorMessage;
@property (nonatomic, readonly) NSString *overrideNoCredentialsErrorTitle;
@property (nonatomic, readonly) NSString *overrideSubtitle;
@property (nonatomic, readonly) NSString *overrideTitle;
@property (nonatomic, readonly) ASCPublicKeyCredentialAssertionOptions *passkeyAssertionOptionsForExternalProvider;
@property (nonatomic, readonly) ASCPublicKeyCredentialCreationOptions *passkeyCreationOptionsForExternalProvider;
@property (nonatomic, readonly, copy) NSString *platformUserVerificationPreference;
@property (nonatomic, copy) NSArray *proxiedAssociatedDomains;
@property (nonatomic, copy) NSData *proxiedIconData;
@property (nonatomic, copy) NSNumber *proxiedIconScale;
@property (nonatomic, copy) NSString *proxiedOriginDeviceName;
@property (nonatomic, readonly) unsigned long long requestTypes;
@property (nonatomic, copy) NSString *serviceName;
@property (nonatomic, readonly) unsigned long long serviceType;
@property (nonatomic, readonly) bool shouldAllowSecurityKeysFromCABLEView;
@property (nonatomic, readonly) bool shouldRequireCABLEAuthenticatorConsent;
@property (nonatomic, readonly) bool shouldUseFallbackPasskeyUI;
@property (nonatomic, readonly, copy) NSString *teamIdentifier;
@property (nonatomic, readonly) bool useAlternativeSecurityKeysIcon;
@property (nonatomic, readonly) NSString *windowSceneIdentifier;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_getPrimaryLoginChoices:(id*)arg1 otherLoginChoices:(id*)arg2;
- (id)_initWithCABLEAuthenticatorURL:(id)arg1 shouldRequireConsent:(bool)arg2 passkeyURLType:(long long)arg3;
- (id)_passkeyLoginChoices;
- (long long)_passkeyURLType;
- (bool)_passwordLoginChoice:(id)arg1 hasSameHighLevelDomainAndUsernameAsPasskeyLoginChoice:(id)arg2;
- (void)addLoginChoice:(id)arg1;
- (id)allowedCredentialsForSecurityKeyAssertion;
- (id)appIdentifier;
- (id)appleIDAuthorizationRequest;
- (id)auditTokenData;
- (id)bundleIdentifier;
- (long long)cableAuthenticatorRequirement;
- (id)cableAuthenticatorURL;
- (id)credentialLoginChoices;
- (id)destinationSiteForCrossSiteAssertion;
- (void)encodeWithCoder:(id)arg1;
- (long long)externalPasskeyLoginChoiceCount;
- (id)frameIdentifier;
- (bool)hasExternalPasswords;
- (bool)hasPlatformCredentialRequest;
- (long long)iCloudKeychainPasskeyLoginChoiceCount;
- (id)initWithCoder:(id)arg1;
- (id)initWithRequestContext:(id)arg1 appIdentifier:(id)arg2;
- (id)initWithRequestContext:(id)arg1 appIdentifier:(id)arg2 frameIdentifier:(id)arg3 shouldUseRelyingPartyForServiceName:(bool)arg4;
- (id)initWithRequestContext:(id)arg1 appIdentifier:(id)arg2 frameIdentifier:(id)arg3 shouldUseRelyingPartyForServiceName:(bool)arg4 auditTokenData:(id)arg5;
- (id)initWithRequestContext:(id)arg1 appIdentifier:(id)arg2 shouldUseRelyingPartyForServiceName:(bool)arg3;
- (id)initWithRequestContext:(id)arg1 appIdentifier:(id)arg2 shouldUseRelyingPartyForServiceName:(bool)arg3 auditTokenData:(id)arg4;
- (bool)isCABLEAuthenticatorRequest;
- (bool)isCombinedPublicKeyCredentialRegistrationRequest;
- (bool)isConditionalRegistrationRequest;
- (bool)isProxiedRequest;
- (bool)isRegistrationRequest;
- (id)localAccountLoginChoices;
- (id)loginChoices;
- (id)otherAccountsLoginChoices;
- (id)overrideHeader;
- (id)overrideNoCredentialsErrorMessage;
- (id)overrideNoCredentialsErrorTitle;
- (id)overrideSubtitle;
- (id)overrideTitle;
- (id)passkeyAssertionOptionsForExternalProvider;
- (id)passkeyCreationOptionsForExternalProvider;
- (id)platformUserVerificationPreference;
- (id)proxiedAssociatedDomains;
- (id)proxiedIconData;
- (id)proxiedIconScale;
- (id)proxiedOriginDeviceName;
- (unsigned long long)requestTypes;
- (id)serviceName;
- (unsigned long long)serviceType;
- (void)setAppleIDAuthorizationRequest:(id)arg1;
- (void)setDestinationSiteForCrossSiteAssertion:(id)arg1;
- (void)setIsProxiedRequest:(bool)arg1;
- (void)setProxiedAssociatedDomains:(id)arg1;
- (void)setProxiedIconData:(id)arg1;
- (void)setProxiedIconScale:(id)arg1;
- (void)setProxiedOriginDeviceName:(id)arg1;
- (void)setServiceName:(id)arg1;
- (bool)shouldAllowSecurityKeysFromCABLEView;
- (bool)shouldRequireCABLEAuthenticatorConsent;
- (bool)shouldUseFallbackPasskeyUI;
- (id)teamIdentifier;
- (void)updateLoginChoices:(id)arg1;
- (bool)useAlternativeSecurityKeysIcon;
- (id)windowSceneIdentifier;

@end
