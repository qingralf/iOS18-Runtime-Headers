/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/BackgroundSystemTasks.framework/BackgroundSystemTasks
 */

@interface BGSystemTask : NSObject {
    id /* block */  _clientLedExpirationHandler;
    id /* block */  _completionHandler;
    <BGSystemTaskDelegate> * _delegate;
    id /* block */  _expirationAckHandler;
    id /* block */  _expirationHandler;
    id /* block */  _expirationHandlerWithReason;
    unsigned long long  _expirationReason;
    bool  _hasPropagatedExpiration;
    NSString * _identifier;
    NSObject<OS_dispatch_queue> * _queue;
    NSObject<OS_dispatch_queue> * _resultQueue;
    NSMutableDictionary * _runningConsumedResults;
    long long  _state;
    NSMutableDictionary * _taskProgressInfo;
    NSObject<OS_os_transaction> * _transaction;
    NSUUID * _uuid;
}

@property (nonatomic, copy) id /* block */ clientLedExpirationHandler;
@property (nonatomic, copy) id /* block */ completionHandler;
@property <BGSystemTaskDelegate> *delegate;
@property (nonatomic, copy) id /* block */ expirationAckHandler;
@property (nonatomic, copy) id /* block */ expirationHandler;
@property (nonatomic, copy) id /* block */ expirationHandlerWithReason;
@property (nonatomic) unsigned long long expirationReason;
@property (nonatomic, readonly) bool expiring;
@property (nonatomic) bool hasPropagatedExpiration;
@property (readonly, copy) NSString *identifier;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *resultQueue;
@property (nonatomic, retain) NSMutableDictionary *runningConsumedResults;
@property long long state;
@property (nonatomic, retain) NSMutableDictionary *taskProgressInfo;
@property (nonatomic, retain) NSObject<OS_os_transaction> *transaction;
@property (nonatomic, readonly) NSUUID *uuid;

+ (id)logger;

- (void).cxx_destruct;
- (void)clearLocked;
- (id /* block */)clientLedExpirationHandler;
- (id /* block */)completionHandler;
- (bool)consumedResults:(id)arg1 error:(id*)arg2;
- (id)delegate;
- (id)delegate:(id*)arg1;
- (bool)eligibleToRun;
- (id /* block */)expirationAckHandler;
- (id /* block */)expirationHandler;
- (id /* block */)expirationHandlerWithReason;
- (unsigned long long)expirationReason;
- (bool)expiring;
- (void)handleExpirationWithReason:(unsigned long long)arg1;
- (bool)hasPropagatedExpiration;
- (bool)hasValidExpirationHandler;
- (id)identifier;
- (id)initWithIdentifier:(id)arg1;
- (id)initWithIdentifier:(id)arg1 queue:(id)arg2;
- (bool)invalid;
- (void)invokeExpirationHandlerWithReason:(unsigned long long)arg1;
- (void)prepareForRunning;
- (bool)producedCumulativeResults:(id)arg1 error:(id*)arg2;
- (id)queue;
- (bool)reportBufferedTaskWorkloadProgress;
- (bool)reportCumulativeResultConsumptionWithError:(id*)arg1;
- (bool)reportTaskWorkloadProgress:(unsigned long long)arg1 completed:(unsigned long long)arg2 category:(unsigned long long)arg3 subCategory:(id)arg4 error:(id*)arg5;
- (bool)resetResultsForIdentifier:(id)arg1 error:(id*)arg2;
- (id)resultQueue;
- (void)resultQueue_aggregateConsumedResult:(id)arg1;
- (bool)resultQueue_containsPendingConsumedResults;
- (id)runningConsumedResults;
- (bool)sendTaskWorkloadProgressToPPS:(unsigned long long)arg1 completed:(unsigned long long)arg2 category:(unsigned long long)arg3 subCategory:(id)arg4;
- (void)setClientLedExpirationHandler:(id /* block */)arg1;
- (void)setCompletionHandler:(id /* block */)arg1;
- (void)setDelegate:(id)arg1;
- (void)setExpirationAckHandler:(id /* block */)arg1;
- (void)setExpirationHandler:(id /* block */)arg1;
- (void)setExpirationHandlerWithReason:(id /* block */)arg1;
- (void)setExpirationReason:(unsigned long long)arg1;
- (void)setHasPropagatedExpiration:(bool)arg1;
- (void)setResultQueue:(id)arg1;
- (void)setRunningConsumedResults:(id)arg1;
- (void)setState:(long long)arg1;
- (void)setTaskCompleted;
- (bool)setTaskExpiredWithRetryAfter:(double)arg1 error:(id*)arg2;
- (void)setTaskProgressInfo:(id)arg1;
- (void)setTransaction:(id)arg1;
- (bool)shouldReportTaskWorkloadProgress:(unsigned long long)arg1;
- (long long)state;
- (id)taskProgressInfo;
- (id)transaction;
- (id)uuid;

@end
