/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/BarcodeSupportUI.framework/BarcodeSupportUI
 */

@interface BCSRootViewController : UIViewController <AVCaptureMetadataOutputObjectsDelegate, AVCaptureVideoDataOutputSampleBufferDelegate, BCSLiveViewControllerDelegate> {
    bool  _applicationWasInBackground;
    AVCaptureDevice * _cameraDevice;
    NSObject<OS_dispatch_queue> * _captureQueue;
    BCSVisualCodeDetector * _codeDetector;
    AVCaptureSession * _currentSession;
    bool  _deviceIsBeingUnlocked;
    bool  _hasCapturedCode;
    long long  _lastAvailability;
    BCSLiveViewController * _liveViewController;
    bool  _needsUpdateVideoRotationAngle;
    AVCaptureVideoPreviewLayer * _previewLayer;
    NSTimer * _resumeCapturingTimer;
    BCSSecureCaptureSession * _session;
    bool  _shouldScanFaster;
    double  _startTime;
    long long  _statusBarOrientation;
    double  _videoRotationAngle;
    AVCaptureDeviceRotationCoordinator * _videoRotationCoordinator;
}

@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)_bestCandidateVisualCode:(id)arg1;
- (id)_bestCaptureDevice;
- (id)_bestCaptureFormatForDevice:(id)arg1;
- (bool)_canShowWhileLocked;
- (void)_clearResumeCapturingTimer;
- (unsigned int)_desiredImageOrientation;
- (void)_endSession;
- (void)_executeBlockWithLockedCameraDevice:(id /* block */)arg1;
- (id)_imageFromLastVideoSample:(struct opaqueCMSampleBuffer { }*)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (bool)_isCapturingSteady;
- (void)_pauseSessionIfNeeded;
- (id)_preferredInternalCamera;
- (void)_resetSessionWithCompletionHandler:(id /* block */)arg1;
- (void)_restartSessionIfNeeded;
- (void)_startSession;
- (void)_startSessionConnectingPreviewLayer:(id)arg1;
- (void)_updateCameraDevice;
- (void)_updateUserPreferredCameraIfNeeded;
- (void)_updateVideoRotationAngle;
- (void)_updateVideoRotationAngleIfNeeded;
- (void)applicationDidEnterBackground;
- (void)applicationWillEnterForeground;
- (void)captureOutput:(id)arg1 didOutputSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2 fromConnection:(id)arg3;
- (void)continueUserActivity:(id)arg1;
- (void)createSessionIfNeededConnectingPreviewLayer:(id)arg1 completion:(id /* block */)arg2;
- (void)didLaunchFromControl:(id)arg1;
- (void)disconnectPreviewLayerFromSession;
- (void)endSession;
- (void)executeBlockAsynchronouslyWithLockedCameraDevice:(id /* block */)arg1;
- (void)executeBlockSynchronouslyWithLockedCameraDevice:(id /* block */)arg1;
- (void)focusWithMode:(long long)arg1 exposeWithMode:(long long)arg2 atDevicePoint:(struct CGPoint { double x1; double x2; })arg3 monitorSubjectAreaChange:(bool)arg4;
- (id)init;
- (void)liveViewController:(id)arg1 didTapAtDevicePoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)liveViewController:(id)arg1 torchModeChangedTo:(bool)arg2;
- (void)liveViewControllerDidResetCapture:(id)arg1;
- (bool)liveViewControllerTorchModeSupported:(id)arg1;
- (void)liveViewControllerWillPerformAction:(id)arg1;
- (void)loadView;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (bool)prefersStatusBarHidden;
- (void)resumeCapturing;
- (void)setLiveZoomFactor:(double)arg1;
- (void)subjectAreaDidChange:(id)arg1;
- (void)suspendCapturing;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;

@end
