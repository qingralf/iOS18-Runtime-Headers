/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CMCapture.framework/CMCapture
 */

@interface BWCompressedShotBufferNode : BWNode <BWCompressedShotBuffer> {
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _bufferTrackingLock;
    bool  _compressWhenCompressedBuffersInUseEnabled;
    long long  _compressedByteCapacity;
    bool  _compressedSurfacePoolEnabled;
    struct { 
        int width; 
        int height; 
    }  _compressionInputDimensions;
    struct { 
        int width; 
        int height; 
    }  _compressionInputDimensionsInit;
    struct CMPhotoCompressionSession { } * _compressionSession;
    int  _compressionTiles;
    struct opaqueCMFormatDescription { } * _decompressionFormatDescription;
    BWPixelBufferPool * _decompressionPool;
    int  _decompressionPoolCapacity;
    NSObject<OS_dispatch_queue> * _decompressionQueue;
    BWPhotoDecompressor * _decompressor;
    id /* block */  _freeBufferCountIncreasedHandler;
    int  _inUseCompressedBufferCount;
    long long  _inUseCompressedBytes;
    int  _inUseUncompressedBufferCount;
    bool  _passthroughEnabled;
    NSMutableArray * _queuedCompressedSampleBuffers;
    BWNodeInput * _sensorRawInput;
    BWNodeOutput * _sensorRawOutput;
    int  _uncompressedEquivalentCapacity;
}

@property (nonatomic, readonly) bool compressionResourcesAllocated;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (nonatomic, copy) id /* block */ freeBufferCountIncreasedHandler;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) int minimumUncompressedEquivalentCapacity;
@property (nonatomic, readonly) bool passthroughEnabled;
@property (nonatomic, readonly) BWNodeInput *sensorRawInput;
@property (nonatomic, readonly) BWNodeOutput *sensorRawOutput;
@property (readonly) Class superclass;
@property (nonatomic) int uncompressedEquivalentCapacity;

+ (void)initialize;

- (bool)compressionResourcesAllocated;
- (void)configurationWithID:(long long)arg1 updatedFormat:(id)arg2 didBecomeLiveForInput:(id)arg3;
- (void)dealloc;
- (void)didReachEndOfDataForInput:(id)arg1;
- (void)didSelectFormat:(id)arg1 forInput:(id)arg2;
- (void)flushAndWaitForUncompressedEquivalentFreeBufferCount:(int)arg1;
- (void)flushAndWaitUntilThreshold:(int)arg1;
- (id /* block */)freeBufferCountIncreasedHandler;
- (void)getInUseCompressedBufferCount:(int*)arg1 inUseCompressedBytes:(long long*)arg2 maxInUseCompressedBytes:(long long*)arg3 forUncompressedEquivalentFreeBufferCount:(int)arg4;
- (void)handleNodeError:(id)arg1 forInput:(id)arg2;
- (void)handleStillImagePrewarmWithSettings:(id)arg1 forInput:(id)arg2;
- (bool)hasUncompressedEquivalentFreeBufferCount:(int)arg1;
- (id)initWithNodeConfiguration:(id)arg1 compressionInputDimensions:(struct { int x1; int x2; })arg2;
- (int)minimumUncompressedEquivalentCapacity;
- (id)nodeSubType;
- (id)nodeType;
- (bool)passthroughEnabled;
- (void)renderSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInput:(id)arg2;
- (id)sensorRawInput;
- (id)sensorRawOutput;
- (void)setFreeBufferCountIncreasedHandler:(id /* block */)arg1;
- (void)setUncompressedEquivalentCapacity:(int)arg1;
- (int)uncompressedEquivalentCapacity;

@end
