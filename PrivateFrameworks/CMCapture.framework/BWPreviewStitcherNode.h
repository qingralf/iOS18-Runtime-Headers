/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CMCapture.framework/CMCapture
 */

@interface BWPreviewStitcherNode : BWNode {
    float  _additionalZoomFactor;
    BWSpringSimulation * _additionalZoomFactorSpring;
    float  _additionalZoomFactorSpringStartFactor;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _additionalZoomFactorSpringStartPTS;
    bool  _allowEdgeInsetDuringTrueVideoTransitions;
    bool  _applyShift;
    bool  _aspectRatioChanging;
    NSMutableDictionary * _blackFilledBorderRectsBySurfaceID;
    bool  _borderBlurEnabled;
    float  _borderBlurStrength;
    bool  _borderStretchEnabled;
    float  _borderStretchNextNarrowerBaseZoomFactorMultiplier;
    float  _borderStretchScaleFactor;
    NSObject<OS_dispatch_group> * _ciPreheatingGroup;
    NSObject<OS_dispatch_queue> * _ciPreheatingQueue;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _configurationLock;
    bool  _currentZoomRequiresWiderCamera;
    bool  _delayedEndOfDataEnabled;
    <BWPreviewStitcherDelegate> * _delegate;
    bool  _deviceIsStationary;
    bool  _deviceTooHotDimmingEnabled;
    bool  _didSetTimeToStartStyleEngineApplyWithLearnedCoefficientsAfterExitingTrueVideo;
    bool  _displaysPrimaryCameraOnly;
    bool  _displaysWidestCameraOnly;
    bool  _drawWiderCameraOnly;
    float  _dynamicCameraScaleMSRMarginPercentage;
    float  _dynamicWideBaseZoomFactorSmoothingFactor;
    float  _edgeFeatheringAspectCompensation;
    bool  _edgeFeatheringEnabled;
    bool  _excludeStaticComponentFromAlignmentShiftsEnabled;
    bool  _featherEdgesForOpacityRamp;
    FigCaptureMachPortSendRight * _fencePortSendRight;
    BWFencedAnimationQueue * _fencedAnimationQueue;
    long long  _firstDroppedUnfencedFrameHostTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _firstFramePTS;
    bool  _firstRegistrationCompleted;
    bool  _firstRegistrationIsSynchronous;
    bool  _flipHorizontal;
    bool  _flipVertical;
    bool  _forceBlackFillBorderEnabled;
    bool  _fractionalSourceRectEnabled;
    bool  _frameRateBasedRampsEnabled;
    bool  _generatesHistogram;
    bool  _haveDelayedEOD;
    bool  _havePreheatedCI;
    bool  _haveSuperWideCamera;
    bool  _haveTeleCamera;
    bool  _hidePartialOverCapture;
    bool  _hideSuperWideOverCaptureWhenTooClose;
    bool  _hideSuperWideStitchingWhenTooClose;
    bool  _inSuperMacroRange;
    bool  _inputBuffersHaveHorizontalOverscanOnly;
    bool  _inputIsHDR;
    struct OpaqueVTPixelRotationSession { } * _intermediateRotationSession;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _lastInputPTS;
    bool  _lastNarrowerCameraIsTele;
    NSString * _lastNarrowerPortType;
    NSString * _lastPreferredMasterPortType;
    float  _lastPrimaryCameraAspectRatio;
    NSString * _lastRecommendedMasterPortType;
    int  _lastRecommendedMasterSelectionReason;
    int  _lastRegisteredFrameCaptureID;
    bool  _lastRegistrationEnabled;
    long long  _lastRenderTime;
    struct opaqueCMSampleBuffer { } * _lastSampleBuffer;
    bool  _lastSuperWideCameraFallbackWasUserInitiated;
    bool  _lastWideCameraFallbackWasUserInitiated;
    float  _lastWideNondisruptiveSwitchingScaleFactor;
    bool  _lastZoomingOrSwitchingCameras;
    int  _maxLossyCompressionLevel;
    NSObject<OS_dispatch_queue> * _metalSubmissionAndCompletionQueue;
    bool  _momentMovieRecordingRecenteringEnabled;
    int  _momentMovieRecordingRecenteringShiftRampFrameCount;
    bool  _multiCameraStitchingEnabled;
    struct BWSmartCameraScene { 
        bool enabled; 
        bool confident; 
        float confidenceFilterRatio; 
        float filteredConfidence; 
        float confidenceThreshold; 
        float confidenceHysteresisValueLag; 
        short confidenceHysteresisTemporalLagBeforeConfident; 
        short confidenceHysteresisTemporalLagBeforeNotConfident; 
        short currentTemporalHysteresis; 
        bool resetTemporalHysteresisAndFilteringOnNextUpdate; 
        char *name; 
    }  _narrowerCameraFoVFillsOverCapture;
    struct { 
        int width; 
        int height; 
    }  _outputDimensions;
    struct opaqueCMFormatDescription { } * _outputFormatDescription;
    struct OpaqueVTPixelRotationSession { } * _outputRotationSession;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _outputTransform;
    bool  _overCaptureNotSupportedByDownstreamNodes;
    int  _overCaptureStatus;
    bool  _parallaxMitigationBasedOnZoomFactorEnabled;
    bool  _pendingRegistrationAfterDeviceBecomesStationary;
    bool  _previewTapRegistered;
    bool  _previewsWideBeforeSlaveStreamStarts;
    double  _primaryCameraAspectRatio;
    double  _primaryCaptureRectCenterX;
    int  _primaryCaptureRectCenterXPixelOffset;
    int  _primaryCaptureRectCenterXPixelOffsetFudge;
    int  _primaryCaptureRectPixelInset;
    double  _primaryCaptureRectYInset;
    bool  _propagateDepth;
    bool  _propagateStyles;
    float  _rampStartZoomFactor;
    float  _rampZoomFactorOfInterest;
    bool  _rebuildingGraphForTrueVideoTransition;
    bool  _registerFirstFrame;
    BWPreviewRegistration * _registration;
    bool  _registrationEnabled;
    int  _registrationFrameSkipCount;
    bool  _registrationResourcesAllocated;
    NSDictionary * _registrationTranslationOverride;
    int  _registrationType;
    int  _registrationUpdateRampFrameCount;
    NSObject<OS_dispatch_queue> * _restitchingQueue;
    int  _rotationDegrees;
    int  _screenScale;
    struct { 
        int width; 
        int height; 
    }  _sensorBinningFactor;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _shiftCorrectionsUpdateLock;
    float  _shiftSmoothingFactor;
    bool  _showFeatherGradient;
    bool  _smartStyleRenderingEnabledInTrueVideoGraph;
    bool  _stoppingForModeSwitch;
    bool  _stoppingWithISPFastSwitchEnabled;
    bool  _superMacroEdgeFeatheringBlurEnabled;
    float  _superMacroEdgeFeatheringBlurInset;
    bool  _superMacroEdgeFeatheringShowBlurMask;
    bool  _superMacroOpacityRampOnFullPrimaryRectEnabled;
    bool  _superMacroRangeRegistrationTuningEnabled;
    bool  _superMacroUserInitiatedFallbackTuningEnabled;
    float  _superWideBaseZoomFactor;
    bool  _superWideCompensateForMissingFOV;
    float  _superWideCorrectedBaseZoomFactor;
    bool  _superWideDrawingSuspendedUntilFocusImproves;
    bool  _superWideFallbackForMacroSceneEnabled;
    struct CGPoint { 
        double x; 
        double y; 
    }  _superWideFallbackRecenteringShiftOffset;
    float  _superWideFallbackRecenteringStrength;
    BWRamp * _superWideFallbackShiftRamp;
    bool  _superWideFallbackShiftRampTargetValueIsSuperWide;
    bool  _superWideFallbackTransitioningWithStreamingPortTypesChanged;
    struct BWSmartCameraScene { 
        bool enabled; 
        bool confident; 
        float confidenceFilterRatio; 
        float filteredConfidence; 
        float confidenceThreshold; 
        float confidenceHysteresisValueLag; 
        short confidenceHysteresisTemporalLagBeforeConfident; 
        short confidenceHysteresisTemporalLagBeforeNotConfident; 
        short currentTemporalHysteresis; 
        bool resetTemporalHysteresisAndFilteringOnNextUpdate; 
        char *name; 
    }  _superWideFocusDistanceFarEnoughForRegistration;
    float  _superWideNondisruptiveSwitchingScaleFactor;
    bool  _superWideNondisruptiveSwitchingWaitsForSuperWideFallback;
    NSArray * _superWideNondisruptiveSwitchingZoomFactors;
    bool  _superWideOccludedByWide;
    bool  _superWideSensorCenterOffsetEnabled;
    struct CGPoint { 
        double x; 
        double y; 
    }  _superWideToWideBravoShift;
    struct BWPreviewStitcherShiftCorrection { 
        struct CGPoint { 
            double x; 
            double y; 
        } currentValue; 
        struct CGPoint { 
            double x; 
            double y; 
        } updatedValue; 
        bool valueIsUpdated; 
        bool lastRegistrationWasValid; 
        int registeredFrameCaptureID; 
        BWRamp *rampX; 
        BWRamp *rampY; 
    }  _superWideToWideShiftCorrections;
    float  _teleBaseZoomFactor;
    float  _teleBaseZoomFactorOverride;
    bool  _teleFocusingOneShot;
    CIContext * _teleOpacityCIContext;
    BWPixelBufferPool * _teleOpacityPool;
    struct { 
        int width; 
        int height; 
    }  _teleOpacityPoolDimensions;
    BWMemoryPoolFlushAssertion * _teleOpacityPoolReadyAssertion;
    BWRamp * _teleOpacityRamp;
    bool  _teleOpacityRampForSuperMacroFallbackTransition;
    bool  _thermalPressureIsCritical;
    float  _timeToStarStyleEngineApplyWithLearnedCoefficientsAfterExitingTrueVideo;
    struct opaqueCMSampleBuffer { } * _transitionReferenceLearnedCoefficientsSampleBuffer;
    int  _transitionReferenceLearnedCoefficientsSampleBufferApplyCount;
    BWRamp * _transitionReferenceOpacityRamp;
    struct opaqueCMSampleBuffer { } * _transitionReferenceSampleBuffer;
    double  _trueVideoCaptureAdditionalZoomFactor;
    bool  _trueVideoCaptureEnabled;
    bool  _trueVideoCaptureFormatIs4K;
    BWRamp * _trueVideoHDRtoSDRBlendRamp;
    bool  _trueVideoTransitionEnteringAspectRatio;
    bool  _trueVideoTransitionEnteringIncreasingAspectRatio;
    bool  _trueVideoTransitionInProgress;
    double  _trueVideoTransitionPercentComplete;
    float  _uiZoomFactor;
    bool  _waitsForFencedUpdateBeforeFirstEmit;
    bool  _waitsForRegistrationToComplete;
    bool  _wantSuperWideFallback;
    bool  _wantWideFallbackDueToTeleAEAF;
    float  _wideBaseZoomFactor;
    float  _wideBaseZoomFactorDynamicOverride;
    bool  _wideBaseZoomFactorDynamicOverrideEnabled;
    float  _wideBaseZoomFactorDynamicOverrideScaled;
    float  _wideBaseZoomFactorOverride;
    float  _wideBaseZoomFactorOverrideMacro;
    int  _wideFallbackMode;
    struct CGPoint { 
        double x; 
        double y; 
    }  _wideFallbackRecenteringShiftOffset;
    BWRamp * _wideFallbackShiftRamp;
    bool  _wideFallbackShiftRampTargetValueIsWide;
    bool  _wideFallbackUserInitiatedTuningEnabled;
    struct BWSmartCameraScene { 
        bool enabled; 
        bool confident; 
        float confidenceFilterRatio; 
        float filteredConfidence; 
        float confidenceThreshold; 
        float confidenceHysteresisValueLag; 
        short confidenceHysteresisTemporalLagBeforeConfident; 
        short confidenceHysteresisTemporalLagBeforeNotConfident; 
        short currentTemporalHysteresis; 
        bool resetTemporalHysteresisAndFilteringOnNextUpdate; 
        char *name; 
    }  _wideFocusDistanceFarEnoughForStitching;
    struct BWSmartCameraScene { 
        bool enabled; 
        bool confident; 
        float confidenceFilterRatio; 
        float filteredConfidence; 
        float confidenceThreshold; 
        float confidenceHysteresisValueLag; 
        short confidenceHysteresisTemporalLagBeforeConfident; 
        short confidenceHysteresisTemporalLagBeforeNotConfident; 
        short currentTemporalHysteresis; 
        bool resetTemporalHysteresisAndFilteringOnNextUpdate; 
        char *name; 
    }  _wideFocusDistanceFarEnoughToUseTele;
    struct BWSmartCameraScene { 
        bool enabled; 
        bool confident; 
        float confidenceFilterRatio; 
        float filteredConfidence; 
        float confidenceThreshold; 
        float confidenceHysteresisValueLag; 
        short confidenceHysteresisTemporalLagBeforeConfident; 
        short confidenceHysteresisTemporalLagBeforeNotConfident; 
        short currentTemporalHysteresis; 
        bool resetTemporalHysteresisAndFilteringOnNextUpdate; 
        char *name; 
    }  _wideFocusDistanceFarEnoughToUseWide;
    bool  _wideFocusingOneShot;
    bool  _wideNondisruptiveSwitchingCroppedFrameEnabled;
    bool  _wideNondisruptiveSwitchingCurrentFrameIsCropped;
    float  _wideNondisruptiveSwitchingScaleFactor;
    NSArray * _wideNondisruptiveSwitchingZoomFactors;
    float  _widePinholeFocalLengthInfinity;
    float  _widePinholeFocalLengthMacro;
    struct CGPoint { 
        double x; 
        double y; 
    }  _wideToTeleBravoShift;
    struct BWPreviewStitcherShiftCorrection { 
        struct CGPoint { 
            double x; 
            double y; 
        } currentValue; 
        struct CGPoint { 
            double x; 
            double y; 
        } updatedValue; 
        bool valueIsUpdated; 
        bool lastRegistrationWasValid; 
        int registeredFrameCaptureID; 
        BWRamp *rampX; 
        BWRamp *rampY; 
    }  _wideToTeleShiftCorrections;
    struct BWSmartCameraScene { 
        bool enabled; 
        bool confident; 
        float confidenceFilterRatio; 
        float filteredConfidence; 
        float confidenceThreshold; 
        float confidenceHysteresisValueLag; 
        short confidenceHysteresisTemporalLagBeforeConfident; 
        short confidenceHysteresisTemporalLagBeforeNotConfident; 
        short currentTemporalHysteresis; 
        bool resetTemporalHysteresisAndFilteringOnNextUpdate; 
        char *name; 
    }  _widerCameraFoVFillsOverCapture;
    float  _zoomInFeatheringInnerRadiusEnd;
    float  _zoomInFeatheringInnerRadiusStart;
    float  _zoomInFeatheringOuterRadiusEnd;
    float  _zoomInFeatheringOuterRadiusStart;
    float  _zoomOutFeatheringInnerRadiusEnd;
    float  _zoomOutFeatheringInnerRadiusStart;
    float  _zoomOutFeatheringOuterRadiusEnd;
    float  _zoomOutFeatheringOuterRadiusStart;
    float  _zoomPIPMinimumUIZoomFactor;
    bool  _zoomPIPOverlayEnabled;
    bool  _zoomPIPSingleStreamModeEnabled;
    bool  _zoomPIPUseNarrowerCamera;
}

@property (nonatomic) <BWPreviewStitcherDelegate> *delegate;
@property bool displaysWidestCameraOnly;
@property (nonatomic) bool previewTapRegistered;
@property (readonly) double trueVideoTransitionPercentComplete;
@property (readonly) struct opaqueCMSampleBuffer { }*trueVideoTransitionReferenceSampleBuffer;

+ (void)initialize;

- (bool)centerRegistrationValid;
- (void)configurationWithID:(long long)arg1 updatedFormat:(id)arg2 didBecomeLiveForInput:(id)arg3;
- (void)dealloc;
- (id)delegate;
- (void)didReachEndOfDataForInput:(id)arg1;
- (void)didSelectFormat:(id)arg1 forInput:(id)arg2;
- (bool)displaysWidestCameraOnly;
- (bool)flipHorizontal;
- (bool)flipVertical;
- (id)focusingDescription;
- (bool)forceBlackFillBorderEnabled;
- (bool)generatesHistogram;
- (id)initWithCameraInfoByPortType:(id)arg1 sensorBinningFactor:(struct { int x1; int x2; })arg2 inputBuffersHaveHorizontalOverscanOnly:(bool)arg3 registrationType:(int)arg4 registrationMetalCommandQueue:(id)arg5 excludeStaticComponentFromAlignmentShifts:(bool)arg6 propagateDepth:(bool)arg7 propagateStyles:(bool)arg8 parallaxMitigationBasedOnZoomFactorEnabled:(bool)arg9 zoomPIPOverlayEnabled:(bool)arg10 zoomPIPMinimumUIZoomFactor:(float)arg11 zoomPIPSingleStreamModeEnabled:(bool)arg12 preallocateOutputBufferPool:(bool)arg13;
- (id)initWithStitchingDisabledAndZoomPIPOverlayEnabled:(bool)arg1 zoomPIPMinimumUIZoomFactor:(float)arg2 zoomPIPSingleStreamModeEnabled:(bool)arg3 propagateDepth:(bool)arg4 propagateStyles:(bool)arg5 parallaxMitigationBasedOnZoomFactorEnabled:(bool)arg6 preallocateOutputBufferPool:(bool)arg7;
- (void)markDelayedEndOfData;
- (int)maxLossyCompressionLevel;
- (id)nodeSubType;
- (id)nodeType;
- (struct { int x1; int x2; })outputDimensions;
- (bool)overCaptureNotSupportedByDownstreamNodes;
- (id)overCaptureStatusString;
- (void)prepareForCurrentConfigurationToBecomeLive;
- (id)previewRegistrationType;
- (bool)previewTapRegistered;
- (bool)previewsWideBeforeSlaveStreamStarts;
- (double)primaryCameraAspectRatio;
- (id)primaryCameraShortDisplayName;
- (double)primaryCaptureRectCenterX;
- (double)primaryCaptureRectYInset;
- (void)rampToAdditionalZoomFactor:(double)arg1 momentMovieRecordingRecenteringEnabled:(bool)arg2;
- (bool)rebuildingGraphForTrueVideoTransition;
- (void)renderSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInput:(id)arg2;
- (int)rotationDegrees;
- (void)setDelegate:(id)arg1;
- (void)setDisplaysWidestCameraOnly:(bool)arg1;
- (void)setFlipHorizontal:(bool)arg1;
- (void)setFlipVertical:(bool)arg1;
- (void)setForceBlackFillBorderEnabled:(bool)arg1;
- (void)setGeneratesHistogram:(bool)arg1;
- (void)setMaxLossyCompressionLevel:(int)arg1;
- (void)setOutputDimensions:(struct { int x1; int x2; })arg1;
- (void)setOverCaptureNotSupportedByDownstreamNodes:(bool)arg1;
- (void)setPreviewTapRegistered:(bool)arg1;
- (void)setPreviewsWideBeforeSlaveStreamStarts:(bool)arg1;
- (void)setPrimaryCameraAspectRatio:(double)arg1;
- (void)setPrimaryCaptureRectAspectRatio:(double)arg1 center:(struct CGPoint { double x1; double x2; })arg2 trueVideoTransitionPercentComplete:(double)arg3 trueVideoTransitionReferenceSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg4 fencePortSendRight:(id)arg5;
- (void)setPrimaryCaptureRectCenterX:(double)arg1;
- (void)setPrimaryCaptureRectYInset:(double)arg1;
- (void)setRebuildingGraphForTrueVideoTransition:(bool)arg1;
- (void)setRotationDegrees:(int)arg1;
- (void)setStoppingForModeSwitch:(bool)arg1 delayedEndOfDataEnabled:(bool)arg2 ispFastSwitchEnabled:(bool)arg3 smartStyleRenderingEnabledInTrueVideoGraph:(bool)arg4;
- (void)setSuperWideFallbackForMacroSceneEnabled:(bool)arg1;
- (void)setThermalPressureIsCritical:(bool)arg1;
- (void)setTrueVideoCaptureAdditionalZoomFactor:(double)arg1;
- (void)setTrueVideoCaptureEnabled:(bool)arg1;
- (void)setTrueVideoCaptureFormatIs4K:(bool)arg1;
- (void)setWaitsForFencedUpdateBeforeFirstEmit:(bool)arg1;
- (void)setWaitsForRegistrationToComplete:(bool)arg1;
- (bool)superWideFallbackForMacroSceneEnabled;
- (float)superWideFocusDistance;
- (bool)thermalPressureIsCritical;
- (bool)tooCloseFor1xStitching;
- (bool)tooCloseForSuperWideRegistration;
- (double)trueVideoCaptureAdditionalZoomFactor;
- (bool)trueVideoCaptureEnabled;
- (bool)trueVideoCaptureFormatIs4K;
- (double)trueVideoTransitionPercentComplete;
- (struct opaqueCMSampleBuffer { }*)trueVideoTransitionReferenceSampleBuffer;
- (bool)waitsForFencedUpdateBeforeFirstEmit;
- (bool)waitsForRegistrationToComplete;
- (float)wideBaseZoomFactor;
- (id)wideFallbackDescription;
- (float)wideFocusDistance;

@end
