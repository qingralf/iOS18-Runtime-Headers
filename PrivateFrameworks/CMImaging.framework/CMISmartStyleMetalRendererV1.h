/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CMImaging.framework/CMImaging
 */

@interface CMISmartStyleMetalRendererV1 : NSObject <CMISmartStyleMetalRenderer> {
    <MTLComputePipelineState> * _YCbCrToRGBColorConversionPipelineState;
    float  _baselineExposure;
    <MTLTexture> * _bgLTMGainMapTexture;
    NSNumber * _brightnessValue;
    NSDictionary * _cameraInfoByPortType;
    CMIGuidedFilter * _cmiGuidedFilter;
    struct { 
        struct { 
            int transferFunction; 
            struct { 
                /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[3]; 
            } colorConversionMatrix; 
        } inputImage; 
        struct { 
            int transferFunction; 
            struct { 
                void*columns[3]; 
            } colorConversionMatrix; 
        } inputMasks; 
    }  _colorManagement;
    <MTLComputePipelineState> * _createGuidePipelineStateUsingImageBlock;
    <MTLComputePipelineState> * _createGuidePipelineStateWithoutImageBlock;
    <MTLComputePipelineState> * _createLTMGainMapPipelineStateUsingImageBlock;
    <MTLComputePipelineState> * _createLTMGainMapPipelineStateWithoutImageBlock;
    <MTLTexture> * _cubicSplineToneCurveTexture;
    <MTLComputePipelineState> * _encodeLinearPipelineState;
    float  _faceBasedGlobalExposureBoostRatio;
    <MTLTexture> * _fgLTMGainMapTexture;
    <MTLTexture> * _fgbgMatteTexture;
    <MTLComputePipelineState> * _globalHistogramPipelineState;
    <MTLComputePipelineState> * _globalStatsPipelineState;
    <MTLTexture> * _guideTexture;
    <MTLComputePipelineState> * _hueSatLumLUTPipelineState;
    NSDictionary * _hueSatLumLUTTexByCastTypeForVariant;
    <MTLComputePipelineState> * _imageReduction;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _inputBgLTMGainMapTextureMappedRegion;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _inputFgLTMGainMapTextureMappedRegion;
    <MTLTexture> * _inputGainMapTexture;
    <MTLTexture> * _inputGlobalToneCurveTexture;
    <MTLTexture> * _inputImageTexture;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _inputImageTextureMappedRegion;
    <MTLTexture> * _inputImageThumbnailTexture;
    <MTLTexture> * _inputLightMapTexture;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _inputLightMapTextureMappedRegion;
    float  _inputLinearBaseGain;
    float  _inputLinearEncodingGain;
    <MTLTexture> * _inputLinearImageChromaTexture;
    <MTLTexture> * _inputLinearImageLumaTexture;
    <MTLTexture> * _inputLinearImageTexture;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _inputLinearImageTextureMappedRegion;
    <MTLTexture> * _inputLinearLightMapTexture;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _inputLinearLightMapTextureMappedRegion;
    <MTLTexture> * _inputPersonMaskTexture;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _inputPersonMaskTextureMappedRegion;
    <MTLBuffer> * _inputSRLCoefficientsBuf;
    float  _inputSRLCurveParameter;
    <MTLTexture> * _inputSkinMaskTexture;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _inputSkinMaskTextureMappedRegion;
    <MTLTexture> * _inputSkyMaskTexture;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _inputSkyMaskTextureMappedRegion;
    <MTLTexture> * _inputSmallLightMapTexture;
    <MTLTexture> * _inputSmallLinearLightMapTexture;
    NSDictionary * _inputStatisticsByStatsKey;
    NSDictionary * _inputStatisticsByStatsType;
    CMISmartStyleV1 * _inputStyle;
    NSString * _instanceLabel;
    SmartStyleRendererPlist * _internalTuningParams;
    <MTLTexture> * _linearGuideTexture;
    <MTLComputePipelineState> * _localHistogramStatsAll;
    struct CGSize { 
        double width; 
        double height; 
    }  _logicalImageSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _logicalImageToBgLTMGainMapScale;
    struct CGSize { 
        double width; 
        double height; 
    }  _logicalImageToFgLTMGainMapScale;
    struct CGSize { 
        double width; 
        double height; 
    }  _logicalImageToInputImageScale;
    struct CGSize { 
        double width; 
        double height; 
    }  _logicalImageToInputLightMapScale;
    struct CGSize { 
        double width; 
        double height; 
    }  _logicalImageToInputLinearImageScale;
    struct CGSize { 
        double width; 
        double height; 
    }  _logicalImageToInputLinearLightMapScale;
    struct CGSize { 
        double width; 
        double height; 
    }  _logicalImageToInputPersonMaskScale;
    struct CGSize { 
        double width; 
        double height; 
    }  _logicalImageToInputSkinMaskScale;
    struct CGSize { 
        double width; 
        double height; 
    }  _logicalImageToInputSkyMaskScale;
    FigMetalContext * _metalContext;
    NSMutableDictionary * _outputCodedLinearMetadata;
    <MTLTexture> * _outputCodedLinearTexture;
    <MTLTexture> * _outputGainMapTexture;
    NSMutableDictionary * _outputImageStatistics;
    NSMutableDictionary * _outputImageStatisticsExtended;
    <MTLTexture> * _outputImageTexture;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _outputImageTextureMappedRegion;
    <MTLTexture> * _outputSmallLightMapTexture;
    <MTLTexture> * _outputSmallLinearLightMapTexture;
    <MTLBuffer> * _paramsBuf;
    float  _personMasksValidHint;
    int  _processingType;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _renderRegionRect;
    <MTLComputePipelineState> * _renderSmartStylePipelineStateUsingImageBlock;
    <MTLComputePipelineState> * _renderSmartStylePipelineStateWithoutImageBlock;
    <MTLComputePipelineState> * _renderingParamsFromStatsPipelineState;
    NSString * _sceneType;
    int  _semanticStyleSceneType;
    FigMetalAllocator * _sharedAccessAllocator;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _sharedAccessAllocatorLock;
    MTLSharedEventListener * _sharedEventListener;
    bool  _shouldCreateLTMGainMap;
    bool  _shouldUpsampleInputPersonMask;
    <MTLTexture> * _skinMatteTexture;
    <MTLTexture> * _skyMatteTexture;
    <MTLTexture> * _smallLightMapTexture;
    <MTLTexture> * _smallLinearLightMapTexture;
    <MTLBuffer> * _statsBuf;
    <MTLComputePipelineState> * _sumPersonAndSkinCounts;
    NSMutableSet * _texturesToPurge;
    NSString * _tuningParameterVariant;
    NSDictionary * _tuningParameters;
    <MTLComputePipelineState> * _updateBaseGainWithStats;
    bool  _useFaceBasedGlobalExposureBoostRatio;
    bool  _useLiveMetalAllocations;
}

@property (nonatomic) float baselineExposure;
@property (nonatomic, retain) NSNumber *brightnessValue;
@property (nonatomic, retain) NSDictionary *cameraInfoByPortType;
@property (nonatomic) float castIntensity;
@property (nonatomic, retain) NSString *castType;
@property (nonatomic) float colorBias;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (nonatomic, readonly) NSDictionary *defaultUserBiasByCastType;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) CMIExternalMemoryResource *externalMemoryResource; /* unknown property attribute: ? */
@property (nonatomic) float faceBasedGlobalExposureBoostRatio;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) <MTLTexture> *inputGainMapTexture;
@property (nonatomic, retain) <MTLTexture> *inputGlobalToneCurveTexture;
@property (nonatomic, retain) <MTLTexture> *inputImageTexture;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } inputImageTextureMappedRegion;
@property (nonatomic, retain) <MTLTexture> *inputImageThumbnailTexture;
@property (nonatomic, retain) <MTLTexture> *inputLightMapTexture;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } inputLightMapTextureMappedRegion;
@property (nonatomic) float inputLinearBaseGain;
@property (nonatomic) float inputLinearEncodingGain;
@property (nonatomic, retain) <MTLTexture> *inputLinearImageChromaTexture;
@property (nonatomic) float inputLinearImageGainDownRatio;
@property (nonatomic, retain) <MTLTexture> *inputLinearImageLumaTexture;
@property (nonatomic, retain) <MTLTexture> *inputLinearImageRGBTexture;
@property (nonatomic, retain) <MTLTexture> *inputLinearImageTexture;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } inputLinearImageTextureMappedRegion;
@property (nonatomic, retain) <MTLTexture> *inputLinearLightMapTexture;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } inputLinearLightMapTextureMappedRegion;
@property (nonatomic, retain) <MTLTexture> *inputPersonMaskTexture;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } inputPersonMaskTextureMappedRegion;
@property (nonatomic, retain) <MTLBuffer> *inputSRLCoefficientsBuf;
@property (nonatomic) float inputSRLCurveParameter;
@property (nonatomic, retain) <MTLTexture> *inputSkinMaskTexture;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } inputSkinMaskTextureMappedRegion;
@property (nonatomic, retain) <MTLTexture> *inputSkyMaskTexture;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } inputSkyMaskTextureMappedRegion;
@property (nonatomic, retain) <MTLTexture> *inputSmallLightMapTexture;
@property (nonatomic, retain) <MTLTexture> *inputSmallLinearLightMapTexture;
@property (nonatomic, retain) NSDictionary *inputStatisticsByStatsKey;
@property (nonatomic, retain) NSDictionary *inputStatisticsByStatsType;
@property (nonatomic, retain) <CMISmartStyle> *inputStyle;
@property (nonatomic, retain) NSString *instanceLabel;
@property (nonatomic) struct CGSize { double x1; double x2; } logicalImageSize;
@property (nonatomic) struct CGSize { double x1; double x2; } logicalImageToBgLTMGainMapScale;
@property (nonatomic) struct CGSize { double x1; double x2; } logicalImageToFgLTMGainMapScale;
@property (nonatomic) struct CGSize { double x1; double x2; } logicalImageToInputImageScale;
@property (nonatomic) struct CGSize { double x1; double x2; } logicalImageToInputLightMapScale;
@property (nonatomic) struct CGSize { double x1; double x2; } logicalImageToInputLinearImageScale;
@property (nonatomic) struct CGSize { double x1; double x2; } logicalImageToInputLinearLightMapScale;
@property (nonatomic) struct CGSize { double x1; double x2; } logicalImageToInputPersonMaskScale;
@property (nonatomic) struct CGSize { double x1; double x2; } logicalImageToInputSkinMaskScale;
@property (nonatomic) struct CGSize { double x1; double x2; } logicalImageToInputSkyMaskScale;
@property (nonatomic, retain) <MTLCommandQueue> *metalCommandQueue;
@property (nonatomic, retain) NSMutableDictionary *outputCodedLinearMetadata;
@property (nonatomic, retain) <MTLTexture> *outputCodedLinearTexture;
@property (nonatomic, retain) <MTLTexture> *outputGainMapTexture;
@property (nonatomic, retain) NSMutableDictionary *outputImageStatistics;
@property (nonatomic, retain) NSMutableDictionary *outputImageStatisticsExtended;
@property (nonatomic, retain) <MTLTexture> *outputImageTexture;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } outputImageTextureMappedRegion;
@property (nonatomic, retain) <MTLTexture> *outputSmallLightMapTexture;
@property (nonatomic, retain) <MTLTexture> *outputSmallLinearLightMapTexture;
@property (nonatomic) float personMasksValidHint;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } renderRegionRect;
@property (nonatomic, retain) NSString *sceneType;
@property (nonatomic) int semanticStyleSceneType;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool supportsExternalMemoryResource; /* unknown property attribute: ? */
@property (nonatomic) float toneBias;
@property (nonatomic, retain) NSString *tuningParameterVariant;
@property (nonatomic, retain) NSDictionary *tuningParameters;
@property (nonatomic) bool useLiveMetalAllocations;

- (void).cxx_destruct;
- (int)_allocateResources;
- (int)_applyFinalRendering;
- (int)_calculateCubicSplineToneCurve;
- (int)_calculateDynamicRenderParameters;
- (int)_calculateHistogramStatsWithImageTexture:(id)arg1 linearImageTexture:(id)arg2 personMaskTexture:(id)arg3 skinMaskTexture:(id)arg4;
- (id)_calculateHueSatLumLUTTexForAllCastTypesAndVariants;
- (void)_checkAndCreateInputStyle;
- (int)_checkROISpecification;
- (int)_checkROISpecificationForStatsCalculation;
- (int)_compileMetalShadersForProcessingType:(int)arg1;
- (void)_configureColorConversion:(struct { int x1; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_2_1_1[3]; } x2; }*)arg1 forTexture:(id)arg2 isOutput:(bool)arg3;
- (int)_convertLinearYCbCrToRGB:(id)arg1 inputChromaTexture:(id)arg2 outputRGBTexture:(id)arg3;
- (int)_createGuideImage;
- (int)_createGuideImageForInputTexture:(id)arg1 outputGuideTexture:(id)arg2 isInputLinear:(bool)arg3 isOutputLumaGuide:(bool)arg4;
- (int)_encodeImageReduction:(id)arg1 inputTexture:(id)arg2 inputROI:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 inputColorConversion:(struct { int x1; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_2_1_1[3]; } x2; })arg4 outputStatsBuffer:(id)arg5 outputStatsBufferOffset:(unsigned int)arg6;
- (int)_encodeLinear;
- (void)_encodeRenderRegion:(struct { }*)arg1;
- (void)_encodeRenderRegionForStats:(struct { }*)arg1;
- (int)_finalRenderRegion:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_newBufferWithLength:(unsigned long long)arg1 label:(id)arg2 sharedAccess:(bool)arg3;
- (id)_newTexture2DWithFormat:(unsigned long long)arg1 width:(unsigned long long)arg2 height:(unsigned long long)arg3 usage:(unsigned long long)arg4 disableCompression:(bool)arg5 label:(id)arg6 retainUntilPurge:(bool)arg7 useFigMetalAllocator:(bool)arg8;
- (id)_newTexture2DWithFormat:(unsigned long long)arg1 width:(unsigned long long)arg2 height:(unsigned long long)arg3 usage:(unsigned long long)arg4 label:(id)arg5 retainUntilPurge:(bool)arg6 useFigMetalAllocator:(bool)arg7;
- (int)_populatePreComputedStats:(struct { unsigned int x1[10][256]; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; float x_2_1_5; float x_2_1_6; float x_2_1_7; float x_2_1_8; float x_2_1_9; } x2[10]; unsigned int x3; unsigned int x4; float x5; float x6; struct { float x_7_1_1; float x_7_1_2; float x_7_1_3; } x7; struct { float x_8_1_1; float x_8_1_2; float x_8_1_3; } x8; }*)arg1 inputStatisticsByStatsType:(id)arg2 inputStatisticsByStatsKey:(id)arg3;
- (int)_populateStaticRenderParametersFromTuning:(id)arg1 inputStatisticsByStatsKey:(id)arg2;
- (int)_processLTMGainMap;
- (int)_processSegmentationMasks;
- (int)_releaseIntermediateResources;
- (void)_resetTextureMappedRegions;
- (int)_runImageReductionAndUpdateBaseGain:(bool)arg1;
- (float)_sceneBrightnessValue;
- (int)_setupStatsAndRenderParamBuffer;
- (void)_updateColorManagementForInputs;
- (void)_updateHazeTuningAdjustments:(struct { unsigned int x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; unsigned int x9; struct { float x_10_1_1; float x_10_1_2; float x_10_1_3; float x_10_1_4; float x_10_1_5; float x_10_1_6; float x_10_1_7[3]; float x_10_1_8[3]; float x_10_1_9[3]; float x_10_1_10; float x_10_1_11; float x_10_1_12; float x_10_1_13[3]; float x_10_1_14[3]; float x_10_1_15[3]; float x_10_1_16; float x_10_1_17; float x_10_1_18; float x_10_1_19; float x_10_1_20; float x_10_1_21; float x_10_1_22; } x10; struct { float x_11_1_1; float x_11_1_2; float x_11_1_3; float x_11_1_4; float x_11_1_5; float x_11_1_6; float x_11_1_7; float x_11_1_8; float x_11_1_9; float x_11_1_10; float x_11_1_11; float x_11_1_12; float x_11_1_13; float x_11_1_14; float x_11_1_15; float x_11_1_16; float x_11_1_17; float x_11_1_18; float x_11_1_19; float x_11_1_20; float x_11_1_21; float x_11_1_22; float x_11_1_23; float x_11_1_24; float x_11_1_25; float x_11_1_26; float x_11_1_27; float x_11_1_28; float x_11_1_29; float x_11_1_30; float x_11_1_31; float x_11_1_32; float x_11_1_33; float x_11_1_34; float x_11_1_35; float x_11_1_36; float x_11_1_37; float x_11_1_38; float x_11_1_39; float x_11_1_40; float x_11_1_41; float x_11_1_42; float x_11_1_43; float x_11_1_44; float x_11_1_45; float x_11_1_46; float x_11_1_47; float x_11_1_48; float x_11_1_49; float x_11_1_50; float x_11_1_51; float x_11_1_52; float x_11_1_53; float x_11_1_54; float x_11_1_55; float x_11_1_56; float x_11_1_57; float x_11_1_58; float x_11_1_59; float x_11_1_60; float x_11_1_61; } x11; }*)arg1;
- (int)_updateRenderPipelineConfigForInputs;
- (int)_upsampleLightMap;
- (float)baselineExposure;
- (id)brightnessValue;
- (id)cameraInfoByPortType;
- (float)castIntensity;
- (id)castType;
- (float)colorBias;
- (void)dealloc;
- (id)defaultUserBiasByCastType;
- (float)faceBasedGlobalExposureBoostRatio;
- (int)finishProcessing;
- (id)initWithMetalContext:(id)arg1;
- (id)initWithOptionalMetalCommandQueue:(id)arg1;
- (id)inputGainMapTexture;
- (id)inputGlobalToneCurveTexture;
- (id)inputImageTexture;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })inputImageTextureMappedRegion;
- (id)inputImageThumbnailTexture;
- (id)inputLightMapTexture;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })inputLightMapTextureMappedRegion;
- (float)inputLinearBaseGain;
- (float)inputLinearEncodingGain;
- (id)inputLinearImageChromaTexture;
- (float)inputLinearImageGainDownRatio;
- (id)inputLinearImageLumaTexture;
- (id)inputLinearImageRGBTexture;
- (id)inputLinearImageTexture;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })inputLinearImageTextureMappedRegion;
- (id)inputLinearLightMapTexture;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })inputLinearLightMapTextureMappedRegion;
- (id)inputPersonMaskTexture;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })inputPersonMaskTextureMappedRegion;
- (id)inputSRLCoefficientsBuf;
- (float)inputSRLCurveParameter;
- (id)inputSkinMaskTexture;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })inputSkinMaskTextureMappedRegion;
- (id)inputSkyMaskTexture;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })inputSkyMaskTextureMappedRegion;
- (id)inputSmallLightMapTexture;
- (id)inputSmallLinearLightMapTexture;
- (id)inputStatisticsByStatsKey;
- (id)inputStatisticsByStatsType;
- (id)inputStyle;
- (id)instanceLabel;
- (struct CGSize { double x1; double x2; })logicalImageSize;
- (struct CGSize { double x1; double x2; })logicalImageToBgLTMGainMapScale;
- (struct CGSize { double x1; double x2; })logicalImageToFgLTMGainMapScale;
- (struct CGSize { double x1; double x2; })logicalImageToInputImageScale;
- (struct CGSize { double x1; double x2; })logicalImageToInputLightMapScale;
- (struct CGSize { double x1; double x2; })logicalImageToInputLinearImageScale;
- (struct CGSize { double x1; double x2; })logicalImageToInputLinearLightMapScale;
- (struct CGSize { double x1; double x2; })logicalImageToInputPersonMaskScale;
- (struct CGSize { double x1; double x2; })logicalImageToInputSkinMaskScale;
- (struct CGSize { double x1; double x2; })logicalImageToInputSkyMaskScale;
- (id)metalCommandQueue;
- (id)outputCodedLinearMetadata;
- (id)outputCodedLinearTexture;
- (id)outputGainMapTexture;
- (id)outputImageStatistics;
- (id)outputImageStatisticsExtended;
- (id)outputImageTexture;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })outputImageTextureMappedRegion;
- (id)outputSmallLightMapTexture;
- (id)outputSmallLinearLightMapTexture;
- (float)personMasksValidHint;
- (int)prepareToProcess:(unsigned int)arg1;
- (int)prewarm;
- (int)process;
- (int)purgeResources;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })renderRegionRect;
- (int)resetState;
- (id)sceneType;
- (int)semanticStyleSceneType;
- (void)setBaselineExposure:(float)arg1;
- (void)setBrightnessValue:(id)arg1;
- (void)setCameraInfoByPortType:(id)arg1;
- (void)setCastIntensity:(float)arg1;
- (void)setCastType:(id)arg1;
- (void)setColorBias:(float)arg1;
- (void)setFaceBasedGlobalExposureBoostRatio:(float)arg1;
- (void)setInputGainMapTexture:(id)arg1;
- (void)setInputGlobalToneCurveTexture:(id)arg1;
- (void)setInputImageTexture:(id)arg1;
- (void)setInputImageTextureMappedRegion:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setInputImageThumbnailTexture:(id)arg1;
- (void)setInputLightMapTexture:(id)arg1;
- (void)setInputLightMapTextureMappedRegion:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setInputLinearBaseGain:(float)arg1;
- (void)setInputLinearEncodingGain:(float)arg1;
- (void)setInputLinearImageChromaTexture:(id)arg1;
- (void)setInputLinearImageGainDownRatio:(float)arg1;
- (void)setInputLinearImageLumaTexture:(id)arg1;
- (void)setInputLinearImageRGBTexture:(id)arg1;
- (void)setInputLinearImageTexture:(id)arg1;
- (void)setInputLinearImageTextureMappedRegion:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setInputLinearLightMapTexture:(id)arg1;
- (void)setInputLinearLightMapTextureMappedRegion:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setInputPersonMaskTexture:(id)arg1;
- (void)setInputPersonMaskTextureMappedRegion:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setInputSRLCoefficientsBuf:(id)arg1;
- (void)setInputSRLCurveParameter:(float)arg1;
- (void)setInputSkinMaskTexture:(id)arg1;
- (void)setInputSkinMaskTextureMappedRegion:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setInputSkyMaskTexture:(id)arg1;
- (void)setInputSkyMaskTextureMappedRegion:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setInputSmallLightMapTexture:(id)arg1;
- (void)setInputSmallLinearLightMapTexture:(id)arg1;
- (void)setInputStatisticsByStatsKey:(id)arg1;
- (void)setInputStatisticsByStatsType:(id)arg1;
- (void)setInputStyle:(id)arg1;
- (void)setInstanceLabel:(id)arg1;
- (void)setLogicalImageSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setLogicalImageToBgLTMGainMapScale:(struct CGSize { double x1; double x2; })arg1;
- (void)setLogicalImageToFgLTMGainMapScale:(struct CGSize { double x1; double x2; })arg1;
- (void)setLogicalImageToInputImageScale:(struct CGSize { double x1; double x2; })arg1;
- (void)setLogicalImageToInputLightMapScale:(struct CGSize { double x1; double x2; })arg1;
- (void)setLogicalImageToInputLinearImageScale:(struct CGSize { double x1; double x2; })arg1;
- (void)setLogicalImageToInputLinearLightMapScale:(struct CGSize { double x1; double x2; })arg1;
- (void)setLogicalImageToInputPersonMaskScale:(struct CGSize { double x1; double x2; })arg1;
- (void)setLogicalImageToInputSkinMaskScale:(struct CGSize { double x1; double x2; })arg1;
- (void)setLogicalImageToInputSkyMaskScale:(struct CGSize { double x1; double x2; })arg1;
- (void)setMetalCommandQueue:(id)arg1;
- (void)setOutputCodedLinearMetadata:(id)arg1;
- (void)setOutputCodedLinearTexture:(id)arg1;
- (void)setOutputGainMapTexture:(id)arg1;
- (void)setOutputImageStatistics:(id)arg1;
- (void)setOutputImageStatisticsExtended:(id)arg1;
- (void)setOutputImageTexture:(id)arg1;
- (void)setOutputImageTextureMappedRegion:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setOutputSmallLightMapTexture:(id)arg1;
- (void)setOutputSmallLinearLightMapTexture:(id)arg1;
- (void)setPersonMasksValidHint:(float)arg1;
- (void)setRenderRegionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setSceneType:(id)arg1;
- (void)setSemanticStyleSceneType:(int)arg1;
- (void)setToneBias:(float)arg1;
- (void)setTuningParameterVariant:(id)arg1;
- (void)setTuningParameters:(id)arg1;
- (void)setUseLiveMetalAllocations:(bool)arg1;
- (int)setup;
- (float)toneBias;
- (id)tuningParameterVariant;
- (id)tuningParameters;
- (bool)useLiveMetalAllocations;

@end
