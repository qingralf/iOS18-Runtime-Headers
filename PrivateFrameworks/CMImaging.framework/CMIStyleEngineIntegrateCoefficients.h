/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CMImaging.framework/CMImaging
 */

@interface CMIStyleEngineIntegrateCoefficients : NSObject <CMIStyleEngineProcessingStage> {
    <MTLComputePipelineState> * _computePipelineState;
    float  _globalLinearSystemMixFactor;
    bool  _globalSpatialExtrapolation;
    float  _globalSpatialExtrapolationRampFactor;
    <MTLBuffer> * _inputCoefficientsBuffer;
    <MTLTexture> * _inputCoefficientsTexture;
    <MTLTexture> * _inputWeightPlanesTexture;
    <MTLBuffer> * _linearSystemStatus;
    float  _maxGlobalMixFactor;
    <MTLTexture> * _outputIntegratedCoefficientsTexture;
    <MTLSamplerState> * _sampler;
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[3]; 
    }  _spotlightAffineTransform;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _spotlightROI;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _spotlightZoomROI;
    bool  _useBicubicSampling;
}

@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (nonatomic) float globalLinearSystemMixFactor;
@property (nonatomic) bool globalSpatialExtrapolation;
@property (nonatomic) float globalSpatialExtrapolationRampFactor;
@property (readonly) unsigned long long hash;
@property (nonatomic) <MTLBuffer> *inputCoefficientsBuffer;
@property (nonatomic) <MTLTexture> *inputCoefficientsTexture;
@property (nonatomic) <MTLTexture> *inputWeightPlanesTexture;
@property (nonatomic) <MTLBuffer> *linearSystemStatus;
@property (nonatomic) float maxGlobalMixFactor;
@property (nonatomic) <MTLTexture> *outputIntegratedCoefficientsTexture;
@property (nonatomic) struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; } spotlightAffineTransform;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } spotlightROI;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } spotlightZoomROI;
@property (readonly) Class superclass;
@property (nonatomic) bool useBicubicSampling;

- (void).cxx_destruct;
- (int)_compileShaders:(id)arg1;
- (int)_createSamplers:(id)arg1;
- (int)enqueueToCommandBuffer:(id)arg1;
- (float)globalLinearSystemMixFactor;
- (bool)globalSpatialExtrapolation;
- (float)globalSpatialExtrapolationRampFactor;
- (id)initWithMetalContext:(id)arg1;
- (id)inputCoefficientsBuffer;
- (id)inputCoefficientsTexture;
- (id)inputWeightPlanesTexture;
- (id)linearSystemStatus;
- (float)maxGlobalMixFactor;
- (id)outputIntegratedCoefficientsTexture;
- (void)setGlobalLinearSystemMixFactor:(float)arg1;
- (void)setGlobalSpatialExtrapolation:(bool)arg1;
- (void)setGlobalSpatialExtrapolationRampFactor:(float)arg1;
- (void)setInputCoefficientsBuffer:(id)arg1;
- (void)setInputCoefficientsTexture:(id)arg1;
- (void)setInputWeightPlanesTexture:(id)arg1;
- (void)setLinearSystemStatus:(id)arg1;
- (void)setMaxGlobalMixFactor:(float)arg1;
- (void)setOutputIntegratedCoefficientsTexture:(id)arg1;
- (void)setSpotlightAffineTransform:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; })arg1;
- (void)setSpotlightROI:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setSpotlightZoomROI:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setUseBicubicSampling:(bool)arg1;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; })spotlightAffineTransform;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })spotlightROI;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })spotlightZoomROI;
- (bool)useBicubicSampling;

@end
