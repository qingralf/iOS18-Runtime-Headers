/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CTBlastDoorSupport.framework/CTBlastDoorSupport
 */

@interface CTBChatBotMessageWrapper : NSObject {
    struct optional<ctb::chatbot::Message> { 
        union { 
            BOOL __null_state_; 
            struct Message { 
                struct optional<std::variant<ctb::chatbot::CardMessage, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList>> { 
                    union { 
                        BOOL __null_state_; 
                        struct variant<ctb::chatbot::CardMessage, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList> { 
                            struct __impl<ctb::chatbot::CardMessage, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList> { 
                                union __union<std::__variant_detail::_Trait::_Available, 0UL, ctb::chatbot::CardMessage, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList> { 
                                    BOOL __dummy; 
                                    struct __alt<0UL, ctb::chatbot::CardMessage> { 
                                        struct CardMessage { 
                                            struct CardLayout { 
                                                int fCardOrientation; 
                                                int fImageAlignment; 
                                                struct optional<ctb::chatbot::CardTitleStyle> { 
                                                    union { 
                                                        BOOL __null_state_; 
                                                        struct CardTitleStyle { 
                                                            struct CardFontStyle { 
                                                                bool fBold; 
                                                                bool fItalics; 
                                                                bool fUnderline; 
                                                            } fStyle; 
                                                        } __val_; 
                                                    } ; 
                                                    bool __engaged_; 
                                                } fTitleStyle; 
                                                struct optional<ctb::chatbot::CardDescriptionStyle> { 
                                                    union { 
                                                        BOOL __null_state_; 
                                                        struct CardDescriptionStyle { 
                                                            struct CardFontStyle { 
                                                                bool fBold; 
                                                                bool fItalics; 
                                                                bool fUnderline; 
                                                            } fStyle; 
                                                        } __val_; 
                                                    } ; 
                                                    bool __engaged_; 
                                                } fDescriptionStyle; 
                                                struct optional<ctb::chatbot::CardStyle> { 
                                                    union { 
                                                        BOOL __null_state_; 
                                                        struct CardStyle { 
                                                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                                    struct __rep { 
                                                                        union { 
                                                                            struct __short { 
                                                                                BOOL __data_[23]; 
                                                                                unsigned char __padding_[0]; 
                                                                                unsigned int __size_ : 7; 
                                                                                unsigned int __is_long_ : 1; 
                                                                            } __s; 
                                                                            struct __long { 
                                                                                char *__data_; 
                                                                                unsigned long long __size_; 
                                                                                unsigned int __cap_ : 63; 
                                                                                unsigned int __is_long_ : 1; 
                                                                            } __l; 
                                                                            struct __raw { 
                                                                                unsigned long long __words[3]; 
                                                                            } __r; 
                                                                        } ; 
                                                                    } __value_; 
                                                                } __r_; 
                                                            } fUri; 
                                                        } __val_; 
                                                    } ; 
                                                    bool __engaged_; 
                                                } fCardStyle; 
                                            } fLayout; 
                                            struct CardContent { 
                                                struct optional<ctb::chatbot::CardMedia> { 
                                                    union { 
                                                        BOOL __null_state_; 
                                                        struct CardMedia { 
                                                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                                    struct __rep { 
                                                                        union { 
                                                                            struct __short { 
                                                                                BOOL __data_[23]; 
                                                                                unsigned char __padding_[0]; 
                                                                                unsigned int __size_ : 7; 
                                                                                unsigned int __is_long_ : 1; 
                                                                            } __s; 
                                                                            struct __long { 
                                                                                char *__data_; 
                                                                                unsigned long long __size_; 
                                                                                unsigned int __cap_ : 63; 
                                                                                unsigned int __is_long_ : 1; 
                                                                            } __l; 
                                                                            struct __raw { 
                                                                                unsigned long long __words[3]; 
                                                                            } __r; 
                                                                        } ; 
                                                                    } __value_; 
                                                                } __r_; 
                                                            } fMediaUrl; 
                                                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                                    struct __rep { 
                                                                        union { 
                                                                            struct __short { 
                                                                                BOOL __data_[23]; 
                                                                                unsigned char __padding_[0]; 
                                                                                unsigned int __size_ : 7; 
                                                                                unsigned int __is_long_ : 1; 
                                                                            } __s; 
                                                                            struct __long { 
                                                                                char *__data_; 
                                                                                unsigned long long __size_; 
                                                                                unsigned int __cap_ : 63; 
                                                                                unsigned int __is_long_ : 1; 
                                                                            } __l; 
                                                                            struct __raw { 
                                                                                unsigned long long __words[3]; 
                                                                            } __r; 
                                                                        } ; 
                                                                    } __value_; 
                                                                } __r_; 
                                                            } fMediaContentType; 
                                                            unsigned long long fMediaFileSize; 
                                                            struct optional<std::string> { 
                                                                union { 
                                                                    BOOL __null_state_; 
                                                                    struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                                                        struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                                            struct __rep { 
                                                                                union { 
                                                                                    struct __short { 
                                                                                        BOOL __data_[23]; 
                                                                                        unsigned char __padding_[0]; 
                                                                                        unsigned int __size_ : 7; 
                                                                                        unsigned int __is_long_ : 1; 
                                                                                    } __s; 
                                                                                    struct __long { 
                                                                                        char *__data_; 
                                                                                        unsigned long long __size_; 
                                                                                        unsigned int __cap_ : 63; 
                                                                                        unsigned int __is_long_ : 1; 
                                                                                    } __l; 
                                                                                    struct __raw { 
                                                                                        unsigned long long __words[3]; 
                                                                                    } __r; 
                                                                                } ; 
                                                                            } __value_; 
                                                                        } __r_; 
                                                                    } __val_; 
                                                                } ; 
                                                                bool __engaged_; 
                                                            } fThumbnailUrl; 
                                                            struct optional<std::string> { 
                                                                union { 
                                                                    BOOL __null_state_; 
                                                                    struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                                                        struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                                            struct __rep { 
                                                                                union { 
                                                                                    struct __short { 
                                                                                        BOOL __data_[23]; 
                                                                                        unsigned char __padding_[0]; 
                                                                                        unsigned int __size_ : 7; 
                                                                                        unsigned int __is_long_ : 1; 
                                                                                    } __s; 
                                                                                    struct __long { 
                                                                                        char *__data_; 
                                                                                        unsigned long long __size_; 
                                                                                        unsigned int __cap_ : 63; 
                                                                                        unsigned int __is_long_ : 1; 
                                                                                    } __l; 
                                                                                    struct __raw { 
                                                                                        unsigned long long __words[3]; 
                                                                                    } __r; 
                                                                                } ; 
                                                                            } __value_; 
                                                                        } __r_; 
                                                                    } __val_; 
                                                                } ; 
                                                                bool __engaged_; 
                                                            } fThumbnailContentType; 
                                                            struct optional<unsigned long> { 
                                                                union { 
                                                                    BOOL __null_state_; 
                                                                    unsigned long long __val_; 
                                                                } ; 
                                                                bool __engaged_; 
                                                            } fThumbnailFileSize; 
                                                            int fHeight; 
                                                            struct optional<std::string> { 
                                                                union { 
                                                                    BOOL __null_state_; 
                                                                    struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                                                        struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                                            struct __rep { 
                                                                                union { 
                                                                                    struct __short { 
                                                                                        BOOL __data_[23]; 
                                                                                        unsigned char __padding_[0]; 
                                                                                        unsigned int __size_ : 7; 
                                                                                        unsigned int __is_long_ : 1; 
                                                                                    } __s; 
                                                                                    struct __long { 
                                                                                        char *__data_; 
                                                                                        unsigned long long __size_; 
                                                                                        unsigned int __cap_ : 63; 
                                                                                        unsigned int __is_long_ : 1; 
                                                                                    } __l; 
                                                                                    struct __raw { 
                                                                                        unsigned long long __words[3]; 
                                                                                    } __r; 
                                                                                } ; 
                                                                            } __value_; 
                                                                        } __r_; 
                                                                    } __val_; 
                                                                } ; 
                                                                bool __engaged_; 
                                                            } fContentDescription; 
                                                        } __val_; 
                                                    } ; 
                                                    bool __engaged_; 
                                                } fMedia; 
                                                struct optional<ctb::chatbot::CardTitle> { 
                                                    union { 
                                                        BOOL __null_state_; 
                                                        struct CardTitle { 
                                                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                                    struct __rep { 
                                                                        union { 
                                                                            struct __short { 
                                                                                BOOL __data_[23]; 
                                                                                unsigned char __padding_[0]; 
                                                                                unsigned int __size_ : 7; 
                                                                                unsigned int __is_long_ : 1; 
                                                                            } __s; 
                                                                            struct __long { 
                                                                                char *__data_; 
                                                                                unsigned long long __size_; 
                                                                                unsigned int __cap_ : 63; 
                                                                                unsigned int __is_long_ : 1; 
                                                                            } __l; 
                                                                            struct __raw { 
                                                                                unsigned long long __words[3]; 
                                                                            } __r; 
                                                                        } ; 
                                                                    } __value_; 
                                                                } __r_; 
                                                            } fText; 
                                                        } __val_; 
                                                    } ; 
                                                    bool __engaged_; 
                                                } fTitle; 
                                                struct optional<ctb::chatbot::CardDescription> { 
                                                    union { 
                                                        BOOL __null_state_; 
                                                        struct CardDescription { 
                                                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                                    struct __rep { 
                                                                        union { 
                                                                            struct __short { 
                                                                                BOOL __data_[23]; 
                                                                                unsigned char __padding_[0]; 
                                                                                unsigned int __size_ : 7; 
                                                                                unsigned int __is_long_ : 1; 
                                                                            } __s; 
                                                                            struct __long { 
                                                                                char *__data_; 
                                                                                unsigned long long __size_; 
                                                                                unsigned int __cap_ : 63; 
                                                                                unsigned int __is_long_ : 1; 
                                                                            } __l; 
                                                                            struct __raw { 
                                                                                unsigned long long __words[3]; 
                                                                            } __r; 
                                                                        } ; 
                                                                    } __value_; 
                                                                } __r_; 
                                                            } fText; 
                                                        } __val_; 
                                                    } ; 
                                                    bool __engaged_; 
                                                } fCardDescription; 
                                                struct optional<ctb::chatbot::SuggestedChipList> { 
                                                    union { 
                                                        BOOL __null_state_; 
                                                        struct SuggestedChipList { 
                                                            struct vector<ctb::chatbot::SuggestedChip, std::allocator<ctb::chatbot::SuggestedChip>> { 
                                                                struct SuggestedChip {} *__begin_; 
                                                                struct SuggestedChip {} *__end_; 
                                                                struct __compressed_pair<ctb::chatbot::SuggestedChip *, std::allocator<ctb::chatbot::SuggestedChip>> { 
                                                                    struct SuggestedChip {} *__value_; 
                                                                } __end_cap_; 
                                                            } fList; 
                                                        } __val_; 
                                                    } ; 
                                                    bool __engaged_; 
                                                } fChipList; 
                                            } fContent; 
                                        } __value; 
                                    } __head; 
                                    union __union<std::__variant_detail::_Trait::_Available, 1UL, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList> { 
                                        BOOL __dummy; 
                                        struct __alt<1UL, ctb::chatbot::CardCarouselMessage> { 
                                            struct CardCarouselMessage { 
                                                struct CardCarouselLayout { 
                                                    int fWidth; 
                                                    struct optional<ctb::chatbot::CardTitleStyle> { 
                                                        union { 
                                                            BOOL __null_state_; 
                                                            struct CardTitleStyle { 
                                                                struct CardFontStyle { 
                                                                    bool fBold; 
                                                                    bool fItalics; 
                                                                    bool fUnderline; 
                                                                } fStyle; 
                                                            } __val_; 
                                                        } ; 
                                                        bool __engaged_; 
                                                    } fTitleStyle; 
                                                    struct optional<ctb::chatbot::CardDescriptionStyle> { 
                                                        union { 
                                                            BOOL __null_state_; 
                                                            struct CardDescriptionStyle { 
                                                                struct CardFontStyle { 
                                                                    bool fBold; 
                                                                    bool fItalics; 
                                                                    bool fUnderline; 
                                                                } fStyle; 
                                                            } __val_; 
                                                        } ; 
                                                        bool __engaged_; 
                                                    } fDescriptionStyle; 
                                                    struct optional<ctb::chatbot::CardStyle> { 
                                                        union { 
                                                            BOOL __null_state_; 
                                                            struct CardStyle { 
                                                                struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                                                    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                                        struct __rep { 
                                                                            union { 
                                                                                struct __short { 
                                                                                    BOOL __data_[23]; 
                                                                                    unsigned char __padding_[0]; 
                                                                                    unsigned int __size_ : 7; 
                                                                                    unsigned int __is_long_ : 1; 
                                                                                } __s; 
                                                                                struct __long { 
                                                                                    char *__data_; 
                                                                                    unsigned long long __size_; 
                                                                                    unsigned int __cap_ : 63; 
                                                                                    unsigned int __is_long_ : 1; 
                                                                                } __l; 
                                                                                struct __raw { 
                                                                                    unsigned long long __words[3]; 
                                                                                } __r; 
                                                                            } ; 
                                                                        } __value_; 
                                                                    } __r_; 
                                                                } fUri; 
                                                            } __val_; 
                                                        } ; 
                                                        bool __engaged_; 
                                                    } fCardStyle; 
                                                } fLayout; 
                                                struct vector<ctb::chatbot::CardCarouselContent, std::allocator<ctb::chatbot::CardCarouselContent>> { 
                                                    struct CardCarouselContent {} *__begin_; 
                                                    struct CardCarouselContent {} *__end_; 
                                                    struct __compressed_pair<ctb::chatbot::CardCarouselContent *, std::allocator<ctb::chatbot::CardCarouselContent>> { 
                                                        struct CardCarouselContent {} *__value_; 
                                                    } __end_cap_; 
                                                } fContent; 
                                            } __value; 
                                        } __head; 
                                        union __union<std::__variant_detail::_Trait::_Available, 2UL, ctb::chatbot::SuggestedChipList> { 
                                            BOOL __dummy; 
                                            struct __alt<2UL, ctb::chatbot::SuggestedChipList> { 
                                                struct SuggestedChipList { 
                                                    struct vector<ctb::chatbot::SuggestedChip, std::allocator<ctb::chatbot::SuggestedChip>> { 
                                                        struct SuggestedChip {} *__begin_; 
                                                        struct SuggestedChip {} *__end_; 
                                                        struct __compressed_pair<ctb::chatbot::SuggestedChip *, std::allocator<ctb::chatbot::SuggestedChip>> { 
                                                            struct SuggestedChip {} *__value_; 
                                                        } __end_cap_; 
                                                    } fList; 
                                                } __value; 
                                            } __head; 
                                            union __union<std::__variant_detail::_Trait::_Available, 3UL> { } __tail; 
                                        } __tail; 
                                    } __tail; 
                                } __data; 
                                unsigned int __index; 
                            } __impl_; 
                        } __val_; 
                    } ; 
                    bool __engaged_; 
                } fMessageContent; 
            } __val_; 
        } ; 
        bool __engaged_; 
    }  _wrapped;
}

@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{optional<ctb::chatbot::Message>=(?=c{Message={optional<std::variant<ctb::chatbot::CardMessage' */ struct  wrapped; /* unknown property attribute:  3UL>=))))I}})B}})B} */

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)initWithWrapped:(struct optional<ctb::chatbot::Message> { union { BOOL x_1_1_1; struct Message { struct optional<std::variant<ctb::chatbot::CardMessage, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList>> { union { BOOL x_1_4_1; struct variant<ctb::chatbot::CardMessage, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList> { struct __impl<ctb::chatbot::CardMessage, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList> { union __union<std::__variant_detail::_Trait::_Available, 0UL, ctb::chatbot::CardMessage, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList> { BOOL x_1_7_1; struct __alt<0UL, ctb::chatbot::CardMessage> { struct CardMessage { struct CardLayout { int x_1_10_1; int x_1_10_2; struct optional<ctb::chatbot::CardTitleStyle> { union { BOOL x_1_12_1; struct CardTitleStyle { struct CardFontStyle { bool x_1_14_1; bool x_1_14_2; bool x_1_14_3; } x_2_13_1; } x_1_12_2; } x_3_11_1; bool x_3_11_2; } x_1_10_3; struct optional<ctb::chatbot::CardDescriptionStyle> { union { BOOL x_1_12_1; struct CardDescriptionStyle { struct CardFontStyle { bool x_1_14_1; bool x_1_14_2; bool x_1_14_3; } x_2_13_1; } x_1_12_2; } x_4_11_1; bool x_4_11_2; } x_1_10_4; struct optional<ctb::chatbot::CardStyle> { union { BOOL x_1_12_1; struct CardStyle { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __short { BOOL x_1_18_1[23]; unsigned char x_1_18_2[0]; unsigned int x_1_18_3 : 7; unsigned int x_1_18_4 : 1; } x_1_17_1; struct __long { char *x_2_18_1; unsigned long long x_2_18_2; unsigned int x_2_18_3 : 63; unsigned int x_2_18_4 : 1; } x_1_17_2; struct __raw { unsigned long long x_3_18_1[3]; } x_1_17_3; } x_1_16_1; } x_1_15_1; } x_1_14_1; } x_2_13_1; } x_1_12_2; } x_5_11_1; bool x_5_11_2; } x_1_10_5; } x_1_9_1; } x_2_8_1; } x_1_7_2; } x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_2_2_1; } x_1_1_2; } x1; })arg1;
- (struct optional<ctb::chatbot::Message> { union { BOOL x_1_1_1; struct Message { struct optional<std::variant<ctb::chatbot::CardMessage, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList>> { union { BOOL x_1_4_1; struct variant<ctb::chatbot::CardMessage, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList> { struct __impl<ctb::chatbot::CardMessage, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList> { union __union<std::__variant_detail::_Trait::_Available, 0UL, ctb::chatbot::CardMessage, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList> { BOOL x_1_7_1; struct __alt<0UL, ctb::chatbot::CardMessage> { struct CardMessage { struct CardLayout { int x_1_10_1; int x_1_10_2; struct optional<ctb::chatbot::CardTitleStyle> { union { BOOL x_1_12_1; struct CardTitleStyle { struct CardFontStyle { bool x_1_14_1; bool x_1_14_2; bool x_1_14_3; } x_2_13_1; } x_1_12_2; } x_3_11_1; bool x_3_11_2; } x_1_10_3; struct optional<ctb::chatbot::CardDescriptionStyle> { union { BOOL x_1_12_1; struct CardDescriptionStyle { struct CardFontStyle { bool x_1_14_1; bool x_1_14_2; bool x_1_14_3; } x_2_13_1; } x_1_12_2; } x_4_11_1; bool x_4_11_2; } x_1_10_4; struct optional<ctb::chatbot::CardStyle> { union { BOOL x_1_12_1; struct CardStyle { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __short { BOOL x_1_18_1[23]; unsigned char x_1_18_2[0]; unsigned int x_1_18_3 : 7; unsigned int x_1_18_4 : 1; } x_1_17_1; struct __long { char *x_2_18_1; unsigned long long x_2_18_2; unsigned int x_2_18_3 : 63; unsigned int x_2_18_4 : 1; } x_1_17_2; struct __raw { unsigned long long x_3_18_1[3]; } x_1_17_3; } x_1_16_1; } x_1_15_1; } x_1_14_1; } x_2_13_1; } x_1_12_2; } x_5_11_1; bool x_5_11_2; } x_1_10_5; } x_1_9_1; } x_2_8_1; } x_1_7_2; } x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_2_2_1; } x_1_1_2; } x1; })wrapped;

@end
