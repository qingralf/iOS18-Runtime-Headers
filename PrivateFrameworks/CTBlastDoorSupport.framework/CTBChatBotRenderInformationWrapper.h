/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CTBlastDoorSupport.framework/CTBlastDoorSupport
 */

@interface CTBChatBotRenderInformationWrapper : NSObject {
    struct optional<ctb::chatbot::RenderInformation> { 
        union { 
            BOOL __null_state_; 
            struct RenderInformation { 
                struct BotInformation { 
                    struct PCC { 
                        struct optional<ctb::chatbot::OrgDetails> { 
                            union { 
                                BOOL __null_state_; 
                                struct OrgDetails { 
                                    struct optional<ctb::chatbot::CommunicationAddress> { 
                                        union { 
                                            BOOL __null_state_; 
                                            struct CommunicationAddress { 
                                                struct TelephoneInformation { 
                                                    struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                                        struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                            struct __rep { 
                                                                union { 
                                                                    struct __short { 
                                                                        BOOL __data_[23]; 
                                                                        unsigned char __padding_[0]; 
                                                                        unsigned int __size_ : 7; 
                                                                        unsigned int __is_long_ : 1; 
                                                                    } __s; 
                                                                    struct __long { 
                                                                        char *__data_; 
                                                                        unsigned long long __size_; 
                                                                        unsigned int __cap_ : 63; 
                                                                        unsigned int __is_long_ : 1; 
                                                                    } __l; 
                                                                    struct __raw { 
                                                                        unsigned long long __words[3]; 
                                                                    } __r; 
                                                                } ; 
                                                            } __value_; 
                                                        } __r_; 
                                                    } fLabel; 
                                                    struct TelephoneNumber { 
                                                        struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                                            struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                                struct __rep { 
                                                                    union { 
                                                                        struct __short { 
                                                                            BOOL __data_[23]; 
                                                                            unsigned char __padding_[0]; 
                                                                            unsigned int __size_ : 7; 
                                                                            unsigned int __is_long_ : 1; 
                                                                        } __s; 
                                                                        struct __long { 
                                                                            char *__data_; 
                                                                            unsigned long long __size_; 
                                                                            unsigned int __cap_ : 63; 
                                                                            unsigned int __is_long_ : 1; 
                                                                        } __l; 
                                                                        struct __raw { 
                                                                            unsigned long long __words[3]; 
                                                                        } __r; 
                                                                    } ; 
                                                                } __value_; 
                                                            } __r_; 
                                                        } fNumber; 
                                                    } fTelNumber; 
                                                    struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                                        struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                            struct __rep { 
                                                                union { 
                                                                    struct __short { 
                                                                        BOOL __data_[23]; 
                                                                        unsigned char __padding_[0]; 
                                                                        unsigned int __size_ : 7; 
                                                                        unsigned int __is_long_ : 1; 
                                                                    } __s; 
                                                                    struct __long { 
                                                                        char *__data_; 
                                                                        unsigned long long __size_; 
                                                                        unsigned int __cap_ : 63; 
                                                                        unsigned int __is_long_ : 1; 
                                                                    } __l; 
                                                                    struct __raw { 
                                                                        unsigned long long __words[3]; 
                                                                    } __r; 
                                                                } ; 
                                                            } __value_; 
                                                        } __r_; 
                                                    } fTelephoneType; 
                                                } fTelInformation; 
                                                struct URIEntryList { 
                                                    struct vector<ctb::chatbot::URIEntry, std::allocator<ctb::chatbot::URIEntry>> { 
                                                        struct URIEntry {} *__begin_; 
                                                        struct URIEntry {} *__end_; 
                                                        struct __compressed_pair<ctb::chatbot::URIEntry *, std::allocator<ctb::chatbot::URIEntry>> { 
                                                            struct URIEntry {} *__value_; 
                                                        } __end_cap_; 
                                                    } fList; 
                                                } fUriList; 
                                            } __val_; 
                                        } ; 
                                        bool __engaged_; 
                                    } fCommunicationAddress; 
                                    struct optional<ctb::chatbot::MediaList> { 
                                        union { 
                                            BOOL __null_state_; 
                                            struct MediaList { 
                                                struct vector<ctb::chatbot::MediaEntry, std::allocator<ctb::chatbot::MediaEntry>> { 
                                                    struct MediaEntry {} *__begin_; 
                                                    struct MediaEntry {} *__end_; 
                                                    struct __compressed_pair<ctb::chatbot::MediaEntry *, std::allocator<ctb::chatbot::MediaEntry>> { 
                                                        struct MediaEntry {} *__value_; 
                                                    } __end_cap_; 
                                                } fList; 
                                            } __val_; 
                                        } ; 
                                        bool __engaged_; 
                                    } fMediaList; 
                                    struct optional<ctb::chatbot::OrgName> { 
                                        union { 
                                            BOOL __null_state_; 
                                            struct OrgName { 
                                                struct vector<ctb::chatbot::OrgNameEntry, std::allocator<ctb::chatbot::OrgNameEntry>> { 
                                                    struct OrgNameEntry {} *__begin_; 
                                                    struct OrgNameEntry {} *__end_; 
                                                    struct __compressed_pair<ctb::chatbot::OrgNameEntry *, std::allocator<ctb::chatbot::OrgNameEntry>> { 
                                                        struct OrgNameEntry {} *__value_; 
                                                    } __end_cap_; 
                                                } fList; 
                                            } __val_; 
                                        } ; 
                                        bool __engaged_; 
                                    } fOrgName; 
                                    struct optional<std::string> { 
                                        union { 
                                            BOOL __null_state_; 
                                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                    struct __rep { 
                                                        union { 
                                                            struct __short { 
                                                                BOOL __data_[23]; 
                                                                unsigned char __padding_[0]; 
                                                                unsigned int __size_ : 7; 
                                                                unsigned int __is_long_ : 1; 
                                                            } __s; 
                                                            struct __long { 
                                                                char *__data_; 
                                                                unsigned long long __size_; 
                                                                unsigned int __cap_ : 63; 
                                                                unsigned int __is_long_ : 1; 
                                                            } __l; 
                                                            struct __raw { 
                                                                unsigned long long __words[3]; 
                                                            } __r; 
                                                        } ; 
                                                    } __value_; 
                                                } __r_; 
                                            } __val_; 
                                        } ; 
                                        bool __engaged_; 
                                    } fOrgDescription; 
                                    struct optional<ctb::chatbot::CategoryList> { 
                                        union { 
                                            BOOL __null_state_; 
                                            struct CategoryList { 
                                                struct vector<std::string, std::allocator<std::string>> { 
                                                    void *__begin_; 
                                                    void *__end_; 
                                                    struct __compressed_pair<std::string *, std::allocator<std::string>> { 
                                                        void *__value_; 
                                                    } __end_cap_; 
                                                } fCategoryList; 
                                            } __val_; 
                                        } ; 
                                        bool __engaged_; 
                                    } fCategoryList; 
                                    struct optional<ctb::chatbot::WebResources> { 
                                        union { 
                                            BOOL __null_state_; 
                                            struct WebResources { 
                                                struct vector<ctb::chatbot::WebEntry, std::allocator<ctb::chatbot::WebEntry>> { 
                                                    struct WebEntry {} *__begin_; 
                                                    struct WebEntry {} *__end_; 
                                                    struct __compressed_pair<ctb::chatbot::WebEntry *, std::allocator<ctb::chatbot::WebEntry>> { 
                                                        struct WebEntry {} *__value_; 
                                                    } __end_cap_; 
                                                } fList; 
                                            } __val_; 
                                        } ; 
                                        bool __engaged_; 
                                    } fWebResources; 
                                } __val_; 
                            } ; 
                            bool __engaged_; 
                        } fOrgDetails; 
                        struct optional<std::string> { 
                            union { 
                                BOOL __null_state_; 
                                struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                        struct __rep { 
                                            union { 
                                                struct __short { 
                                                    BOOL __data_[23]; 
                                                    unsigned char __padding_[0]; 
                                                    unsigned int __size_ : 7; 
                                                    unsigned int __is_long_ : 1; 
                                                } __s; 
                                                struct __long { 
                                                    char *__data_; 
                                                    unsigned long long __size_; 
                                                    unsigned int __cap_ : 63; 
                                                    unsigned int __is_long_ : 1; 
                                                } __l; 
                                                struct __raw { 
                                                    unsigned long long __words[3]; 
                                                } __r; 
                                            } ; 
                                        } __value_; 
                                    } __r_; 
                                } __val_; 
                            } ; 
                            bool __engaged_; 
                        } fPccType; 
                    } fPcc; 
                    struct optional<std::string> { 
                        union { 
                            BOOL __null_state_; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } __val_; 
                        } ; 
                        bool __engaged_; 
                    } fVersion; 
                    struct optional<std::string> { 
                        union { 
                            BOOL __null_state_; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } __val_; 
                        } ; 
                        bool __engaged_; 
                    } fProvider; 
                    struct optional<std::string> { 
                        union { 
                            BOOL __null_state_; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } __val_; 
                        } ; 
                        bool __engaged_; 
                    } fEmail; 
                    struct optional<std::string> { 
                        union { 
                            BOOL __null_state_; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } __val_; 
                        } ; 
                        bool __engaged_; 
                    } fColor; 
                    struct optional<std::string> { 
                        union { 
                            BOOL __null_state_; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } __val_; 
                        } ; 
                        bool __engaged_; 
                    } fBackgroundImageUrl; 
                    struct optional<std::string> { 
                        union { 
                            BOOL __null_state_; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } __val_; 
                        } ; 
                        bool __engaged_; 
                    } fWebsite; 
                    struct optional<std::string> { 
                        union { 
                            BOOL __null_state_; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } __val_; 
                        } ; 
                        bool __engaged_; 
                    } fTcPageUrl; 
                    struct optional<ctb::chatbot::AddressEntryList> { 
                        union { 
                            BOOL __null_state_; 
                            struct AddressEntryList { 
                                struct vector<ctb::chatbot::AddressEntry, std::allocator<ctb::chatbot::AddressEntry>> { 
                                    struct AddressEntry {} *__begin_; 
                                    struct AddressEntry {} *__end_; 
                                    struct __compressed_pair<ctb::chatbot::AddressEntry *, std::allocator<ctb::chatbot::AddressEntry>> { 
                                        struct AddressEntry {} *__value_; 
                                    } __end_cap_; 
                                } fList; 
                            } __val_; 
                        } ; 
                        bool __engaged_; 
                    } fAddresses; 
                } fBotInfo; 
                struct optional<ctb::chatbot::MenuItem> { 
                    union { 
                        BOOL __null_state_; 
                        struct MenuItem { 
                            struct vector<ctb::chatbot::MenuL0Content, std::allocator<ctb::chatbot::MenuL0Content>> { 
                                struct MenuL0Content {} *__begin_; 
                                struct MenuL0Content {} *__end_; 
                                struct __compressed_pair<ctb::chatbot::MenuL0Content *, std::allocator<ctb::chatbot::MenuL0Content>> { 
                                    struct MenuL0Content {} *__value_; 
                                } __end_cap_; 
                            } fList; 
                        } __val_; 
                    } ; 
                    bool __engaged_; 
                } fPersistentMenu; 
                struct VerificationDetails { 
                    bool fVerified; 
                    struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                        struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                            struct __rep { 
                                union { 
                                    struct __short { 
                                        BOOL __data_[23]; 
                                        unsigned char __padding_[0]; 
                                        unsigned int __size_ : 7; 
                                        unsigned int __is_long_ : 1; 
                                    } __s; 
                                    struct __long { 
                                        char *__data_; 
                                        unsigned long long __size_; 
                                        unsigned int __cap_ : 63; 
                                        unsigned int __is_long_ : 1; 
                                    } __l; 
                                    struct __raw { 
                                        unsigned long long __words[3]; 
                                    } __r; 
                                } ; 
                            } __value_; 
                        } __r_; 
                    } fVerifiedBy; 
                    struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                        struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                            struct __rep { 
                                union { 
                                    struct __short { 
                                        BOOL __data_[23]; 
                                        unsigned char __padding_[0]; 
                                        unsigned int __size_ : 7; 
                                        unsigned int __is_long_ : 1; 
                                    } __s; 
                                    struct __long { 
                                        char *__data_; 
                                        unsigned long long __size_; 
                                        unsigned int __cap_ : 63; 
                                        unsigned int __is_long_ : 1; 
                                    } __l; 
                                    struct __raw { 
                                        unsigned long long __words[3]; 
                                    } __r; 
                                } ; 
                            } __value_; 
                        } __r_; 
                    } fExpires; 
                } fVerificationDetails; 
                struct optional<std::string> { 
                    union { 
                        BOOL __null_state_; 
                        struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                            struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                struct __rep { 
                                    union { 
                                        struct __short { 
                                            BOOL __data_[23]; 
                                            unsigned char __padding_[0]; 
                                            unsigned int __size_ : 7; 
                                            unsigned int __is_long_ : 1; 
                                        } __s; 
                                        struct __long { 
                                            char *__data_; 
                                            unsigned long long __size_; 
                                            unsigned int __cap_ : 63; 
                                            unsigned int __is_long_ : 1; 
                                        } __l; 
                                        struct __raw { 
                                            unsigned long long __words[3]; 
                                        } __r; 
                                    } ; 
                                } __value_; 
                            } __r_; 
                        } __val_; 
                    } ; 
                    bool __engaged_; 
                } fGenericCSSTemplateUrl; 
            } __val_; 
        } ; 
        bool __engaged_; 
    }  _wrapped;
}

@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{optional<ctb::chatbot::RenderInformation>=(?=c{RenderInformation={BotInformation={PCC={optional<ctb::chatbot::OrgDetails>=(?=c{OrgDetails={optional<ctb::chatbot::CommunicationAddress>=(?=c{CommunicationAddress={TelephoneInformation={basic_string<char' */ struct  wrapped; /* unknown property attribute:  std::allocator<char>>={__rep=(?={__short=[23c][0C]b7b1}{__long=*Qb63b1}{__raw=[3Q]})}}})B}})B} */

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)initWithWrapped:(struct optional<ctb::chatbot::RenderInformation> { union { BOOL x_1_1_1; struct RenderInformation { struct BotInformation { struct PCC { struct optional<ctb::chatbot::OrgDetails> { union { BOOL x_1_6_1; struct OrgDetails { struct optional<ctb::chatbot::CommunicationAddress> { union { BOOL x_1_9_1; struct CommunicationAddress { struct TelephoneInformation { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __short { BOOL x_1_16_1[23]; unsigned char x_1_16_2[0]; unsigned int x_1_16_3 : 7; unsigned int x_1_16_4 : 1; } x_1_15_1; struct __long { char *x_2_16_1; unsigned long long x_2_16_2; unsigned int x_2_16_3 : 63; unsigned int x_2_16_4 : 1; } x_1_15_2; struct __raw { unsigned long long x_3_16_1[3]; } x_1_15_3; } x_1_14_1; } x_1_13_1; } x_1_12_1; } x_1_11_1; struct TelephoneNumber { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __short { BOOL x_1_17_1[23]; unsigned char x_1_17_2[0]; unsigned int x_1_17_3 : 7; unsigned int x_1_17_4 : 1; } x_1_16_1; struct __long { char *x_2_17_1; unsigned long long x_2_17_2; unsigned int x_2_17_3 : 63; unsigned int x_2_17_4 : 1; } x_1_16_2; struct __raw { unsigned long long x_3_17_1[3]; } x_1_16_3; } x_1_15_1; } x_1_14_1; } x_1_13_1; } x_2_12_1; } x_1_11_2; } x_2_10_1; } x_1_9_2; } x_1_8_1; } x_2_7_1; } x_1_6_2; } x_1_5_1; } x_1_4_1; } x_1_3_1; } x_2_2_1; } x_1_1_2; } x1; })arg1;
- (struct optional<ctb::chatbot::RenderInformation> { union { BOOL x_1_1_1; struct RenderInformation { struct BotInformation { struct PCC { struct optional<ctb::chatbot::OrgDetails> { union { BOOL x_1_6_1; struct OrgDetails { struct optional<ctb::chatbot::CommunicationAddress> { union { BOOL x_1_9_1; struct CommunicationAddress { struct TelephoneInformation { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __short { BOOL x_1_16_1[23]; unsigned char x_1_16_2[0]; unsigned int x_1_16_3 : 7; unsigned int x_1_16_4 : 1; } x_1_15_1; struct __long { char *x_2_16_1; unsigned long long x_2_16_2; unsigned int x_2_16_3 : 63; unsigned int x_2_16_4 : 1; } x_1_15_2; struct __raw { unsigned long long x_3_16_1[3]; } x_1_15_3; } x_1_14_1; } x_1_13_1; } x_1_12_1; } x_1_11_1; struct TelephoneNumber { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __short { BOOL x_1_17_1[23]; unsigned char x_1_17_2[0]; unsigned int x_1_17_3 : 7; unsigned int x_1_17_4 : 1; } x_1_16_1; struct __long { char *x_2_17_1; unsigned long long x_2_17_2; unsigned int x_2_17_3 : 63; unsigned int x_2_17_4 : 1; } x_1_16_2; struct __raw { unsigned long long x_3_17_1[3]; } x_1_16_3; } x_1_15_1; } x_1_14_1; } x_1_13_1; } x_2_12_1; } x_1_11_2; } x_2_10_1; } x_1_9_2; } x_1_8_1; } x_2_7_1; } x_1_6_2; } x_1_5_1; } x_1_4_1; } x_1_3_1; } x_2_2_1; } x_1_1_2; } x1; })wrapped;

@end
