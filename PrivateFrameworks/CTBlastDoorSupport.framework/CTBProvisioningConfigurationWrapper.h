/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CTBlastDoorSupport.framework/CTBlastDoorSupport
 */

@interface CTBProvisioningConfigurationWrapper : NSObject {
    struct optional<ctb::ProvisioningConfiguration> { 
        union { 
            BOOL __null_state_; 
            struct ProvisioningConfiguration { 
                struct optional<ctb::ProvisioningConfiguration::Token> { 
                    union { 
                        BOOL __null_state_; 
                        struct Token { 
                            long long fValidity; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } fTok; 
                        } __val_; 
                    } ; 
                    bool __engaged_; 
                } fToken; 
                struct optional<ctb::ProvisioningConfiguration::Vers> { 
                    union { 
                        BOOL __null_state_; 
                        struct Vers { 
                            long long fVersion; 
                            long long fValidity; 
                        } __val_; 
                    } ; 
                    bool __engaged_; 
                } fVers; 
                struct optional<ctb::ProvisioningConfiguration::AccessControl> { 
                    union { 
                        BOOL __null_state_; 
                        struct AccessControl { 
                            struct Default { 
                                struct set<std::string, std::less<std::string>, std::allocator<std::string>> { 
                                    struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> { 
                                        void *__begin_node_; 
                                        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> { 
                                            struct __tree_end_node<std::__tree_node_base<void *> *> { 
                                                void *__left_; 
                                            } __value_; 
                                        } __pair1_; 
                                        struct __compressed_pair<unsigned long, std::less<std::string>> { 
                                            unsigned long long __value_; 
                                        } __pair3_; 
                                    } __tree_; 
                                } fAppIDs; 
                            } fDefault; 
                            struct vector<ctb::ProvisioningConfiguration::AccessControl::Server, std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>> { 
                                struct Server {} *__begin_; 
                                struct Server {} *__end_; 
                                struct __compressed_pair<ctb::ProvisioningConfiguration::AccessControl::Server *, std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>> { 
                                    struct Server {} *__value_; 
                                } __end_cap_; 
                            } fServer; 
                        } __val_; 
                    } ; 
                    bool __engaged_; 
                } fAccessControl; 
                struct optional<ctb::ProvisioningConfiguration::IMS3GPP> { 
                    union { 
                        BOOL __null_state_; 
                        struct IMS3GPP { 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } fAppID; 
                            struct optional<std::string> { 
                                union { 
                                    BOOL __null_state_; 
                                    struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                        struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                            struct __rep { 
                                                union { 
                                                    struct __short { 
                                                        BOOL __data_[23]; 
                                                        unsigned char __padding_[0]; 
                                                        unsigned int __size_ : 7; 
                                                        unsigned int __is_long_ : 1; 
                                                    } __s; 
                                                    struct __long { 
                                                        char *__data_; 
                                                        unsigned long long __size_; 
                                                        unsigned int __cap_ : 63; 
                                                        unsigned int __is_long_ : 1; 
                                                    } __l; 
                                                    struct __raw { 
                                                        unsigned long long __words[3]; 
                                                    } __r; 
                                                } ; 
                                            } __value_; 
                                        } __r_; 
                                    } __val_; 
                                } ; 
                                bool __engaged_; 
                            } fName; 
                            struct set<std::string, std::less<std::string>, std::allocator<std::string>> { 
                                struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> { 
                                    void *__begin_node_; 
                                    struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> { 
                                        struct __tree_end_node<std::__tree_node_base<void *> *> { 
                                            void *__left_; 
                                        } __value_; 
                                    } __pair1_; 
                                    struct __compressed_pair<unsigned long, std::less<std::string>> { 
                                        unsigned long long __value_; 
                                    } __pair3_; 
                                } __tree_; 
                            } fPublicUserIdentityList; 
                            struct set<std::string, std::less<std::string>, std::allocator<std::string>> { 
                                struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> { 
                                    void *__begin_node_; 
                                    struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> { 
                                        struct __tree_end_node<std::__tree_node_base<void *> *> { 
                                            void *__left_; 
                                        } __value_; 
                                    } __pair1_; 
                                    struct __compressed_pair<unsigned long, std::less<std::string>> { 
                                        unsigned long long __value_; 
                                    } __pair3_; 
                                } __tree_; 
                            } fPcscfList; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } fHomeDomain; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } fPrivateUserIdentity; 
                            long long fTimer_T4; 
                            long long fTimer_T2; 
                            long long fTimer_T1; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } fRealm; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } fAuthType; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } fUserName; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } fUserPassword; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } fPsSignalling; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } fPsMedia; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } fPsRTMedia; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } fPsSignallingRoaming; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } fPsMediaRoaming; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } fPsRTMediaRoaming; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } fWifiSignalling; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } fWifiMedia; 
                            struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                    struct __rep { 
                                        union { 
                                            struct __short { 
                                                BOOL __data_[23]; 
                                                unsigned char __padding_[0]; 
                                                unsigned int __size_ : 7; 
                                                unsigned int __is_long_ : 1; 
                                            } __s; 
                                            struct __long { 
                                                char *__data_; 
                                                unsigned long long __size_; 
                                                unsigned int __cap_ : 63; 
                                                unsigned int __is_long_ : 1; 
                                            } __l; 
                                            struct __raw { 
                                                unsigned long long __words[3]; 
                                            } __r; 
                                        } ; 
                                    } __value_; 
                                } __r_; 
                            } fWifiRTMedia; 
                            struct optional<long> { 
                                union { 
                                    BOOL __null_state_; 
                                    long long __val_; 
                                } ; 
                                bool __engaged_; 
                            } fRegRetryBaseTime; 
                            struct optional<long> { 
                                union { 
                                    BOOL __null_state_; 
                                    long long __val_; 
                                } ; 
                                bool __engaged_; 
                            } fRegRetryMaxTime; 
                            bool fPdpContextOperPref; 
                            bool fKeepAliveEnabled; 
                        } __val_; 
                    } ; 
                    bool __engaged_; 
                } fIms; 
                struct optional<ctb::ProvisioningConfiguration::Services> { 
                    union { 
                        BOOL __null_state_; 
                        struct Services { 
                            struct optional<ctb::ProvisioningConfiguration::Services::DataOffBehavior> { 
                                union { 
                                    BOOL __null_state_; 
                                    int __val_; 
                                } ; 
                                bool __engaged_; 
                            } fRcsMessagingDataOff; 
                            struct optional<ctb::ProvisioningConfiguration::Services::DataOffBehavior> { 
                                union { 
                                    BOOL __null_state_; 
                                    int __val_; 
                                } ; 
                                bool __engaged_; 
                            } fFileTransferDataOff; 
                            bool fGeolocPushAuth; 
                            int fStandaloneMsgAuth; 
                            bool fFtAuth; 
                            bool fGroupChatAuth; 
                            bool fChatAuth; 
                            struct set<std::string, std::less<std::string>, std::allocator<std::string>> { 
                                struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> { 
                                    void *__begin_node_; 
                                    struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> { 
                                        struct __tree_end_node<std::__tree_node_base<void *> *> { 
                                            void *__left_; 
                                        } __value_; 
                                    } __pair1_; 
                                    struct __compressed_pair<unsigned long, std::less<std::string>> { 
                                        unsigned long long __value_; 
                                    } __pair3_; 
                                } __tree_; 
                            } fSupportedRCSProfileVersions; 
                        } __val_; 
                    } ; 
                    bool __engaged_; 
                } fServices; 
                struct optional<ctb::ProvisioningConfiguration::Messaging> { 
                    union { 
                        BOOL __null_state_; 
                        struct Messaging { 
                            bool fDisplayNotificationSwitch; 
                            long long fOnetoManySelectedTech; 
                            long long fMaxOneToManyRecipients; 
                            struct optional<ctb::ProvisioningConfiguration::Messaging::Chatbot> { 
                                union { 
                                    BOOL __null_state_; 
                                    struct Chatbot { 
                                        struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                            struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                struct __rep { 
                                                    union { 
                                                        struct __short { 
                                                            BOOL __data_[23]; 
                                                            unsigned char __padding_[0]; 
                                                            unsigned int __size_ : 7; 
                                                            unsigned int __is_long_ : 1; 
                                                        } __s; 
                                                        struct __long { 
                                                            char *__data_; 
                                                            unsigned long long __size_; 
                                                            unsigned int __cap_ : 63; 
                                                            unsigned int __is_long_ : 1; 
                                                        } __l; 
                                                        struct __raw { 
                                                            unsigned long long __words[3]; 
                                                        } __r; 
                                                    } ; 
                                                } __value_; 
                                            } __r_; 
                                        } fSpecificChatbotsList; 
                                        struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                            struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                struct __rep { 
                                                    union { 
                                                        struct __short { 
                                                            BOOL __data_[23]; 
                                                            unsigned char __padding_[0]; 
                                                            unsigned int __size_ : 7; 
                                                            unsigned int __is_long_ : 1; 
                                                        } __s; 
                                                        struct __long { 
                                                            char *__data_; 
                                                            unsigned long long __size_; 
                                                            unsigned int __cap_ : 63; 
                                                            unsigned int __is_long_ : 1; 
                                                        } __l; 
                                                        struct __raw { 
                                                            unsigned long long __words[3]; 
                                                        } __r; 
                                                    } ; 
                                                } __value_; 
                                            } __r_; 
                                        } fBotinfoFQDNRoot; 
                                        struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                            struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                struct __rep { 
                                                    union { 
                                                        struct __short { 
                                                            BOOL __data_[23]; 
                                                            unsigned char __padding_[0]; 
                                                            unsigned int __size_ : 7; 
                                                            unsigned int __is_long_ : 1; 
                                                        } __s; 
                                                        struct __long { 
                                                            char *__data_; 
                                                            unsigned long long __size_; 
                                                            unsigned int __cap_ : 63; 
                                                            unsigned int __is_long_ : 1; 
                                                        } __l; 
                                                        struct __raw { 
                                                            unsigned long long __words[3]; 
                                                        } __r; 
                                                    } ; 
                                                } __value_; 
                                            } __r_; 
                                        } fChatbotDirectory; 
                                        long long fChatbotMsgTech; 
                                        bool fPrivacyDisable; 
                                        bool fIdentityInEnrichedSearch; 
                                    } __val_; 
                                } ; 
                                bool __engaged_; 
                            } fChatbot; 
                            struct optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer> { 
                                union { 
                                    BOOL __null_state_; 
                                    struct FileTransfer { 
                                        long long fMaxSizeFileTr; 
                                        struct optional<long> { 
                                            union { 
                                                BOOL __null_state_; 
                                                long long __val_; 
                                            } ; 
                                            bool __engaged_; 
                                        } fFtWarnSize; 
                                        struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                            struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                struct __rep { 
                                                    union { 
                                                        struct __short { 
                                                            BOOL __data_[23]; 
                                                            unsigned char __padding_[0]; 
                                                            unsigned int __size_ : 7; 
                                                            unsigned int __is_long_ : 1; 
                                                        } __s; 
                                                        struct __long { 
                                                            char *__data_; 
                                                            unsigned long long __size_; 
                                                            unsigned int __cap_ : 63; 
                                                            unsigned int __is_long_ : 1; 
                                                        } __l; 
                                                        struct __raw { 
                                                            unsigned long long __words[3]; 
                                                        } __r; 
                                                    } ; 
                                                } __value_; 
                                            } __r_; 
                                        } fFtHTTPCSURI; 
                                        struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                            struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                struct __rep { 
                                                    union { 
                                                        struct __short { 
                                                            BOOL __data_[23]; 
                                                            unsigned char __padding_[0]; 
                                                            unsigned int __size_ : 7; 
                                                            unsigned int __is_long_ : 1; 
                                                        } __s; 
                                                        struct __long { 
                                                            char *__data_; 
                                                            unsigned long long __size_; 
                                                            unsigned int __cap_ : 63; 
                                                            unsigned int __is_long_ : 1; 
                                                        } __l; 
                                                        struct __raw { 
                                                            unsigned long long __words[3]; 
                                                        } __r; 
                                                    } ; 
                                                } __value_; 
                                            } __r_; 
                                        } fFtHTTPDLURI; 
                                        struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                            struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                struct __rep { 
                                                    union { 
                                                        struct __short { 
                                                            BOOL __data_[23]; 
                                                            unsigned char __padding_[0]; 
                                                            unsigned int __size_ : 7; 
                                                            unsigned int __is_long_ : 1; 
                                                        } __s; 
                                                        struct __long { 
                                                            char *__data_; 
                                                            unsigned long long __size_; 
                                                            unsigned int __cap_ : 63; 
                                                            unsigned int __is_long_ : 1; 
                                                        } __l; 
                                                        struct __raw { 
                                                            unsigned long long __words[3]; 
                                                        } __r; 
                                                    } ; 
                                                } __value_; 
                                            } __r_; 
                                        } fFtHTTPCSUser; 
                                        struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                            struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                struct __rep { 
                                                    union { 
                                                        struct __short { 
                                                            BOOL __data_[23]; 
                                                            unsigned char __padding_[0]; 
                                                            unsigned int __size_ : 7; 
                                                            unsigned int __is_long_ : 1; 
                                                        } __s; 
                                                        struct __long { 
                                                            char *__data_; 
                                                            unsigned long long __size_; 
                                                            unsigned int __cap_ : 63; 
                                                            unsigned int __is_long_ : 1; 
                                                        } __l; 
                                                        struct __raw { 
                                                            unsigned long long __words[3]; 
                                                        } __r; 
                                                    } ; 
                                                } __value_; 
                                            } __r_; 
                                        } fFtHTTPCSPwd; 
                                        bool fFtHTTPFallback; 
                                        bool fFtAutAccept; 
                                        long long fFtMaxOneToManyRecipients; 
                                    } __val_; 
                                } ; 
                                bool __engaged_; 
                            } fFileTransfer; 
                            struct optional<ctb::ProvisioningConfiguration::Messaging::Chat> { 
                                union { 
                                    BOOL __null_state_; 
                                    struct Chat { 
                                        long long fChatRevokeTimer; 
                                        long long fMaxSize; 
                                        long long fTimerIdle; 
                                        long long fMaxAdhocGroupSize; 
                                        bool fAutAcceptGroupChat; 
                                        bool fAutAccept; 
                                        struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                            struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                struct __rep { 
                                                    union { 
                                                        struct __short { 
                                                            BOOL __data_[23]; 
                                                            unsigned char __padding_[0]; 
                                                            unsigned int __size_ : 7; 
                                                            unsigned int __is_long_ : 1; 
                                                        } __s; 
                                                        struct __long { 
                                                            char *__data_; 
                                                            unsigned long long __size_; 
                                                            unsigned int __cap_ : 63; 
                                                            unsigned int __is_long_ : 1; 
                                                        } __l; 
                                                        struct __raw { 
                                                            unsigned long long __words[3]; 
                                                        } __r; 
                                                    } ; 
                                                } __value_; 
                                            } __r_; 
                                        } fConferenceFactoryURI; 
                                        struct optional<std::string> { 
                                            union { 
                                                BOOL __null_state_; 
                                                struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                                    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                        struct __rep { 
                                                            union { 
                                                                struct __short { 
                                                                    BOOL __data_[23]; 
                                                                    unsigned char __padding_[0]; 
                                                                    unsigned int __size_ : 7; 
                                                                    unsigned int __is_long_ : 1; 
                                                                } __s; 
                                                                struct __long { 
                                                                    char *__data_; 
                                                                    unsigned long long __size_; 
                                                                    unsigned int __cap_ : 63; 
                                                                    unsigned int __is_long_ : 1; 
                                                                } __l; 
                                                                struct __raw { 
                                                                    unsigned long long __words[3]; 
                                                                } __r; 
                                                            } ; 
                                                        } __value_; 
                                                    } __r_; 
                                                } __val_; 
                                            } ; 
                                            bool __engaged_; 
                                        } fSpamReportingURI; 
                                    } __val_; 
                                } ; 
                                bool __engaged_; 
                            } fChat; 
                            struct optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg> { 
                                union { 
                                    BOOL __null_state_; 
                                    struct StandaloneMsg { 
                                        struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
                                            struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                                                struct __rep { 
                                                    union { 
                                                        struct __short { 
                                                            BOOL __data_[23]; 
                                                            unsigned char __padding_[0]; 
                                                            unsigned int __size_ : 7; 
                                                            unsigned int __is_long_ : 1; 
                                                        } __s; 
                                                        struct __long { 
                                                            char *__data_; 
                                                            unsigned long long __size_; 
                                                            unsigned int __cap_ : 63; 
                                                            unsigned int __is_long_ : 1; 
                                                        } __l; 
                                                        struct __raw { 
                                                            unsigned long long __words[3]; 
                                                        } __r; 
                                                    } ; 
                                                } __value_; 
                                            } __r_; 
                                        } fExploderUri; 
                                        long long fSwitchoverSize; 
                                        long long fMaxSize; 
                                    } __val_; 
                                } ; 
                                bool __engaged_; 
                            } fStandaloneMsg; 
                        } __val_; 
                    } ; 
                    bool __engaged_; 
                } fMessaging; 
                struct optional<ctb::ProvisioningConfiguration::CapDiscovery> { 
                    union { 
                        BOOL __null_state_; 
                        struct CapDiscovery { 
                            long long fDefaultDisc; 
                            long long fNonRCSCapInfoExpiry; 
                            long long fCapInfoExpiry; 
                            bool fDisableInitialAddressBookScan; 
                        } __val_; 
                    } ; 
                    bool __engaged_; 
                } fCapDiscovery; 
            } __val_; 
        } ; 
        bool __engaged_; 
    }  _wrapped;
}

@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{optional<ctb::ProvisioningConfiguration>=(?=c{ProvisioningConfiguration={optional<ctb::ProvisioningConfiguration::Token>=(?=c{Token=q{basic_string<char' */ struct  wrapped; /* unknown property attribute:  std::allocator<char>>={__rep=(?={__short=[23c][0C]b7b1}{__long=*Qb63b1}{__raw=[3Q]})}}}qq})B}})B}{optional<ctb::ProvisioningConfiguration::CapDiscovery>=(?=c{CapDiscovery=qqqB})B}})B} */

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)initWithWrapped:(struct optional<ctb::ProvisioningConfiguration> { union { BOOL x_1_1_1; struct ProvisioningConfiguration { struct optional<ctb::ProvisioningConfiguration::Token> { union { BOOL x_1_4_1; struct Token { long long x_2_5_1; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __short { BOOL x_1_10_1[23]; unsigned char x_1_10_2[0]; unsigned int x_1_10_3 : 7; unsigned int x_1_10_4 : 1; } x_1_9_1; struct __long { char *x_2_10_1; unsigned long long x_2_10_2; unsigned int x_2_10_3 : 63; unsigned int x_2_10_4 : 1; } x_1_9_2; struct __raw { unsigned long long x_3_10_1[3]; } x_1_9_3; } x_1_8_1; } x_1_7_1; } x_2_6_1; } x_2_5_2; } x_1_4_2; } x_1_3_1; bool x_1_3_2; } x_2_2_1; struct optional<ctb::ProvisioningConfiguration::Vers> { union { BOOL x_1_4_1; struct Vers { long long x_2_5_1; long long x_2_5_2; } x_1_4_2; } x_2_3_1; bool x_2_3_2; } x_2_2_2; struct optional<ctb::ProvisioningConfiguration::AccessControl> { union { BOOL x_1_4_1; struct AccessControl { struct Default { struct set<std::string, std::less<std::string>, std::allocator<std::string>> { struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> { void *x_1_8_1; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x_1_10_1; } x_2_9_1; } x_1_8_2; struct __compressed_pair<unsigned long, std::less<std::string>> { unsigned long long x_3_9_1; } x_1_8_3; } x_1_7_1; } x_1_6_1; } x_2_5_1; struct vector<ctb::ProvisioningConfiguration::AccessControl::Server, std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>> { struct Server {} *x_2_6_1; struct Server {} *x_2_6_2; struct __compressed_pair<ctb::ProvisioningConfiguration::AccessControl::Server *, std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>> { struct Server {} *x_3_7_1; } x_2_6_3; } x_2_5_2; } x_1_4_2; } x_3_3_1; } x_2_2_3; } x_1_1_2; } x1; })arg1;
- (struct optional<ctb::ProvisioningConfiguration> { union { BOOL x_1_1_1; struct ProvisioningConfiguration { struct optional<ctb::ProvisioningConfiguration::Token> { union { BOOL x_1_4_1; struct Token { long long x_2_5_1; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __short { BOOL x_1_10_1[23]; unsigned char x_1_10_2[0]; unsigned int x_1_10_3 : 7; unsigned int x_1_10_4 : 1; } x_1_9_1; struct __long { char *x_2_10_1; unsigned long long x_2_10_2; unsigned int x_2_10_3 : 63; unsigned int x_2_10_4 : 1; } x_1_9_2; struct __raw { unsigned long long x_3_10_1[3]; } x_1_9_3; } x_1_8_1; } x_1_7_1; } x_2_6_1; } x_2_5_2; } x_1_4_2; } x_1_3_1; bool x_1_3_2; } x_2_2_1; struct optional<ctb::ProvisioningConfiguration::Vers> { union { BOOL x_1_4_1; struct Vers { long long x_2_5_1; long long x_2_5_2; } x_1_4_2; } x_2_3_1; bool x_2_3_2; } x_2_2_2; struct optional<ctb::ProvisioningConfiguration::AccessControl> { union { BOOL x_1_4_1; struct AccessControl { struct Default { struct set<std::string, std::less<std::string>, std::allocator<std::string>> { struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> { void *x_1_8_1; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x_1_10_1; } x_2_9_1; } x_1_8_2; struct __compressed_pair<unsigned long, std::less<std::string>> { unsigned long long x_3_9_1; } x_1_8_3; } x_1_7_1; } x_1_6_1; } x_2_5_1; struct vector<ctb::ProvisioningConfiguration::AccessControl::Server, std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>> { struct Server {} *x_2_6_1; struct Server {} *x_2_6_2; struct __compressed_pair<ctb::ProvisioningConfiguration::AccessControl::Server *, std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>> { struct Server {} *x_3_7_1; } x_2_6_3; } x_2_5_2; } x_1_4_2; } x_3_3_1; } x_2_2_3; } x_1_1_2; } x1; })wrapped;

@end
