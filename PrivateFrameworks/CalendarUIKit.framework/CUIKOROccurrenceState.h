/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CalendarUIKit.framework/CalendarUIKit
 */

@interface CUIKOROccurrenceState : NSObject <CUIKMutableDayOccurrenceState, CUIKOROccurrenceState> {
    NSNumber * _allDayOverride;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _backgroundRect;
    long long  _birthdayCount;
    bool  _didChange;
    UIColor * _displayColor;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _estimatedTextFrame;
    long long  _horizontalSizeClass;
    bool  _isDimmed;
    bool  _isMiniPreviewInEventDetail;
    bool  _isPerformingChanges;
    bool  _isProposedTime;
    bool  _isSelected;
    EKEvent * _occurrence;
    bool  _occurrenceIsFirstVisibleDayOfEvent;
    NSArray * _occurrences;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _padding;
    UITraitCollection * _traitCollection;
    double  _travelTime;
    double  _travelTimeHeight;
    long long  _userInterfaceStyle;
    bool  _usesSmallText;
    double  _visibleHeight;
}

@property (nonatomic, retain) NSNumber *allDayOverride;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } backgroundRect;
@property (nonatomic, readonly) UIColor *baseColor;
@property (nonatomic) long long birthdayCount;
@property (nonatomic, readonly) UIColor *colorBarColor;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UIColor *displayColor;
@property (nonatomic, readonly) bool drawReminderAsEditable;
@property (nonatomic, readonly) double enoughHeightForOneLine;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } estimatedTextFrame;
@property (nonatomic, readonly) unsigned long long fontCompressionDegree;
@property (nonatomic, readonly) bool hasNewTimeProposed;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool hidesTime;
@property (nonatomic) long long horizontalSizeClass;
@property (nonatomic, readonly) bool isAllDay;
@property (nonatomic, readonly) bool isBirthday;
@property (nonatomic, readonly) bool isCancelled;
@property (nonatomic, readonly) bool isCompleted;
@property (nonatomic, readonly) bool isDeclined;
@property (nonatomic) bool isDimmed;
@property (nonatomic) bool isMiniPreviewInEventDetail;
@property (nonatomic) bool isProposedTime;
@property (nonatomic, readonly) bool isReminder;
@property (nonatomic) bool isSelected;
@property (nonatomic, readonly) bool isTentative;
@property (nonatomic, readonly) bool isValid;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } languageAwareInsets;
@property (nonatomic, readonly) UIImage *leadingIcon;
@property (nonatomic, readonly) NSAttributedString *location;
@property (nonatomic, readonly) NSString *locationImageName;
@property (nonatomic, readonly) UIColor *locationTextColor;
@property (nonatomic, readonly) double minimumNaturalHeightAllText;
@property (nonatomic, readonly) NSString *moreText;
@property (nonatomic, readonly) UIColor *moreTextColor;
@property (nonatomic, readonly) bool needsReply;
@property (nonatomic, retain) EKEvent *occurrence;
@property (nonatomic) bool occurrenceIsFirstVisibleDayOfEvent;
@property (nonatomic, retain) NSArray *occurrences;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } padding;
@property (nonatomic, readonly) UIFont *primaryTextFont;
@property (nonatomic, readonly) int reminderStackDepth;
@property (nonatomic, readonly) bool requiresLanguageAwarePadding;
@property (nonatomic, readonly) UIFont *secondaryTextFont;
@property (nonatomic, readonly) UIColor *strikethroughColor;
@property (readonly) Class superclass;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } textSpace;
@property (nonatomic, readonly) UIColor *timeTextColor;
@property (nonatomic, readonly) NSString *title;
@property (nonatomic, readonly) UIColor *titleTextColor;
@property (nonatomic, readonly) double totalLanguageAwareHeightPadding;
@property (nonatomic, readonly) NSArray *trailingIcons;
@property (nonatomic, retain) UITraitCollection *traitCollection;
@property (nonatomic) double travelTime;
@property (nonatomic) double travelTimeHeight;
@property (nonatomic) long long userInterfaceStyle;
@property (nonatomic) bool usesSmallText;
@property (nonatomic) double visibleHeight;

+ (void)clearLocationCache;
+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })defaultMarginFromEKDayOccurrenceView;
+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })defaultPadding;
+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })defaultPaddingFromEKDayOccurrenceView;
+ (double)enoughHeightForOneLineForEvent:(id)arg1 usingSmallText:(bool)arg2 sizeClass:(long long)arg3;
+ (id)languageAwareInsetsCache;
+ (id)locationCache;
+ (id)tallCharacterSetCache;

- (void).cxx_destruct;
- (id)_leadingSymbolSizeConfigurationForReminder:(bool)arg1;
- (void)_location:(id*)arg1 locationImageName:(id*)arg2;
- (id)allDayOverride;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })backgroundRect;
- (id)baseColor;
- (long long)birthdayCount;
- (id)colorBarColor;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)displayColor;
- (bool)drawReminderAsEditable;
- (double)enoughHeightForOneLine;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })estimatedTextFrame;
- (unsigned long long)fontCompressionDegree;
- (bool)hasNewTimeProposed;
- (unsigned long long)hash;
- (bool)hidesTime;
- (long long)horizontalSizeClass;
- (id)init;
- (bool)isAllDay;
- (bool)isBirthday;
- (bool)isCancelled;
- (bool)isCompleted;
- (bool)isDeclined;
- (bool)isDimmed;
- (bool)isEqual:(id)arg1;
- (bool)isMiniPreviewInEventDetail;
- (bool)isProposedTime;
- (bool)isReminder;
- (bool)isReminderStack;
- (bool)isSelected;
- (bool)isTentative;
- (bool)isValid;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })languageAwareInsets;
- (id)leadingIcon;
- (id)location;
- (id)locationImageName;
- (id)locationTextColor;
- (double)minimumNaturalHeightAllText;
- (id)moreText;
- (id)moreTextColor;
- (bool)needsReply;
- (id)occurrence;
- (bool)occurrenceIsFirstVisibleDayOfEvent;
- (id)occurrences;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })padding;
- (void)performChanges:(id /* block */)arg1;
- (void)performChangesWithState:(id)arg1;
- (id)primaryTextFont;
- (id)primaryTextFontBold:(bool)arg1;
- (id)primaryTextFontNonBold;
- (id)reminderIcon;
- (int)reminderStackDepth;
- (bool)requiresLanguageAwarePadding;
- (id)secondaryTextFont;
- (id)secondaryTitleTextColor;
- (void)setAllDayOverride:(id)arg1;
- (void)setBackgroundRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setBirthdayCount:(long long)arg1;
- (void)setDisplayColor:(id)arg1;
- (void)setEstimatedTextFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHorizontalSizeClass:(long long)arg1;
- (void)setIsDimmed:(bool)arg1;
- (void)setIsMiniPreviewInEventDetail:(bool)arg1;
- (void)setIsProposedTime:(bool)arg1;
- (void)setIsSelected:(bool)arg1;
- (void)setOccurrence:(id)arg1;
- (void)setOccurrenceIsFirstVisibleDayOfEvent:(bool)arg1;
- (void)setOccurrences:(id)arg1;
- (void)setPadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setTraitCollection:(id)arg1;
- (void)setTravelTime:(double)arg1;
- (void)setTravelTimeHeight:(double)arg1;
- (void)setUserInterfaceStyle:(long long)arg1;
- (void)setUsesSmallText:(bool)arg1;
- (void)setVisibleHeight:(double)arg1;
- (id)status;
- (id)strikethroughColor;
- (struct CGSize { double x1; double x2; })textSpace;
- (id)timeTextColor;
- (id)title;
- (id)titleTextColor;
- (double)totalLanguageAwareHeightPadding;
- (id)trailingIcons;
- (id)trailingIconsColor;
- (id)traitCollection;
- (double)travelTime;
- (double)travelTimeHeight;
- (long long)userInterfaceStyle;
- (bool)usesSmallText;
- (double)visibleHeight;

@end
