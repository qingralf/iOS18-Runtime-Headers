/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CarAccessoryFramework.framework/CarAccessoryFramework
 */

@interface CAFCarManager : NSObject <BSInvalidatable> {
    int  _carDataToken;
    CAFCarManagerConfiguration * _config;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _connectionLock;
    _CAFCarDataClientProxy * _connectionProxy;
    CAFCar * _currentCar;
    NSObject<OS_dispatch_queue> * _notifyQueue;
    id  _observableCache;
    CARObserverHashTable * _observers;
}

@property (nonatomic) int carDataToken;
@property (nonatomic, copy) CAFCarManagerConfiguration *config;
@property (nonatomic) struct os_unfair_lock_s { unsigned int x1; } connectionLock;
@property (nonatomic, retain) _CAFCarDataClientProxy *connectionProxy;
@property (nonatomic, retain) CAFCar *currentCar;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *notifyQueue;
@property (nonatomic, retain) CARObserverHashTable *observers;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)_closeConnectionWithReason:(id)arg1;
- (void)_didReceiveLifecycleNotification:(id)arg1;
- (void)_locked_closeConnectionWithReason:(id)arg1;
- (void)_setupCafdConnectionIfAvailable;
- (void)_updateCar;
- (void)addObserver:(id)arg1;
- (int)carDataToken;
- (id)config;
- (struct os_unfair_lock_s { unsigned int x1; })connectionLock;
- (id)connectionProxy;
- (id)currentCar;
- (void)dealloc;
- (id)description;
- (void)enableNotificationForCharacteristic:(id)arg1 enable:(bool)arg2 response:(id /* block */)arg3;
- (void)enableNotificationForControl:(id)arg1 enable:(bool)arg2 response:(id /* block */)arg3;
- (void)handleResponse:(id)arg1 instanceID:(id)arg2 response:(id /* block */)arg3;
- (id)init;
- (id)initWithConfig:(id)arg1;
- (id)initWithIdentifier:(id)arg1;
- (id)initWithRegistrationFilePath:(id)arg1;
- (void)invalidate;
- (void)notifyControl:(id)arg1 value:(id)arg2;
- (id)notifyQueue;
- (id)observableCache;
- (id)observers;
- (void)performGroupedRequest:(id)arg1 key:(id)arg2 value:(id)arg3 withResponse:(id /* block */)arg4;
- (void)readCharacteristic:(id)arg1 response:(id /* block */)arg2;
- (void)registerObserver:(id)arg1;
- (void)removeObserver:(id)arg1;
- (void)requestControl:(id)arg1 value:(id)arg2 response:(id /* block */)arg3;
- (void)setCarDataToken:(int)arg1;
- (void)setConfig:(id)arg1;
- (void)setConnectionLock:(struct os_unfair_lock_s { unsigned int x1; })arg1;
- (void)setConnectionProxy:(id)arg1;
- (void)setCurrentCar:(id)arg1;
- (void)setNotifyQueue:(id)arg1;
- (void)setObservableCache:(id)arg1;
- (void)setObservers:(id)arg1;
- (bool)shouldAllocAccessoryType:(id)arg1;
- (bool)shouldAllocAccessoryType:(id)arg1 serviceConfig:(id)arg2;
- (bool)shouldAllocAccessoryType:(id)arg1 serviceType:(id)arg2 characteristicType:(id)arg3;
- (bool)shouldAllocAccessoryType:(id)arg1 serviceType:(id)arg2 controlType:(id)arg3;
- (bool)shouldInitializeCharacteristic:(id)arg1;
- (bool)shouldInitializeControl:(id)arg1;
- (void)unregisterObserver:(id)arg1;
- (void)writeCharacteristic:(id)arg1 value:(id)arg2 response:(id /* block */)arg3;

@end
