/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CarAccessoryFramework.framework/CarAccessoryFramework
 */

@interface CAFControl : NSObject <CAFCacheableDescription, CAFEntity, NSCopying> {
    CAFCachedDescription * _cachedDescription;
    NSString * _controlType;
    NSNumber * _disabledInstanceID;
    NSNumber * _errorInstanceID;
    bool  _hasErrorState;
    bool  _hasResponse;
    NSNumber * _instanceID;
    bool  _isDisabled;
    bool  _isNotificationEnabled;
    bool  _isRestricted;
    CARObserverHashTable * _observers;
    NSNumber * _priority;
    NSArray * _requestParameters;
    NSArray * _responseParameters;
    NSNumber * _restrictedInstanceID;
    unsigned long long  _sender;
    CAFService * _service;
    bool  _shouldInitialize;
    NSString * _typeName;
    NSUUID * _uniqueIdentifier;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _valueLock;
}

@property (nonatomic, readonly) CAFAccessory *accessory;
@property (nonatomic, readonly) Class baseCAFClass;
@property (nonatomic, retain) CAFCachedDescription *cachedDescription;
@property (nonatomic, readonly) CAFCar *car;
@property (nonatomic, readonly) NSArray *comparisonKeys;
@property (nonatomic, readonly) NSString *controlType;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSNumber *disabledInstanceID;
@property (nonatomic, readonly) NSNumber *errorInstanceID;
@property (nonatomic, readonly) NSString *fullDescription;
@property (nonatomic) bool hasErrorState;
@property (nonatomic, readonly) bool hasResponse;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool hidden;
@property (nonatomic, readonly) bool incoming;
@property (nonatomic, readonly) NSNumber *instanceID;
@property (nonatomic) bool isDisabled;
@property (nonatomic) bool isNotificationEnabled;
@property (nonatomic) bool isRestricted;
@property (nonatomic, readonly) NSString *name;
@property (nonatomic, readonly) bool notifies;
@property (nonatomic, retain) CARObserverHashTable *observers;
@property (nonatomic, readonly) bool outgoing;
@property (nonatomic, readonly) NSNumber *priority;
@property (nonatomic, readonly) NSArray *requestParameters;
@property (nonatomic, readonly) NSArray *responseParameters;
@property (nonatomic, readonly) NSNumber *restrictedInstanceID;
@property (nonatomic) unsigned long long sender;
@property (nonatomic, readonly) CAFService *service;
@property (nonatomic, readonly) bool shouldInitialize;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSString *typeName;
@property (nonatomic, retain) NSUUID *uniqueIdentifier;
@property (nonatomic, readonly) bool usable;
@property (nonatomic) struct os_unfair_lock_s { unsigned int x1; } valueLock;

+ (void)_appendParametersDescription:(id)arg1 parameters:(id)arg2;
+ (id)controlIdentifier;
+ (id)controlWithService:(id)arg1 config:(id)arg2;
+ (void)load;
+ (id)observerProtocol;
+ (void)registerControlClass:(Class)arg1;
+ (id)registeredControlClasses;

- (void).cxx_destruct;
- (void)_didNotifyWithValue:(id)arg1;
- (bool)_didRequestWithValue:(id)arg1 response:(id /* block */)arg2;
- (void)_didUpdate;
- (id)accessory;
- (void)addObserver:(id)arg1;
- (id)allInstanceIDs;
- (Class)baseCAFClass;
- (id)cachedDescription;
- (id)car;
- (long long)compare:(id)arg1;
- (id)comparisonKeys;
- (id)controlType;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)currentDescriptionForCache:(id)arg1;
- (void)dealloc;
- (id)description;
- (id)disabledInstanceID;
- (id)errorInstanceID;
- (id)fullDescription;
- (void)handleNotificationWithValue:(id)arg1;
- (void)handleRegistrationWithInstanceID:(id)arg1 registered:(bool)arg2;
- (void)handleRegistrationWithInstanceID:(id)arg1 value:(id)arg2 registered:(bool)arg3;
- (void)handleRequestWithValue:(id)arg1 withResponse:(id /* block */)arg2;
- (void)handleUpdateWithInstanceID:(id)arg1 value:(id)arg2;
- (void)handleValueAndError:(id)arg1 value:(id)arg2;
- (bool)hasErrorState;
- (bool)hasResponse;
- (unsigned long long)hash;
- (bool)hidden;
- (bool)incoming;
- (id)initWithService:(id)arg1 config:(id)arg2;
- (id)instanceID;
- (void)invalidate;
- (bool)isDisabled;
- (bool)isEqual:(id)arg1;
- (bool)isNotificationEnabled;
- (bool)isRestricted;
- (id)name;
- (bool)notifies;
- (void)notifyWithValue:(id)arg1;
- (id)observers;
- (bool)outgoing;
- (id)parametersDescription;
- (id)pluginID;
- (id)priority;
- (id)propertiesDescription;
- (id)readInstanceIDs;
- (void)registerObserver:(id)arg1;
- (id)registrationInstanceIDs;
- (void)removeObserver:(id)arg1;
- (id)requestParameters;
- (void)requestWithValue:(id)arg1 response:(id /* block */)arg2;
- (id)responseParameters;
- (id)restrictedInstanceID;
- (unsigned long long)sender;
- (id)service;
- (void)setCachedDescription:(id)arg1;
- (void)setHasErrorState:(bool)arg1;
- (void)setIsDisabled:(bool)arg1;
- (void)setIsNotificationEnabled:(bool)arg1;
- (void)setIsRestricted:(bool)arg1;
- (void)setObservers:(id)arg1;
- (void)setSender:(unsigned long long)arg1;
- (void)setTypeName:(id)arg1;
- (void)setUniqueIdentifier:(id)arg1;
- (void)setValueLock:(struct os_unfair_lock_s { unsigned int x1; })arg1;
- (bool)shouldInitialize;
- (bool)supportsDisable;
- (bool)supportsError;
- (bool)supportsRestricted;
- (bool)supportsStates;
- (id)typeName;
- (id)uniqueIdentifier;
- (void)unregisterObserver:(id)arg1;
- (bool)usable;
- (struct os_unfair_lock_s { unsigned int x1; })valueLock;

@end
