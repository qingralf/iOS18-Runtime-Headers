/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ChatKit.framework/ChatKit
 */

@interface CKMessageEntryTextView : EMKTextView <CKTextEntryLayoutManagerMentionsDelegate, UIGestureRecognizerDelegate, UIScribbleInteractionDelegate> {
    double  _adjustedLineFragmentPadding;
    bool  _allowCalloutActions;
    bool  _applyDefaultTypingAttributesOnTextEffectPickerDismissal;
    UITapGestureRecognizer * _doubleTapGestureRecognizer;
    CKEntryRichTextViewEffectsPickerAssistant * _effectsPickerAssistant;
    bool  _expressiveTextEnabled;
    unsigned long long  _fontType;
    bool  _hideCaret;
    bool  _hideCaretUntilUserTypes;
    bool  _inPencilMode;
    UILongPressGestureRecognizer * _longPressGestureRecognizer;
    <CKMessageEntryTextViewMentionsDelegate> * _mentionsDelegate;
    bool  _pencilWriting;
    double  _placeHolderWidth;
    UIColor * _placeholderColor;
    NSString * _placeholderText;
    bool  _preventShowingCalloutMenu;
    NSDictionary * _proofreadingInfo;
    UIKeyboardInputMode * _savedKeyboardInputMode;
    UIScribbleInteraction * _scribbleInteraction;
    bool  _sendCurrentLocationFromKeyboardEnabled;
    bool  _shouldStripEmojis;
    UIAction * _showTextEffectsPickerEditMenuAction;
    bool  _showingDictationPlaceholder;
    bool  _supportsBigEmojiTextStyles;
    UITapGestureRecognizer * _tapGestureRecognizer;
    <CKMessageEntryTextViewTextFormattingDelegate> * _textFormattingDelegate;
}

@property (nonatomic) double adjustedLineFragmentPadding;
@property (nonatomic) bool allowCalloutActions;
@property (nonatomic) bool applyDefaultTypingAttributesOnTextEffectPickerDismissal;
@property (nonatomic, copy) NSAttributedString *compositionText;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (nonatomic) <CKMessageEntryTextViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UITapGestureRecognizer *doubleTapGestureRecognizer;
@property (nonatomic, retain) CKEntryRichTextViewEffectsPickerAssistant *effectsPickerAssistant;
@property (getter=isExpressiveTextEnabled, nonatomic) bool expressiveTextEnabled;
@property (nonatomic) unsigned long long fontType;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool hideCaret;
@property (nonatomic) bool hideCaretUntilUserTypes;
@property (getter=isInPencilMode, nonatomic) bool inPencilMode;
@property (nonatomic, retain) UILongPressGestureRecognizer *longPressGestureRecognizer;
@property (nonatomic) <CKMessageEntryTextViewMentionsDelegate> *mentionsDelegate;
@property (getter=isPencilWriting, nonatomic) bool pencilWriting;
@property (nonatomic) double placeHolderWidth;
@property (nonatomic, copy) UIColor *placeholderColor;
@property (nonatomic, copy) NSString *placeholderText;
@property (nonatomic) bool preventShowingCalloutMenu;
@property (nonatomic, copy) NSDictionary *proofreadingInfo;
@property (nonatomic, retain) UIKeyboardInputMode *savedKeyboardInputMode;
@property (nonatomic, retain) UIScribbleInteraction *scribbleInteraction;
@property (nonatomic) bool sendCurrentLocationFromKeyboardEnabled;
@property (nonatomic) bool shouldStripEmojis;
@property (nonatomic, retain) UIAction *showTextEffectsPickerEditMenuAction;
@property (getter=isShowingDictationPlaceholder, nonatomic) bool showingDictationPlaceholder;
@property (getter=isSingleLine, nonatomic, readonly) bool singleLine;
@property (readonly) Class superclass;
@property (nonatomic) bool supportsBigEmojiTextStyles;
@property (nonatomic, retain) UITapGestureRecognizer *tapGestureRecognizer;
@property (nonatomic) <CKMessageEntryTextViewTextFormattingDelegate> *textFormattingDelegate;

+ (void)setNeedsDisplayCurrentRenderAttributesForView:(id)arg1;
+ (bool)shouldUseModernMentionsAndEmojiAnimations;

- (void).cxx_destruct;
- (bool)_canSuggestSupplementalItemsForCurrentSelection;
- (void)_cancelChooseSupplementalItemToInsert;
- (void)_chooseSupplementalItemToInsert:(id)arg1 replacementRange:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_insertSupplementalItem:(id)arg1 forString:(id)arg2 replacementRange:(id)arg3;
- (void)_insertionPointEnteredRange:(id)arg1 string:(id)arg2 supplementalItems:(id)arg3;
- (void)_insertionPointExitedRangeWithSupplementalItems;
- (void)_layoutPlaceholder;
- (void)_localeChanged;
- (SEL)_sendCurrentLocationAction;
- (void)_setAnimatingMentionsHidden:(bool)arg1;
- (void)_setupTapOrLongPressGestureRecognizers;
- (bool)_shouldHandleTextFormattingChangeValue:(id)arg1;
- (bool)_shouldReplaceKeyboardForTextFormattingKeyboardSessionIfApplicable;
- (void)_showTextFormattingAnimationOptions:(id)arg1;
- (void)_stripEmojisIfNecessary;
- (id)_supportedAnimationAccessibilityHintsForTextFormatting;
- (id)_supportedAnimationNamesForTextFormatting;
- (id)_supportedAnimationTitlesForTextFormatting;
- (void)_updateAttributedPlaceholder;
- (void)_updateTextContainerInsetUsingFont:(id)arg1;
- (void)_updateTextEffectsPickerEditMenuAction;
- (void)_updatedAllowedTypingAttributesWithKeys:(id)arg1;
- (void)acceptAutomaticMentionConfirmation;
- (double)adjustedLineFragmentPadding;
- (bool)allowCalloutActions;
- (bool)allowsMentions;
- (bool)applyDefaultTypingAttributesOnTextEffectPickerDismissal;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForPosition:(id)arg1;
- (void)checkForMentions;
- (id)compositionText;
- (void)dealloc;
- (id)description;
- (void)didEndEditing:(id)arg1;
- (void)didLongPressMentionForTextView:(id)arg1 characterIndex:(unsigned long long)arg2 isLongPress:(bool)arg3;
- (void)didTapMentionForTextView:(id)arg1 atCharacterIndex:(double)arg2;
- (id)doubleTapGestureRecognizer;
- (id)effectsPickerAssistant;
- (unsigned long long)fontType;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (void)handleDoubleTap:(id)arg1;
- (void)handleHoverGesture:(id)arg1;
- (void)handleTapOrLongPress:(id)arg1;
- (bool)handleTapOrLongPressOnMediaObjectForTransferGUID:(id)arg1 characterIndex:(long long)arg2 location:(struct CGPoint { double x1; double x2; })arg3 touchedCharacterFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (bool)hideCaret;
- (bool)hideCaretUntilUserTypes;
- (void)hideTextEffectsPickerIfNeeded;
- (void)hideTextEffectsPickerIfNeededAndResetTypingAttributes;
- (id)initUsingTextLayoutManagerWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initUsingTextLayoutManagerWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textContainer:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textContainer:(id)arg2;
- (id)insertDictationResultPlaceholder;
- (void)insertMentionByName:(id)arg1;
- (bool)isExpressiveTextEnabled;
- (bool)isInPencilMode;
- (bool)isPencilWriting;
- (bool)isShowingDictationPlaceholder;
- (bool)isSingleLine;
- (void)keyboardWillShow:(id)arg1;
- (void)layoutManagerDidFinishAnimatingMentionWithAnimationIdentifier:(id)arg1;
- (void)layoutSubviews;
- (id)longPressGestureRecognizer;
- (id)mediaObjects;
- (id)mentionsDelegate;
- (void)performTextViewUpdatesNeededBeforeLayoutPass;
- (double)placeHolderWidth;
- (id)placeholderColor;
- (id)placeholderText;
- (bool)preventShowingCalloutMenu;
- (id)proofreadingInfo;
- (void)reloadMentionsData;
- (void)removeDictationResultPlaceholder:(id)arg1 willInsertResult:(bool)arg2;
- (void)replaceRange:(id)arg1 withAttributedText:(id)arg2;
- (bool)resignFirstResponder;
- (void)restoreKeyboardInputMode;
- (void)saveKeyboardInputMode;
- (id)savedKeyboardInputMode;
- (id)scribbleInteraction;
- (void)scribbleInteractionDidFinishWriting:(id)arg1;
- (void)scribbleInteractionWillBeginWriting:(id)arg1;
- (bool)sendCurrentLocationFromKeyboardEnabled;
- (void)setAdjustedLineFragmentPadding:(double)arg1;
- (void)setAllowCalloutActions:(bool)arg1;
- (void)setApplyDefaultTypingAttributesOnTextEffectPickerDismissal:(bool)arg1;
- (void)setAttributedText:(id)arg1;
- (void)setAttributedText:(id)arg1 checkForMentions:(bool)arg2;
- (void)setCompositionText:(id)arg1;
- (void)setDoubleTapGestureRecognizer:(id)arg1;
- (void)setEffectsPickerAssistant:(id)arg1;
- (void)setExpressiveTextEnabled:(bool)arg1;
- (void)setFont:(id)arg1;
- (void)setFontType:(unsigned long long)arg1;
- (void)setHideCaret:(bool)arg1;
- (void)setHideCaretUntilUserTypes:(bool)arg1;
- (void)setInPencilMode:(bool)arg1;
- (void)setLongPressGestureRecognizer:(id)arg1;
- (void)setMentionsDelegate:(id)arg1;
- (void)setNeedsDisplayCurrentRenderAttributes;
- (void)setPencilWriting:(bool)arg1;
- (void)setPlaceHolderWidth:(double)arg1;
- (void)setPlaceholderColor:(id)arg1;
- (void)setPlaceholderText:(id)arg1;
- (void)setPreventShowingCalloutMenu:(bool)arg1;
- (void)setProofreadingInfo:(id)arg1;
- (void)setSavedKeyboardInputMode:(id)arg1;
- (void)setScribbleInteraction:(id)arg1;
- (void)setSendCurrentLocationFromKeyboardEnabled:(bool)arg1;
- (void)setShouldStripEmojis:(bool)arg1;
- (void)setShowTextEffectsPickerEditMenuAction:(id)arg1;
- (void)setShowingDictationPlaceholder:(bool)arg1;
- (void)setSupportsBigEmojiTextStyles:(bool)arg1;
- (void)setTapGestureRecognizer:(id)arg1;
- (void)setTextFormattingDelegate:(id)arg1;
- (void)setupScribbleInteraction;
- (void)setupTextViewFromInitWithTextLayoutManagerWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)shouldIncludeDictationPadding;
- (bool)shouldPreserveAdaptiveImageGlyphsInCompositionText;
- (bool)shouldStripEmojis;
- (bool)shouldUpdateMentionsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg1 replacementText:(id)arg2;
- (id)showTextEffectsPickerEditMenuAction;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (bool)supportsBigEmojiTextStyles;
- (id)tapGestureRecognizer;
- (id)textFormattingDelegate;
- (void)textViewDidChange:(id)arg1;
- (void)updateFontIfNeededAndGetWasUsingBigEmojiStyle:(long long*)arg1;
- (void)updateMentionAssociationsForInputModeChange:(id)arg1;
- (void)updateMentionsAssociations;
- (void)updateTextAttributesWithConversionHandler:(id /* block */)arg1;
- (void)updateTextView;
- (void)updateTextViewAndCheckForMentions:(bool)arg1;

@end
