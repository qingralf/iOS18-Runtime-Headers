/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/CloudDocsDaemon
 */

@interface BRCPeriodicSyncScheduler : NSObject <BRCReachabilityDelegate, BRCScreenLockDelegate> {
    NSDate * _appLibrariesLastBoostTime;
    bool  _closed;
    BRCContainerScheduler * _containerScheduler;
    bool  _isNetworkReachable;
    bool  _isScreenLocked;
    NSDate * _lastPeriodicSyncDate;
    NSDate * _networkConnectTime;
    NSDate * _networkDisconnectTime;
    bool  _periodicSyncInProgress;
    NSObject<OS_dispatch_source> * _periodicSyncRequestTimer;
    NSString * _personaIdentifier;
    NSDate * _screenUnlockedTime;
    BRCAccountSession * _session;
    bool  _shouldTriggerPeriodicSync;
    NSObject<OS_dispatch_queue> * _syncQueue;
    BRCUserDefaults * _userDefaults;
}

@property (nonatomic, retain) NSDate *appLibrariesLastBoostTime;
@property (nonatomic, readonly) bool closed;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isNetworkReachable;
@property (nonatomic) bool isScreenLocked;
@property (nonatomic, retain) NSDate *lastPeriodicSyncDate;
@property (nonatomic, retain) NSDate *networkConnectTime;
@property (nonatomic, retain) NSDate *networkDisconnectTime;
@property (nonatomic) bool periodicSyncInProgress;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *periodicSyncRequestTimer;
@property (nonatomic, retain) NSDate *screenUnlockedTime;
@property (nonatomic) bool shouldTriggerPeriodicSync;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *syncQueue;
@property (nonatomic, retain) BRCUserDefaults *userDefaults;

+ (id)periodicSyncLastSyncDateKey;

- (void).cxx_destruct;
- (void)_appLibraryDidBoostForPresenterNotificationHandler:(id)arg1;
- (void)_cancelPeriodicSyncRequestScheduler;
- (void)_markNeedPeriodicSync;
- (void)_periodicSyncCompletionWithError:(id)arg1;
- (void)_registerToNotifications;
- (void)_schedulePeriodicSyncRequest;
- (void)_tiggerPeriodicSync;
- (double)_timeIntervalSinceLastPeriodicSync;
- (void)_unregisterToNotifications;
- (id)appLibrariesLastBoostTime;
- (void)close;
- (bool)closed;
- (id)initWithContainerScheduler:(id)arg1 session:(id)arg2;
- (bool)isNetworkReachable;
- (bool)isScreenLocked;
- (id)lastPeriodicSyncDate;
- (id)networkConnectTime;
- (id)networkDisconnectTime;
- (void)networkReachabilityChanged:(bool)arg1;
- (bool)periodicSyncInProgress;
- (id)periodicSyncRequestTimer;
- (void)resume;
- (void)screenLockChanged:(bool)arg1;
- (id)screenUnlockedTime;
- (void)setAppLibrariesLastBoostTime:(id)arg1;
- (void)setIsNetworkReachable:(bool)arg1;
- (void)setIsScreenLocked:(bool)arg1;
- (void)setLastPeriodicSyncDate:(id)arg1;
- (void)setNetworkConnectTime:(id)arg1;
- (void)setNetworkDisconnectTime:(id)arg1;
- (void)setPeriodicSyncInProgress:(bool)arg1;
- (void)setPeriodicSyncRequestTimer:(id)arg1;
- (void)setScreenUnlockedTime:(id)arg1;
- (void)setShouldTriggerPeriodicSync:(bool)arg1;
- (void)setUserDefaults:(id)arg1;
- (bool)shouldTriggerPeriodicSync;
- (id)syncQueue;
- (id)userDefaults;

@end
