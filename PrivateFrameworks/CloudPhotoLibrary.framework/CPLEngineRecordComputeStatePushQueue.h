/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudPhotoLibrary.framework/CloudPhotoLibrary
 */

@interface CPLEngineRecordComputeStatePushQueue : CPLEngineStorage <CPLAbstractObject> {
    CPLEngineFileStorage * _fileStorage;
    NSMutableArray * _filesToCommit;
    NSMutableArray * _filesToDelete;
    NSDate * _incomingDownloadFolderCreationDate;
    NSURL * _incomingDownloadFolderURL;
    NSDate * _lastComputeStateDownloadRequestDate;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lastComputeStateDownloadRequestDateLock;
    NSURL * _outgoingUploadFolderURL;
    unsigned long long  _tempFolderIndex;
    NSDate * _throttlingDate;
}

@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) CPLEngineFileStorage *fileStorage;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSURL *incomingDownloadFolderURL;
@property (nonatomic, readonly) CPLPlatformObject *platformObject;
@property (readonly) Class superclass;
@property (copy) NSDate *throttlingDate;

- (void).cxx_destruct;
- (bool)addComputeState:(id)arg1 error:(id*)arg2;
- (id)computeStatesToUploadWithScopeIdentifier:(id)arg1 localState:(unsigned long long)arg2 maximumCount:(unsigned long long)arg3;
- (unsigned long long)countOfComputeStates;
- (bool)createIncomingDownloadFolderIfNecessaryWithError:(id*)arg1;
- (id)createNewTempDownloadFolderWithError:(id*)arg1;
- (id)createTempUploadFolderWithError:(id*)arg1;
- (bool)deleteIncomingDownloadFolderWithError:(id*)arg1;
- (bool)deleteRecordsForScopeIndex:(long long)arg1 maxCount:(long long)arg2 deletedCount:(long long*)arg3 error:(id*)arg4;
- (bool)deleteTempUploadFolderWithError:(id*)arg1;
- (unsigned long long)fileSizeForComputeStatePayloadFileURL:(id)arg1 error:(id*)arg2;
- (id)fileStorage;
- (bool)hasChangesInScopeWithIdentifier:(id)arg1;
- (id)incomingDownloadFolderURL;
- (id)initWithEngineStore:(id)arg1 name:(id)arg2;
- (void)noteComputeStateDownloadRequest;
- (bool)openWithError:(id*)arg1;
- (bool)performMaintenanceWithError:(id*)arg1;
- (bool)releaseFileURL:(id)arg1 forComputeState:(id)arg2 error:(id*)arg3;
- (bool)removeComputeState:(id)arg1 error:(id*)arg2;
- (bool)removeComputeStateWithLocalScopedIdentifier:(id)arg1 version:(id)arg2 adjustmentFingerprint:(id)arg3 error:(id*)arg4;
- (id)retainFileURLForComputeState:(id)arg1 error:(id*)arg2;
- (unsigned long long)scopeType;
- (void)setThrottlingDate:(id)arg1;
- (id)status;
- (id)statusDictionary;
- (id)throttlingDate;
- (bool)updateFileURLForComputeState:(id)arg1 error:(id*)arg2;
- (bool)updateLocalStateForComputeState:(id)arg1 newLocalState:(unsigned long long)arg2 error:(id*)arg3;
- (void)writeTransactionDidFail;
- (void)writeTransactionDidSucceed;

@end
