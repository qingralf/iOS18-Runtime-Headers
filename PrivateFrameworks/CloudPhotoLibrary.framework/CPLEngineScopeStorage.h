/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudPhotoLibrary.framework/CloudPhotoLibrary
 */

@interface CPLEngineScopeStorage : CPLEngineStorage <CPLAbstractObject> {
    NSDictionary * _assetCountsToUpdate;
    bool  _clearSomeScopeMightHaveToBePulledByClient;
    bool  _scheduleAScopeUpdate;
    bool  _scheduleATransportUpdate;
    bool  _schedulePullFromClient;
    bool  _schedulePullFromTransport;
    unsigned long long  _schedulePushHighPriorityToTransportChangeTypes;
    unsigned long long  _schedulePushToTransportChangeTypes;
    _CPLEngineScopeCache * _scopeCache;
    NSCountedSet * _scopeIdentifiersBeingCreated;
    NSMutableDictionary * _scopeObservers;
    NSMutableArray * _scopesToRemoveFromBrokenScopes;
    bool  _shouldChangeSyncManagerPriorityBoost;
    bool  _shouldResetGlobalsForMainScope;
    bool  _shouldUpdateAssetCountsAtEndOfTransaction;
    bool  _someScopeMightHaveToBePulledByClient;
    bool  _syncManagerPriorityBoost;
}

@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool hasStagedSyncAnchors;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) CPLPlatformObject *platformObject;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (bool)_activateSharedScopeIfPresentWithError:(id*)arg1;
- (void)_cacheScope:(id)arg1;
- (void)_checkSyncManagerPriorityBoost;
- (void)_clearScopeCache;
- (id)_createScopeFromScopeChange:(id)arg1 error:(id*)arg2;
- (bool)_doesScopeContributeToAssetCounts:(id)arg1;
- (bool)_dropSharingScopeIdentifier:(id)arg1 error:(id*)arg2;
- (bool)_forceClientToPullScopeIfNecessary:(id)arg1 error:(id*)arg2;
- (void)_forceSyncManagerPriorityBoost;
- (bool)_handledDisabledFeaturesForScopeIfNecessary:(id)arg1 type:(long long)arg2 error:(id*)arg3;
- (unsigned long long)_indexOfCurrentClassForInitialQueriesForScope:(id)arg1;
- (bool)_isValidSharingScope:(id)arg1 forScopeIdentifier:(id)arg2;
- (bool)_isValidSharingScopeIdentifier:(id)arg1 scopeType:(long long)arg2 forScopeIdentifier:(id)arg3;
- (void)_notifyScopeObserversForScope:(id)arg1 flagsUpdate:(id)arg2;
- (id)_realScopeIdentifiersFromScopeIdentifiers:(id)arg1;
- (void)_removeBrokenScope:(id)arg1;
- (bool)_resetCompleteSyncStateForScope:(id)arg1 error:(id*)arg2;
- (void)_resetGlobalsForMainScope;
- (bool)_resetLocalSyncStateForScope:(id)arg1 error:(id*)arg2;
- (id)_scopeChangeToBePulledByClientForScope:(id)arg1;
- (id)_scopeWithIdentifier:(id)arg1;
- (bool)_setScopeType:(long long)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)_setSharingScopeIdentifier:(id)arg1 error:(id*)arg2;
- (void)_updateAssetCountsWithScopeChange:(id)arg1 forScope:(id)arg2;
- (bool)activateScope:(id)arg1 error:(id*)arg2;
- (id)activationDateForScope:(id)arg1;
- (bool)addCleanupTasksForScope:(id)arg1 error:(id*)arg2;
- (bool)addRewindSyncAnchor:(id)arg1 forScope:(id)arg2 error:(id*)arg3;
- (void)addScopeFlagsObserver:(id /* block */)arg1 withIdentifier:(id)arg2;
- (id)allScopeIdentifiersIncludeInactive:(bool)arg1;
- (void)beginCreatingScopeWithIdentifier:(id)arg1;
- (long long)busyStateForScope:(id)arg1;
- (Class)classOfRecordsForInitialQueryForScope:(id)arg1;
- (bool)clearAllQuotaFlagsForMainScopeWithReason:(id)arg1 error:(id*)arg2;
- (bool)clearTransportGroupsForScope:(id)arg1 error:(id*)arg2;
- (bool)clientAcknowledgedScopeChanges:(id)arg1 error:(id*)arg2;
- (bool)commitSyncAnchorForScope:(id)arg1 error:(id*)arg2;
- (id)createScopeWithIdentifier:(id)arg1 scopeType:(long long)arg2 flags:(long long)arg3 transportScope:(id)arg4 error:(id*)arg5;
- (bool)deactivateScope:(id)arg1 error:(id*)arg2;
- (id)deleteDateForScope:(id)arg1;
- (bool)deleteScopeWithIdentifier:(id)arg1 error:(id*)arg2;
- (bool)didDropSomeRecordsForScope:(id)arg1;
- (bool)disableInitialQueriesForScope:(id)arg1 error:(id*)arg2;
- (bool)disablePrimaryScopeWithError:(id*)arg1;
- (id)disabledDateForScope:(id)arg1;
- (bool)discardStagedSyncAnchorForScope:(id)arg1 error:(id*)arg2;
- (bool)discardStagedSyncAnchorWithScopeFilter:(id)arg1 error:(id*)arg2;
- (bool)doScopesNeedMetadataSync:(id)arg1;
- (bool)doesScopeAllowCourtesyMingling:(id)arg1;
- (bool)doesScopeNeedToBePulledByClient:(id)arg1;
- (bool)doesScopeNeedToPullChangesFromTransport:(id)arg1;
- (bool)doesScopeNeedToPushChangesToTransport:(id)arg1;
- (bool)doesScopeNeedToUpdateTransport:(id)arg1;
- (bool)doesScopeNeedToUploadComputeState:(id)arg1;
- (bool)doesScopeSupportToBePulledByClient:(id)arg1;
- (id)downloadTransportGroupForScope:(id)arg1;
- (bool)enablePrimaryScopeWithError:(id*)arg1;
- (void)endCreatingScopeWithIdentifier:(id)arg1;
- (id)enumeratorForDeletedStagedScopes;
- (id)enumeratorForScopesIncludeInactive:(bool)arg1;
- (id)enumeratorForScopesNeedingToPullChangesFromTransport;
- (id)enumeratorForScopesNeedingToPushChangesToTransport;
- (id)enumeratorForScopesNeedingToPushHighPriorityChangesToTransport;
- (id)enumeratorForScopesNeedingToUpdateTransport;
- (id)enumeratorForScopesNeedingToUploadComputeState;
- (id)enumeratorForScopesNeedingUpdateFromTransport;
- (id)enumeratorForScopesWithMingling;
- (unsigned long long)estimatedAssetCountForScope:(id)arg1;
- (unsigned long long)estimatedSizeForScope:(id)arg1;
- (id)filterForExcludedScopeIdentifiers:(id)arg1;
- (id)filterForIncludedScopeIdentifiers:(id)arg1;
- (id)flagsForScope:(id)arg1;
- (bool)hasFinishedAFullSyncForScope:(id)arg1;
- (bool)hasFinishedInitialDownloadForScope:(id)arg1;
- (bool)hasFinishedInitialSyncForScope:(id)arg1;
- (bool)hasScopeFetchedInitialSyncAnchor:(id)arg1;
- (bool)hasScopeFlagsObservers;
- (bool)hasScopesNeedingToPullChangesFromTransport;
- (bool)hasScopesNeedingToPushChangesToTransport;
- (bool)hasScopesNeedingToPushHighPriorityChangesToTransport;
- (bool)hasScopesNeedingToUpdateTransport;
- (bool)hasScopesNeedingToUploadComputeState;
- (bool)hasStagedSyncAnchorForScope:(id)arg1;
- (bool)hasStagedSyncAnchors;
- (long long)indexForCloudScopeIdentifier:(id)arg1;
- (long long)indexForLocalScopeIdentifier:(id)arg1;
- (id)initWithEngineStore:(id)arg1 name:(id)arg2;
- (id)initialMetadataDownloadDateForScope:(id)arg1;
- (id)initialMetadataQueriesDateForScope:(id)arg1;
- (id)initialMingleDateForScope:(id)arg1;
- (id)initialSyncAnchorForScope:(id)arg1;
- (id)lastDateOfClearedPushRepositoryForScope:(id)arg1;
- (id)lastDateOfCompletedPullFromTransportForScope:(id)arg1;
- (bool)markInitialQueryIsDoneForRecordsOfClass:(Class)arg1 forScope:(id)arg2 error:(id*)arg3;
- (id)mostCurrentChangesSyncAnchorForScope:(id)arg1;
- (bool)noteDidCheckAssetWithServerWhenOverQuotaForScope:(id)arg1 error:(id*)arg2;
- (bool)openWithError:(id*)arg1;
- (id)primaryScope;
- (long long)pullFromTransportTaskForScope:(id)arg1;
- (long long)pushToTransportTaskForScope:(id)arg1;
- (id)remainingClassesForInitialQueryForScope:(id)arg1;
- (void)removeScopeFlagsObserverWithIdentifier:(id)arg1;
- (bool)resetCloudRecordsForScopeWithIdentifier:(id)arg1 error:(id*)arg2;
- (bool)resetCompleteSyncStateForScope:(id)arg1 error:(id*)arg2;
- (bool)resetCompleteSyncStateIncludingIDMappingForScope:(id)arg1 error:(id*)arg2;
- (bool)resetDidCheckAssetWithServerWhenOverQuotaForScope:(id)arg1 error:(id*)arg2;
- (bool)resetInitialSyncAnchorForScope:(id)arg1 error:(id*)arg2;
- (bool)resetLocalRecordsForScopeWithIdentifier:(id)arg1 error:(id*)arg2;
- (bool)resetLocalSyncStateForScope:(id)arg1 error:(id*)arg2;
- (bool)resetStableRecordsForScopeWithIdentifier:(id)arg1 error:(id*)arg2;
- (bool)resetSyncAnchorForScope:(id)arg1 error:(id*)arg2;
- (bool)resetSyncStateForScope:(id)arg1 error:(id*)arg2;
- (id)rewindSyncAnchorsForScope:(id)arg1;
- (id)scopeChangeForScope:(id)arg1;
- (id)scopeChangesNeedingToBePulledByClientWithMaximumCount:(unsigned long long)arg1;
- (id)scopeForSharingScope:(id)arg1;
- (id)scopeIdentifierForCloudScopeIndex:(long long)arg1;
- (id)scopeIdentifierForLocalScopeIndex:(long long)arg1;
- (id)scopeListSyncAnchor;
- (unsigned long long)scopeType;
- (id)scopeWithCloudScopeIndex:(long long)arg1;
- (id)scopeWithIdentifier:(id)arg1;
- (id)scopeWithLocalScopeIndex:(long long)arg1;
- (id)scopeWithStableIndex:(long long)arg1;
- (id)scopedIdentifierForCloudScopedIdentifier:(id)arg1;
- (id)scopedIdentifierForLocalScopedIdentifier:(id)arg1;
- (bool)setAllScopesHasChangesToPullFromTransportWithError:(id*)arg1;
- (bool)setCloudScopeIndexOnChange:(id)arg1;
- (bool)setDeleteDate:(id)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)setDidDropSomeRecordsForScope:(id)arg1 error:(id*)arg2;
- (bool)setDisabledDate:(id)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)setHasFetchedInitialSyncAnchor:(bool)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)setHasFinishedInitialDownloadForScope:(id)arg1 error:(id*)arg2;
- (bool)setInitialSyncAnchor:(id)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)setLocalScopeIndexOnChange:(id)arg1;
- (bool)setPullFromTransportExpirationInterval:(double)arg1 scope:(id)arg2 error:(id*)arg3;
- (bool)setScope:(id)arg1 hasCompletedInitialMinglingWithError:(id*)arg2;
- (bool)setScope:(id)arg1 hasCompletedPullFromTransportTask:(long long)arg2 error:(id*)arg3;
- (bool)setScope:(id)arg1 hasCompletedPushToTransportTask:(long long)arg2 error:(id*)arg3;
- (bool)setScope:(id)arg1 hasCompletedTransportUpdate:(long long)arg2 error:(id*)arg3;
- (bool)setScope:(id)arg1 hasCompletedUploadComputeStateTask:(long long)arg2 error:(id*)arg3;
- (bool)setScopeHasChangesToPullFromTransport:(id)arg1 error:(id*)arg2;
- (bool)setScopeHasChangesToPushToTransport:(id)arg1 changeTypes:(unsigned long long)arg2 error:(id*)arg3;
- (bool)setScopeNeedsToBePulledByClient:(id)arg1 error:(id*)arg2;
- (bool)setScopeNeedsToUpdateTransport:(id)arg1 error:(id*)arg2;
- (bool)setScopeNeedsToUploadComputeState:(id)arg1 error:(id*)arg2;
- (bool)setScopeNeedsUpdateFromTransport:(id)arg1 error:(id*)arg2;
- (bool)setSyncAnchor:(id)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)setTransportScope:(id)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)setValue:(bool)arg1 forFlag:(long long)arg2 forScope:(id)arg3 error:(id*)arg4;
- (bool)setupAnchorResetTransportGroupForScope:(id)arg1 error:(id*)arg2;
- (bool)setupInitialSyncTransportGroupsForScope:(id)arg1 error:(id*)arg2;
- (bool)setupResetSyncTransportGroupForScope:(id)arg1 error:(id*)arg2;
- (id)sharingScopeForScope:(id)arg1;
- (bool)shouldAutoactivateScopeWithIdentifier:(id)arg1 scopeType:(long long)arg2;
- (bool)shouldCheckAssetsWithServerWhenOverQuotaForScope:(id)arg1;
- (bool)shouldDropAllUploadsForScope:(id)arg1 dropReason:(id*)arg2 shouldQuarantineRecords:(bool*)arg3;
- (bool)shouldTrackAdditionalInitialSyncDatesForScope:(id)arg1;
- (long long)stableScopeIndexForScopeIdentifier:(id)arg1;
- (id)stagingScopeForScope:(id)arg1;
- (id)status;
- (id)statusDictionaryForScope:(id)arg1;
- (bool)storeBusyState:(long long)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)storeEstimatedSize:(unsigned long long)arg1 estimatedAssetCount:(unsigned long long)arg2 forScope:(id)arg3 error:(id*)arg4;
- (bool)storeLastDateOfClearedPushRepository:(id)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)storeRewindSyncAnchors:(id)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)storeScopeChange:(id)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)storeScopeListSyncAnchor:(id)arg1 error:(id*)arg2;
- (bool)storeSupervisorInfo:(id)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)storeSupportedFeatureVersionInLastSync:(unsigned long long)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)storeTransientSyncAnchor:(id)arg1 forScope:(id)arg2 error:(id*)arg3;
- (id)supervisorInfoForScope:(id)arg1;
- (unsigned long long)supportedFeatureVersionInLastSyncForScope:(id)arg1;
- (bool)supportedFeatureVersionIsMostRecentForScope:(id)arg1;
- (id)syncAnchorForScope:(id)arg1;
- (id)transientSyncAnchorForScope:(id)arg1;
- (id)transportScopeForScope:(id)arg1;
- (long long)transportUpdateTaskForScope:(id)arg1;
- (bool)updateFlags:(id)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)updateInitialSyncTransportGroupEstimatedSize:(unsigned long long)arg1 assetCount:(unsigned long long)arg2 forScope:(id)arg3 error:(id*)arg4;
- (bool)updateScopeWithChange:(id)arg1 error:(id*)arg2;
- (id)updatedScopeFilter:(id)arg1;
- (bool)upgradeScopesWithNewLibraryOptions:(unsigned long long)arg1 error:(id*)arg2;
- (long long)uploadComputeStateTaskForScope:(id)arg1;
- (id)uploadTransportGroupForScope:(id)arg1;
- (id)validCloudScopeIndexes;
- (id)validLocalScopeIndexes;
- (bool)valueForFlag:(long long)arg1 forScope:(id)arg2;
- (void)writeTransactionDidFail;
- (void)writeTransactionDidSucceed;

@end
