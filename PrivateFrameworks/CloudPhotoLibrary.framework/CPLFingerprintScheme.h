/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudPhotoLibrary.framework/CloudPhotoLibrary
 */

@interface CPLFingerprintScheme : NSObject {
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    NSString * _zeroByteFileFingerprint;
    long long  _zeroByteFileFingerprintOnce;
}

@property (nonatomic, readonly) bool allowsStreaming;
@property (nonatomic, readonly) bool canMatchSignatureToFingerprint;
@property (nonatomic, readonly) NSString *fingerprintSchemeDescription;
@property (getter=isForStableHash, nonatomic, readonly) bool forStableHash;
@property (nonatomic, readonly) bool isMMCSv2;
@property (nonatomic, readonly) bool shouldUseEncryptedPropertiesIfPossible;
@property (getter=isValid, nonatomic, readonly) bool valid;
@property (nonatomic, readonly) NSString *zeroByteFileFingerprint;

+ (bool)alwaysCreateEPPMomentShares;
+ (id)defaultFingerprintSchemeForUnknownRecord;
+ (id)defaultMMCSv1FingerprintScheme;
+ (bool)disableInvalidFingerprintScheme;
+ (id)fingerprintSchemeForStableHash;
+ (id)invalidFingerprintScheme;
+ (bool)isMMCSv1Fingerprint:(id)arg1;
+ (bool)isMMCSv1Signature:(id)arg1;
+ (bool)isMMCSv1SignatureBytes:(const void*)arg1;
+ (bool)isMMCSv1SignatureBytesKnownNotMMCSv2:(const void*)arg1;
+ (bool)isMMCSv2Fingerprint:(id)arg1;
+ (bool)isMMCSv2Signature:(id)arg1;
+ (bool)isMMCSv2SignatureBytes:(const void*)arg1;
+ (id)nonPrivateFingerprintScheme;
+ (id)normalizeBoundaryKey:(id)arg1;
+ (void)setDisableInvalidFingerprintScheme:(bool)arg1;
+ (bool)supportsEPP;

- (void).cxx_destruct;
- (void**)_createSignatureGenerator;
- (bool)allowsStreaming;
- (bool)canMatchSignatureToFingerprint;
- (id)fingerPrintForData:(id)arg1 error:(id*)arg2;
- (id)fingerPrintForFD:(int)arg1 error:(id*)arg2;
- (id)fingerPrintForFileAtURL:(id)arg1 error:(id*)arg2;
- (id)fingerprintSchemeDescription;
- (id)init;
- (bool)isForStableHash;
- (bool)isMMCSv2;
- (bool)isValid;
- (bool)isValidSignature:(id)arg1;
- (bool)isValidSignatureBytes:(const void*)arg1;
- (bool)shouldUseEncryptedPropertiesIfPossible;
- (id)zeroByteFileFingerprint;

@end
