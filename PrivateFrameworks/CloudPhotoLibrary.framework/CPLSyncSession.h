/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudPhotoLibrary.framework/CloudPhotoLibrary
 */

@interface CPLSyncSession : NSObject <CPLSyncSessionConfiguration, CPLSyncSessionPredictorObserver> {
    bool  _allowsLocalConflictResolution;
    bool  _allowsLocalConflictResolutionWhenOverQuota;
    unsigned long long  _currentState;
    CPLBackgroundActivity * _detachedActivity;
    NSDate * _expectedDate;
    bool  _hasNotifiedClientOfChangesToPull;
    bool  _isComputeStateTaskUploadEnabled;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    long long  _maximumComputeStatesToUploadPerBatch;
    CPLSyncSessionPredictor * _predictor;
    NSDate * _proposedRescheduleDate;
    unsigned long long  _requiredStateAtEndOfSyncSession;
    <CPLSyncSessionRescheduler> * _rescheduler;
    CPLEngineScheduler * _scheduler;
    CPLScopeFilter * _scopeFilter;
    NSMutableSet * _scopeIdentifiersExcludedFromMingling;
    NSMutableSet * _scopeIdentifiersExcludedFromPushToTransport;
    unsigned long long  _sequenceNumber;
    NSMutableArray * _sessionInformation;
    bool  _shouldConsiderRequestingMoreTime;
    bool  _shouldHaveRequestedMoreTime;
    bool  _shouldRequestMoreTime;
    bool  _shouldRescheduleASyncSession;
    bool  _watchingPredictor;
}

@property (nonatomic, readonly) long long activityState;
@property (readonly) bool allowsLocalConflictResolution;
@property (readonly) bool allowsLocalConflictResolutionWhenOverQuota;
@property (nonatomic, readonly) NSArray *currentSessionInformation;
@property (readonly) unsigned long long currentState;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (getter=isDetached, nonatomic, readonly) bool detached;
@property (nonatomic, retain) CPLBackgroundActivity *detachedActivity;
@property (nonatomic, readonly) double estimatedRemainingTime;
@property (nonatomic, readonly) NSDate *expectedDate;
@property (readonly) unsigned long long hash;
@property (readonly) bool isComputeStateTaskUploadEnabled;
@property (readonly) long long maximumComputeStatesToUploadPerBatch;
@property (nonatomic, readonly) bool needsToAcquireRescheduler;
@property (nonatomic, readonly) CPLSyncSessionPredictor *predictor;
@property (nonatomic, readonly) NSDate *proposedRescheduleDate;
@property (nonatomic, readonly) unsigned long long requiredStateAtEndOfSyncSession;
@property (nonatomic, retain) <CPLSyncSessionRescheduler> *rescheduler;
@property (nonatomic, readonly) CPLEngineScheduler *scheduler;
@property (nonatomic, readonly) CPLScopeFilter *scopeFilter;
@property (nonatomic, readonly) NSSet *scopeIdentifiersExcludedFromMingling;
@property (nonatomic, readonly) NSSet *scopeIdentifiersExcludedFromPushToTransport;
@property (nonatomic, readonly) unsigned long long sequenceNumber;
@property (nonatomic, readonly) bool shouldBeDiscretionary;
@property (nonatomic) bool shouldConsiderRequestingMoreTime;
@property (nonatomic, readonly) bool shouldDefer;
@property (nonatomic) bool shouldHaveRequestedMoreTime;
@property (nonatomic) bool shouldRequestMoreTime;
@property (nonatomic, readonly) bool shouldRescheduleASyncSession;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSString *whenItWillStartDescription;

+ (id)detachedSyncSessionWithScheduler:(id)arg1 configuration:(id)arg2 scopeFilter:(id)arg3;
+ (id)scopeIdentifierToAutomaticallyExcludeFromMingling;
+ (void)setScopeIdentifierToAutomaticallyExcludeFromMingling:(id)arg1;

- (void).cxx_destruct;
- (void)_unwatchPredictor;
- (void)_updatePrediction:(id)arg1;
- (void)_watchOrUnwatchPredictorIfNecessary;
- (void)_watchPredictor;
- (long long)activityState;
- (id)addDeferHandler:(id /* block */)arg1;
- (bool)allowsLocalConflictResolution;
- (bool)allowsLocalConflictResolutionWhenOverQuota;
- (id)currentSessionInformation;
- (unsigned long long)currentState;
- (void)deferWithBlock:(id /* block */)arg1;
- (id)description;
- (id)detachedActivity;
- (void)dropExpectedDate;
- (void)engineIsClosing;
- (double)estimatedRemainingTime;
- (void)excludeScopeIdentifierFromMingling:(id)arg1;
- (void)excludeScopeIdentifierFromPushToTransport:(id)arg1;
- (id)expectedDate;
- (void)includeScopeIdentifierInMingling:(id)arg1;
- (void)includeScopeIdentifierInPushToTransport:(id)arg1;
- (id)initWithSequenceNumber:(unsigned long long)arg1 expectedDate:(id)arg2 scheduler:(id)arg3 configuration:(id)arg4 scopeFilter:(id)arg5;
- (bool)isAfterDate:(id)arg1;
- (bool)isBeforeDate:(id)arg1;
- (bool)isComputeStateTaskUploadEnabled;
- (bool)isDetached;
- (bool)isInLessThanTimeInterval:(double)arg1;
- (bool)isInMoreThanTimeInverval:(double)arg1;
- (long long)maximumComputeStatesToUploadPerBatch;
- (bool)needsToAcquireRescheduler;
- (void)noteClientNeedsToPullIfNecessary;
- (void)noteSyncSessionInformation:(id)arg1;
- (void)noteSyncSessionInformation:(id)arg1 arguments:(char *)arg2;
- (void)noteSyncSessionMovedToState:(unsigned long long)arg1;
- (id)popSessionInformation;
- (id)predictor;
- (void)predictor:(id)arg1 changedPrediction:(id)arg2;
- (id)proposedRescheduleDate;
- (id)redactedDescription;
- (void)removeDeferHandler:(id)arg1;
- (void)requestSyncStateAtEndOfSyncSession:(unsigned long long)arg1 reschedule:(bool)arg2;
- (void)requestSyncStateAtEndOfSyncSession:(unsigned long long)arg1 reschedule:(bool)arg2 proposedRescheduleDate:(id)arg3;
- (unsigned long long)requiredStateAtEndOfSyncSession;
- (id)rescheduler;
- (void)resetNoteClientNeedsToPull;
- (id)scheduler;
- (id)scopeFilter;
- (id)scopeIdentifiersExcludedFromMingling;
- (id)scopeIdentifiersExcludedFromPushToTransport;
- (unsigned long long)sequenceNumber;
- (void)sessionIsDone;
- (void)sessionWillStart;
- (void)sessionWontHappen;
- (void)setDetachedActivity:(id)arg1;
- (void)setRescheduler:(id)arg1;
- (void)setShouldConsiderRequestingMoreTime:(bool)arg1;
- (void)setShouldHaveRequestedMoreTime:(bool)arg1;
- (void)setShouldRequestMoreTime:(bool)arg1;
- (void)setupWithConfiguration:(id)arg1;
- (bool)shouldBeDiscretionary;
- (bool)shouldConsiderRequestingMoreTime;
- (bool)shouldDefer;
- (bool)shouldHaveRequestedMoreTime;
- (bool)shouldRequestMoreTime;
- (bool)shouldRescheduleASyncSession;
- (void)updateScopeFilter:(id)arg1;
- (id)whenItWillStartDescription;

@end
