/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ContactsFoundation.framework/ContactsFoundation
 */

@interface CNAuthorizationContext : NSObject <CNAuthorizationContext, CNTCCSimulation> {
    CNUnfairLock * _addressingGrammarAccessStatusLock;
    NSObject<OS_tcc_identity> * _assumedIdentity;
    NSNumber * _authorizationStatusCachedValue;
    CNUnfairLock * _authorizationStatusLock;
    NSString * _clientBundleIdentifierCachedValue;
    CNAuditToken * _cnAuditToken;
    NSNumber * _isAddressingGrammarAccessGrantedCachedValue;
    NSNumber * _isClientFirstOrSecondPartyCachedValue;
    NSNumber * _isClientTCCAllowedCachedValue;
    NSNumber * _isClientTCCRegionalAllowedCachedValue;
    NSNumber * _isNotesAccessGrantedCachedValue;
    CNUnfairLock * _notesAccessStatusLock;
    NSNumber * _shouldAlwaysQueryAuthorizationStatusCachedValue;
    <CNTCC><CNTCCSettings><CNTCCSimulation> * _tccServices;
}

@property (nonatomic, retain) CNUnfairLock *addressingGrammarAccessStatusLock;
@property (nonatomic, retain) NSObject<OS_tcc_identity> *assumedIdentity;
@property (nonatomic, readonly) long long authorizationStatus;
@property (nonatomic, retain) NSNumber *authorizationStatusCachedValue;
@property (nonatomic, retain) CNUnfairLock *authorizationStatusLock;
@property (nonatomic, readonly) NSString *clientBundleIdentifier;
@property (nonatomic, retain) NSString *clientBundleIdentifierCachedValue;
@property (nonatomic, retain) CNAuditToken *cnAuditToken;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isAccessDenied;
@property (nonatomic, readonly) bool isAccessGranted;
@property (nonatomic, readonly) bool isAccessRestricted;
@property (nonatomic, readonly) bool isAccessUnknown;
@property (nonatomic, readonly) bool isAddressingGrammarAccessGranted;
@property (nonatomic, retain) NSNumber *isAddressingGrammarAccessGrantedCachedValue;
@property (nonatomic, readonly) bool isClientFirstOrSecondParty;
@property (nonatomic, retain) NSNumber *isClientFirstOrSecondPartyCachedValue;
@property (nonatomic, readonly) bool isClientTCCAllowed;
@property (nonatomic, retain) NSNumber *isClientTCCAllowedCachedValue;
@property (nonatomic, retain) NSNumber *isClientTCCRegionalAllowedCachedValue;
@property (nonatomic, readonly) bool isFullAccessGranted;
@property (nonatomic, readonly) bool isLimitedAccessGranted;
@property (nonatomic, readonly) bool isNotesAccessGranted;
@property (nonatomic, retain) NSNumber *isNotesAccessGrantedCachedValue;
@property (nonatomic, retain) CNUnfairLock *notesAccessStatusLock;
@property (nonatomic, retain) NSNumber *shouldAlwaysQueryAuthorizationStatusCachedValue;
@property (readonly) Class superclass;
@property (nonatomic, retain) <CNTCC><CNTCCSettings><CNTCCSimulation> *tccServices;

+ (id)os_log;
+ (id)sharedInstance;
+ (bool)shouldIgnoreAssumedIdentity:(id)arg1;
+ (bool)shouldIgnoreAssumedIdentityForBundleIdentifier:(id)arg1;

- (void).cxx_destruct;
- (id)addressingGrammarAccessStatusLock;
- (id)assumedIdentity;
- (long long)authorizationStatus;
- (id)authorizationStatusCachedValue;
- (id)authorizationStatusLock;
- (bool)cachedAddressingGrammarAccessGranted;
- (long long)cachedAuthorizationStatus;
- (bool)cachedNotesAccessGranted;
- (bool)checkClientIsFirstOrSecondParty;
- (bool)checkTCCEntitlementNamesAllowContacts:(id)arg1;
- (id)clientBundleIdentifier;
- (id)clientBundleIdentifierCachedValue;
- (id)clientBundleIdentifierImpl;
- (id)cnAuditToken;
- (bool)doesClientHaveEntitlement:(id)arg1;
- (id)errorForStatus:(long long)arg1;
- (id)init;
- (id)initWithAuditToken:(id)arg1 assumedIdentity:(id)arg2;
- (id)initWithAuditToken:(id)arg1 assumedIdentity:(id)arg2 tccServices:(id)arg3;
- (bool)isAccessDenied;
- (bool)isAccessGranted;
- (bool)isAccessGrantedRequestingAccessIfNeeded;
- (bool)isAccessRestricted;
- (bool)isAccessUnknown;
- (bool)isAddressingGrammarAccessGranted;
- (id)isAddressingGrammarAccessGrantedCachedValue;
- (bool)isAddressingGrammarAccessGrantedImpl;
- (bool)isClientFirstOrSecondParty;
- (id)isClientFirstOrSecondPartyCachedValue;
- (bool)isClientFirstOrSecondPartyImpl;
- (bool)isClientTCCAllowed;
- (id)isClientTCCAllowedCachedValue;
- (bool)isClientTCCAllowedImpl;
- (bool)isClientTCCCoupledProcess;
- (bool)isClientTCCKilledOnAuthorizationChange;
- (bool)isClientTCCRegionalAllowed;
- (id)isClientTCCRegionalAllowedCachedValue;
- (bool)isClientTCCRegionalAllowedImpl;
- (bool)isClientTCCUncoupledProcess;
- (bool)isFirstPartyAddressingGrammarEntitled;
- (bool)isFirstPartyNotesEntitled;
- (bool)isFullAccessGranted;
- (bool)isGreenTeaDevice;
- (bool)isLimitedAccessGranted;
- (bool)isNotesAccessGranted;
- (id)isNotesAccessGrantedCachedValue;
- (bool)isNotesAccessGrantedImpl;
- (bool)isThirdPartyNotesEntitled;
- (bool)isUnitTesting;
- (id)notesAccessStatusLock;
- (bool)requestAccessWithError:(id*)arg1;
- (void)requestAuthorization:(long long)arg1 completionHandler:(id /* block */)arg2;
- (id)requestAuthorizationFuture:(long long)arg1;
- (void)resetCachedStatus;
- (long long)resolveRequestAuthorizationFuture:(id)arg1;
- (void)saveAuthorizationRecord:(id)arg1 dontKillApp:(bool)arg2;
- (void)setAddressingGrammarAccessStatusLock:(id)arg1;
- (void)setAssumedIdentity:(id)arg1;
- (void)setAuthorizationStatus:(long long)arg1 forBundleIdentifier:(id)arg2 noKillApp:(bool)arg3;
- (void)setAuthorizationStatusCachedValue:(id)arg1;
- (void)setAuthorizationStatusLock:(id)arg1;
- (void)setClientBundleIdentifierCachedValue:(id)arg1;
- (void)setCnAuditToken:(id)arg1;
- (void)setIsAddressingGrammarAccessGrantedCachedValue:(id)arg1;
- (void)setIsClientFirstOrSecondPartyCachedValue:(id)arg1;
- (void)setIsClientTCCAllowedCachedValue:(id)arg1;
- (void)setIsClientTCCRegionalAllowedCachedValue:(id)arg1;
- (void)setIsNotesAccessGrantedCachedValue:(id)arg1;
- (void)setNotesAccessStatusLock:(id)arg1;
- (void)setShouldAlwaysQueryAuthorizationStatusCachedValue:(id)arg1;
- (void)setTccServices:(id)arg1;
- (bool)shouldAlwaysQueryAuthorizationStatus;
- (id)shouldAlwaysQueryAuthorizationStatusCachedValue;
- (bool)shouldAlwaysQueryAuthorizationStatusImpl;
- (void)simulateStatus:(long long)arg1;
- (void)stopSimulation;
- (id)tccServices;

@end
