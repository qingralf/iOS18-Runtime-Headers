/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreBrightness.framework/CoreBrightness
 */

@interface AABRear : CBModule <CBContainerModuleProtocol, CBHIDServiceProtocol> {
    float  _activationFLux;
    float  _frontALSThreshold;
    float  _lastFrequency;
    float  _luxRatioThreshold;
    float  _nitsRatioThreshold;
    CBRearALSModule * _rearALSModule;
    float  _rearALSThreshold;
    bool  _sensorEnabled;
    bool  _shouldUseRearLux;
    bool  _started;
}

@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (getter=isRearALSSupported, readonly) bool rearALSSupported;
@property (readonly) bool started;
@property (readonly) Class superclass;

- (bool)addHIDServiceClient:(struct __IOHIDServiceClient { }*)arg1;
- (bool)checkSensorEnablementConditions:(float)arg1;
- (id)copyParam:(id)arg1;
- (id)copyPropertyForKey:(id)arg1;
- (id)copyPropertyForKey:(id)arg1 withParameter:(id)arg2;
- (void)dealloc;
- (void)evaluateSamplingFrequencyWithLux:(float)arg1 andCap:(float)arg2;
- (bool)handleHIDEvent:(struct __IOHIDEvent { }*)arg1 from:(struct __IOHIDServiceClient { }*)arg2;
- (void)handleNotificationForKey:(id)arg1 withProperty:(id)arg2;
- (id)initWithQueue:(id)arg1 andGrimaldiFactory:(id)arg2;
- (bool)isRearALSSupported;
- (float)nitsRatio;
- (bool)removeHIDServiceClient:(struct __IOHIDServiceClient { }*)arg1;
- (bool)setProperty:(id)arg1 forKey:(id)arg2;
- (bool)shouldUseRLux:(float)arg1 rLux:(float)arg2;
- (bool)shouldUseRearLuxFrontLux:(float)arg1 rearLux:(float)arg2 andCap:(float)arg3;
- (void)start;
- (void)startSampling;
- (bool)started;
- (void)stop;
- (void)stopSampling;

@end
