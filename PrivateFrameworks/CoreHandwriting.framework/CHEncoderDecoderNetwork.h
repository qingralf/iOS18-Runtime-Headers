/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting
 */

@interface CHEncoderDecoderNetwork : NSObject {
    NSSet * _activeAlphabet;
    NSArray * _codeMap;
    NSSet * _declaredVariables;
    CHSingletonMLModel * _decoderModel;
    NSSet * _definedMathFunctionNameSet;
    long long  _encoderCompressionFactor;
    CHSingletonMLModel * _encoderModel;
    long long  _enlargeSingleDotBy;
    long long  _eosIndex;
    long long  _maxInputHeight;
    long long  _maxInputWidth;
    long long  _minInputHeight;
    long long  _minInputWidth;
    long long  _numInputChannels;
    long long  _numOutputClasses;
    long long  _padToMultipleOf;
    NSArray * _recognitionLocales;
    long long  _renderSymbolSize;
    float  _segmentationAttThreshold;
}

@property (nonatomic, retain) NSSet *activeAlphabet;
@property (nonatomic, readonly) NSArray *codeMap;
@property (nonatomic, retain) NSSet *declaredVariables;
@property (nonatomic, readonly) CHSingletonMLModel *decoderModel;
@property (nonatomic, retain) NSSet *definedMathFunctionNameSet;
@property (nonatomic, readonly) long long encoderCompressionFactor;
@property (nonatomic, readonly) CHSingletonMLModel *encoderModel;
@property (nonatomic, readonly) long long enlargeSingleDotBy;
@property (nonatomic, readonly) long long eosIndex;
@property (nonatomic, readonly) long long maxInputHeight;
@property (nonatomic, readonly) long long maxInputWidth;
@property (nonatomic, readonly) long long minInputHeight;
@property (nonatomic, readonly) long long minInputWidth;
@property (nonatomic, readonly) long long numInputChannels;
@property (nonatomic, readonly) long long numOutputClasses;
@property (nonatomic, readonly) long long padToMultipleOf;
@property (nonatomic, copy) NSArray *recognitionLocales;
@property (nonatomic, readonly) long long renderSymbolSize;
@property (nonatomic, readonly) float segmentationAttThreshold;

- (void).cxx_destruct;
- (id)_bestPathTokensFromDecodingStates:(const void*)arg1 drawing:(id)arg2 codemap:(const void*)arg3;
- (struct vector<std::vector<std::unordered_map<int, int>>, std::allocator<std::vector<std::unordered_map<int, int>>>> { void *x1; void *x2; struct __compressed_pair<std::vector<std::unordered_map<int, int>> *, std::allocator<std::vector<std::unordered_map<int, int>>>> { void *x_3_1_1; } x3; })_createCompressedInputImage:(const void*)arg1;
- (struct FeatureArray { struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x_1_1_1; unsigned long long *x_1_1_2; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x_3_2_1; } x_1_1_3; } x1; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x_2_1_1; unsigned long long *x_2_1_2; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x_3_2_1; } x_2_1_3; } x2; struct vector<float, std::allocator<float>> { float *x_3_1_1; float *x_3_1_2; struct __compressed_pair<float *, std::allocator<float>> { float *x_3_2_1; } x_3_1_3; } x3; })_extractFeaturesFromDrawing:(id)arg1 error:(id*)arg2;
- (id)activeAlphabet;
- (id)codeMap;
- (void)dealloc;
- (id)declaredVariables;
- (id)decoderModel;
- (id)definedMathFunctionNameSet;
- (long long)encoderCompressionFactor;
- (id)encoderModel;
- (long long)enlargeSingleDotBy;
- (long long)eosIndex;
- (void)filterOutAlternatives:(void*)arg1 codemap:(const void*)arg2;
- (int)getIndexInCodemap:(id)arg1;
- (id)getListOfCommonVariablesForGraphing;
- (id)initWithModelNames:(id)arg1 decoderName:(id)arg2;
- (id)loadCodemap:(id)arg1;
- (id)loadModel:(id)arg1;
- (long long)maxInputHeight;
- (long long)maxInputWidth;
- (long long)minInputHeight;
- (long long)minInputWidth;
- (long long)numInputChannels;
- (long long)numOutputClasses;
- (long long)padToMultipleOf;
- (id)recognitionLocales;
- (id)recognizeDrawing:(id)arg1 beamSize:(long long)arg2 shouldCancel:(id /* block */)arg3;
- (long long)renderSymbolSize;
- (float)segmentationAttThreshold;
- (void)setActiveAlphabet:(id)arg1;
- (void)setDeclaredVariables:(id)arg1;
- (void)setDefinedMathFunctionNameSet:(id)arg1;
- (void)setRecognitionLocales:(id)arg1;
- (void)setUpDecoderConfusableAlternatives:(void*)arg1;
- (void)setUpDecoderOutOfAlphabetAlternatives:(void*)arg1;
- (void)setUpMathDecoder:(void*)arg1 imageCompressed:(void*)arg2;

@end
