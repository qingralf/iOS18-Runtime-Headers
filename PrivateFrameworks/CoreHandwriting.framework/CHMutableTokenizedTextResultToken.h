/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting
 */

@interface CHMutableTokenizedTextResultToken : CHTokenizedTextResultToken {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _bounds;
    NSString * _string;
    NSIndexSet * _strokeIndexes;
}

@property (nonatomic) double alignmentScore;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property (nonatomic) double combinedScore;
@property (nonatomic) unsigned long long inputSources;
@property (nonatomic) double modelScore;
@property (nonatomic) unsigned long long properties;
@property (nonatomic) double recognitionScore;
@property (nonatomic, copy) NSLocale *recognizerSourceLocale;
@property (nonatomic, copy) NSString *string;
@property (nonatomic, copy) NSIndexSet *strokeIndexes;
@property (nonatomic) long long substrokeCount;
@property (nonatomic) unsigned int wordID;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithString:(id)arg1 strokeIndexes:(id)arg2 wordID:(unsigned int)arg3 modelScore:(double)arg4 recognitionScore:(double)arg5 combinedScore:(double)arg6 alignmentScore:(double)arg7 properties:(unsigned long long)arg8 recognizerSourceLocale:(id)arg9 inputSources:(unsigned long long)arg10 substrokeCount:(long long)arg11 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg12 originalBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg13 principalLines:(struct { struct { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; struct { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; struct { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_3_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_3_1_2; } x3; struct { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_4_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_4_1_2; } x4; })arg14;
- (bool)isEqual:(id)arg1;
- (void)setAlignmentScore:(double)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCombinedScore:(double)arg1;
- (void)setInputSources:(unsigned long long)arg1;
- (void)setModelScore:(double)arg1;
- (void)setProperties:(unsigned long long)arg1;
- (void)setRecognitionScore:(double)arg1;
- (void)setRecognizerSourceLocale:(id)arg1;
- (void)setString:(id)arg1;
- (void)setStrokeIndexes:(id)arg1;
- (void)setSubstrokeCount:(long long)arg1;
- (void)setWordID:(unsigned int)arg1;
- (id)string;
- (id)strokeIndexes;

@end
