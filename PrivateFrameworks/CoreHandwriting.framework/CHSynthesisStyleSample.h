/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting
 */

@interface CHSynthesisStyleSample : NSObject <NSCopying, NSSecureCoding> {
    NSDate * _creationDate;
    long long  _creationTimestep;
    CHDrawing * _drawing;
    struct vector<float, std::allocator<float>> { 
        float *__begin_; 
        float *__end_; 
        struct __compressed_pair<float *, std::allocator<float>> { 
            float *__value_; 
        } __end_cap_; 
    }  _embeddingVector;
    long long  _samplingCount;
    NSSet * _strokeIdentifiers;
    NSString * _transcription;
}

@property (nonatomic, readonly) NSDate *creationDate;
@property (nonatomic) long long creationTimestep;
@property (nonatomic, readonly) CHDrawing *drawing;
@property (nonatomic) /* Warning: unhandled struct encoding: '{vector<float' */ struct  embeddingVector; /* unknown property attribute:  std::allocator<float>>=^f}} */
@property (nonatomic) long long samplingCount;
@property (nonatomic, readonly) NSSet *strokeIdentifiers;
@property (nonatomic, readonly) NSString *transcription;

+ (id)characterCoverageWithString:(id)arg1;
+ (float)cosineSimilarityBetweenFirstVector:(const void*)arg1 secondVector:(const void*)arg2;
+ (float)distanceBetweenFirstVector:(const void*)arg1 secondVector:(const void*)arg2;
+ (struct vector<float, std::allocator<float>> { float *x1; float *x2; struct __compressed_pair<float *, std::allocator<float>> { float *x_3_1_1; } x3; })floatArrayToVector:(id)arg1;
+ (struct vector<float, std::allocator<float>> { float *x1; float *x2; struct __compressed_pair<float *, std::allocator<float>> { float *x_3_1_1; } x3; })floatMultiArrayToVector:(id)arg1;
+ (id)floatVectorToArray:(void*)arg1;
+ (double)normalizationTextHeight;
+ (id)normalizeDrawing:(id)arg1 transcription:(id)arg2;
+ (id)normalizeStyleSample:(id)arg1;
+ (void)normalizeVector:(void*)arg1;
+ (id)sampleWithTranscription:(id)arg1 drawing:(id)arg2 strokeIdentifiers:(id)arg3;
+ (id)sampleWithTranscription:(id)arg1 drawing:(id)arg2 strokeIdentifiers:(id)arg3 embeddingVector:(const void*)arg4;
+ (long long)shiftTimestep:(long long)arg1 offset:(long long)arg2;
+ (bool)supportsSecureCoding;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)characterCoverage;
- (void)clearEmbeddingVector;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (float)cosineSimilarityToSample:(id)arg1;
- (id)creationDate;
- (long long)creationTimestep;
- (float)distanceToSample:(id)arg1;
- (id)drawing;
- (struct vector<float, std::allocator<float>> { float *x1; float *x2; struct __compressed_pair<float *, std::allocator<float>> { float *x_3_1_1; } x3; })embeddingVector;
- (void)encodeWithCoder:(id)arg1;
- (bool)hasEmbeddingVector;
- (void)incrementSamplingCount;
- (id)initWithCoder:(id)arg1;
- (id)initWithTranscription:(id)arg1 drawing:(id)arg2 strokeIdentifiers:(id)arg3 embeddingVector:(const void*)arg4;
- (bool)isEqual:(id)arg1;
- (long long)samplingCount;
- (void)setCreationTimestep:(long long)arg1;
- (void)setEmbeddingVector:(struct vector<float, std::allocator<float>> { float *x1; float *x2; struct __compressed_pair<float *, std::allocator<float>> { float *x_3_1_1; } x3; })arg1;
- (void)setSamplingCount:(long long)arg1;
- (void)shiftTimestepsByOffset:(long long)arg1;
- (id)strokeIdentifiers;
- (id)transcription;
- (void)updateStyleEmbedding:(id)arg1;

@end
