/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting
 */

@interface CHTokenizedMathResult : CHTokenizedResult {
    double  _baseCharacterHeight;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _bounds;
    NSString * _correctedLatex;
    NSSet * _declaredVariablesWhileRecognized;
    bool  _didAttemptParsing;
    CHLatexParseTree * _parseTree;
    NSNumber * _selectedTranscriptionPathIndex;
    NSArray * _tokenColumns;
    NSArray * _transcriptionPathScores;
    NSArray * _transcriptionPaths;
}

@property (nonatomic, readonly) double absoluteProbability;
@property (nonatomic, readonly) double baseCharacterHeight;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property (nonatomic, readonly) bool hasLowConfidence;
@property (readonly) NSArray *symbolBounds;
@property (nonatomic, readonly) NSArray *symbolStrokeIndexes;
@property (nonatomic, readonly) long long tokenColumnCount;
@property (nonatomic, readonly, copy) NSArray *transcriptionPathScores;
@property (nonatomic, readonly, copy) NSArray *transcriptionPaths;

+ (bool)areTokenRowsEquivalent:(id)arg1 otherRow:(id)arg2;
+ (id)declaredVariableInLatexTranscription:(id)arg1;
+ (bool)doesLatexContainEvaluationTrigger:(id)arg1;
+ (bool)hasPartialRangeDataDetectorEntries:(id)arg1;
+ (bool)isMathUnitConversionPatternForTextTranscription:(id)arg1 locales:(id)arg2;
+ (bool)isNonTextCandidateTextTranscription:(id)arg1;
+ (bool)isPartialMathUnitConversionPatternForTextTranscription:(id)arg1 locales:(id)arg2;
+ (bool)isPatternedTextForTextTranscription:(id)arg1 locales:(id)arg2;
+ (bool)isTextTranscriptionInMathAlphabet:(id)arg1;
+ (bool)isTranscriptionValidExpression:(id)arg1 limitToCurrentLocale:(bool)arg2;
+ (bool)isTranscriptionValidExpression:(id)arg1 transcriptionPath:(id)arg2 limitToCurrentLocale:(bool)arg3;
+ (bool)isTrivialTextTranscriptionAvailableForLatex:(id)arg1;
+ (bool)isVerticalMathEntryWithUnitForTextTranscription:(id)arg1 locales:(id)arg2;
+ (id)mathResultWithMergedColumns:(id)arg1 columnRangesToMerge:(id)arg2;
+ (id)mathResultWithReindexedTokens:(id)arg1 originalStrokeIdentifiersOrdering:(id)arg2 newStrokeIdentifiersOrdering:(id)arg3;
+ (long long)mergeTokenRow:(id)arg1 intoUniqueRows:(id)arg2;
+ (id)simplifiedTextTranscriptionForLatex:(id)arg1;
+ (bool)supportsSecureCoding;
+ (id)textTranscriptionForLatex:(id)arg1;
+ (id)updateStrokeIndexOffsetForSubResults:(id)arg1 fromResult:(id)arg2;

- (void).cxx_destruct;
- (double)absoluteProbability;
- (id)alternativeCandidatesLog;
- (double)averageTokenScoreForColumnRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (double)baseCharacterHeight;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (id)debugDescription;
- (id)declaredVariable;
- (id)declaredVariablesWhileRecognized;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (void)enumerateTokensInPreferredTranscriptionPathWithBlock:(id /* block */)arg1;
- (void)enumerateTokensInTopTranscriptionPathWithBlock:(id /* block */)arg1;
- (void)enumerateTokensInTranscriptionPath:(id)arg1 columnRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 tokenProcessingBlock:(id /* block */)arg3;
- (id)evaluationWithVariables:(id)arg1 caseSensitive:(bool)arg2;
- (double)geometricMeanTokenScoreForColumnRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (double)geometricMeanTokenScoreForColumnRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 transcriptionPath:(id)arg2;
- (bool)hasLowConfidence;
- (bool)hasValidColumns;
- (bool)hasValidPaths;
- (unsigned long long)hash;
- (id)initWithBestPathTokens:(id)arg1;
- (id)initWithBestPathTokens:(id)arg1 isMinimalDrawingResult:(bool)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithSegmentedBestPathTokens:(id)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToTokenizedMathResult:(id)arg1;
- (bool)isEquivalentToTokenizedMathResult:(id)arg1;
- (bool)isEvaluationExpected;
- (bool)isValid;
- (id)newResultWithScrubbedStrokes:(id)arg1 scrubbedValueTokens:(id)arg2 scrubbedValueStrokeIndexes:(id)arg3 scrubbedValueDrawing:(id)arg4;
- (id)parseTree;
- (id)preferredTranscription;
- (id)renderableLatexCandidatesForColumnIndex:(unsigned long long)arg1;
- (id)resultTransformedToOfficialNotationWithExplicitOperators:(bool)arg1;
- (double)score;
- (double)scoreForColumnRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (double)scoreForColumnRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 transcriptionPath:(id)arg2;
- (id)selectedTranscriptionPathIndex;
- (void)setDeclaredVariablesWhileRecognized:(id)arg1;
- (void)setSelectedTranscriptionPathIndex:(id)arg1;
- (id)strokeIndexes;
- (id)strokeIndexesForColumnsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)symbolBounds;
- (id)symbolStrokeIndexes;
- (id)tokenAtLocation:(struct { long long x1; long long x2; long long x3; })arg1;
- (long long)tokenColumnCount;
- (id)tokenColumns;
- (id)tokenRowsAtColumnIndex:(long long)arg1;
- (id)tokenizedMathResultByAppendingTokenizedMathResult:(id)arg1;
- (id)tokensInTranscriptionPath:(id)arg1 atColumnIndex:(long long)arg2;
- (id)topTranscription;
- (id)transcriptionPathScores;
- (id)transcriptionPaths;
- (id)transcriptionWithPath:(id)arg1 columnRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (bool)transformNotationToInternal;

@end
