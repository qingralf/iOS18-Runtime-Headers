/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting
 */

@interface CHTransformedTextSegment : NSObject <CHTransformedText> {
    struct BoundingBox { 
        double x_min; 
        double x_max; 
        double y_min; 
        double y_max; 
    }  _boundingBox;
    NSLocale * _locale;
    struct vector<CGPoint, std::allocator<CGPoint>> { 
        struct CGPoint {} *__begin_; 
        struct CGPoint {} *__end_; 
        struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { 
            struct CGPoint {} *__value_; 
        } __end_cap_; 
    }  _points;
    struct PrincipalLines { 
        struct vector<CGPoint, std::allocator<CGPoint>> { 
            struct CGPoint {} *__begin_; 
            struct CGPoint {} *__end_; 
            struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { 
                struct CGPoint {} *__value_; 
            } __end_cap_; 
        } descender; 
        struct vector<CGPoint, std::allocator<CGPoint>> { 
            struct CGPoint {} *__begin_; 
            struct CGPoint {} *__end_; 
            struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { 
                struct CGPoint {} *__value_; 
            } __end_cap_; 
        } base; 
        struct vector<CGPoint, std::allocator<CGPoint>> { 
            struct CGPoint {} *__begin_; 
            struct CGPoint {} *__end_; 
            struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { 
                struct CGPoint {} *__value_; 
            } __end_cap_; 
        } median; 
        struct vector<CGPoint, std::allocator<CGPoint>> { 
            struct CGPoint {} *__begin_; 
            struct CGPoint {} *__end_; 
            struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { 
                struct CGPoint {} *__value_; 
            } __end_cap_; 
        } top; 
    }  _principalLines;
    long long  _strokeClassification;
    struct vector<std::vector<CGPoint>, std::allocator<std::vector<CGPoint>>> { 
        void *__begin_; 
        void *__end_; 
        struct __compressed_pair<std::vector<CGPoint> *, std::allocator<std::vector<CGPoint>>> { 
            void *__value_; 
        } __end_cap_; 
    }  _strokePoints;
    NSArray * _supportStrokeTokenRanges;
    NSArray * _supportStrokes;
    NSArray * _textStrokes;
    NSArray * _tokens;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _transform;
}

@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) NSLocale *locale;
@property (nonatomic, readonly) long long strokeClassification;
@property (readonly) Class superclass;
@property (readonly) NSArray *supportStrokeTokenRanges;
@property (readonly) NSArray *supportStrokes;
@property (readonly) NSArray *textStrokes;
@property (readonly) NSArray *tokens;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transform;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)addSupportStroke:(id)arg1;
- (void)addSupportStroke:(id)arg1 tokenRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)addTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (struct CGPoint { double x1; double x2; })anchorPoint;
- (struct BoundingBox { double x1; double x2; double x3; double x4; })boundingBox;
- (struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_1_1; } x3; })clippedPoints:(struct CGSize { double x1; double x2; })arg1 min:(struct CGPoint { double x1; double x2; })arg2 max:(struct CGPoint { double x1; double x2; })arg3;
- (struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_1_1; } x3; })filteredPoints:(struct CGSize { double x1; double x2; })arg1;
- (id)initWithStrokes:(id)arg1 tokens:(id)arg2 locale:(id)arg3 strokeClassification:(long long)arg4 principalLines:(struct PrincipalLines { struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x_1_1_1; struct CGPoint {} *x_1_1_2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_2_1; } x_1_1_3; } x1; struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x_2_1_1; struct CGPoint {} *x_2_1_2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_2_1; } x_2_1_3; } x2; struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x_3_1_1; struct CGPoint {} *x_3_1_2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_2_1; } x_3_1_3; } x3; struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x_4_1_1; struct CGPoint {} *x_4_1_2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_2_1; } x_4_1_3; } x4; })arg5 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg6;
- (id)initWithStrokes:(id)arg1 tokens:(id)arg2 points:(const void*)arg3 strokePoints:(const void*)arg4 locale:(id)arg5 strokeClassification:(long long)arg6 principalLines:(struct PrincipalLines { struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x_1_1_1; struct CGPoint {} *x_1_1_2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_2_1; } x_1_1_3; } x1; struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x_2_1_1; struct CGPoint {} *x_2_1_2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_2_1; } x_2_1_3; } x2; struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x_3_1_1; struct CGPoint {} *x_3_1_2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_2_1; } x_3_1_3; } x3; struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x_4_1_1; struct CGPoint {} *x_4_1_2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_2_1; } x_4_1_3; } x4; })arg7 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg8;
- (struct CGPoint { double x1; double x2; })insertionPoint;
- (double)lineHeight;
- (id)locale;
- (void)mergeTransformedText:(id)arg1;
- (double)orientation;
- (struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_1_1; } x3; })points;
- (struct PrincipalLines { struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x_1_1_1; struct CGPoint {} *x_1_1_2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_2_1; } x_1_1_3; } x1; struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x_2_1_1; struct CGPoint {} *x_2_1_2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_2_1; } x_2_1_3; } x2; struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x_3_1_1; struct CGPoint {} *x_3_1_2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_2_1; } x_3_1_3; } x3; struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint {} *x_4_1_1; struct CGPoint {} *x_4_1_2; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint {} *x_3_2_1; } x_4_1_3; } x4; })principalLines;
- (id)splitIntoTokens;
- (id)string;
- (long long)strokeClassification;
- (struct vector<std::vector<CGPoint>, std::allocator<std::vector<CGPoint>>> { void *x1; void *x2; struct __compressed_pair<std::vector<CGPoint> *, std::allocator<std::vector<CGPoint>>> { void *x_3_1_1; } x3; })strokePoints;
- (id)supportStrokeTokenRanges;
- (id)supportStrokes;
- (id)textStrokes;
- (id)tokenDistanceSizes:(bool)arg1;
- (id)tokenSupportRangeForTokenIndex:(long long)arg1 supportStrokes:(id*)arg2;
- (id)tokens;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transform;

@end
