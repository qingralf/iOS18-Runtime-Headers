/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreRC.framework/CoreRC
 */

@interface CoreCECDeviceProvider : CoreCECDevice {
    int  _audioReturnChannelState;
    unsigned short  _deckStatusRequestMask;
    bool  _isValid;
    unsigned char  _sendFromAddress;
    bool  _systemAudioModeRequestedByOtherDevice;
    bool  _systemAudioModeRequestedByTV;
    int  _systemAudioModeState;
    bool  _trackAudioStatusEnabled;
    long long  _trackAudioStatusPollInterval;
    long long  _trackAudioStatusPressTimeout;
    struct { 
        unsigned long long nextTransmitTimestamp; 
        unsigned long long audioUserControlPressed; 
        unsigned long long audioUserControlReleased; 
        bool reportAudioStatusNeeded; 
    }  _userControlAudioState;
    unsigned int  _userControlFollowerSafetyTimeoutGeneration;
    struct { 
        CoreCECDevice *sender; 
        struct CECUserControl { 
            unsigned char command; 
            union CECUICommandOperand { 
                struct CECChannelIdentifier { 
                    unsigned int channelNumberFormat : 6; 
                    unsigned int majorChannelNumber : 10; 
                    unsigned int minorChannelNumber : 16; 
                } channelIdentifier; 
                unsigned char playMode; 
                unsigned char broadcastType; 
                unsigned char mediaNumber; 
                unsigned char avInput; 
                unsigned char audioInput; 
                unsigned char soundPresentationControl; 
            } operand; 
        } control; 
        bool isValid; 
    }  _userControlFollowerState;
    unsigned int  _userControlInitiatorRepetitionTimeoutGeneration;
    struct { 
        unsigned char destination; 
        struct CECUserControl { 
            unsigned char command; 
            union CECUICommandOperand { 
                struct CECChannelIdentifier { 
                    unsigned int channelNumberFormat : 6; 
                    unsigned int majorChannelNumber : 10; 
                    unsigned int minorChannelNumber : 16; 
                } channelIdentifier; 
                unsigned char playMode; 
                unsigned char broadcastType; 
                unsigned char mediaNumber; 
                unsigned char avInput; 
                unsigned char audioInput; 
                unsigned char soundPresentationControl; 
            } operand; 
        } control; 
        bool isValid; 
    }  _userControlInitiatorState;
    unsigned int  _userControlInitiatorTrackAudioStatusTimeoutGeneration;
}

@property (nonatomic, readonly) bool activeARCAudioSystem;
@property (nonatomic) int audioReturnChannelState;
@property (nonatomic, readonly) unsigned short deckStatusRequestMask;
@property (nonatomic) bool isValid;
@property (nonatomic) unsigned char sendFromAddress;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *serialQueue;
@property (nonatomic) bool systemAudioModeRequestedByOtherDevice;
@property (nonatomic) bool systemAudioModeRequestedByTV;
@property (nonatomic) int systemAudioModeState;
@property (nonatomic) bool trackAudioStatusEnabled;
@property (nonatomic) long long trackAudioStatusPollInterval;
@property (nonatomic) long long trackAudioStatusPressTimeout;

+ (bool)supportsSecureCoding;

- (bool)abortTo:(unsigned char)arg1 error:(id*)arg2;
- (bool)activeARCAudioSystem;
- (bool)activeSource:(id*)arg1;
- (void)arcInformDelegateOfSuccessTransitioningTo:(unsigned long long)arg1;
- (void)arcInformDelegateTransitionTo:(unsigned long long)arg1 failedWithError:(id)arg2;
- (void)arcStarting;
- (void)arcStarting_handleFeatureAbortReceivedWithOpcode:(unsigned char)arg1 reason:(unsigned char)arg2;
- (void)arcStarting_handleReportARCInitiatedReceived;
- (void)arcStopping;
- (void)arcStopping_handleFeatureAbortReceivedWithOpcode:(unsigned char)arg1 reason:(unsigned char)arg2;
- (void)arcStopping_handleReportARCTerminatedReceived;
- (int)audioReturnChannelState;
- (bool)audioReturnChannelTransitionInProgress;
- (void)audioStatusChanged;
- (void)audioStatusHandleUserControl:(struct CECUserControl { unsigned char x1; union CECUICommandOperand { struct CECChannelIdentifier { unsigned int x_1_2_1 : 6; unsigned int x_1_2_2 : 10; unsigned int x_1_2_3 : 16; } x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; unsigned char x_2_1_4; unsigned char x_2_1_5; unsigned char x_2_1_6; unsigned char x_2_1_7; } x2; })arg1 pressed:(bool)arg2;
- (void)audioStatusHandleUserControlPressed;
- (void)audioStatusHandleUserControlReleased;
- (bool)audioSystemRequestSystemAudioModeStatusChangeTo:(unsigned long long)arg1 error:(id*)arg2;
- (void)broadcastPresence;
- (id)busProvider;
- (bool)cecVersion:(unsigned char)arg1 to:(unsigned char)arg2 error:(id*)arg3;
- (Class)classForCoder;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (bool)deckControlCommandWithMode:(unsigned long long)arg1 target:(id)arg2 error:(id*)arg3;
- (bool)deckControlPlayWithMode:(unsigned long long)arg1 target:(id)arg2 error:(id*)arg3;
- (bool)deckControlRefreshStatus:(id)arg1 requestType:(unsigned long long)arg2 error:(id*)arg3;
- (bool)deckControlSetDeckStatus:(unsigned long long)arg1 error:(id*)arg2;
- (bool)deckControlWithMode:(unsigned long long)arg1 to:(unsigned char)arg2 error:(id*)arg3;
- (unsigned short)deckStatusRequestMask;
- (bool)deckStatusWithInfo:(unsigned long long)arg1 to:(unsigned char)arg2 error:(id*)arg3;
- (bool)deviceRequestSystemAudioModeStatusChangeTo:(unsigned long long)arg1 error:(id*)arg2;
- (bool)deviceVendorID:(unsigned int)arg1 error:(id*)arg2;
- (void)didAddToBus:(id)arg1;
- (void)didChangePowerStatus:(unsigned long long)arg1;
- (void)didNotHandleMessage:(id)arg1 unsupportedOperand:(bool)arg2;
- (void)didReceiveMessage:(id)arg1 fromDevice:(id)arg2;
- (void)didRemoveFromBus:(id)arg1;
- (void)dispatchAsyncLowPriority:(id /* block */)arg1;
- (void)dispatchSelector:(SEL)arg1;
- (void)dispatchSelector:(SEL)arg1 afterDelay:(double)arg2;
- (void)dispatchSelector:(SEL)arg1 withObject:(id)arg2;
- (void)dispatchSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3;
- (void)dsamStarting:(id)arg1;
- (void)dsamStartingWithPhysicalAddress:(unsigned short)arg1;
- (void)dsamStarting_handleBroadcastSSAMOnResponseReceived;
- (void)dsamStarting_handleBroadcastSSAMOnResponseTimeout;
- (void)dsamStopping;
- (void)dsamStopping_handleBroadcastSSAMOffResponseReceived;
- (void)dsamStopping_handleBroadcastSSAMOffResponseTimeout;
- (void)error:(id)arg1 handlingMessage:(id)arg2 fromDevice:(id)arg3;
- (id)extendedPropertyForKey:(id)arg1 error:(id*)arg2;
- (bool)featureAbort:(unsigned char)arg1 reason:(unsigned char)arg2 to:(unsigned char)arg3 error:(id*)arg4;
- (id)filterActiveSourceMessage:(id)arg1;
- (id)filterCECVersionMessage:(id)arg1 toDevice:(id)arg2;
- (id)filterDeckStatusMessage:(id)arg1 toDevice:(id)arg2;
- (id)filterDeviceVendorIDMessage:(id)arg1;
- (id)filterInactiveSourceMessage:(id)arg1 toDevice:(id)arg2;
- (id)filterMessage:(id)arg1 fromDevice:(id)arg2;
- (id)filterMessage:(id)arg1 toDevice:(id)arg2;
- (id)filterReportFeaturesMessage:(id)arg1 toDevice:(id)arg2;
- (id)filterReportPhysicalAddressMessage:(id)arg1;
- (id)filterReportPowerStatusMessage:(id)arg1 toDevice:(id)arg2;
- (id)filterRoutingChangeMessage:(id)arg1;
- (id)filterRoutingInformationMessage:(id)arg1;
- (id)filterSetMenuLanguageMessage:(id)arg1;
- (id)filterSetOSDNameMessage:(id)arg1 toDevice:(id)arg2;
- (id)filterSetStreamPathMessage:(id)arg1;
- (id)filterSetSystemAudioModeMessage:(id)arg1 toDevice:(id)arg2;
- (id)filterSystemAudioModeStatusMessage:(id)arg1 toDevice:(id)arg2;
- (bool)getCECVersionTo:(unsigned char)arg1 error:(id*)arg2;
- (bool)getMenuLanguageTo:(unsigned char)arg1 error:(id*)arg2;
- (bool)getRemoteControlDestination:(id*)arg1 logicalAddress:(unsigned char*)arg2 forTargetDevice:(id)arg3 command:(unsigned char)arg4 error:(id*)arg5;
- (bool)giveAudioStatusTo:(unsigned char)arg1 error:(id*)arg2;
- (bool)giveDeckStatusWithRequest:(unsigned char)arg1 to:(unsigned char)arg2 error:(id*)arg3;
- (bool)giveDevicePowerStatusTo:(unsigned char)arg1 error:(id*)arg2;
- (bool)giveDeviceVendorIDTo:(unsigned char)arg1 error:(id*)arg2;
- (bool)giveOSDNameTo:(unsigned char)arg1 error:(id*)arg2;
- (bool)givePhysicalAddressTo:(unsigned char)arg1 error:(id*)arg2;
- (bool)giveSystemAudioModeStatusTo:(unsigned char)arg1 error:(id*)arg2;
- (void)handleActiveSourceMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleDeckControlMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleDeckControlPlayMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleDeviceSelected;
- (void)handleFeatureAbortMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleGetCECVersionMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleGetMenuLanguageMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleGiveAudioStatusMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleGiveDeckStatusMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleGiveDevicePowerStatusMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleGiveDeviceVendorIDMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleGiveFeaturesMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleGiveOSDNameMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleGivePhysicalAddressMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleGiveSystemAudioModeStatusMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleMenuRequest:(id)arg1 fromDevice:(id)arg2;
- (void)handleMessage:(id)arg1 fromDevice:(id)arg2 broadcast:(bool)arg3;
- (void)handleReportARCInitiatedMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleReportARCTerminatedMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleReportAudioStatusMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleRequestARCInitiationMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleRequestARCTerminationMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleRequestActiveSourceMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleRequestShortAudioDescriptorMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleSetAudioVolumeLevelMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleSetStreamPathMessage:(id)arg1;
- (void)handleSetSystemAudioModeMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleSystemAudioModeRequestMessage:(id)arg1 fromDevice:(id)arg2;
- (bool)handleUserControl:(struct CECUserControl { unsigned char x1; union CECUICommandOperand { struct CECChannelIdentifier { unsigned int x_1_2_1 : 6; unsigned int x_1_2_2 : 10; unsigned int x_1_2_3 : 16; } x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; unsigned char x_2_1_4; unsigned char x_2_1_5; unsigned char x_2_1_6; unsigned char x_2_1_7; } x2; })arg1 pressed:(bool)arg2 fromDevice:(id)arg3 abortReason:(unsigned char*)arg4;
- (void)handleUserControlPressedMessage:(id)arg1 fromDevice:(id)arg2;
- (void)handleUserControlReleasedMessage:(id)arg1 fromDevice:(id)arg2;
- (bool)handlingRequiredForAudioReturnChannelMessage:(id)arg1;
- (bool)handlingRequiredForSystemAudioModeMessage:(id)arg1;
- (void)hibernationChanged:(bool)arg1;
- (bool)imageViewOnTo:(unsigned char)arg1 error:(id*)arg2;
- (bool)inactiveSourceTo:(unsigned char)arg1 error:(id*)arg2;
- (id)initWithBus:(id)arg1 local:(bool)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithDevice:(id)arg1;
- (bool)initiateARC:(unsigned char)arg1 error:(id*)arg2;
- (bool)initiatorAddressErrorDetectedForMessage:(id)arg1;
- (bool)isValid;
- (bool)makeActiveSourceWithTVMenus:(bool)arg1 error:(id*)arg2;
- (bool)menuStatus:(unsigned char)arg1 to:(unsigned char)arg2 error:(id*)arg3;
- (bool)oneTouchPlayWithMenu:(bool)arg1 to:(unsigned char)arg2 error:(id*)arg3;
- (bool)performStandbyWithTargetDevice:(id)arg1 error:(id*)arg2;
- (bool)playWithMode:(unsigned long long)arg1 to:(unsigned char)arg2 error:(id*)arg3;
- (bool)pollTo:(unsigned char)arg1 error:(id*)arg2;
- (void)probeAbsoluteVolumeControl_handleFeatureAbortReceivedFromDevice:(id)arg1 withOpcode:(unsigned char)arg2 reason:(unsigned char)arg3;
- (void)receivedSetAudioVolumeLevel:(unsigned char)arg1 fromDevice:(id)arg2;
- (void)refreshActiveSource;
- (bool)refreshProperties:(id)arg1 ofDevice:(id)arg2 error:(id*)arg3;
- (void)refreshSystemAudioModeStatus;
- (bool)reportAudioStatusTo:(unsigned char)arg1 error:(id*)arg2;
- (bool)reportFeatures:(id*)arg1;
- (bool)reportPhysicalAddress:(id*)arg1;
- (bool)reportPowerStatus:(unsigned char)arg1 to:(unsigned char)arg2 error:(id*)arg3;
- (bool)reportShortAudioDescriptorTo:(unsigned char)arg1 error:(id*)arg2;
- (bool)requestActiveSource:(id*)arg1;
- (bool)requestAudioReturnChannelStatusChangeTo:(unsigned long long)arg1 error:(id*)arg2;
- (bool)requestAudioStatus:(id*)arg1;
- (bool)requestShortAudioDescriptor:(unsigned char)arg1 error:(id*)arg2;
- (bool)requestSystemAudioModeStatusChangeTo:(unsigned long long)arg1 error:(id*)arg2;
- (void)resetAudioStatusState;
- (bool)resignActiveSource:(id*)arg1;
- (bool)routingChangeOriginalAddress:(unsigned long long)arg1 newAddress:(unsigned long long)arg2 error:(id*)arg3;
- (bool)routingInformationPhysicalAddress:(unsigned long long)arg1 error:(id*)arg2;
- (void)samInformDelegateOfSuccessTransitioningTo:(unsigned long long)arg1;
- (void)samInformDelegateTransitionTo:(unsigned long long)arg1 failedWithError:(id)arg2;
- (void)samResetStateToOff;
- (void)samStarting;
- (void)samStarting_broadcast_Req_Act_Src;
- (void)samStarting_broadcast_SSAM_ON;
- (void)samStarting_handleActiveSourceReceived;
- (void)samStarting_handleActiveSourceResponseTimeout;
- (void)samStarting_handleFeatureAbortReceived;
- (void)samStarting_handleFeatureAbortResponseTimeout;
- (void)samStarting_send_SSAM_ON_to_TV;
- (void)samStopping;
- (void)scheduleReportAudioStatus;
- (bool)sendActiveSourceStatus:(bool)arg1 error:(id*)arg2;
- (void)sendDeckStatusToDevice:(id)arg1;
- (void)sendFeatureAbort:(unsigned char)arg1 forMessage:(id)arg2;
- (unsigned char)sendFromAddress;
- (bool)sendHIDEvent:(id)arg1 target:(id)arg2 error:(id*)arg3;
- (bool)sendMessage:(id)arg1 error:(id*)arg2;
- (bool)sendMessage:(id)arg1 withRetryCount:(unsigned char)arg2 error:(id*)arg3;
- (void)sendReportAudioStatus;
- (id)serialQueue;
- (bool)setAudioMuteStatus:(bool)arg1 error:(id*)arg2;
- (bool)setAudioReturnChannelControlEnabled:(bool)arg1 error:(id*)arg2;
- (void)setAudioReturnChannelState:(int)arg1;
- (bool)setAudioVolumeStatus:(unsigned long long)arg1 error:(id*)arg2;
- (bool)setExtendedProperty:(id)arg1 forKey:(id)arg2 error:(id*)arg3;
- (void)setIsValid:(bool)arg1;
- (bool)setMenuLanguage:(struct CECLanguage { unsigned char x1[3]; })arg1 error:(id*)arg2;
- (bool)setOSDName:(struct CECOSDName { unsigned char x1; unsigned char x2[14]; })arg1 to:(unsigned char)arg2 error:(id*)arg3;
- (void)setSendFromAddress:(unsigned char)arg1;
- (bool)setStreamPathPhysicalAddress:(unsigned long long)arg1 error:(id*)arg2;
- (bool)setSupportedAudioFormats:(id)arg1 error:(id*)arg2;
- (bool)setSystemAudioControlEnabled:(bool)arg1 error:(id*)arg2;
- (bool)setSystemAudioMode:(unsigned long long)arg1 to:(unsigned char)arg2 error:(id*)arg3;
- (void)setSystemAudioModeRequestedByOtherDevice:(bool)arg1;
- (void)setSystemAudioModeRequestedByTV:(bool)arg1;
- (void)setSystemAudioModeState:(int)arg1;
- (void)setTrackAudioStatusEnabled:(bool)arg1;
- (bool)setTrackAudioStatusEnabled:(bool)arg1 pressTimeout:(long long)arg2 pollInterval:(long long)arg3 error:(id*)arg4;
- (void)setTrackAudioStatusPollInterval:(long long)arg1;
- (void)setTrackAudioStatusPressTimeout:(long long)arg1;
- (bool)standbyTo:(unsigned char)arg1 error:(id*)arg2;
- (bool)systemAudioModeRequest:(unsigned long long)arg1 error:(id*)arg2;
- (bool)systemAudioModeRequestWithPhysicalAddress:(unsigned short)arg1 to:(unsigned char)arg2 error:(id*)arg3;
- (bool)systemAudioModeRequestedByOtherDevice;
- (bool)systemAudioModeRequestedByTV;
- (int)systemAudioModeState;
- (bool)systemAudioModeStatus:(unsigned char)arg1 error:(id*)arg2;
- (bool)systemAudioModeTransitionInProgress;
- (bool)terminateARC:(unsigned char)arg1 error:(id*)arg2;
- (bool)textViewOnTo:(unsigned char)arg1 error:(id*)arg2;
- (bool)trackAudioStatusEnabled;
- (long long)trackAudioStatusPollInterval;
- (long long)trackAudioStatusPressTimeout;
- (void)trackMessage:(id)arg1 fromDevice:(id)arg2;
- (void)trackMessage:(id)arg1 toDevice:(id)arg2;
- (void)userControlCancelFollowerSafetyTimeout;
- (void)userControlCancelInitiatorRepetitionTimeout;
- (void)userControlCancelInitiatorTrackAudioStatusTimeout;
- (void)userControlFollowerSafetyTimeoutExpired;
- (void)userControlFollowerSynthesizeRelease;
- (void)userControlInitiatorRepetitionTimeoutExpired;
- (void)userControlInitiatorTrackAudioStatusTimeoutExpired;
- (bool)userControlPressed:(struct CECUserControl { unsigned char x1; union CECUICommandOperand { struct CECChannelIdentifier { unsigned int x_1_2_1 : 6; unsigned int x_1_2_2 : 10; unsigned int x_1_2_3 : 16; } x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; unsigned char x_2_1_4; unsigned char x_2_1_5; unsigned char x_2_1_6; unsigned char x_2_1_7; } x2; })arg1 to:(unsigned char)arg2 error:(id*)arg3;
- (bool)userControlReleasedTo:(unsigned char)arg1 error:(id*)arg2;
- (void)userControlScheduleFollowerSafetyTimeout;
- (void)userControlScheduleInitiatorRepetitionTimeout;
- (void)userControlScheduleInitiatorTrackAudioStatusTimeout;
- (void)willRemoveFromBus:(id)arg1;

@end
