/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreRE.framework/CoreRE
 */

@interface REDirectMeshPayload : RESharedResourcePayload <REMeshPayload> {
    <DRMesh> * _directMesh;
    unsigned char  _identifier;
}

@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) <DRMesh> *directMesh;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) const unsigned char*identifier;
@property (nonatomic, readonly) NSArray *instances;
@property (nonatomic, readonly) bool isLimitedRenderAsset;
@property (nonatomic, readonly) NSArray *models;
@property (nonatomic, readonly) NSArray *parts;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{FixedInlineArray<unsigned long' */ struct  payloadBufferSizes; /* unknown property attribute:  8UL>=[8Q]} */
@property (getter=isShareable, nonatomic, readonly) bool shareable;
@property (nonatomic, readonly) NSArray *skeletons;
@property (readonly) Class superclass;
@property (nonatomic, readonly) unsigned long long totalPayloadSize;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (struct AABB { struct Vector3<float> { union { struct { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_1_2_1; float x_1_2_2[3]; } x_1_1_1; } x1; struct Vector3<float> { union { struct { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_1_2_1; float x_1_2_2[3]; } x_2_1_1; } x2; })aabb;
- (id)directMesh;
- (void)encodeWithCoder:(id)arg1;
- (unsigned long long)estimatePayloadContainerOverheadSize;
- (const unsigned char*)identifier;
- (id)initWithCoder:(id)arg1;
- (id)initWithDirectMesh:(id)arg1;
- (id)instances;
- (bool)isLimitedRenderAsset;
- (bool)isShareable;
- (void)makeBoundingBoxes:(void*)arg1 perPartPerInstanceBoundingBoxes:(void*)arg2;
- (struct MeshCollection { struct DynamicArray<re::MeshModel> { struct Allocator {} *x_1_1_1; unsigned long long x_1_1_2; unsigned long long x_1_1_3; unsigned int x_1_1_4; struct MeshModel {} *x_1_1_5; } x1; })makeMeshCollection:(const void*)arg1;
- (struct FixedInlineArray<NS::SharedPtr<MTL::Buffer>, 8UL> { struct SharedPtr<MTL::Buffer> { struct Buffer {} *x_1_1_1; } x1[8]; })meshPayloadBuffersWithDevice:(id)arg1;
- (id)models;
- (id)parts;
- (struct FixedInlineArray<unsigned long, 8UL> { unsigned long long x1[8]; })payloadBufferSizes;
- (void)setDirectMesh:(id)arg1;
- (id)skeletons;
- (unsigned long long)totalPayloadSize;

@end
