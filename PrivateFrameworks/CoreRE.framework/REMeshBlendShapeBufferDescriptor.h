/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreRE.framework/CoreRE
 */

@interface REMeshBlendShapeBufferDescriptor : NSObject <NSSecureCoding> {
    REAttributeDescriptor * _blendShapeConstantsBuffer;
    NSArray * _blendShapeNames;
    REAttributeDescriptor * _coefficientIndexBuffer;
    REAttributeDescriptor * _floatDeltaBuffer;
    REAttributeDescriptor * _floatSliceBuffer;
    bool  _hasBitangents;
    bool  _hasNormals;
    bool  _hasTangents;
    REAttributeDescriptor * _indexBuffer;
    REAttributeDescriptor * _renormalizationBuffer;
}

@property (nonatomic, readonly) REAttributeDescriptor *blendShapeConstantsBuffer;
@property (nonatomic, readonly) NSArray *blendShapeNames;
@property (nonatomic, readonly) REAttributeDescriptor *coefficientIndexBuffer;
@property (nonatomic, readonly) REAttributeDescriptor *floatDeltaBuffer;
@property (nonatomic, readonly) REAttributeDescriptor *floatSliceBuffer;
@property (nonatomic, readonly) bool hasBitangents;
@property (nonatomic, readonly) bool hasNormals;
@property (nonatomic, readonly) bool hasTangents;
@property (nonatomic, readonly) REAttributeDescriptor *indexBuffer;
@property (nonatomic, readonly) REAttributeDescriptor *renormalizationBuffer;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)addToBlendShapeModelBuilder:(struct BlendShapeModelBuilder { struct Device { id x_1_1_1; } x1; struct DeformationModelData {} *x2; }*)arg1 blendShapeIndex:(unsigned long long)arg2 blendShapeGroupName:(const struct StringID { struct { unsigned int x_1_1_1 : 1; unsigned int x_1_1_2 : 63; } x1; char *x2; }*)arg3 payloadBuffers:(const void*)arg4;
- (id)blendShapeConstantsBuffer;
- (id)blendShapeNames;
- (id)coefficientIndexBuffer;
- (void)encodeWithCoder:(id)arg1;
- (unsigned long long)estimateContainerSize;
- (id)floatDeltaBuffer;
- (id)floatSliceBuffer;
- (bool)hasBitangents;
- (bool)hasNormals;
- (bool)hasTangents;
- (id)indexBuffer;
- (id)initWithBlendShapeBufferPayload:(void*)arg1 indexType:(unsigned long long)arg2 payloadBuilder:(void*)arg3;
- (id)initWithBlendShapeNames:(id)arg1 floatDeltaBuffer:(id)arg2 blendShapeConstantsBuffer:(id)arg3 indexBuffer:(id)arg4 floatSliceBuffer:(id)arg5 coefficientIndexBuffer:(id)arg6 renormalizationBuffer:(id)arg7 hasNormals:(bool)arg8 hasTangents:(bool)arg9 hasBitangents:(bool)arg10;
- (id)initWithCoder:(id)arg1;
- (id)renormalizationBuffer;
- (bool)validateWithPayloadSize:(const void*)arg1 error:(id*)arg2;

@end
