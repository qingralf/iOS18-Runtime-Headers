/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreRE.framework/CoreRE
 */

@interface REPHASEContext : NSObject {
    bool  _allowSpaceBlend;
    struct unordered_map<unsigned long long, REPHASESoundAsset, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, REPHASESoundAsset>>> { 
        struct __hash_table<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundAsset>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundAsset>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, REPHASESoundAsset>>> { 
            struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *> *> *>>> { 
                struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *> *> *>>> { 
                    void **__value_; 
                    struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *>>> { 
                struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *> *> { 
                    void *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundAsset>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundAsset>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _audioAssets;
    struct UnfairLock { 
        struct os_unfair_lock_s { 
            unsigned int _os_unfair_lock_opaque; 
        } m_lock; 
    }  _audioAssetsMutex;
    struct UnfairLock { 
        struct os_unfair_lock_s { 
            unsigned int _os_unfair_lock_opaque; 
        } m_lock; 
    }  _audioEngineMutex;
    struct shared_ptr<re::AudioEngineRunnableManager> { 
        struct AudioEngineRunnableManager {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _audioEngineRunnableManager;
    NSURL * _customHRIRURL;
    bool  _directpathEnabled;
    PHASEEngine * _engine;
    PHASENumberMetaParameterDefinition * _gainLinearParamDefinition;
    PHASECardioidDirectivityModelParameters * _humanDirectivity;
    PHASEListener * _listener;
    int  _mixerDefNameCounter;
    struct REPHASEMaterialCache { 
        float meshConfidenceThreshold; 
        NSCache *cache; 
    }  _phaseMaterialCache;
    NSObject<OS_dispatch_queue> * _phaseQueue;
    PHASENumberMetaParameterDefinition * _rateParamDefinition;
    long long  _reverbPreset;
    double  _sampleRate;
    struct unordered_map<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>>> { 
        struct __hash_table<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>>> { 
            struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *> *> *>>> { 
                struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *> *> *>>> { 
                    void **__value_; 
                    struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *>>> { 
                struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *> *> { 
                    void *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _scenes;
    struct UnfairLock { 
        struct os_unfair_lock_s { 
            unsigned int _os_unfair_lock_opaque; 
        } m_lock; 
    }  _scenesMutex;
    struct unordered_map<unsigned long long, PhaseShapeAndMesh, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, PhaseShapeAndMesh>>> { 
        struct __hash_table<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>>> { 
            struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *>>> { 
                struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *>>> { 
                    void **__value_; 
                    struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *>>> { 
                struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> { 
                    void *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _shapes;
    struct UnfairLock { 
        struct os_unfair_lock_s { 
            unsigned int _os_unfair_lock_opaque; 
        } m_lock; 
    }  _shapesMutex;
    struct unordered_map<unsigned long long, REPHASESoundEvent *, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, REPHASESoundEvent *>>> { 
        struct __hash_table<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>>> { 
            struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *> *> *>>> { 
                struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *> *> *>>> { 
                    void **__value_; 
                    struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *>>> { 
                struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *> *> { 
                    void *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _soundEvents;
    struct UnfairLock { 
        struct os_unfair_lock_s { 
            unsigned int _os_unfair_lock_opaque; 
        } m_lock; 
    }  _soundEventsMutex;
    struct unordered_map<unsigned long long, RESoundEventPreparingData, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, RESoundEventPreparingData>>> { 
        struct __hash_table<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>>> { 
            struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *> *> *>>> { 
                struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *> *> *>>> { 
                    void **__value_; 
                    struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *>>> { 
                struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *> *> { 
                    void *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _soundEventsPreparing;
    struct UnfairLock { 
        struct os_unfair_lock_s { 
            unsigned int _os_unfair_lock_opaque; 
        } m_lock; 
    }  _soundEventsPreparingMutex;
    float  _spaceBlendLevel;
    struct REPHASESpatialMixerDefinitionCache { 
        int mixerDefinitionCounter; 
        NSCache *cache; 
        PHASESpatialPipeline *spatialPipeline; 
    }  _spatialMixerDefinitionCache;
    struct atomic<bool> { 
        struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { 
            _Atomic bool __a_value; 
        } __a_; 
    }  _stoppedAndDestroyed;
}

@property (nonatomic, retain) NSURL *customHRIRURL;
@property (readonly) PHASEEngine *engine;
@property (nonatomic, readonly) PHASENumberMetaParameterDefinition *gainLinearParamDefinition;
@property (nonatomic, readonly) PHASECardioidDirectivityModelParameters *humanDirectivity;
@property (nonatomic, readonly) PHASEListener *listener;
@property (readonly) PHASEEngine *maybeEngine;
@property (nonatomic, readonly) PHASENumberMetaParameterDefinition *rateParamDefinition;
@property (nonatomic, readonly) double sampleRate;

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct shared_ptr<re::audio::REPHASEEntity> { struct REPHASEEntity {} *x1; struct __shared_weak_count {} *x2; })_getEntityUnderLock:(unsigned long long)arg1;
- (void)addAudioAssetID:(unsigned long long)arg1 configuration:(const void*)arg2;
- (bool)addEventIfStillPreparing:(id)arg1 forToken:(unsigned long long)arg2;
- (void)addOccluder:(const void*)arg1;
- (void)addOccluder:(id)arg1 toScene:(unsigned long long)arg2 entity:(unsigned long long)arg3;
- (void)addPhaseShapeToCache:(id)arg1 meshID:(unsigned long long)arg2 mesh:(id)arg3;
- (void)applyCustomHRIR;
- (void)applyMeshEvents:(const void*)arg1;
- (void)applyMeshRemoval:(const void*)arg1;
- (void)applyMeshRemovals:(const void*)arg1;
- (void)applyOccluderAdditions:(const void*)arg1;
- (void)applyOccluderUpdates:(const void*)arg1;
- (void)applyReverbPreset;
- (void)applySpaceBlendLevel;
- (id)baseMixerDefinitionWith:(const void*)arg1;
- (void)clearPhaseShapeCache;
- (void)clearPreparingStateForToken:(unsigned long long)arg1;
- (struct unordered_map<unsigned long long, PhaseShapeAndMesh, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, PhaseShapeAndMesh>>> { struct __hash_table<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *>>> { void **x_1_3_1; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *>> { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; } x1; })copyPhaseShapeCache;
- (id)createAcousticMaterialsArrayWithAbsorption:(struct DynamicArray<re::AcousticAbsorptionMaterial> { struct Allocator {} *x1; unsigned long long x2; unsigned long long x3; unsigned int x4; struct AcousticAbsorptionMaterial {} *x5; })arg1 scattering:(struct DynamicArray<re::AcousticScatteringMaterial> { struct Allocator {} *x1; unsigned long long x2; unsigned long long x3; unsigned int x4; struct AcousticScatteringMaterial {} *x5; })arg2 soundReduction:(struct DynamicArray<re::AcousticSoundReductionMaterial> { struct Allocator {} *x1; unsigned long long x2; unsigned long long x3; unsigned int x4; struct AcousticSoundReductionMaterial {} *x5; })arg3;
- (void)createListenerIfPending;
- (struct PHASEOccluderData { unsigned long long x1; unsigned long long x2; unsigned long long x3; id x4; struct optional<double> { union { BOOL x_1_2_1; double x_1_2_2; } x_5_1_1; bool x_5_1_2; } x5; })createPHASEOccluderData:(const void*)arg1;
- (struct PHASEOccluderUpdateData { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; id x5; struct optional<double> { union { BOOL x_1_2_1; double x_1_2_2; } x_6_1_1; bool x_6_1_2; } x6; })createPHASEOccluderUpdateData:(const void*)arg1;
- (struct DynamicArray<re::audio::PHASEOccluderData> { struct Allocator {} *x1; unsigned long long x2; unsigned long long x3; unsigned int x4; struct PHASEOccluderData {} *x5; })createPHASEOccluders:(const void*)arg1;
- (id)createPHASEShape:(const void*)arg1;
- (id)createPHASEShapeAndOccluder:(const void*)arg1;
- (id)createPhaseShapeWithMeshID:(unsigned long long)arg1 materials:(id)arg2 mdlMesh:(id)arg3 arkitMesh:(bool)arg4 meshType:(unsigned char)arg5;
- (id)createSamplerDefinitionForToken:(unsigned long long)arg1;
- (id)customHRIRURL;
- (void)decrementOrDestroyEntityWithZeroCount:(unsigned long long)arg1;
- (bool)doCleanUpSoundEventForToken:(unsigned long long)arg1 ifNotInScene:(unsigned long long)arg2;
- (double)doubleFromPlistValue:(id)arg1 defaultValue:(double)arg2;
- (id)engine;
- (bool)engineShouldBeRunning;
- (bool)eventBeingPrepared:(unsigned long long)arg1;
- (id)eventFor:(unsigned long long)arg1;
- (void)fillOutDebugInformation:(id)arg1;
- (void)fillOutMeshBoundingBoxInformation:(id)arg1;
- (id)gainLinearParamDefinition;
- (bool)getConfigurationForAudioAssetID:(unsigned long long)arg1 configuration:(void*)arg2;
- (struct shared_ptr<re::audio::REPHASEEntity> { struct REPHASEEntity {} *x1; struct __shared_weak_count {} *x2; })getEntity:(unsigned long long)arg1;
- (id)getListener;
- (id)getOrCreateSpatialMixerDefinitionUsing:(const void*)arg1;
- (id)getPhaseShapeFromCacheWithMeshID:(unsigned long long)arg1;
- (unsigned int)getPlayingSoundEventsCount;
- (unsigned int)getPreparingSoundEventsCount;
- (long long)getReverbPreset;
- (id)getSessionRoot:(unsigned long long)arg1;
- (void)getSourceCount:(unsigned int*)arg1 occluderCount:(unsigned int*)arg2;
- (float)getSpaceBlendLevel;
- (id)humanDirectivity;
- (id)initWithSampleRate:(double)arg1 phaseQueue:(id)arg2 audioEngineRunnableManager:(struct shared_ptr<re::AudioEngineRunnableManager> { struct AudioEngineRunnableManager {} *x1; struct __shared_weak_count {} *x2; })arg3;
- (bool)isListenerCreatedInScene;
- (id)listener;
- (void)loadHumanDirectivityPlistFromURL:(id)arg1;
- (id)maybeEngine;
- (id)mixerParametersForPrepareState:(const void*)arg1 source:(id)arg2 listener:(id)arg3 mixerIdentifiers:(id)arg4;
- (id)phaseIDForAssetID:(unsigned long long)arg1;
- (unsigned long long)phaseShapeCount;
- (struct unordered_set<unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<unsigned long long>> { struct __hash_table<unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<unsigned long long>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>>> { void **x_1_3_1; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>> { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *>, std::allocator<std::__hash_node<unsigned long long, void *>>> { struct __hash_node_base<std::__hash_node<unsigned long long, void *> *> { void *x_1_3_1; } x_2_2_1; } x_1_1_2; } x1; })playbackClientsWithPreparedOrPreparingSounds;
- (void)prepare:(struct shared_ptr<re::audio::REPHASESoundPrepareState> { struct REPHASESoundPrepareState {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (void)prepareExternalType:(struct shared_ptr<re::audio::REPHASESoundPrepareState> { struct REPHASESoundPrepareState {} *x1; struct __shared_weak_count {} *x2; })arg1 phaseEntity:(struct shared_ptr<re::audio::REPHASEEntity> { struct REPHASEEntity {} *x1; struct __shared_weak_count {} *x2; })arg2 completion:(id /* block */)arg3;
- (void)prepareFileGroupType:(struct shared_ptr<re::audio::REPHASESoundPrepareState> { struct REPHASESoundPrepareState {} *x1; struct __shared_weak_count {} *x2; })arg1 phaseEntity:(struct shared_ptr<re::audio::REPHASEEntity> { struct REPHASEEntity {} *x1; struct __shared_weak_count {} *x2; })arg2 completion:(id /* block */)arg3;
- (void)prepareFileType:(struct shared_ptr<re::audio::REPHASESoundPrepareState> { struct REPHASESoundPrepareState {} *x1; struct __shared_weak_count {} *x2; })arg1 phaseEntity:(struct shared_ptr<re::audio::REPHASEEntity> { struct REPHASEEntity {} *x1; struct __shared_weak_count {} *x2; })arg2 completion:(id /* block */)arg3;
- (void)prepareGeneratorType:(struct shared_ptr<re::audio::REPHASESoundPrepareState> { struct REPHASESoundPrepareState {} *x1; struct __shared_weak_count {} *x2; })arg1 phaseEntity:(struct shared_ptr<re::audio::REPHASEEntity> { struct REPHASEEntity {} *x1; struct __shared_weak_count {} *x2; })arg2 completion:(id /* block */)arg3;
- (id)rateParamDefinition;
- (void)removeAudioAssetID:(unsigned long long)arg1;
- (void)removeEntity:(unsigned long long)arg1;
- (void)removeListener;
- (void)removeOccluderFromScene:(unsigned long long)arg1 entity:(unsigned long long)arg2;
- (void)removePhaseShapeFromCacheWithMeshID:(unsigned long long)arg1;
- (void)removeSessionRoot:(unsigned long long)arg1;
- (double)sampleRate;
- (id)samplerDefForFileAsset:(unsigned long long)arg1 mixerDefinition:(id)arg2 prepareState:(const void*)arg3;
- (id)samplerDefForFileAsset:(unsigned long long)arg1 with:(const void*)arg2;
- (struct shared_ptr<re::audio::REPHASEAudioScene> { struct REPHASEAudioScene {} *x1; struct __shared_weak_count {} *x2; })sceneForID:(unsigned long long)arg1;
- (void)setCustomHRIRURL:(id)arg1;
- (void)setPreparingWithData:(struct RESoundEventPreparingData { long long x1; unsigned long long x2; })arg1 forToken:(unsigned long long)arg2;
- (void)setReverbPreset:(long long)arg1 allowingSpaceBlend:(bool)arg2;
- (void)setSpaceBlendLevel:(float)arg1;
- (void)setSpaceBlendTargetPresetOrientation:(struct { })arg1;
- (id)sourceObjectForEntityID:(unsigned long long)arg1;
- (void)stopAllAndReset;
- (unsigned long long)uniqueEventCount;
- (void)update;
- (void)updateOccluder:(const void*)arg1;
- (struct DynamicArray<re::audio::PHASEOccluderUpdateData> { struct Allocator {} *x1; unsigned long long x2; unsigned long long x3; unsigned int x4; struct PHASEOccluderUpdateData {} *x5; })updatePHASEOccluders:(const void*)arg1;

@end
