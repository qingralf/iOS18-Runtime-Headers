/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreRE.framework/CoreRE
 */

@interface VFXREDrawCallContextImpl : NSObject <VFXREDrawCallContext> {
    void * __bufferTable;
    void * __constantTable;
    const void * __dynamicFunctionConstants;
    float  __fadeOpacity;
    bool  __isDepthOnly;
    bool  __isDrawingBlur;
    struct MeshStats { int x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; int x10; int x11; int x12; int x13; int x14; int x15; int x16; int x17; int x18; int x19; int x20; int x21; int x22; int x23; int *x24; int *x25; int *x26; unsigned char x27; } * __meshStats;
    struct PatchHandler { struct Allocator {} *x1; struct PatchHandlerImpl {} *x2; } * __patchHandler;
    const struct RenderTargetInfo { struct RenderPipelineDescriptorData { unsigned int x_1_1_1; int x_1_1_2[8]; int x_1_1_3; int x_1_1_4; } x1; bool x2; unsigned int x3; } * __renderTargetInfo;
    void * __samplerTable;
    unsigned char  __stateOverride;
    struct StencilInfo { 
        struct StencilStateInfo { 
            struct StencilTestInfo { 
                bool enabled; 
                unsigned char readMask; 
                unsigned char writeMask; 
                unsigned char compareFunc; 
                unsigned char failOp; 
                unsigned char depthFailOp; 
                unsigned char depthStencilPassOp; 
                BOOL _padding; 
            } frontFace; 
            struct StencilTestInfo { 
                bool enabled; 
                unsigned char readMask; 
                unsigned char writeMask; 
                unsigned char compareFunc; 
                unsigned char failOp; 
                unsigned char depthFailOp; 
                unsigned char depthStencilPassOp; 
                BOOL _padding; 
            } backFace; 
        } state; 
        unsigned char referenceValue; 
    }  __stencilInfo;
    struct TextureTableCollection { union { struct { struct TextureSource {} *x_1_2_1; struct TextureSource {} *x_1_2_2; struct TextureSource {} *x_1_2_3; struct TextureSource {} *x_1_2_4; struct TextureSource {} *x_1_2_5; struct TextureSource {} *x_1_2_6; struct TextureSource {} *x_1_2_7; struct TextureSource {} *x_1_2_8; struct TextureSource {} *x_1_2_9; struct TextureSource {} *x_1_2_10; struct TextureSource {} *x_1_2_11; struct TextureSource {} *x_1_2_12; } x_1_1_1; struct TextureSource {} *x_1_1_2[12]; } x1; } * __textureTable;
    const void * __viewports;
}

@property (nonatomic) void*_bufferTable;
@property (nonatomic) void*_constantTable;
@property (nonatomic) const void*_dynamicFunctionConstants;
@property (nonatomic) float _fadeOpacity;
@property (nonatomic) bool _isDepthOnly;
@property (nonatomic) bool _isDrawingBlur;
@property (nonatomic) struct MeshStats { int x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; int x10; int x11; int x12; int x13; int x14; int x15; int x16; int x17; int x18; int x19; int x20; int x21; int x22; int x23; int *x24; int *x25; int *x26; unsigned char x27; }*_meshStats;
@property (nonatomic) struct PatchHandler { struct Allocator {} *x1; struct PatchHandlerImpl {} *x2; }*_patchHandler;
@property (nonatomic) const struct RenderTargetInfo { struct RenderPipelineDescriptorData { unsigned int x_1_1_1; int x_1_1_2[8]; int x_1_1_3; int x_1_1_4; } x1; bool x2; unsigned int x3; }*_renderTargetInfo;
@property (nonatomic) void*_samplerTable;
@property (nonatomic) unsigned char _stateOverride;
@property (nonatomic) struct StencilInfo { struct StencilStateInfo { struct StencilTestInfo { bool x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; unsigned char x_1_2_4; unsigned char x_1_2_5; unsigned char x_1_2_6; unsigned char x_1_2_7; BOOL x_1_2_8; } x_1_1_1; struct StencilTestInfo { bool x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; BOOL x_2_2_8; } x_1_1_2; } x1; unsigned char x2; } _stencilInfo;
@property (nonatomic) struct TextureTableCollection { union { struct { struct TextureSource {} *x_1_2_1; struct TextureSource {} *x_1_2_2; struct TextureSource {} *x_1_2_3; struct TextureSource {} *x_1_2_4; struct TextureSource {} *x_1_2_5; struct TextureSource {} *x_1_2_6; struct TextureSource {} *x_1_2_7; struct TextureSource {} *x_1_2_8; struct TextureSource {} *x_1_2_9; struct TextureSource {} *x_1_2_10; struct TextureSource {} *x_1_2_11; struct TextureSource {} *x_1_2_12; } x_1_1_1; struct TextureSource {} *x_1_1_2[12]; } x1; }*_textureTable;
@property (nonatomic) const void*_viewports;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (nonatomic, readonly) bool depthOnly; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool enableBreakthrough; /* unknown property attribute: ? */
@property (nonatomic, readonly) bool enableClipping; /* unknown property attribute: ? */
@property (nonatomic, readonly) bool enableNearFieldVignetting; /* unknown property attribute: ? */
@property (nonatomic, readonly) float fadeOpacity; /* unknown property attribute: ? */
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isDrawingBlur;
@property (nonatomic, readonly) bool isDrawingDepthOnly;
@property (nonatomic, readonly) int portalClippingMode; /* unknown property attribute: ? */
@property (nonatomic, readonly) bool renderForBlur; /* unknown property attribute: ? */
@property (nonatomic, readonly) <VFXRERenderTargetInfo> *renderTargetInfo;
@property (nonatomic) long long statsDrawcallCount; /* unknown property attribute: ? */
@property (nonatomic) long long statsPrimitiveCount; /* unknown property attribute: ? */
@property (nonatomic) long long statsVertexCount; /* unknown property attribute: ? */
@property (nonatomic, readonly) <VFXStencilInfo> *stencilInfo; /* unknown property attribute: ? */
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool useDitherFade; /* unknown property attribute: ? */

- (id).cxx_construct;
- (void*)_bufferTable;
- (void*)_constantTable;
- (const void*)_dynamicFunctionConstants;
- (float)_fadeOpacity;
- (bool)_isDepthOnly;
- (bool)_isDrawingBlur;
- (struct MeshStats { int x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; int x10; int x11; int x12; int x13; int x14; int x15; int x16; int x17; int x18; int x19; int x20; int x21; int x22; int x23; int *x24; int *x25; int *x26; unsigned char x27; }*)_meshStats;
- (struct PatchHandler { struct Allocator {} *x1; struct PatchHandlerImpl {} *x2; }*)_patchHandler;
- (const struct RenderTargetInfo { struct RenderPipelineDescriptorData { unsigned int x_1_1_1; int x_1_1_2[8]; int x_1_1_3; int x_1_1_4; } x1; bool x2; unsigned int x3; }*)_renderTargetInfo;
- (void*)_samplerTable;
- (unsigned char)_stateOverride;
- (struct StencilInfo { struct StencilStateInfo { struct StencilTestInfo { bool x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; unsigned char x_1_2_4; unsigned char x_1_2_5; unsigned char x_1_2_6; unsigned char x_1_2_7; BOOL x_1_2_8; } x_1_1_1; struct StencilTestInfo { bool x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; BOOL x_2_2_8; } x_1_1_2; } x1; unsigned char x2; })_stencilInfo;
- (struct TextureTableCollection { union { struct { struct TextureSource {} *x_1_2_1; struct TextureSource {} *x_1_2_2; struct TextureSource {} *x_1_2_3; struct TextureSource {} *x_1_2_4; struct TextureSource {} *x_1_2_5; struct TextureSource {} *x_1_2_6; struct TextureSource {} *x_1_2_7; struct TextureSource {} *x_1_2_8; struct TextureSource {} *x_1_2_9; struct TextureSource {} *x_1_2_10; struct TextureSource {} *x_1_2_11; struct TextureSource {} *x_1_2_12; } x_1_1_1; struct TextureSource {} *x_1_1_2[12]; } x1; }*)_textureTable;
- (const void*)_viewports;
- (id)buffer:(int)arg1 :(id)arg2 :(long long*)arg3 :(long long*)arg4;
- (const char *)constantData:(int)arg1;
- (bool)constantOffsetAndSize:(int)arg1 :(id)arg2 :(long long*)arg3 :(long long*)arg4;
- (bool)depthOnly;
- (bool)enableBreakthrough;
- (bool)enableClipping;
- (bool)enableNearFieldVignetting;
- (float)fadeOpacity;
- (bool)isDrawingBlur;
- (bool)isDrawingDepthOnly;
- (int)portalClippingMode;
- (bool)renderForBlur;
- (id)renderTargetInfo;
- (id)sampler:(int)arg1 :(id)arg2;
- (float)sceneFadeOpacity;
- (void)setLateLatchingPatchHandler:(id /* block */)arg1;
- (void)setStatsDrawcallCount:(long long)arg1;
- (void)setStatsPrimitiveCount:(long long)arg1;
- (void)setStatsVertexCount:(long long)arg1;
- (void)set_bufferTable:(void*)arg1;
- (void)set_constantTable:(void*)arg1;
- (void)set_dynamicFunctionConstants:(const void*)arg1;
- (void)set_fadeOpacity:(float)arg1;
- (void)set_isDepthOnly:(bool)arg1;
- (void)set_isDrawingBlur:(bool)arg1;
- (void)set_meshStats:(struct MeshStats { int x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; int x10; int x11; int x12; int x13; int x14; int x15; int x16; int x17; int x18; int x19; int x20; int x21; int x22; int x23; int *x24; int *x25; int *x26; unsigned char x27; }*)arg1;
- (void)set_patchHandler:(struct PatchHandler { struct Allocator {} *x1; struct PatchHandlerImpl {} *x2; }*)arg1;
- (void)set_renderTargetInfo:(const struct RenderTargetInfo { struct RenderPipelineDescriptorData { unsigned int x_1_1_1; int x_1_1_2[8]; int x_1_1_3; int x_1_1_4; } x1; bool x2; unsigned int x3; }*)arg1;
- (void)set_samplerTable:(void*)arg1;
- (void)set_stateOverride:(unsigned char)arg1;
- (void)set_stencilInfo:(struct StencilInfo { struct StencilStateInfo { struct StencilTestInfo { bool x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; unsigned char x_1_2_4; unsigned char x_1_2_5; unsigned char x_1_2_6; unsigned char x_1_2_7; BOOL x_1_2_8; } x_1_1_1; struct StencilTestInfo { bool x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; BOOL x_2_2_8; } x_1_1_2; } x1; unsigned char x2; })arg1;
- (void)set_textureTable:(struct TextureTableCollection { union { struct { struct TextureSource {} *x_1_2_1; struct TextureSource {} *x_1_2_2; struct TextureSource {} *x_1_2_3; struct TextureSource {} *x_1_2_4; struct TextureSource {} *x_1_2_5; struct TextureSource {} *x_1_2_6; struct TextureSource {} *x_1_2_7; struct TextureSource {} *x_1_2_8; struct TextureSource {} *x_1_2_9; struct TextureSource {} *x_1_2_10; struct TextureSource {} *x_1_2_11; struct TextureSource {} *x_1_2_12; } x_1_1_1; struct TextureSource {} *x_1_1_2[12]; } x1; }*)arg1;
- (void)set_viewports:(const void*)arg1;
- (long long)statsDrawcallCount;
- (long long)statsPrimitiveCount;
- (long long)statsVertexCount;
- (id)stencilInfo;
- (id)texture:(int)arg1 :(id)arg2;
- (bool)useDitherFade;
- (void)viewports:(const void**)arg1 :(long long*)arg2;

@end
