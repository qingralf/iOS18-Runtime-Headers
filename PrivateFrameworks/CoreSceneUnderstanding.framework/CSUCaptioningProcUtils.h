/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreSceneUnderstanding.framework/CoreSceneUnderstanding
 */

@interface CSUCaptioningProcUtils : NSObject {
    struct shared_ptr<csu::BeamSearch> { 
        struct BeamSearch {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _beamSearch;
    struct BeamSearchOptions { 
        unsigned long long maxSeqLen; 
        bool terminateAtEOS; 
        struct optional<int> { 
            union { 
                BOOL __null_state_; 
                int __val_; 
            } ; 
            bool __engaged_; 
        } maxSteps; 
        struct optional<std::vector<std::string>> { 
            union { 
                BOOL __null_state_; 
                struct vector<std::string, std::allocator<std::string>> { 
                    void *__begin_; 
                    void *__end_; 
                    struct __compressed_pair<std::string *, std::allocator<std::string>> { 
                        void *__value_; 
                    } __end_cap_; 
                } __val_; 
            } ; 
            bool __engaged_; 
        } excludeTokens; 
        NSArray *denyListRules; 
        float lengthNormalizationAlpha; 
        float lengthNormFactor; 
        unsigned long long scorerType; 
        int beamWidth; 
        int topKPerStep; 
        float lengthNormalizationAlpha; 
    }  _beamSearchOptions;
    struct EspressoTensor { 
        int (**_vptr$Tensor)(); 
        int type_; 
        struct TensorShape { 
            struct vector<unsigned long, std::allocator<unsigned long>> { 
                unsigned long long *__begin_; 
                unsigned long long *__end_; 
                struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { 
                    unsigned long long *__value_; 
                } __end_cap_; 
            } sizes_; 
        } shape_; 
        struct shared_ptr<ik::TensorStorage> { 
            struct TensorStorage {} *__ptr_; 
            struct __shared_weak_count {} *__cntrl_; 
        } storage_; 
    }  _encodedFeaturesBuffer;
    int  _genderOptionForBeamSearch;
    CSUCaptionPostProcessingHandler * _postProcessingHandler;
    CSUCaptionRuntimeParameters * _runTimeParams;
    struct shared_ptr<csu::CustomVocabulary> { 
        struct CustomVocabulary {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _vocabulary;
}

@property (nonatomic) struct shared_ptr<csu::BeamSearch> { struct BeamSearch {} *x1; struct __shared_weak_count {} *x2; } beamSearch;
@property (nonatomic) struct BeamSearchOptions { unsigned long long x1; bool x2; struct optional<int> { union { BOOL x_1_2_1; int x_1_2_2; } x_3_1_1; bool x_3_1_2; } x3; /* Warning: unhandled struct encoding: '{optional<std::vector<std::string>>=(?=c{vector<std::string' */ struct x4; } beamSearchOptions; /* unknown property attribute:  std::allocator<std::string>>=^v}})B}@ffQiif} */
@property (nonatomic) /* Warning: unhandled struct encoding: '{EspressoTensor=^^?i{TensorShape={vector<unsigned long' */ struct  encodedFeaturesBuffer; /* unknown property attribute:  std::allocator<unsigned long>>=^Q}}}{shared_ptr<ik::TensorStorage>=^{TensorStorage}^{__shared_weak_count}}} */
@property (nonatomic) int genderOptionForBeamSearch;
@property (nonatomic, retain) CSUCaptionPostProcessingHandler *postProcessingHandler;
@property (nonatomic, retain) CSUCaptionRuntimeParameters *runTimeParams;
@property (nonatomic) struct shared_ptr<csu::CustomVocabulary> { struct CustomVocabulary {} *x1; struct __shared_weak_count {} *x2; } vocabulary;

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct shared_ptr<csu::BeamSearch> { struct BeamSearch {} *x1; struct __shared_weak_count {} *x2; })beamSearch;
- (struct BeamSearchOptions { unsigned long long x1; bool x2; struct optional<int> { union { BOOL x_1_2_1; int x_1_2_2; } x_3_1_1; bool x_3_1_2; } x3; struct optional<std::vector<std::string>> { union { BOOL x_1_2_1; struct vector<std::string, std::allocator<std::string>> { void *x_2_3_1; void *x_2_3_2; struct __compressed_pair<std::string *, std::allocator<std::string>> { void *x_3_4_1; } x_2_3_3; } x_1_2_2; } x_4_1_1; bool x_4_1_2; } x4; id x5; float x6; float x7; unsigned long long x8; int x9; int x10; float x11; })beamSearchOptions;
- (struct EspressoTensor { int (**x1)(); int x2; struct TensorShape { struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x_1_2_1; unsigned long long *x_1_2_2; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x_3_3_1; } x_1_2_3; } x_3_1_1; } x3; struct shared_ptr<ik::TensorStorage> { struct TensorStorage {} *x_4_1_1; struct __shared_weak_count {} *x_4_1_2; } x4; })encodedFeaturesBuffer;
- (int)genderOptionForBeamSearch;
- (id)initWithDecoderConfiguration:(id)arg1 beamWidth:(int)arg2 beamScorerType:(unsigned long long)arg3 error:(id*)arg4;
- (id)postProcessingHandler;
- (id)runTimeParams;
- (void)setBeamSearch:(struct shared_ptr<csu::BeamSearch> { struct BeamSearch {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (void)setBeamSearchOptions:(struct BeamSearchOptions { unsigned long long x1; bool x2; struct optional<int> { union { BOOL x_1_2_1; int x_1_2_2; } x_3_1_1; bool x_3_1_2; } x3; struct optional<std::vector<std::string>> { union { BOOL x_1_2_1; struct vector<std::string, std::allocator<std::string>> { void *x_2_3_1; void *x_2_3_2; struct __compressed_pair<std::string *, std::allocator<std::string>> { void *x_3_4_1; } x_2_3_3; } x_1_2_2; } x_4_1_1; bool x_4_1_2; } x4; id x5; float x6; float x7; unsigned long long x8; int x9; int x10; float x11; })arg1;
- (void)setEncodedFeaturesBuffer:(struct EspressoTensor { int (**x1)(); int x2; struct TensorShape { struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x_1_2_1; unsigned long long *x_1_2_2; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x_3_3_1; } x_1_2_3; } x_3_1_1; } x3; struct shared_ptr<ik::TensorStorage> { struct TensorStorage {} *x_4_1_1; struct __shared_weak_count {} *x_4_1_2; } x4; })arg1;
- (void)setGenderOptionForBeamSearch:(int)arg1;
- (void)setPostProcessingHandler:(id)arg1;
- (void)setRunTimeParams:(id)arg1;
- (void)setVocabulary:(struct shared_ptr<csu::CustomVocabulary> { struct CustomVocabulary {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (struct shared_ptr<csu::CustomVocabulary> { struct CustomVocabulary {} *x1; struct __shared_weak_count {} *x2; })vocabulary;

@end
