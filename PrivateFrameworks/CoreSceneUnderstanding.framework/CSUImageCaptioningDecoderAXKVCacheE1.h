/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreSceneUnderstanding.framework/CoreSceneUnderstanding
 */

@interface CSUImageCaptioningDecoderAXKVCacheE1 : NSObject {
    CSUImageCaptioningDecoderConfiguration * _configuration;
    CSUImageCaptionDecoderAXKVCacheE1Network * _decoderNetObj;
    struct EspressoTensor { 
        int (**_vptr$Tensor)(); 
        int type_; 
        struct TensorShape { 
            struct vector<unsigned long, std::allocator<unsigned long>> { 
                unsigned long long *__begin_; 
                unsigned long long *__end_; 
                struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { 
                    unsigned long long *__value_; 
                } __end_cap_; 
            } sizes_; 
        } shape_; 
        struct shared_ptr<ik::TensorStorage> { 
            struct TensorStorage {} *__ptr_; 
            struct __shared_weak_count {} *__cntrl_; 
        } storage_; 
    }  _encodedFeaturesBuffer;
    CSUCaptioningProcUtils * _procUtils;
}

@property (nonatomic, readonly) CSUImageCaptioningDecoderConfiguration *configuration;
@property (nonatomic, retain) CSUImageCaptionDecoderAXKVCacheE1Network *decoderNetObj;
@property (nonatomic, readonly) CSUCaptioningProcUtils *procUtils;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)compareTensorShapesForShape1:(const void*)arg1 Shape2:(const void*)arg2;
- (id)computeDecodedCaptionsForFeatures:(id)arg1 withDecodingMethod:(long long)arg2 runDecoderOnly:(bool)arg3 error:(id*)arg4;
- (id)configuration;
- (id)decoderNetObj;
- (id)getCaptionsAfterBeamSearchDecodingOnEncodedFeatures;
- (id)getCaptionsAfterGreedyDecodingOnEncodedFeatures;
- (id)initWithConfiguration:(id)arg1;
- (bool)loadDecoder:(id*)arg1;
- (bool)loadDecoderObj:(id*)arg1;
- (bool)loadPostProcUtilsWithBeamWidth:(int)arg1 error:(id*)arg2;
- (bool)loadResources:(id*)arg1;
- (struct ModelOutput { struct vector<float, std::allocator<float>> { float *x_1_1_1; float *x_1_1_2; struct __compressed_pair<float *, std::allocator<float>> { float *x_3_2_1; } x_1_1_3; } x1; struct shared_ptr<std::unordered_map<std::string, std::vector<float>>> { void *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; bool x3; })nextTokensForInputs:(const void*)arg1 KVCache:(const void*)arg2 AndforMaskPosition:(unsigned int)arg3;
- (bool)populateInputBuffer:(id)arg1 WithError:(id*)arg2;
- (id)postProcessResults:(id)arg1 error:(id*)arg2;
- (id)procUtils;
- (void)setDecoderNetObj:(id)arg1;

@end
