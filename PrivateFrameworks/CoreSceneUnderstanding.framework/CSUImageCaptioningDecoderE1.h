/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreSceneUnderstanding.framework/CoreSceneUnderstanding
 */

@interface CSUImageCaptioningDecoderE1 : NSObject {
    struct EspressoTensor { 
        int (**_vptr$Tensor)(); 
        int type_; 
        struct TensorShape { 
            struct vector<unsigned long, std::allocator<unsigned long>> { 
                unsigned long long *__begin_; 
                unsigned long long *__end_; 
                struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { 
                    unsigned long long *__value_; 
                } __end_cap_; 
            } sizes_; 
        } shape_; 
        struct shared_ptr<ik::TensorStorage> { 
            struct TensorStorage {} *__ptr_; 
            struct __shared_weak_count {} *__cntrl_; 
        } storage_; 
    }  _bridgeInputBuffer;
    struct unique_ptr<ik::EspressoNet, std::default_delete<ik::EspressoNet>> { 
        struct __compressed_pair<ik::EspressoNet *, std::default_delete<ik::EspressoNet>> { 
            struct EspressoNet {} *__value_; 
        } __ptr_; 
    }  _bridgeNet;
    CSUImageCaptioningDecoderConfiguration * _configuration;
    struct unique_ptr<ik::EspressoNet, std::default_delete<ik::EspressoNet>> { 
        struct __compressed_pair<ik::EspressoNet *, std::default_delete<ik::EspressoNet>> { 
            struct EspressoNet {} *__value_; 
        } __ptr_; 
    }  _decoderNet;
    struct EspressoTensor { 
        int (**_vptr$Tensor)(); 
        int type_; 
        struct TensorShape { 
            struct vector<unsigned long, std::allocator<unsigned long>> { 
                unsigned long long *__begin_; 
                unsigned long long *__end_; 
                struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { 
                    unsigned long long *__value_; 
                } __end_cap_; 
            } sizes_; 
        } shape_; 
        struct shared_ptr<ik::TensorStorage> { 
            struct TensorStorage {} *__ptr_; 
            struct __shared_weak_count {} *__cntrl_; 
        } storage_; 
    }  _encodedFeaturesBuffer;
    struct EspressoTensor { 
        int (**_vptr$Tensor)(); 
        int type_; 
        struct TensorShape { 
            struct vector<unsigned long, std::allocator<unsigned long>> { 
                unsigned long long *__begin_; 
                unsigned long long *__end_; 
                struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { 
                    unsigned long long *__value_; 
                } __end_cap_; 
            } sizes_; 
        } shape_; 
        struct shared_ptr<ik::TensorStorage> { 
            struct TensorStorage {} *__ptr_; 
            struct __shared_weak_count {} *__cntrl_; 
        } storage_; 
    }  _inputTokens;
    CSUCaptioningProcUtils * _procUtils;
}

@property (nonatomic, readonly) CSUImageCaptioningDecoderConfiguration *configuration;
@property (nonatomic, readonly) CSUCaptioningProcUtils *procUtils;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)compareTensorShapesForShape1:(const void*)arg1 Shape2:(unsigned long long)arg2 rank:(unsigned long long)arg3;
- (id)computeDecodedCaptionsForFeatures:(id)arg1 withDecodingMethod:(long long)arg2 runDecoderOnly:(bool)arg3 error:(id*)arg4;
- (id)configuration;
- (id)getBridgeLayerOutput:(id)arg1 error:(id*)arg2;
- (id)getCaptionsAfterBeamSearchDecodingOnEncodedFeatures;
- (id)getCaptionsAfterGreedyDecodingOnEncodedFeatures;
- (id)initWithConfiguration:(id)arg1;
- (bool)loadBridge:(id*)arg1;
- (bool)loadDecoder:(id*)arg1;
- (bool)loadPostProcUtilsWithBeamWidth:(int)arg1 error:(id*)arg2;
- (bool)loadResources:(id*)arg1;
- (struct vector<float, std::allocator<float>> { float *x1; float *x2; struct __compressed_pair<float *, std::allocator<float>> { float *x_3_1_1; } x3; })nextTokensForInputs:(const void*)arg1 AndforMaskPosition:(unsigned int)arg2;
- (bool)populateInputBufferWithBridgeFeatures:(id)arg1 WithError:(id*)arg2;
- (id)postProcessResults:(id)arg1 error:(id*)arg2;
- (id)procUtils;
- (bool)reshapeEncodedFeaturesBufferForBridgeNet:(id)arg1 WithError:(id*)arg2;

@end
