/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreSceneUnderstanding.framework/CoreSceneUnderstanding
 */

@interface CSUTaxonomy : NSObject {
    unsigned long long  _internalCount;
    NSDictionary * _labelAttributes;
    NSDictionary * _manifest;
    NSString * _name;
    struct optional<csu::TaxonomyRelations> { 
        union { 
            BOOL __null_state_; 
            struct TaxonomyRelations { 
                NSData *_data; 
                unsigned long long _count; 
            } __val_; 
        } ; 
        bool __engaged_; 
    }  _relations;
    NSString * _version;
    NSDictionary * _vocabularies;
    NSArray * _vocabularyNames;
}

@property (nonatomic, readonly) bool hasLabelAttributes;
@property (nonatomic, readonly) unsigned long long internalCount;
@property (nonatomic, readonly, copy) NSString *name;
@property (nonatomic, readonly) struct optional<csu::TaxonomyRelations> { union { BOOL x_1_1_1; struct TaxonomyRelations { id x_2_2_1; unsigned long long x_2_2_2; } x_1_1_2; } x1; bool x2; } relations;
@property (nonatomic, readonly, copy) NSString *version;
@property (nonatomic, readonly, copy) NSArray *vocabularyNames;

// Image: /System/Library/PrivateFrameworks/CoreSceneUnderstanding.framework/CoreSceneUnderstanding

+ (id)taxonomyWithManifestPath:(id)arg1 error:(id*)arg2;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)_hasVocabularyNamed:(id)arg1;
- (id)_vocabularyNamed:(id)arg1;
- (unsigned long long)countLabelsInVocabularyNamed:(id)arg1;
- (void)enumerateLabelsInTaxonomyUsingBlock:(id /* block */)arg1;
- (void)enumerateLabelsInVocabularyNamed:(id)arg1 usingBlock:(id /* block */)arg2;
- (bool)hasLabelAttributes;
- (id)initWithManifestPath:(id)arg1 error:(id*)arg2;
- (unsigned long long)internalCount;
- (id)name;
- (struct optional<csu::TaxonomyRelations> { union { BOOL x_1_1_1; struct TaxonomyRelations { id x_2_2_1; unsigned long long x_2_2_2; } x_1_1_2; } x1; bool x2; })relations;
- (id)version;
- (id)vocabularyNames;

// Image: /System/Library/Frameworks/Vision.framework/Vision

- (bool)VNGetClassificationMetrics:(id*)arg1 forLabel:(id)arg2 error:(id*)arg3;

@end
