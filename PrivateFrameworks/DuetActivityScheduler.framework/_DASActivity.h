/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/DuetActivityScheduler.framework/DuetActivityScheduler
 */

@interface _DASActivity : NSObject <NSCopying, NSSecureCoding> {
    NSString * _activityType;
    bool  _afterUserIsInactive;
    bool  _aneIntensive;
    _DASAssertion * _assertion;
    bool  _backlogged;
    bool  _beforeDaysFirstActivity;
    bool  _beforeUserIsActive;
    bool  _budgeted;
    unsigned long long  _budgetingToken;
    NSString * _bundleId;
    bool  _bypassesPredictions;
    bool  _cancelAfterDeadline;
    NSString * _clientDataBudgetName;
    NSString * _clientName;
    id /* block */  _completionHandler;
    long long  _completionStatus;
    bool  _cpuIntensive;
    bool  _darkWakeEligible;
    bool  _dataBudgeted;
    bool  _deferred;
    bool  _delayedStart;
    NSSet * _dependencies;
    bool  _dependenciesPreCleared;
    bool  _diskIntensive;
    NSString * _diskVolume;
    unsigned long long  _downloadSize;
    unsigned long long  _duration;
    NSDate * _endTime;
    NSString * _extensionIdentifier;
    _DASFastPass * _fastPass;
    NSArray * _featureCodes;
    _DASFileProtection * _fileProtection;
    bool  _gpuIntensive;
    NSString * _groupName;
    NSObject<OS_dispatch_queue> * _handlerQueue;
    NSString * _identifier;
    double  _interval;
    NSArray * _involvedProcesses;
    bool  _isMLBackgroundActivity;
    bool  _isUpload;
    double  _lastComputedScore;
    unsigned long long  _lastDenialValue;
    NSDate * _lastScored;
    NSString * _launchReason;
    NSMutableArray * _limitationResponse;
    long long  _maximumRuntime;
    bool  _memoryIntensive;
    long long  _motionState;
    NSString * _name;
    double  _percentCompleted;
    int  _pid;
    NSMutableDictionary * _policyResponseMetadata;
    long long  _preClearedMode;
    double  _predictedOptimalScore;
    NSDate * _predictedOptimalStartDate;
    bool  _preventDeviceSleep;
    NSSet * _producedResultIdentifiers;
    NSString * _rateLimitConfigurationName;
    NSArray * _relatedApplications;
    long long  _relevancy;
    NSString * _remoteDevice;
    bool  _requestsApplicationLaunch;
    bool  _requestsExtensionLaunch;
    bool  _requiresBuddyComplete;
    bool  _requiresDeviceInactivity;
    bool  _requiresInexpensiveNetworking;
    bool  _requiresNetwork;
    bool  _requiresPlugin;
    bool  _requiresRemoteDeviceWake;
    bool  _requiresUnconstrainedNetworking;
    bool  _runOnAppForeground;
    NSArray * _schedulerRecommendedApplications;
    unsigned long long  _schedulingPriority;
    NSString * _serviceName;
    bool  _shouldBePersisted;
    bool  _shouldWakeDevice;
    NSDate * _startAfter;
    NSDate * _startBefore;
    NSDictionary * _startConditions;
    NSDate * _startDate;
    id /* block */  _startHandler;
    long long  _staticPriority;
    NSDate * _submitDate;
    bool  _supportsAnyApplication;
    id /* block */  _suspendHandler;
    NSDate * _suspendRequestDate;
    bool  _suspendable;
    long long  _targetDevice;
    bool  _triggersRestart;
    unsigned long long  _uploadSize;
    long long  _urgencyLevel;
    unsigned int  _userIdentifier;
    NSMutableDictionary * _userInfo;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _userInfoLock;
    NSUUID * _uuid;
    bool  _wasForceRun;
    NSString * _widgetBudgetID;
    NSString * _widgetID;
}

@property (nonatomic, retain) NSString *activityType;
@property (nonatomic) bool afterUserIsInactive;
@property (nonatomic) bool allowsCompanionExpensiveNetworking;
@property (nonatomic) bool aneIntensive;
@property (nonatomic, retain) _DASAssertion *assertion;
@property (nonatomic) bool backlogged;
@property (nonatomic) bool beforeApplicationLaunch;
@property (nonatomic) bool beforeDaysFirstActivity;
@property (nonatomic) bool beforeUserIsActive;
@property (nonatomic) bool blockRebootActivitiesForSU;
@property (nonatomic) bool budgeted;
@property (nonatomic) unsigned long long budgetingToken;
@property (nonatomic, retain) NSString *bundleId;
@property (nonatomic) bool bypassesPredictions;
@property (nonatomic) bool cancelAfterDeadline;
@property (nonatomic, retain) NSString *clientDataBudgetName;
@property (nonatomic, retain) NSString *clientName;
@property (nonatomic, readonly) NSString *clientProvidedIconBundleIdentifier;
@property (nonatomic, retain) NSString *clientProvidedIdentifier;
@property (nonatomic, retain) NSString *clientProvidedReason;
@property (nonatomic, retain) NSDate *clientProvidedStartDate;
@property (nonatomic, retain) NSString *clientProvidedTitle;
@property (nonatomic, copy) id /* block */ completionHandler;
@property (nonatomic) long long completionStatus;
@property (nonatomic) bool cpuIntensive;
@property (nonatomic) bool darkWakeEligible;
@property (nonatomic) bool dataBudgeted;
@property (nonatomic) bool deferred;
@property (nonatomic) bool delayedStart;
@property (nonatomic, copy) NSSet *dependencies;
@property (nonatomic) bool dependenciesPreCleared;
@property (nonatomic) bool diskIntensive;
@property (nonatomic, copy) NSString *diskVolume;
@property (nonatomic) unsigned long long downloadSize;
@property (nonatomic) unsigned long long duration;
@property (retain) NSDate *endTime;
@property (nonatomic, copy) NSString *extensionIdentifier;
@property (nonatomic, copy) _DASFastPass *fastPass;
@property (nonatomic, copy) NSArray *featureCodes;
@property (nonatomic, copy) _DASFileProtection *fileProtection;
@property (nonatomic) bool gpuIntensive;
@property (nonatomic, copy) NSString *groupName;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *handlerQueue;
@property (nonatomic) bool hasMagneticSensitivity;
@property (nonatomic, copy) NSString *identifier;
@property (nonatomic) double interval;
@property (nonatomic, retain) NSArray *involvedProcesses;
@property (nonatomic) bool isContactTracingBackgroundActivity;
@property (nonatomic) bool isMLBackgroundActivity;
@property (nonatomic) bool isUpload;
@property (nonatomic) double lastComputedScore;
@property unsigned long long lastDenialValue;
@property (retain) NSDate *lastScored;
@property (nonatomic, copy) NSString *launchReason;
@property (nonatomic, retain) NSMutableArray *limitationResponse;
@property (nonatomic) long long maximumRuntime;
@property (nonatomic) bool memoryIntensive;
@property (nonatomic) long long motionState;
@property (nonatomic, copy) NSString *name;
@property (nonatomic) double percentCompleted;
@property (nonatomic) int pid;
@property (nonatomic, retain) NSMutableDictionary *policyResponseMetadata;
@property (nonatomic) long long preClearedMode;
@property (nonatomic) double predictedOptimalScore;
@property (retain) NSDate *predictedOptimalStartDate;
@property (nonatomic) bool preventDeviceSleep;
@property (nonatomic, copy) NSSet *producedResultIdentifiers;
@property (nonatomic, retain) NSProgress *progress;
@property (nonatomic, copy) NSString *rateLimitConfigurationName;
@property (nonatomic, retain) NSArray *relatedApplications;
@property (nonatomic) long long relevancy;
@property (nonatomic, retain) NSString *remoteDevice;
@property (nonatomic) bool requestsApplicationLaunch;
@property (nonatomic) bool requestsExtensionLaunch;
@property (nonatomic) bool requestsNewsstandLaunch;
@property (nonatomic) bool requiresBuddyComplete;
@property (nonatomic) bool requiresDeviceInactivity;
@property (nonatomic) bool requiresInexpensiveNetworking;
@property (nonatomic) bool requiresNetwork;
@property (nonatomic) bool requiresPlugin;
@property (nonatomic) bool requiresRemoteDeviceWake;
@property (nonatomic) bool requiresSignificantUserInactivity;
@property (nonatomic) bool requiresUnconstrainedNetworking;
@property (nonatomic) bool runOnAppForeground;
@property (nonatomic, retain) NSArray *schedulerRecommendedApplications;
@property (nonatomic) unsigned long long schedulingPriority;
@property (nonatomic, copy) NSString *serviceName;
@property (nonatomic) bool shouldBePersisted;
@property (nonatomic) bool shouldWakeDevice;
@property (retain) NSDate *startAfter;
@property (retain) NSDate *startBefore;
@property (retain) NSDictionary *startConditions;
@property (retain) NSDate *startDate;
@property (nonatomic, copy) id /* block */ startHandler;
@property (nonatomic) long long staticPriority;
@property (nonatomic, retain) NSDate *submitDate;
@property (nonatomic) bool supportsAnyApplication;
@property (nonatomic, copy) id /* block */ suspendHandler;
@property (retain) NSDate *suspendRequestDate;
@property (nonatomic) bool suspendable;
@property (nonatomic) long long targetDevice;
@property (nonatomic) unsigned long long transferSize;
@property (nonatomic) bool triggersRestart;
@property (nonatomic) unsigned long long uploadSize;
@property (nonatomic) long long urgencyLevel;
@property (nonatomic) bool useStatisticalModelForTriggersRestart;
@property (nonatomic) unsigned int userIdentifier;
@property (nonatomic, copy) NSDictionary *userInfo;
@property (nonatomic) bool userRequestedBackupTask;
@property (nonatomic, retain) NSUUID *uuid;
@property (nonatomic) bool wasForceRun;
@property (nonatomic, retain) NSString *widgetBudgetID;
@property (nonatomic, retain) NSString *widgetID;

+ (id)activityWithName:(id)arg1 priority:(unsigned long long)arg2 duration:(unsigned long long)arg3 startingAfter:(id)arg4 startingBefore:(id)arg5;
+ (id)activityWithName:(id)arg1 priority:(unsigned long long)arg2 duration:(unsigned long long)arg3 startingAfter:(id)arg4 startingBefore:(id)arg5 userInfo:(id)arg6;
+ (id)anyApplicationActivityWithName:(id)arg1 priority:(unsigned long long)arg2 duration:(unsigned long long)arg3 startingAfter:(id)arg4 startingBefore:(id)arg5 limitedToApplications:(id)arg6;
+ (id)applicationLaunchActivityWithName:(id)arg1 priority:(unsigned long long)arg2 forApplication:(id)arg3 withReason:(id)arg4 duration:(unsigned long long)arg5 startingAfter:(id)arg6 startingBefore:(id)arg7;
+ (unsigned long long)cleanDuration:(unsigned long long)arg1;
+ (unsigned long long)cleanSchedulingPriority:(unsigned long long)arg1;
+ (unsigned long long)cleanTransferSize:(unsigned long long)arg1;
+ (id)extensionLaunchActivityWithName:(id)arg1 priority:(unsigned long long)arg2 forApplication:(id)arg3 forExtensionIdentifier:(id)arg4 withReason:(id)arg5 duration:(unsigned long long)arg6 startingAfter:(id)arg7 startingBefore:(id)arg8;
+ (id)extensionLaunchActivityWithName:(id)arg1 priority:(unsigned long long)arg2 forApplication:(id)arg3 withReason:(id)arg4 duration:(unsigned long long)arg5 startingAfter:(id)arg6 startingBefore:(id)arg7;
+ (id)extensionLaunchActivityWithName:(id)arg1 priority:(unsigned long long)arg2 forExtensionIdentifier:(id)arg3 withReason:(id)arg4 duration:(unsigned long long)arg5 startingAfter:(id)arg6 startingBefore:(id)arg7;
+ (void)initialize;
+ (id)launchForRemoteNotificationWithTopic:(id)arg1 withPayload:(id)arg2 highPriority:(bool)arg3;
+ (id)launchWithTopic:(id)arg1 forReason:(id)arg2 withPayload:(id)arg3 highPriority:(bool)arg4;
+ (id)networkingActivityWithName:(id)arg1 priority:(unsigned long long)arg2 downloadSize:(unsigned long long)arg3 uploadSize:(unsigned long long)arg4 expensiveNetworkingAllowed:(bool)arg5 startingAfter:(id)arg6 startingBefore:(id)arg7;
+ (id)networkingActivityWithName:(id)arg1 priority:(unsigned long long)arg2 transferSize:(unsigned long long)arg3 isUpload:(bool)arg4 expensiveNetworkingAllowed:(bool)arg5 startingAfter:(id)arg6 startingBefore:(id)arg7;
+ (id)prettySchedulingPriorityDescription:(unsigned long long)arg1;
+ (id)sharedDateFormatter;
+ (bool)supportsSecureCoding;
+ (id)validClassesForUserInfoSerialization;
+ (id)validateBGTaskRequestWithActivity:(id)arg1;

- (void).cxx_destruct;
- (id)activityType;
- (bool)afterUserIsInactive;
- (bool)allowsCompanionExpensiveNetworking;
- (bool)allowsUnrestrictedBackgroundLaunches;
- (bool)aneIntensive;
- (id)assertion;
- (bool)backlogged;
- (bool)beforeApplicationLaunch;
- (bool)beforeDaysFirstActivity;
- (bool)beforeUserIsActive;
- (bool)blockRebootActivitiesForSU;
- (bool)boolForUserInfoKey:(id)arg1;
- (bool)budgeted;
- (unsigned long long)budgetingToken;
- (id)bundleId;
- (bool)bypassesPredictions;
- (bool)cancelAfterDeadline;
- (bool)ckPushContentMatches:(id)arg1;
- (id)clientDataBudgetName;
- (id)clientName;
- (id)clientProvidedIconBundleIdentifier;
- (id)clientProvidedIdentifier;
- (id)clientProvidedReason;
- (id)clientProvidedStartDate;
- (id)clientProvidedTitle;
- (double)compatibilityWith:(id)arg1;
- (id /* block */)completionHandler;
- (long long)completionStatus;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (bool)cpuIntensive;
- (bool)darkWakeEligible;
- (bool)dataBudgeted;
- (bool)dataBudgetingEnabled;
- (id)debugDescription;
- (bool)deferred;
- (bool)delayedStart;
- (id)dependencies;
- (bool)dependenciesPreCleared;
- (id)dependencyForIdentifier:(id)arg1;
- (id)description;
- (bool)diskIntensive;
- (id)diskVolume;
- (unsigned long long)downloadSize;
- (unsigned long long)duration;
- (void)encodeWithCoder:(id)arg1;
- (id)endTime;
- (id)extensionIdentifier;
- (id)fastPass;
- (id)featureCodes;
- (id)fileProtection;
- (bool)gpuIntensive;
- (id)groupName;
- (id)handlerQueue;
- (bool)hasMagneticSensitivity;
- (bool)hasManyConstraints;
- (unsigned long long)hash;
- (id)identifier;
- (id)initWithCoder:(id)arg1;
- (id)initWithName:(id)arg1 priority:(unsigned long long)arg2 duration:(unsigned long long)arg3 startingAfter:(id)arg4 startingBefore:(id)arg5 userInfo:(id)arg6;
- (double)interval;
- (id)involvedProcesses;
- (bool)isANEIntensive;
- (bool)isBackgroundTaskActivity;
- (bool)isCPUIntensive;
- (bool)isContactTracingBackgroundActivity;
- (bool)isContinuedProcessingTask;
- (bool)isDiskIntensive;
- (bool)isEqual:(id)arg1;
- (bool)isGPUIntensive;
- (bool)isIdenticalLaunchTo:(id)arg1;
- (bool)isIntensive;
- (bool)isMLBackgroundActivity;
- (bool)isMemoryIntensive;
- (bool)isSilentPush;
- (bool)isSoftwareUpdateActivity;
- (bool)isUpload;
- (bool)keepsPrevious;
- (double)lastComputedScore;
- (unsigned long long)lastDenialValue;
- (id)lastScored;
- (id)launchReason;
- (id)limitationResponse;
- (long long)maximumRuntime;
- (bool)memoryIntensive;
- (long long)motionState;
- (id)name;
- (id)nameString;
- (bool)noTransferSizeSpecified;
- (id)objectForUserInfoKey:(id)arg1;
- (bool)overdueAtDate:(id)arg1;
- (bool)overwritesPrevious;
- (double)percentCompleted;
- (int)pid;
- (id)policyResponseMetadata;
- (id)policyScores;
- (long long)preClearedMode;
- (double)predictedOptimalScore;
- (id)predictedOptimalStartDate;
- (bool)preventDeviceSleep;
- (id)producedResultIdentifiers;
- (id)progress;
- (id)rateLimitConfigurationName;
- (void)reconcileWithActivity:(id)arg1;
- (id)relatedApplications;
- (long long)relevancy;
- (id)remoteDevice;
- (bool)requestsApplicationLaunch;
- (bool)requestsExtensionLaunch;
- (bool)requestsNewsstandLaunch;
- (bool)requiresBuddyComplete;
- (bool)requiresDeviceInactivity;
- (bool)requiresInexpensiveNetworking;
- (bool)requiresNetwork;
- (bool)requiresPlugin;
- (bool)requiresRemoteDeviceWake;
- (bool)requiresSignificantUserInactivity;
- (bool)requiresUnconstrainedNetworking;
- (bool)runOnAppForeground;
- (id)schedulerRecommendedApplications;
- (unsigned long long)schedulingPriority;
- (id)serviceName;
- (void)setANEIntensive:(bool)arg1;
- (void)setActivityType:(id)arg1;
- (void)setAfterUserIsInactive:(bool)arg1;
- (void)setAllowsCompanionExpensiveNetworking:(bool)arg1;
- (void)setAneIntensive:(bool)arg1;
- (void)setAssertion:(id)arg1;
- (void)setBacklogged:(bool)arg1;
- (void)setBeforeApplicationLaunch:(bool)arg1;
- (void)setBeforeDaysFirstActivity:(bool)arg1;
- (void)setBeforeUserIsActive:(bool)arg1;
- (void)setBlockRebootActivitiesForSU:(bool)arg1;
- (void)setBool:(bool)arg1 forUserInfoKey:(id)arg2;
- (void)setBudgeted:(bool)arg1;
- (void)setBudgetingToken:(unsigned long long)arg1;
- (void)setBundleId:(id)arg1;
- (void)setBypassesPredictions:(bool)arg1;
- (void)setCancelAfterDeadline:(bool)arg1;
- (void)setClientDataBudgetName:(id)arg1;
- (void)setClientName:(id)arg1;
- (void)setClientProvidedIdentifier:(id)arg1;
- (void)setClientProvidedReason:(id)arg1;
- (void)setClientProvidedStartDate:(id)arg1;
- (void)setClientProvidedTitle:(id)arg1;
- (void)setCompletionHandler:(id /* block */)arg1;
- (void)setCompletionStatus:(long long)arg1;
- (void)setConstraintsWithXPCDictionary:(id)arg1;
- (void)setCpuIntensive:(bool)arg1;
- (void)setDarkWakeEligible:(bool)arg1;
- (void)setDataBudgeted:(bool)arg1;
- (void)setDeferred:(bool)arg1;
- (void)setDelayedStart:(bool)arg1;
- (void)setDependencies:(id)arg1;
- (void)setDependenciesPreCleared:(bool)arg1;
- (void)setDiskIntensive:(bool)arg1;
- (void)setDiskVolume:(id)arg1;
- (void)setDownloadSize:(unsigned long long)arg1;
- (void)setDuration:(unsigned long long)arg1;
- (void)setEndTime:(id)arg1;
- (void)setExtensionIdentifier:(id)arg1;
- (void)setFastPass:(id)arg1;
- (void)setFeatureCodes:(id)arg1;
- (void)setFileProtection:(id)arg1;
- (void)setGPUIntensive:(bool)arg1;
- (void)setGpuIntensive:(bool)arg1;
- (void)setGroupName:(id)arg1;
- (void)setHandlerQueue:(id)arg1;
- (void)setHasMagneticSensitivity:(bool)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setInterval:(double)arg1;
- (void)setInvolvedProcesses:(id)arg1;
- (void)setIsContactTracingBackgroundActivity:(bool)arg1;
- (void)setIsMLBackgroundActivity:(bool)arg1;
- (void)setIsUpload:(bool)arg1;
- (void)setLastComputedScore:(double)arg1;
- (void)setLastDenialValue:(unsigned long long)arg1;
- (void)setLastScored:(id)arg1;
- (void)setLaunchReason:(id)arg1;
- (void)setLimitationResponse:(id)arg1;
- (void)setMaximumRuntime:(long long)arg1;
- (void)setMemoryIntensive:(bool)arg1;
- (void)setMotionState:(long long)arg1;
- (void)setName:(id)arg1;
- (void)setObject:(id)arg1 forUserInfoKey:(id)arg2;
- (void)setPercentCompleted:(double)arg1;
- (void)setPid:(int)arg1;
- (void)setPolicyResponseMetadata:(id)arg1;
- (void)setPreClearedMode:(long long)arg1;
- (void)setPredictedOptimalScore:(double)arg1;
- (void)setPredictedOptimalStartDate:(id)arg1;
- (void)setPreventDeviceSleep:(bool)arg1;
- (void)setProducedResultIdentifiers:(id)arg1;
- (void)setProgress:(id)arg1;
- (void)setRateLimitConfigurationName:(id)arg1;
- (void)setRelatedApplications:(id)arg1;
- (void)setRelevancy:(long long)arg1;
- (void)setRemoteDevice:(id)arg1;
- (void)setRequestsApplicationLaunch:(bool)arg1;
- (void)setRequestsExtensionLaunch:(bool)arg1;
- (void)setRequestsNewsstandLaunch:(bool)arg1;
- (void)setRequiresBuddyComplete:(bool)arg1;
- (void)setRequiresDeviceInactivity:(bool)arg1;
- (void)setRequiresInexpensiveNetworking:(bool)arg1;
- (void)setRequiresNetwork:(bool)arg1;
- (void)setRequiresPlugin:(bool)arg1;
- (void)setRequiresRemoteDeviceWake:(bool)arg1;
- (void)setRequiresSignificantUserInactivity:(bool)arg1;
- (void)setRequiresUnconstrainedNetworking:(bool)arg1;
- (void)setRunOnAppForeground:(bool)arg1;
- (void)setSchedulerRecommendedApplications:(id)arg1;
- (void)setSchedulingPriority:(unsigned long long)arg1;
- (void)setServiceName:(id)arg1;
- (void)setShouldBePersisted:(bool)arg1;
- (void)setShouldWakeDevice:(bool)arg1;
- (void)setStartAfter:(id)arg1;
- (void)setStartBefore:(id)arg1;
- (void)setStartConditions:(id)arg1;
- (void)setStartDate:(id)arg1;
- (void)setStartHandler:(id /* block */)arg1;
- (void)setStaticPriority:(long long)arg1;
- (void)setSubmitDate:(id)arg1;
- (void)setSupportsAnyApplication:(bool)arg1;
- (void)setSuspendHandler:(id /* block */)arg1;
- (void)setSuspendRequestDate:(id)arg1;
- (void)setSuspendable:(bool)arg1;
- (void)setTargetDevice:(long long)arg1;
- (void)setTransferSize:(unsigned long long)arg1;
- (void)setTriggersRestart:(bool)arg1;
- (void)setUploadSize:(unsigned long long)arg1;
- (void)setUrgencyLevel:(long long)arg1;
- (void)setUseStatisticalModelForTriggersRestart:(bool)arg1;
- (void)setUserIdentifier:(unsigned int)arg1;
- (void)setUserInfo:(id)arg1;
- (void)setUserRequestedBackupTask:(bool)arg1;
- (void)setUuid:(id)arg1;
- (void)setWasForceRun:(bool)arg1;
- (void)setWidgetBudgetID:(id)arg1;
- (void)setWidgetID:(id)arg1;
- (id)shortDescription;
- (bool)shouldBePersisted;
- (bool)shouldReplaceActivity:(id)arg1 andKeepsSubmitted:(bool*)arg2;
- (bool)shouldWakeDevice;
- (bool)significantlyOverdueAtDate:(id)arg1;
- (bool)skipEvaluationIfUnplugged;
- (id)startAfter;
- (id)startBefore;
- (id)startConditions;
- (id)startDate;
- (id /* block */)startHandler;
- (long long)staticPriority;
- (id)submitDate;
- (id)submittedFileProtection;
- (bool)supportsAnyApplication;
- (id /* block */)suspendHandler;
- (id)suspendRequestDate;
- (bool)suspendable;
- (long long)targetDevice;
- (bool)timewiseEligibleAtDate:(id)arg1;
- (unsigned long long)transferSize;
- (unsigned long long)transferSizeType;
- (bool)triggersRestart;
- (void)updateGroupIfNecessary;
- (unsigned long long)uploadSize;
- (long long)urgencyLevel;
- (bool)useStatisticalModelForTriggersRestart;
- (unsigned int)userIdentifier;
- (id)userInfo;
- (bool)userRequestedBackupTask;
- (id)uuid;
- (bool)wasForceRun;
- (id)widgetBudgetID;
- (id)widgetID;

@end
