/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/DuetActivityScheduler.framework/DuetActivityScheduler
 */

@interface _DASSubmissionRateLimiter : NSObject <_DASLimits> {
    NSString * _limitationName;
    NSObject<OS_os_log> * _log;
    NSMutableArray * _majorPenaltyActivities;
    unsigned long long  _majorPenaltyTimerCount;
    NSMutableArray * _minorPenaltyActivities;
    unsigned long long  _minorPenaltyTimerCount;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _penaltyLock;
    NSCountedSet * _penaltyTracker;
    NSObject<OS_dispatch_queue> * _queue;
    NSObject<OS_dispatch_source> * _submissionTimer;
    NSCountedSet * _submittedActivityTracker;
    bool  _testing;
    int  _token;
}

@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSString *limitationName;
@property (nonatomic, retain) NSObject<OS_os_log> *log;
@property (nonatomic, retain) NSMutableArray *majorPenaltyActivities;
@property (nonatomic) unsigned long long majorPenaltyTimerCount;
@property (nonatomic, retain) NSMutableArray *minorPenaltyActivities;
@property (nonatomic) unsigned long long minorPenaltyTimerCount;
@property (nonatomic) struct os_unfair_lock_s { unsigned int x1; } penaltyLock;
@property (nonatomic, retain) NSCountedSet *penaltyTracker;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *submissionTimer;
@property (nonatomic, retain) NSCountedSet *submittedActivityTracker;
@property (readonly) Class superclass;
@property (nonatomic) bool testing;
@property (nonatomic) int token;

+ (id)sharedLimiter;

- (void).cxx_destruct;
- (void)addToPenaltyBox:(id)arg1;
- (void)addToTracker:(id)arg1;
- (id)init;
- (id)limitationName;
- (bool)limitedActivity:(id)arg1 withLimitsResponses:(id)arg2;
- (bool)limitsApplyToActivity:(id)arg1;
- (id)log;
- (id)majorPenaltyActivities;
- (unsigned long long)majorPenaltyTimerCount;
- (id)minorPenaltyActivities;
- (unsigned long long)minorPenaltyTimerCount;
- (struct os_unfair_lock_s { unsigned int x1; })penaltyLock;
- (id)penaltyTracker;
- (id)queue;
- (void)removeAll;
- (void)removeAllFromActivityTracker;
- (void)setLimitationName:(id)arg1;
- (void)setLog:(id)arg1;
- (void)setMajorPenaltyActivities:(id)arg1;
- (void)setMajorPenaltyTimerCount:(unsigned long long)arg1;
- (void)setMinorPenaltyActivities:(id)arg1;
- (void)setMinorPenaltyTimerCount:(unsigned long long)arg1;
- (void)setPenaltyLock:(struct os_unfair_lock_s { unsigned int x1; })arg1;
- (void)setPenaltyTracker:(id)arg1;
- (void)setQueue:(id)arg1;
- (void)setSubmissionTimer:(id)arg1;
- (void)setSubmittedActivityTracker:(id)arg1;
- (void)setTesting:(bool)arg1;
- (void)setToken:(int)arg1;
- (id)shouldLimitActivityAtSubmission:(id)arg1;
- (id)submissionTimer;
- (id)submittedActivityTracker;
- (bool)testing;
- (void)timerHandler;
- (int)token;
- (bool)trackActivity:(id)arg1;

@end
