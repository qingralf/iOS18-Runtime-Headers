/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/EmailDaemon.framework/EmailDaemon
 */

@interface EDBusinessPersistence : NSObject <EDPersistenceDatabaseProtectedSchemaProvider, EDProtectedDataReconciliationHookResponder> {
    NSObject<OS_dispatch_queue> * _businessConnectResponseQueue;
    BCSBusinessQueryService * _businessQueryService;
    EDPersistenceDatabase * _database;
    EDPersistenceHookRegistry * _hookRegistry;
    NSObject<OS_dispatch_queue> * _queue;
}

@property (nonatomic, retain) BCSBusinessQueryService *businessQueryService;
@property (nonatomic, retain) EDPersistenceDatabase *database;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) EDPersistenceHookRegistry *hookRegistry;
@property (readonly) Class superclass;

+ (id)_brandIDFromInteger:(long long)arg1;
+ (id)_commonDomains;
+ (bool)_hasCommonDomain:(id)arg1;
+ (bool)_shouldUseGroupingSimpleAddressForEmailAddress:(id)arg1 grouping:(long long)arg2;
+ (bool)_shouldUseSimpleAddressForHighLevelDomain:(id)arg1 displayName:(id)arg2 grouping:(long long)arg3;
+ (id)brandIDForResultRow:(id)arg1;
+ (id)businessAddressesAddressColumnName;
+ (id)businessAddressesBusinessColumnName;
+ (id)businessAddressesCategoryColumnName;
+ (id)businessAddressesLastBCSSyncColumnName;
+ (id)businessAddressesLastModifiedColumnName;
+ (id)businessAddressesTableName;
+ (id)businessAddressesTableSchema;
+ (id)businessCategoriesBusinessColumnName;
+ (id)businessCategoriesCategoryColumnName;
+ (id)businessCategoriesTableName;
+ (id)businessCategoriesTableSchema;
+ (id)businessesBrandIDColumnName;
+ (id)businessesDisplayNameColumnName;
+ (id)businessesDomainColumnName;
+ (id)businessesLocalizedBrandNameColumnName;
+ (id)businessesTableName;
+ (id)businessesTableSchema;
+ (id)log;
+ (id)protectedTablesAndForeignKeysToResolve:(id*)arg1;
+ (id)tablesAndForeignKeysToResolve:(id*)arg1 associationsToResolve:(id*)arg2;

- (void).cxx_destruct;
- (id)_addressesNeedingUpdateStatementOnlyCounts:(bool)arg1;
- (id)_bcsEmailIdentiferForAddress:(id)arg1;
- (id)_businessAddressMapWithCategoryOverrideWithConnection:(id)arg1;
- (id)_businessExternalIDForAddressID:(long long)arg1 expectedGrouping:(long long)arg2 connection:(id)arg3 error:(id*)arg4;
- (id)_businessExternalIDForEmailAddress:(id)arg1 addressID:(long long)arg2 brandID:(id)arg3 grouping:(long long)arg4 businessIDsToCombine:(id*)arg5;
- (long long)_businessIDForDomain:(id)arg1 displayName:(id)arg2 connection:(id)arg3;
- (id)_businessIDsForHighLevelDomain:(id)arg1 connection:(id)arg2;
- (id)_categoryOverridesForBusinessIDs:(id)arg1 connection:(id)arg2;
- (bool)_combineBusinesses:(id)arg1 connection:(id)arg2 newBusinessID:(long long*)arg3;
- (bool)_completedBCSSyncforAddressID:(id)arg1 connection:(id)arg2;
- (bool)_deleteBusinessAddressEntryForAddressID:(id)arg1 connection:(id)arg2;
- (bool)_deleteBusinessEntryForBusinessID:(id)arg1 connection:(id)arg2;
- (id)_existingExternalIDForAddressID:(long long)arg1 error:(id*)arg2;
- (id)_externalIDForDomain:(id)arg1 displayName:(id)arg2 brandID:(id)arg3 simpleAddress:(id)arg4 grouping:(long long)arg5;
- (id)_externalIDForPersistedDomain:(id)arg1 displayName:(id)arg2 brandID:(id)arg3 grouping:(long long)arg4;
- (id)_externalIDWithCommonPrefixForHighLevelDomain:(id)arg1 displayName:(id)arg2 businessIDsToCombine:(id*)arg3;
- (id)_findExistingBrandIDForBusinessID:(long long)arg1 connection:(id)arg2;
- (long long)_findExistingBusinessForAddressID:(long long)arg1 connection:(id)arg2;
- (long long)_findOrCreateBusinessIDForAddress:(id)arg1 addressID:(long long)arg2 businessMetadata:(id)arg3 connection:(id)arg4;
- (id)_groupingTrieForHighLevelDomain:(id)arg1;
- (bool)_hasCompletedRecentBCSSyncForAddressID:(long long)arg1 connection:(id)arg2;
- (id)_highLevelDomainsForBusinessIDs:(id)arg1;
- (long long)_insertBusinessWithBrandID:(long long)arg1 localizedBrandNames:(id)arg2 connection:(id)arg3;
- (long long)_insertBusinessWithDomain:(id)arg1 displayName:(id)arg2 connection:(id)arg3;
- (bool)_insertOrUpdateBusiness:(long long)arg1 forAddress:(long long)arg2 connection:(id)arg3;
- (bool)_insertOrUpdateBusinessCategoriesCategoryColumnForBusinessID:(long long)arg1 category:(unsigned long long)arg2 connection:(id)arg3;
- (id)_lastBCSSyncForAddressID:(long long)arg1 connection:(id)arg2;
- (id)_localizedStringFromJSONString:(id)arg1;
- (long long)_persistedBrandIDForExternalID:(id)arg1;
- (long long)_persistedBrandIDForString:(id)arg1;
- (id)_persistedBrandNamesForDictionary:(id)arg1;
- (id)_persistedDisplayNameForExternalID:(id)arg1;
- (id)_persistedDomainForExternalID:(id)arg1;
- (bool)_removeOldBusinessIDs:(id)arg1 connection:(id)arg2;
- (bool)_removeUserOverrideForAddressIDs:(id)arg1 timestamp:(id)arg2 connection:(id)arg3;
- (bool)_removeUserOverrideForBusinessID:(long long)arg1 timestamp:(id)arg2 connection:(id)arg3;
- (bool)_setUserOverrideForBusinessID:(long long)arg1 category:(unsigned long long)arg2 connection:(id)arg3 timestamp:(id)arg4;
- (bool)_updateBrandNamesForBusinessID:(long long)arg1 brandNames:(id)arg2 connection:(id)arg3;
- (bool)_updateBusinessAddressesCategoryColumnForAddressIDs:(id)arg1 category:(unsigned long long)arg2 connection:(id)arg3 timestamp:(id)arg4;
- (bool)_updateBusinessAddressesTableforBusinessID:(id)arg1 newBusinessID:(id)arg2 connection:(id)arg3;
- (bool)_updateBusinessIDForAddress:(id)arg1 addressID:(long long)arg2 emailItem:(id)arg3 connection:(id)arg4;
- (bool)_updateDisplayNameForBusinessID:(long long)arg1 displayName:(id)arg2 connection:(id)arg3;
- (id)addressIDsForBusinessID:(long long)arg1 connection:(id)arg2;
- (void)addressIDsWereDeleted:(id)arg1 connection:(id)arg2;
- (id)addressesForBusinessID:(long long)arg1;
- (void)backfillBusinessesTables;
- (id)businessAddressMapWithCategoryOverride;
- (id)businessDisplayNameForBusinessID:(long long)arg1;
- (id)businessExternalIDForBusinessID:(long long)arg1;
- (id)businessExternalIDForEmailAddress:(id)arg1 grouping:(long long)arg2;
- (long long)businessIDForAddressID:(long long)arg1;
- (long long)businessIDForBusinessExternalID:(id)arg1;
- (id)businessQueryService;
- (id)categoryTypeForAddressID:(long long)arg1;
- (id)categoryTypeForBusinessID:(long long)arg1;
- (unsigned long long)countOfAddressesNeedingUpdate;
- (void)countOfUserOverridesWithCompletionHandler:(id /* block */)arg1;
- (id)database;
- (void)fetchBusinessMetadataForAddresses:(id)arg1 completionHandler:(id /* block */)arg2;
- (long long)findOrCreateBusinessIDForAddress:(id)arg1 addressID:(long long)arg2 connection:(id)arg3;
- (id)hookRegistry;
- (id)initWithDatabase:(id)arg1 hookRegistry:(id)arg2;
- (void)insertOrUpdateUserOverrideForAddressIDs:(id)arg1 category:(unsigned long long)arg2 timestamp:(id)arg3;
- (void)insertOrUpdateUserOverrideForBusinessIDs:(id)arg1 category:(unsigned long long)arg2 timestamp:(id)arg3;
- (void)iterateAddressesNeedingUpdateWithCancelationToken:(id)arg1 handler:(id /* block */)arg2;
- (id)lastModifiedDateForAddressID:(long long)arg1;
- (void)persistenceDidReconcileProtectedData;
- (void)persistenceWillAddProtectedDatabaseIDsFromJournal:(id)arg1 andReplaceJournalDatabaseIDsWithProtectedDatabaseIDs:(id)arg2 forTable:(id)arg3;
- (void)removeAllUserOverrides;
- (void)removeUserOverrideForAddressIDs:(id)arg1 timestamp:(id)arg2;
- (void)removeUserOverridesForBusinessIDs:(id)arg1 timestamp:(id)arg2;
- (void)repopulateBusinessesTables;
- (void)setBusinessQueryService:(id)arg1;
- (void)setDatabase:(id)arg1;
- (id)updatedCategoryForAddressID:(long long)arg1 fromCategorizationResult:(id)arg2;

@end
