/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/EmailDaemon.framework/EmailDaemon
 */

@interface EDGroupedSender : EMRepositoryObject <EMMessageListItem, NSCopying, NSSecureCoding> {
    bool  _alwaysUseNewestItems;
    unsigned long long  _authenticatedCount;
    EDBusinessCloudStorage * _businessCloudStorage;
    long long  _businessID;
    NSString * _businessLogoID;
    EDBusinessPersistence * _businessPersistence;
    unsigned long long  _count;
    <ECEmailAddressConvertible> * _emailAddress;
    EMBusinessExternalID * _externalBusinessID;
    unsigned long long  _flagCount;
    ECMessageFlags * _flags;
    NSArray * _groupedSenderMessageListItems;
    bool  _isCCMe;
    unsigned long long  _isEditable;
    bool  _isToMe;
    unsigned long long  _loggedDisplayNameErrorCount;
    EDMessagePersistence * _messagePersistence;
    NSMutableArray * _messages;
    NSArray * _sortDescriptors;
    unsigned long long  _unreadCount;
    unsigned long long  _unseenCount;
    EMListUnsubscribeDetector * _unsubscribeDetector;
}

@property (readonly) bool allowAuthenticationWarning;
@property (nonatomic) bool alwaysUseNewestItems;
@property (nonatomic) unsigned long long authenticatedCount;
@property (nonatomic, readonly) NSURL *brandIndicatorLocation;
@property (nonatomic, retain) EDBusinessCloudStorage *businessCloudStorage;
@property (nonatomic, readonly, copy) NSString *businessDisplayName;
@property (nonatomic) long long businessID;
@property (nonatomic, copy) NSString *businessLogoID;
@property (nonatomic, retain) EDBusinessPersistence *businessPersistence;
@property (readonly) EMCategory *category;
@property (readonly, copy) NSArray *ccList;
@property (readonly) long long conversationID;
@property (readonly) long long conversationNotificationLevel;
@property (readonly) unsigned long long count;
@property (readonly) NSDate *date;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly) bool deleteMovesToTrash;
@property (readonly, copy) NSString *description;
@property (readonly) NSDate *displayDate;
@property (readonly) EFFuture *displayMessage;
@property (readonly) <EMCollectionItemID> *displayMessageItemID;
@property (readonly) EMObjectID *displayMessageObjectID;
@property (nonatomic, readonly, copy) NSString *ef_publicDescription;
@property (nonatomic, retain) <ECEmailAddressConvertible> *emailAddress;
@property (nonatomic, readonly, copy) EMBusinessExternalID *externalBusinessID;
@property (readonly, copy) NSIndexSet *flagColors;
@property (nonatomic) unsigned long long flagCount;
@property (readonly) ECMessageFlags *flags;
@property (readonly) EMFollowUp *followUp;
@property (readonly, copy) EMGeneratedSummary *generatedSummary;
@property (readonly) NSArray *groupedSenderMessageListItems;
@property (readonly) bool hasAttachments;
@property (readonly) bool hasUnflagged;
@property (readonly) unsigned long long hash;
@property (readonly) bool isAuthenticated;
@property (readonly) bool isBlocked;
@property (readonly) bool isCCMe;
@property (readonly) bool isEditable;
@property (readonly) bool isGroupedSender;
@property (readonly) bool isToMe;
@property (readonly) bool isVIP;
@property (nonatomic, readonly) <EMCollectionItemID> *itemID;
@property (readonly, copy) NSArray *mailboxObjectIDs;
@property (readonly, copy) NSArray *mailboxes;
@property (readonly, copy) NSArray *mailboxesIfAvailable;
@property (nonatomic, retain) EDMessagePersistence *messagePersistence;
@property (nonatomic, readonly, copy) NSArray *messages;
@property (nonatomic, readonly) EMMessage *newestMessage;
@property (nonatomic, readonly, copy) EMGroupedSenderObjectID *objectID;
@property (readonly) EMReadLater *readLater;
@property (readonly) NSDate *sendLaterDate;
@property (readonly, copy) NSArray *senderList;
@property (readonly) bool shouldArchiveByDefault;
@property (nonatomic, retain) NSArray *sortDescriptors;
@property (readonly) ECSubject *subject;
@property (readonly, copy) NSString *summary;
@property (readonly) Class superclass;
@property (readonly) bool supportsArchiving;
@property (readonly, copy) NSArray *toList;
@property (nonatomic) unsigned long long unreadCount;
@property (nonatomic) unsigned long long unseenCount;
@property (nonatomic, readonly) EMListUnsubscribeDetector *unsubscribeDetector;
@property (readonly) long long unsubscribeType;

+ (id)log;
+ (long long)maxGroupedSenderMessageListItemsCount;
+ (long long)maxMessageCount;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (unsigned long long)_authenticatedCountForMessages:(id)arg1;
- (unsigned long long)_flagCountForMessages:(id)arg1;
- (id)_newestMessageDescription;
- (id)_newestMessages:(long long)arg1;
- (id)_persistedBusinessDisplayName;
- (id)_recalculateGroupedSenderMessageListItems;
- (id)_senderDisplayName;
- (void)_trimMessages;
- (id)_uiChangeFrom:(id)arg1;
- (unsigned long long)_unreadCountForMessages:(id)arg1;
- (unsigned long long)_unseenCountForMessages:(id)arg1;
- (unsigned long long)_unseenCountForMessages:(id)arg1 lastSeenDate:(id)arg2 lastSeenDisplayDate:(id)arg3;
- (void)_updateCachedMessagesIfNeededWithMessageProvider:(id)arg1;
- (void)_updateGroupedSenderMessageListItems;
- (id)addMessages:(id)arg1;
- (bool)allowAuthenticationWarning;
- (bool)alwaysUseNewestItems;
- (unsigned long long)authenticatedCount;
- (id)brandIndicatorLocation;
- (id)businessCloudStorage;
- (id)businessDisplayName;
- (long long)businessID;
- (id)businessLogoID;
- (id)businessPersistence;
- (id)category;
- (id)ccList;
- (id)changeFrom:(id)arg1;
- (id)changeKeyPaths:(id)arg1 forMessages:(id)arg2 messageProvider:(id)arg3;
- (long long)conversationID;
- (long long)conversationNotificationLevel;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned long long)count;
- (id)date;
- (id)debugDescription;
- (bool)deleteMovesToTrash;
- (id)description;
- (id)displayDate;
- (id)displayMessage;
- (id)displayMessageItemID;
- (id)displayMessageObjectID;
- (bool)displayNamesMatch;
- (id)ef_publicDescription;
- (id)emailAddress;
- (void)encodeWithCoder:(id)arg1;
- (id)externalBusinessID;
- (id)flagColors;
- (unsigned long long)flagCount;
- (id)flags;
- (id)followUp;
- (id)generatedSummary;
- (id)groupedSenderMessageListItems;
- (bool)hasAttachments;
- (bool)hasUnflagged;
- (id)initWithBusinessID:(long long)arg1 externalBusinessID:(id)arg2 messages:(id)arg3 originatingQuery:(id)arg4 businessPersistence:(id)arg5 messagePersistence:(id)arg6 businessCloudStorage:(id)arg7 unsubscribeDetector:(id)arg8;
- (id)initWithCoder:(id)arg1;
- (id)initWithObjectID:(id)arg1 businessID:(long long)arg2 externalBusinessID:(id)arg3 messages:(id)arg4 sortDescriptors:(id)arg5 businessPersistence:(id)arg6 messagePersistence:(id)arg7 businessCloudStorage:(id)arg8 unsubscribeDetector:(id)arg9 unreadCount:(unsigned long long)arg10 unseenCount:(unsigned long long)arg11 alwaysUseNewestItems:(bool)arg12;
- (bool)isAuthenticated;
- (bool)isBlocked;
- (bool)isCCMe;
- (bool)isEditable;
- (bool)isEqual:(id)arg1;
- (bool)isGroupedSender;
- (bool)isToMe;
- (bool)isVIP;
- (id)itemID;
- (id)mailboxObjectIDs;
- (id)mailboxes;
- (id)mailboxesIfAvailable;
- (id)messagePersistence;
- (id)messages;
- (id)newestMessage;
- (id)persistedBusinessLogoID;
- (id)readLater;
- (id)recalculateUnseenCount;
- (id)removeMessages:(id)arg1 isGroupEmpty:(bool*)arg2 messageProvider:(id)arg3;
- (id)sendLaterDate;
- (id)senderList;
- (void)setAlwaysUseNewestItems:(bool)arg1;
- (void)setAuthenticatedCount:(unsigned long long)arg1;
- (void)setBusinessCloudStorage:(id)arg1;
- (void)setBusinessID:(long long)arg1;
- (void)setBusinessLogoID:(id)arg1;
- (void)setBusinessPersistence:(id)arg1;
- (void)setEmailAddress:(id)arg1;
- (void)setFlagCount:(unsigned long long)arg1;
- (void)setMessagePersistence:(id)arg1;
- (void)setSortDescriptors:(id)arg1;
- (void)setUnreadCount:(unsigned long long)arg1;
- (void)setUnseenCount:(unsigned long long)arg1;
- (bool)shouldArchiveByDefault;
- (id)sortDescriptors;
- (id)subject;
- (id)summary;
- (bool)supportsArchiving;
- (id)toList;
- (unsigned long long)unreadCount;
- (unsigned long long)unseenCount;
- (id)unsubscribeDetector;
- (long long)unsubscribeType;

@end
