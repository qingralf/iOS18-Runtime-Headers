/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/FPFS.framework/FPFS
 */

@interface libfssync.FPCK : NSObject <FSCheckerDelegate> {
    void $__lazy_storage_$_importIsRunning;
    void $__lazy_storage_$_vendorExcludedFolders;
    void accumulatedDownloads;
    void accumulatedFileSizes;
    void accumulatedSizeOfDisk;
    void accumulatedUploads;
    void detachedRoots;
    void discoveredBackupManifestVsFSSnapshotDiffCounters;
    void discoveredDiskBrokenInvariantsCounters;
    void discoveredDiskVsFSSnapshotDiffCounters;
    void discoveredFSSnapshotVsFPSnapshotDiffCounters;
    void discoveredReconciliationTableBrokenInvariantsCounters;
    void diskVsFSSnapshotIgnoredFilenames;
    void domainUserInfo;
    void fpSnapshotChecker;
    void fsSnapshotChecker;
    void ioContext;
    void isInvalidated;
    void launchOptions;
    void multipleHardlinksExtensions;
    void nilErrorIds;
    void numberOfBrokenFilesInBackupManifestCheck;
    void numberOfBrokenFilesInFSAndFSSnapshotCheck;
    void numberOfBrokenFilesInFSSnapshotAndFPSnapshotCheck;
    void numberOfBrokenFilesInReconciliationTableCheck;
    void numberOfFilesChecked;
    void numberOfReconciliationTableEntries;
    void openBackupDatabases;
    void pendingSetErrors;
    void pendingSetItemPayload;
    void pendingSetSize;
    void providerDomainID;
    void providerVersion;
    void reason;
    void repairStartTime;
    void repairedDiskBrokenInvariantsCounters;
    void repairedDiskVsFSSnapshotDiffCounters;
    void resultHandler;
    union { in /* Warning: Unrecognized filer type: 'u' using 'void*' */ void*x1; long x2; long x3; }  rootURL;
    void rootURLs;
    void runID;
    void saveCheckpoint;
    void sendDiagnostics;
    void shouldPause;
    void skippedLockedItems;
    void sqlDatabase;
    void superPendingSetErrors;
    void superPendingSetItemPayload;
    void superPendingSetSize;
    void telemetryReport;
    void totalDatalessItems;
    void totalMaterializedItems;
    void usingFPFS;
    void volumeRole;
}

@property (nonatomic) long long numberOfBrokenFilesInBackupManifestCheck;
@property (nonatomic) long long numberOfBrokenFilesInFSAndFSSnapshotCheck;
@property (nonatomic) long long numberOfBrokenFilesInFSSnapshotAndFPSnapshotCheck;
@property (nonatomic) long long numberOfBrokenFilesInReconciliationTableCheck;
@property (nonatomic) long long numberOfFilesChecked;
@property (nonatomic) long long numberOfReconciliationTableEntries;
@property (nonatomic, copy) NSDictionary *telemetryReport;

+ (bool)dumpDatabaseAt:(id)arg1 fullDump:(bool)arg2 writeTo:(id)arg3 error:(id*)arg4;

- (void).cxx_destruct;
- (bool)checker:(id)arg1 handleItem:(int)arg2 itemStatus:(const struct { bool x1; bool x2; bool x3; bool x4; bool x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; struct fpfs_fileattrs {} *x12; struct stat {} *x13; unsigned int x14; }*)arg3 under:(id)arg4 brokenInvariants:(unsigned long long)arg5;
- (bool)checker:(id)arg1 handleLockedItemAtPath:(id)arg2 handle:(const struct fpfs_item_handle { unsigned long long x1; unsigned long long x2; unsigned int x3; unsigned int x4; char *x5; int x6; unsigned int x7; }*)arg3;
- (void)dealloc;
- (id)init;
- (id)initWithDatabasesBackupsPaths:(id)arg1 volumeRole:(unsigned int)arg2 providerDomainID:(id)arg3 domainUserInfo:(id)arg4 reason:(unsigned long long)arg5 usingFPFS:(bool)arg6 iCDPackageDetection:(bool)arg7 useShouldPause:(bool)arg8 shouldPause:(id /* block */)arg9 sendDiagnostics:(id /* block */)arg10 saveCheckpoint:(id /* block */)arg11 isInvalidated:(id /* block */)arg12;
- (bool)launchFromURLs:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3 resultHandler:(id /* block */)arg4;
- (long long)numberOfBrokenFilesInBackupManifestCheck;
- (long long)numberOfBrokenFilesInFSAndFSSnapshotCheck;
- (long long)numberOfBrokenFilesInFSSnapshotAndFPSnapshotCheck;
- (long long)numberOfBrokenFilesInReconciliationTableCheck;
- (long long)numberOfFilesChecked;
- (long long)numberOfReconciliationTableEntries;
- (void)setNumberOfBrokenFilesInBackupManifestCheck:(long long)arg1;
- (void)setNumberOfBrokenFilesInFSAndFSSnapshotCheck:(long long)arg1;
- (void)setNumberOfBrokenFilesInFSSnapshotAndFPSnapshotCheck:(long long)arg1;
- (void)setNumberOfBrokenFilesInReconciliationTableCheck:(long long)arg1;
- (void)setNumberOfFilesChecked:(long long)arg1;
- (void)setNumberOfReconciliationTableEntries:(long long)arg1;
- (void)setTelemetryReport:(id)arg1;
- (id)telemetryReport;

@end
