/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/FRC.framework/FRC
 */

@interface Normalization : FRCMetalBase {
    <MTLComputePipelineState> * _denormalizeKernel;
    <MTLComputePipelineState> * _denormalizeToPlanarKernel;
    <MTLRenderPipelineState> * _denormalizeYCbCr10RenderKernel;
    <MTLRenderPipelineState> * _denormalizeYCbCr10UnpackedRenderKernel;
    <MTLRenderPipelineState> * _denormalizeYCbCr8RenderKernel;
    bool  _disableSIMDSum;
    <MTLBuffer> * _firstParamBuffer;
    <MTLComputePipelineState> * _normalizePackedToPlanarKernel;
    <MTLComputePipelineState> * _normalizePlanarToPlanarKernel;
    <MTLComputePipelineState> * _normalizeYUV420ToPlanarKernel;
    struct { 
        float sum; 
        float sum_of_square; 
    }  _prevSecondStat;
    <MTLBuffer> * _prevStatsBuffer;
    <MTLBuffer> * _secondParamBuffer;
    bool  _selfNormalization;
    <MTLSharedEvent> * _sharedEvent;
    MTLSharedEventListener * _sharedEventListener;
    unsigned long long  _signalValue;
    <MTLComputePipelineState> * _statisticsPackedKernel;
    <MTLComputePipelineState> * _statisticsPlanarKernel;
    <MTLComputePipelineState> * _statisticsYUV420Kernel;
    NSObject<OS_dispatch_queue> * _synchronizationQueue;
    bool  _useFloatAtomic;
    bool  _useSIMDSum;
    <MTLBuffer> * _vertsBuffer;
}

@property (nonatomic) bool selfNormalization;
@property (nonatomic) bool useFloatAtomic;
@property (nonatomic) bool useSIMDSum;

- (void).cxx_destruct;
- (struct { float x1; float x2; })calcAnchorParamsFromNormParams:(struct { float x1; float x2; float x3[2]; float x4[2]; int x5; })arg1 anchor:(int)arg2;
- (struct { float x1; float x2; int x3; })calcDeNormParamsFromNormaParams:(struct { float x1; float x2; float x3[2]; float x4[2]; int x5; })arg1 timeScale:(float)arg2;
- (struct { float x1; float x2; })calcFrameStatistics:(struct __CVBuffer { }*)arg1;
- (struct { float x1; float x2; })calcTextureStatistics:(id)arg1;
- (struct { float x1; float x2; })calcTextureStatisticsFromStatsBuffer:(id)arg1;
- (void)denormalizeFrame:(struct __CVBuffer { }*)arg1 destination:(struct __CVBuffer { }*)arg2 params:(const struct { float x1; float x2; float x3[2]; float x4[2]; int x5; }*)arg3 timeScale:(float)arg4 callback:(id /* block */)arg5;
- (void)encodeDenormalizationRenderToCommandBuffer:(id)arg1 source:(id)arg2 destination:(id)arg3 params:(struct { float x1; float x2; int x3; })arg4;
- (void)encodeDenormalizationToCommandBuffer:(id)arg1 source:(id)arg2 destination:(id)arg3 params:(struct { float x1; float x2; int x3; })arg4;
- (void)encodeNormalizationToCommandBuffer:(id)arg1 source:(id)arg2 destination:(id)arg3 configBuffer:(id)arg4;
- (void)encodeNormalizationToCommandBuffer:(id)arg1 source:(id)arg2 destination:(id)arg3 normParamBuffer:(id)arg4;
- (void)encodeNormalizationToCommandBuffer:(id)arg1 source:(id)arg2 destination:(id)arg3 params:(struct { float x1; float x2; })arg4;
- (void)encodeStatisticsToCommandBuffer:(id)arg1 texture:(id)arg2 stats:(id)arg3;
- (id)init;
- (id)initWithMode:(long long)arg1;
- (void)normalizeFramesFirstInput:(struct __CVBuffer { }*)arg1 secondInput:(struct __CVBuffer { }*)arg2 firstOutput:(struct __CVBuffer { }*)arg3 secondOutput:(struct __CVBuffer { }*)arg4 callback:(id /* block */)arg5;
- (void)normalizeWithParmas:(struct { float x1; float x2; float x3[2]; float x4[2]; int x5; })arg1 firstInput:(struct __CVBuffer { }*)arg2 secondInput:(struct __CVBuffer { }*)arg3 firstOutput:(struct __CVBuffer { }*)arg4 secondOutput:(struct __CVBuffer { }*)arg5;
- (bool)selfNormalization;
- (void)setSelfNormalization:(bool)arg1;
- (void)setUseFloatAtomic:(bool)arg1;
- (void)setUseSIMDSum:(bool)arg1;
- (void)setupMetal;
- (id)statsBufferForTexture:(id)arg1;
- (struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })threadsPerGroupForStats;
- (bool)useFloatAtomic;
- (bool)useSIMDSum;

@end
