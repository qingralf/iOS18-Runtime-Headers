/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/FileProviderDaemon.framework/FileProviderDaemon
 */

@interface FPDVolume : NSObject {
    int  _dev;
    NSObject<OS_dispatch_source> * _diskSpaceRecoveryTimer;
    bool  _isLibraryConfigured;
    NSNumber * _requiredDiskSpaceThresholdOverride;
    unsigned int  _role;
    NSString * _root;
    NSObject<OS_dispatch_queue> * _serialQueue;
    NSURL * _syncRootsDirectory;
    NSURL * _systemDirectory;
    NSUUID * _uuid;
    FPDVolumeManager * _volumeManager;
}

@property (nonatomic, readonly) int dev;
@property (nonatomic, readonly) bool isDefaultVolumeForCurrentPersona;
@property (nonatomic, readonly) bool isLibraryConfigured;
@property (nonatomic, readonly) NSURL *purgatoryDirectory;
@property (nonatomic, readonly) unsigned int role;
@property (nonatomic, readonly) NSString *root;
@property (nonatomic, readonly) NSURL *rootURL;
@property (nonatomic, readonly) NSURL *syncRootsDirectory;
@property (nonatomic, readonly) NSURL *systemDirectory;
@property (nonatomic, readonly) NSUUID *uuid;
@property (nonatomic, readonly) FPDVolumeManager *volumeManager;

+ (int)_getProviderDomainIDFromFD:(int)arg1 shortDescription:(id)arg2 location:(unsigned int)arg3 domainID:(id*)arg4 error:(id*)arg5;
+ (bool)getProviderDomainID:(id)arg1 location:(unsigned int)arg2 foundDomainID:(id*)arg3 error:(id*)arg4;
+ (id)prettyNameForDomain:(id)arg1;
+ (id)prettyNameForNsDomain:(id)arg1 provider:(id)arg2;
+ (unsigned int)volumeRoleForStatFS:(const struct statfs { unsigned int x1; int x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; struct fsid { int x_8_1_1[2]; } x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; BOOL x13[16]; BOOL x14[1024]; BOOL x15[1024]; unsigned int x16; unsigned int x17[7]; }*)arg1;

- (void).cxx_destruct;
- (bool)_computeKnownPathsForRole:(unsigned int)arg1;
- (id)_findDomainDirectory:(id)arg1 location:(unsigned int)arg2 error:(id*)arg3;
- (bool)_hasCloudStorageDirAtRoot;
- (id)_subAppSupportPathForDomain:(id)arg1 fileName:(id)arg2 error:(id*)arg3;
- (long long)currentAvailableDiskSpace;
- (id)description;
- (int)dev;
- (id)findProviderDomainDirectory:(id)arg1 location:(unsigned int)arg2 error:(id*)arg3;
- (id)initWithStatFS:(const struct statfs { unsigned int x1; int x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; struct fsid { int x_8_1_1[2]; } x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; BOOL x13[16]; BOOL x14[1024]; BOOL x15[1024]; unsigned int x16; unsigned int x17[7]; }*)arg1 knownRole:(unsigned int)arg2 volumeManager:(id)arg3;
- (bool)isDefaultVolume;
- (bool)isDefaultVolumeForCurrentPersona;
- (bool)isInLowDiskSpaceState;
- (bool)isLibraryConfigured;
- (bool)monitorLowDiskSpaceRecovery;
- (void)monitorLowDiskSpaceRecoveryForConcreteError:(id)arg1;
- (id)purgatoryDirectory;
- (id)readDomainsPropertiesUnderDirectoryAtURL:(id)arg1 error:(id*)arg2;
- (void)removeBrokenEbihilLinksFromRoot;
- (id)removedURL;
- (long long)requiredDiskSpaceThreshold;
- (unsigned int)role;
- (id)root;
- (id)rootURL;
- (id)rootURLForLocation:(unsigned int)arg1 error:(id*)arg2;
- (id)stateDirectoryURL:(id)arg1 error:(id*)arg2;
- (id)supportPathForDomain:(id)arg1 failIfNotExisting:(bool)arg2 error:(id*)arg3;
- (id)syncRootsDirectory;
- (id)systemDirectory;
- (id)temporaryDirectoryURL:(id)arg1 error:(id*)arg2;
- (id)uuid;
- (id)volumeManager;
- (bool)writeDomainsProperties:(id)arg1 underDirectoryAtURL:(id)arg2 error:(id*)arg3;

@end
