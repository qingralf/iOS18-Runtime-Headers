/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
 */

@interface GEOWalkingRouteMatcher : GEORouteMatcher {
    NSMutableArray * _candidateMatchesForSecondPass;
    struct GEOPolylineCoordinateRange { 
        struct PolylineCoordinate { 
            unsigned int index; 
            float offset; 
        } start; 
        struct PolylineCoordinate { 
            unsigned int index; 
            float offset; 
        } end; 
    }  _expectedCoordinateRange;
    struct PolylineCoordinate { 
        unsigned int index; 
        float offset; 
    }  _lastReferenceCoordinate;
    _GEOWalkingRouteMatcherTurnAroundManeuverInfo * _nearbyTurnAroundManeuverInfo;
    unsigned long long  _newStepProgressions;
    struct GEOPolylineCoordinateRange { 
        struct PolylineCoordinate { 
            unsigned int index; 
            float offset; 
        } start; 
        struct PolylineCoordinate { 
            unsigned int index; 
            float offset; 
        } end; 
    }  _possibleCoordinateRange;
    NSMutableArray * _recentLocations;
    struct GEOPolylineCoordinateRange { 
        struct PolylineCoordinate { 
            unsigned int index; 
            float offset; 
        } start; 
        struct PolylineCoordinate { 
            unsigned int index; 
            float offset; 
        } end; 
    }  _tolerableCoordinateRange;
    NSArray * _turnAroundManeuverInfos;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_addRecentLocation:(id)arg1 isOnRoute:(bool)arg2;
- (id)_candidateForSegment:(id)arg1 location:(id)arg2 previousRouteMatch:(id)arg3;
- (void)_considerCandidateMatch:(id)arg1;
- (id)_contiguousSegmentsForCandidates:(id)arg1;
- (id)_courseScoreInfoForSegment:(id)arg1 location:(id)arg2 currentRouteCoordinate:(struct PolylineCoordinate { unsigned int x1; float x2; })arg3;
- (double)_distanceFromRouteForLocation:(id)arg1 withinRange:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x_1_1_1; float x_1_1_2; } x1; struct PolylineCoordinate { unsigned int x_2_1_1; float x_2_1_2; } x2; })arg2 outRouteCoordinate:(out struct PolylineCoordinate { unsigned int x1; float x2; }*)arg3;
- (id)_distanceScoreInfoForSegment:(id)arg1 location:(id)arg2 distanceFromSegment:(double)arg3;
- (id)_distanceTraveledScoreInfoForSegment:(id)arg1 location:(id)arg2 currentRouteCoordinate:(struct PolylineCoordinate { unsigned int x1; float x2; })arg3;
- (void)_finishRouteMatch:(id)arg1 previousRouteMatch:(id)arg2 forLocation:(id)arg3;
- (id)_firstTimeOnRouteScoreInfoForSegment:(id)arg1 location:(id)arg2 currentRouteCoordinate:(struct PolylineCoordinate { unsigned int x1; float x2; })arg3;
- (double)_followingRouteScoreForRouteCoordinate:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (double)_maxMatchDistance:(double)arg1 routeCoordinate:(struct PolylineCoordinate { unsigned int x1; float x2; })arg2 previousMatchGood:(bool)arg3;
- (id)_nearStartOfStepScoreInfoForSegment:(id)arg1 location:(id)arg2 currentRouteCoordinate:(struct PolylineCoordinate { unsigned int x1; float x2; })arg3;
- (id)_nearTurnAroundManeuverScoreInfoForSegment:(id)arg1 location:(id)arg2 currentRouteCoordinate:(struct PolylineCoordinate { unsigned int x1; float x2; })arg3;
- (void)_resetExpectedCoordinateRange;
- (void)_resetExpectedCoordinateRangeIfNecessary;
- (double)_scoreForCandidateWithScoreInfos:(id)arg1;
- (void)_startRouteMatch;
- (bool)_supportsSnapping;
- (id)_topRouteMatchCandidate;
- (void)_updateNearbyTurnAroundManeuver;
- (id)initWithRoute:(id)arg1 auditToken:(id)arg2;

@end
