/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HealthAlgorithms.framework/HealthAlgorithms
 */

@interface HAWristTemperatureSession : NSObject {
    float  _a0CorrectionCoefficient;
    NSString * _algorithmVersion;
    float  _c0CorrectionCoefficient;
    unsigned char  _dataVersion;
    unsigned long long  _firstSampleOffset;
    bool  _isPublishable;
    NSMeasurement * _meanQuiescentPower;
    unsigned long long  _numWristTemperatures;
    NSData * _representation;
    NSDateInterval * _sessionInterval;
    NSMeasurement * _stdDevQuiescentPower;
}

@property (nonatomic, readonly) float a0CorrectionCoefficient;
@property (nonatomic, readonly) NSString *algorithmVersion;
@property (nonatomic, readonly) float c0CorrectionCoefficient;
@property (nonatomic, readonly) unsigned char dataVersion;
@property (nonatomic, readonly) unsigned long long firstSampleOffset;
@property (nonatomic, readonly) bool isPublishable;
@property (nonatomic, readonly) NSMeasurement *meanQuiescentPower;
@property (nonatomic, readonly) unsigned long long numWristTemperatures;
@property (nonatomic, readonly) NSData *representation;
@property (nonatomic, readonly) NSDateInterval *sessionInterval;
@property (nonatomic, readonly) NSMeasurement *stdDevQuiescentPower;
@property (nonatomic, readonly, copy) HAWristTemperatureEnumerator *wristTemperatureEnumerator;

- (void).cxx_destruct;
- (float)a0CorrectionCoefficient;
- (id)algorithmVersion;
- (float)c0CorrectionCoefficient;
- (unsigned char)dataVersion;
- (unsigned long long)firstSampleOffset;
- (id)initWithBinarySampleRepresentation:(id)arg1 metadata:(id)arg2 timestamp:(id)arg3;
- (bool)isPublishable;
- (id)meanQuiescentPower;
- (unsigned long long)numWristTemperatures;
- (bool)parsePacket:(struct variant<PackedWristTemperatureHeaderV0, PackedWristTemperatureHeaderV1> { struct __impl<PackedWristTemperatureHeaderV0, PackedWristTemperatureHeaderV1> { union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 0UL, PackedWristTemperatureHeaderV0, PackedWristTemperatureHeaderV1> { BOOL x_1_2_1; struct __alt<0UL, PackedWristTemperatureHeaderV0> { struct PackedWristTemperatureHeaderV0 { unsigned char x_1_4_1; double x_1_4_2; unsigned char x_1_4_3; float x_1_4_4; float x_1_4_5; float x_1_4_6; float x_1_4_7; } x_2_3_1; } x_1_2_2; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 1UL, PackedWristTemperatureHeaderV1> { BOOL x_3_3_1; struct __alt<1UL, PackedWristTemperatureHeaderV1> { struct PackedWristTemperatureHeaderV1 { unsigned char x_1_5_1; double x_1_5_2; unsigned char x_1_5_3; float x_1_5_4; float x_1_5_5; float x_1_5_6; float x_1_5_7; unsigned char x_1_5_8; } x_2_4_1; } x_3_3_2; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 2UL> { } x_3_3_3; } x_1_2_3; } x_1_1_1; unsigned int x_1_1_2; } x1; })arg1;
- (id)representation;
- (id)sessionInterval;
- (id)sessionIntervalV0WithStartTime:(double)arg1;
- (id)stdDevQuiescentPower;
- (id)wristTemperatureEnumerator;

@end
