/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
 */

@interface HDCodableNotificationInstructionMessage : PBCodable <NSCopying> {
    long long  _action;
    NSString * _categoryIdentifier;
    NSString * _clientIdentifier;
    double  _creationDateTimeInterval;
    HDCodableNotificationInstructionCriteria * _criteria;
    long long  _currentCompatibilityVersion;
    double  _expirationDateTimeInterval;
    struct { 
        unsigned int action : 1; 
        unsigned int creationDateTimeInterval : 1; 
        unsigned int currentCompatibilityVersion : 1; 
        unsigned int expirationDateTimeInterval : 1; 
        unsigned int minimumCompatibleVersion : 1; 
    }  _has;
    long long  _minimumCompatibleVersion;
    NSString * _sendingDeviceInfo;
}

@property (nonatomic) long long action;
@property (nonatomic, retain) NSString *categoryIdentifier;
@property (nonatomic, retain) NSString *clientIdentifier;
@property (nonatomic) double creationDateTimeInterval;
@property (nonatomic, retain) HDCodableNotificationInstructionCriteria *criteria;
@property (nonatomic) long long currentCompatibilityVersion;
@property (nonatomic) double expirationDateTimeInterval;
@property (nonatomic) bool hasAction;
@property (nonatomic, readonly) bool hasCategoryIdentifier;
@property (nonatomic, readonly) bool hasClientIdentifier;
@property (nonatomic) bool hasCreationDateTimeInterval;
@property (nonatomic, readonly) bool hasCriteria;
@property (nonatomic) bool hasCurrentCompatibilityVersion;
@property (nonatomic) bool hasExpirationDateTimeInterval;
@property (nonatomic) bool hasMinimumCompatibleVersion;
@property (nonatomic, readonly) bool hasSendingDeviceInfo;
@property (nonatomic) long long minimumCompatibleVersion;
@property (nonatomic, retain) NSString *sendingDeviceInfo;

- (void).cxx_destruct;
- (long long)action;
- (id)categoryIdentifier;
- (id)clientIdentifier;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (double)creationDateTimeInterval;
- (id)criteria;
- (long long)currentCompatibilityVersion;
- (id)description;
- (id)dictionaryRepresentation;
- (double)expirationDateTimeInterval;
- (bool)hasAction;
- (bool)hasCategoryIdentifier;
- (bool)hasClientIdentifier;
- (bool)hasCreationDateTimeInterval;
- (bool)hasCriteria;
- (bool)hasCurrentCompatibilityVersion;
- (bool)hasExpirationDateTimeInterval;
- (bool)hasMinimumCompatibleVersion;
- (bool)hasSendingDeviceInfo;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (void)mergeFrom:(id)arg1;
- (long long)minimumCompatibleVersion;
- (bool)readFrom:(id)arg1;
- (id)sendingDeviceInfo;
- (void)setAction:(long long)arg1;
- (void)setCategoryIdentifier:(id)arg1;
- (void)setClientIdentifier:(id)arg1;
- (void)setCreationDateTimeInterval:(double)arg1;
- (void)setCriteria:(id)arg1;
- (void)setCurrentCompatibilityVersion:(long long)arg1;
- (void)setExpirationDateTimeInterval:(double)arg1;
- (void)setHasAction:(bool)arg1;
- (void)setHasCreationDateTimeInterval:(bool)arg1;
- (void)setHasCurrentCompatibilityVersion:(bool)arg1;
- (void)setHasExpirationDateTimeInterval:(bool)arg1;
- (void)setHasMinimumCompatibleVersion:(bool)arg1;
- (void)setMinimumCompatibleVersion:(long long)arg1;
- (void)setSendingDeviceInfo:(id)arg1;
- (void)writeTo:(id)arg1;

@end
