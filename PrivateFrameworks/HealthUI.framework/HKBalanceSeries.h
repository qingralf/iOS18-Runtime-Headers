/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HealthUI.framework/HealthUI
 */

@interface HKBalanceSeries : HKGraphSeries {
    void $__lazy_storage_$_backgroundInactiveFillStyle;
    void $__lazy_storage_$_innerFillStyle;
    void $__lazy_storage_$_metricsLineStrokeStyle;
    void $__lazy_storage_$_primaryInRangeFillStyle;
    void $__lazy_storage_$_primaryOutOfRangeFillStyle;
    void $__lazy_storage_$_secondaryInRangeFillStyle;
    void $__lazy_storage_$_secondaryOutOfRangeFillStyle;
    void $__lazy_storage_$_warmupFillStyle;
    void $__lazy_storage_$_warmupInnerFillStyle;
    void lollipopPathRangeLock;
    union { in /* Warning: Unrecognized filer type: 'u' using 'void*' */ void*x1; long x2; long x3; }  selectedMetric;
}

- (void).cxx_destruct;
- (bool)blockCoordinateIsVisibleInsideOfChartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 blockCoordinate:(id)arg2;
- (id)coordinatesForBlock:(id)arg1 blockPath:(struct HKGraphSeriesDataBlockPath { long long x1; long long x2; long long x3; })arg2 xAxis:(id)arg3 yAxis:(id)arg4;
- (double)distanceFromPoint:(struct CGPoint { double x1; double x2; })arg1 blockCoordinate:(id)arg2 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)drawSeriesWithBlockCoordinates:(id)arg1 axisRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 zoomLevelConfiguration:(id)arg3 pointTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg4 renderContext:(struct CGContext { }*)arg5 secondaryRenderContext:(id)arg6 seriesRenderingDelegate:(id)arg7;
- (void)finishSelection;
- (id)init;
- (id)marginsForYAxis:(id)arg1 xAxisRange:(id)arg2 zoomLevel:(long long)arg3 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (void)selectPathsinPathRange:(struct { struct { struct HKGraphSeriesDataBlockPath { long long x_1_2_1; long long x_1_2_2; long long x_1_2_3; } x_1_1_1; long long x_1_1_2; } x1; struct { struct HKGraphSeriesDataBlockPath { long long x_1_2_1; long long x_1_2_2; long long x_1_2_3; } x_2_1_1; long long x_2_1_2; } x2; })arg1 coordinateRange:(id)arg2;
- (bool)supportsMultiTouchSelection;
- (double)xAxisDistanceFromPoint:(struct CGPoint { double x1; double x2; })arg1 blockCoordinate:(id)arg2 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (double)yAxisDifferenceToPoint:(struct CGPoint { double x1; double x2; })arg1 blockCoordinate:(id)arg2 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;

@end
