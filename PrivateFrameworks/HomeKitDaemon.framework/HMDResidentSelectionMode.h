/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HomeKitDaemon.framework/HomeKitDaemon
 */

@interface HMDResidentSelectionMode : NSObject <HMDResidentSelectionMode, HMFLogging, HMFMessageReceiver, HMFTimerDelegate> {
    NSString * _backgroundTaskIdentifier;
    HMDBackgroundTaskManager * _backgroundTaskManager;
    <HMDResidentDeviceManagerContext> * _context;
    <HMDResidentSelectionModeDelegate> * _delegate;
    HMDIDSServerBag * _idsServerBag;
    HMDPreferredResidentsList * _localPreferredResidentsList;
    HMDPreferredResidentsList * _preferredResidentsListFromElector;
    HMDResidentSelectionStatusKit * _presentResidentsStatuses;
    unsigned long long  _primaryChangedReason;
    NSObject<OS_dispatch_queue> * _queue;
    NSDictionary * _residentIDSIdentifierToLocationMap;
    HMDResidentSelectionInfo * _residentSelectionInfoFromWorkingStore;
    NSEnumerator * _residentsEnumerator;
    id /* block */  _selectionCompletion;
    HMFTimer * _takeOverIfPrimaryIsNotViableTimer;
    HMFTimer * _takeOverTimer;
}

@property (nonatomic, readonly, copy) NSString *backgroundTaskIdentifier;
@property (nonatomic, readonly) HMDBackgroundTaskManager *backgroundTaskManager;
@property (nonatomic, readonly) <HMDResidentDeviceManagerContext> *context;
@property (readonly) unsigned long long currentModeType;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property <HMDResidentSelectionModeDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) HMDIDSServerBag *idsServerBag;
@property (retain) HMDPreferredResidentsList *localPreferredResidentsList;
@property (nonatomic, readonly) NSSet *locallyReachableResidents;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *messageReceiveQueue; /* unknown property attribute: ? */
@property (nonatomic, readonly) NSUUID *messageTargetUUID;
@property (readonly) unsigned long long preferredListGenerationEndHour;
@property (readonly) unsigned long long preferredListGenerationStartHour;
@property (retain) HMDPreferredResidentsList *preferredResidentsListFromElector;
@property (retain) HMDResidentSelectionStatusKit *presentResidentsStatuses;
@property unsigned long long primaryChangedReason;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *queue;
@property (retain) NSDictionary *residentIDSIdentifierToLocationMap;
@property (retain) HMDResidentSelectionInfo *residentSelectionInfoFromWorkingStore;
@property (retain) NSEnumerator *residentsEnumerator;
@property (copy) id /* block */ selectionCompletion;
@property (nonatomic, readonly) NSArray *sortedResidents;
@property (readonly) Class superclass;
@property (retain) HMFTimer *takeOverIfPrimaryIsNotViableTimer;
@property (retain) HMFTimer *takeOverTimer;

+ (id)logCategory;

- (void).cxx_destruct;
- (bool)_allResidentsHaveSameLocationStatus:(unsigned long long)arg1;
- (bool)_currentDevicePreferredResidentsListIsPublished;
- (void)_evaluatePrimaryChangedReason;
- (void)_evaluatePrimaryChangedReasonForCurrentSelectionInfo:(id)arg1 previousSelectionInfo:(id)arg2;
- (id)_generatePreferredResidentsList;
- (id)_highestVersionLowestUUIDResident;
- (bool)_isViableUserPreferredResident:(id)arg1;
- (id)_nextResidentsListGenerationDate;
- (bool)_preferredResidentsListFromElectorUpdated;
- (unsigned long long)_preferredResidentsListMaxSize;
- (void)_publishElectorsList;
- (void)_publishPreferredResidentsList:(id)arg1;
- (void)_registerForMessagesAsAResident;
- (void)_rescheduleTakeOverIfPrimaryIsNotViableTimerWithTimeInterval:(double)arg1;
- (void)_rescheduleTakeOverTimer;
- (bool)_shouldTakeOverBasedOnReachability;
- (id)_sortResidentsByLatestVersionLowestUUID:(id)arg1;
- (id)_sortResidentsUsingAllCriteria:(id)arg1;
- (double)_statusDebounceInterval;
- (double)_takeOverIfPrimaryIsNotViableInterval;
- (unsigned long long)_takeOverOnlyIfCurrentPrimaryIsNotViableJitter;
- (double)_takeOverTimerInterval;
- (bool)_updateLocalPreferredResidentsList;
- (bool)allResidentsAboveMeAreUnreachableIn:(id)arg1;
- (bool)allowExternalUpdateOfPrimaryResidentTo:(id)arg1 selectionTimestamp:(id)arg2;
- (id)backgroundTaskIdentifier;
- (id)backgroundTaskManager;
- (id)backupsForResident:(id)arg1;
- (void)cancelAllTakeOverTimers;
- (long long)compareLocationResident1:(id)arg1 resident2:(id)arg2;
- (long long)compareNetworkConnectionResident1:(id)arg1 resident2:(id)arg2;
- (long long)compareProductTypeResident1:(id)arg1 resident2:(id)arg2;
- (void)configureAsAResidentWithRunPrimaryEvaluation:(bool)arg1;
- (id)context;
- (id /* block */)createSelectionMessageCompletion;
- (void)currentDeviceReadyAsAResident;
- (unsigned long long)currentModeType;
- (id)delegate;
- (void)deregisterForMessages;
- (void)didFailResidentSelectionWithResident:(id)arg1 error:(id)arg2;
- (void)didReceiveSelectionMessage:(id)arg1;
- (void)didSucceedResidentSelectionWithPreferred:(id)arg1;
- (void)didUpdateResidentSelectionModelTo:(id)arg1;
- (void)didUpdateResidentStatus:(id)arg1 residentsFound:(id)arg2 residentsLost:(id)arg3;
- (id)dumpState;
- (void)handleDailyPreferredResidentsListRegenerationNotification:(id)arg1;
- (void)handleMeshInformationRequest:(id)arg1;
- (void)handleTakeOverIfPrimaryIsNotViableTimerFired;
- (void)handleTakeOverTimerFired;
- (void)handleWeAreSelectedAsThePreferredPrimaryWithInfo:(id)arg1 selectionMessage:(id)arg2;
- (void)handleWeAreSelectedAsThePreferredPrimaryWithSelectionTimestamp:(id)arg1 selectionMessage:(id)arg2;
- (bool)hasViablePrimaryResidentWithSelectionInfo:(id)arg1;
- (id)idsServerBag;
- (id)initWithContext:(id)arg1;
- (id)initWithContext:(id)arg1 backgroundTaskManager:(id)arg2;
- (id)localPreferredResidentsList;
- (id)locallyReachableResidents;
- (unsigned long long)locationOfResident:(id)arg1;
- (id)logIdentifier;
- (id)messageReceiveQueue;
- (id)messageTargetUUID;
- (unsigned long long)messageTransportRestriction;
- (bool)newPrimaryIsInREv2BasedOnTheirTimestamp:(id)arg1 ourSelectionInfo:(id)arg2;
- (void)performSelectionWithPreferredPrimaryResident:(id)arg1 requireAutoUpdate:(bool)arg2 reason:(unsigned long long)arg3 completion:(id /* block */)arg4;
- (unsigned long long)preferredListGenerationEndHour;
- (unsigned long long)preferredListGenerationStartHour;
- (id)preferredResidentsListFromElector;
- (id)preferredResidentsRemovedFromHome;
- (id)presentResidentsStatuses;
- (unsigned long long)primaryChangedReason;
- (void)primaryResidentChanged:(id)arg1 previousResidentDevice:(id)arg2;
- (id)productTypePreferenceList;
- (id)queue;
- (id)residentIDSIdentifierToLocationMap;
- (bool)residentIsLocallyReachable:(id)arg1;
- (id)residentSelectionInfoFromWorkingStore;
- (id)residentSelectionInfoWithOurselvesAsThePreferredWithTimestamp:(id)arg1;
- (id)residentsEnumerator;
- (id)residentsNotPresentInPreferredResidentsList:(id)arg1;
- (void)scheduleDailyPreferredResidentsListRegenerationTask;
- (void)scheduleTakeOverTimerIfRequiredAfterBlockDuration:(double)arg1;
- (void)selectPrimaryResidentFromResidents:(id)arg1 requireAutoUpdate:(bool)arg2 completion:(id /* block */)arg3;
- (id /* block */)selectionCompletion;
- (void)sendSelectionMessageToResident:(id)arg1 requireAutoUpdate:(bool)arg2 completion:(id /* block */)arg3;
- (void)setDelegate:(id)arg1;
- (void)setLocalPreferredResidentsList:(id)arg1;
- (void)setPreferredResidentsListFromElector:(id)arg1;
- (void)setPresentResidentsStatuses:(id)arg1;
- (void)setPrimaryChangedReason:(unsigned long long)arg1;
- (void)setResidentIDSIdentifierToLocationMap:(id)arg1;
- (void)setResidentSelectionInfoFromWorkingStore:(id)arg1;
- (void)setResidentsEnumerator:(id)arg1;
- (void)setSelectionCompletion:(id /* block */)arg1;
- (void)setTakeOverIfPrimaryIsNotViableTimer:(id)arg1;
- (void)setTakeOverTimer:(id)arg1;
- (bool)shouldRegeneratePreferredResidentsListBasedOnFoundResidents:(id)arg1 residentLocationMap:(id)arg2;
- (bool)shouldTakeOverAsTheCurrentPrimaryWithSelectionInfo:(id)arg1 isTimerTriggered:(bool)arg2;
- (id)sortedResidents;
- (void)start;
- (void)stop;
- (bool)takeOverIfConditionsAreMetWithIsTimerTriggered:(bool)arg1;
- (id)takeOverIfPrimaryIsNotViableTimer;
- (bool)takeOverIfPrimaryIsNotViableWithIsTimerTriggered:(bool)arg1;
- (id)takeOverTimer;
- (void)takeOverWithSelectionTimestamp:(id)arg1;
- (void)timerDidFire:(id)arg1;
- (id)userPreferredResidentPerSelectionInfo:(id)arg1;
- (id)wiredResidentIDSIdentifiers;

@end
