/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HomeKitDaemon.framework/HomeKitDaemon
 */

@interface HMDUserActivityType3Detector : HMDUserActivityStateDetector <HMDUserActivityType3FocusListenerDelegate, HMDUserActivityType3ScheduleListenerDelegate> {
    HMDBackgroundTaskManager * _backgroundTaskManager;
    HMDUserActivityType3FocusListener * _focusListener;
    NSString * _identifier;
    HMFPreferences * _preferences;
    HMDUserActivityType3ScheduleListener * _scheduleListener;
    unsigned long long  _state;
}

@property (nonatomic, readonly) HMDBackgroundTaskManager *backgroundTaskManager;
@property (nonatomic, readonly) HMDUserActivityType3FocusListener *focusListener;
@property (nonatomic, readonly) NSString *identifier;
@property (nonatomic) HMFPreferences *preferences;
@property (nonatomic, readonly) HMDUserActivityType3ScheduleListener *scheduleListener;
@property (nonatomic) unsigned long long state;

+ (unsigned long long)contributorType;

- (void).cxx_destruct;
- (bool)_moveToTransitionalStateWithTransitionInterval:(double)arg1;
- (bool)_updateState:(unsigned long long)arg1;
- (bool)_updateStateWithFocus:(id)arg1;
- (bool)_updateStateWithSchedule:(id)arg1;
- (bool)_updateStateWithTransitionTime:(id)arg1;
- (id)backgroundTaskManager;
- (void)configureWithCompletion:(id /* block */)arg1;
- (bool)evaluate;
- (void)evaluateAndSetInitialReport;
- (void)evaluateAndUpdateLatestReport;
- (void)focusDidTrigger;
- (id)focusListener;
- (void)handleTimerFiredNotification:(id)arg1;
- (id)identifier;
- (id)initWithDataSource:(id)arg1;
- (id)initWithIdentifier:(id)arg1 dataSource:(id)arg2 focusListener:(id)arg3 scheduleListener:(id)arg4 backgroundTaskManager:(id)arg5 preferences:(id)arg6;
- (id)preferences;
- (id)scheduleListener;
- (void)scheduleStateDidAutomaticallyUpdate;
- (void)setPreferences:(id)arg1;
- (void)setState:(unsigned long long)arg1;
- (bool)shouldIgnoreFocus:(id)arg1;
- (bool)shouldIgnoreSchedule:(id)arg1;
- (unsigned long long)state;
- (void)submitLogEventWithOldState:(unsigned long long)arg1 logReason:(unsigned long long)arg2;
- (long long)transitionIntervalInSeconds;
- (void)updateLatestReportWithReason:(unsigned long long)arg1;
- (void)userDidUpdateSchedule;

@end
