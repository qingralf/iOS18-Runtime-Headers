/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HomeKitMatter.framework/HomeKitMatter
 */

@interface HMMTRAccessoryServer : HAPAccessoryServer <HMFLogging, HMFTimerDelegate, MTRDeviceControllerDelegate, MTRDeviceDelegate> {
    HMFActivity * _activity;
    NSMutableDictionary * _attributeTimers;
    bool  _bleScanPending;
    bool  _blockInvalidation;
    NSNumber * _bridgedAccessoryReachabilityReaderTimeoutNSecs;
    HMMTRAccessoryServerBrowser * _browser;
    bool  _certified;
    NSMutableDictionary * _characteristicProtocolMappingStates;
    <HMMTRAccessoryServerDelegate> * _chipDelegate;
    id /* block */  _chipReportHandler;
    NSMutableDictionary * _clusterIDCharacteristicMap;
    bool  _commissioneeHasActiveNetwork;
    NSNumber * _commissioneeNetworkCommissioningClusterEndpoint;
    NSArray * _commissioneeNetworks;
    bool  _commissioningCompleted;
    NSError * _commissioningFailureOverridingError;
    NSUUID * _commissioningID;
    bool  _commissioningSessionEstablished;
    bool  _controllerRevokeHandlerRegistered;
    HMMTRControllerWrapper * _controllerWrapper;
    HMMTRMetricBundle * _currentMetricBundle;
    HMMTRPairing * _currentPairingInfo;
    NSData * _defaultThreadOperationalDataset;
    id /* block */  _defaultThreadOperationalDatasetReceiveBlock;
    bool  _defaultThreadOperationalDatasetRetrieved;
    bool  _deferStartThreadForPairing;
    bool  _delayDiscovery;
    id /* block */  _descriptorClusterManager;
    NSString * _deviceConnectedStateCaptureInformation;
    unsigned long long  _deviceConnectedStateHandle;
    <HMMTRAccessoryServerDiagnosticsEventDelegate> * _diagnosticsEventDelegate;
    bool  _discoveredOverBLE;
    NSNumber * _discriminator;
    bool  _discriminatorIsOriginatedFromShort;
    HMMTRSyncClusterDoorLock * _doorLockCluster;
    HMFFuture * _doorLockClusterFuture;
    NSString * _eMACAddress;
    NSNumber * _fabricID;
    bool  _fullServiceEnumerationPendingCachePrimedEvent;
    HMMTRHAPEnumerator * _hapEnumerator;
    bool  _hasPriorSuccessfulPairing;
    <HMMTRHMDHAPAccessoryDelegate> * _hmdHAPAccessoryDelegate;
    NSUUID * _initialMTRDeviceStateTimeoutId;
    bool  _knownToSystemCommissioner;
    NSError * _lastFabricLabelUpdateError;
    NSArray * _lastPendingFabricLabel;
    long long  _linkLayerType;
    bool  _locallyDiscovered;
    MTRDevice * _matterDevice;
    HMMTRFirmwareUpdateStatus * _matterFirmwareUpdateStatus;
    HMMTRDuration * _maxMetricDuration;
    bool  _mtrDeviceConnected;
    bool  _mtrDeviceStateReported;
    unsigned int  _networkProvisioningFailures;
    NSNumber * _nodeID;
    NSNumber * _objectID;
    NSString * _onboardingSetupPayloadString;
    bool  _operationDisabled;
    unsigned long long  _operationDisabledReason;
    NSData * _originalPairingAttemptOperationalCert;
    NSData * _originalPairingAttemptRootCert;
    HMMTROTAAnnounceTimer * _otaAnnounceTimer;
    HMMTROTAApplyUpdateRequestTimer * _otaApplyUpdateRequestTimer;
    NSFileHandle * _otaFileHandle;
    NSNumber * _otaFileOffset;
    HMMTROTAApplyUpdateTimer * _otaUpdateTimer;
    NSData * _otaUpdateToken;
    long long  _pairedState;
    NSMutableDictionary * _pairingDurationDictionary;
    HMMTRAccessoryPairingEndContext * _pairingEndContextWhenRemove;
    unsigned long long  _pairingProgress;
    HMMTRFabric * _pairingTargetFabric;
    NSUUID * _pairingTargetHomeUUID;
    HMFTimer * _pairingTimer;
    bool  _pairingUsingMatterSupport;
    unsigned long long  _partsListStateCaptureHandle;
    NSString * _partsListStateCaptureInformation;
    NSMutableDictionary * _pendingMTRDeviceReadReadyHandlers;
    HAPAccessory * _primaryAccessory;
    NSNumber * _productID;
    NSString * _productNameFromDcl;
    HMMTRAccessoryReachabilityManager * _reachabilityManager;
    bool  _removalInProgress;
    NSError * _removeReason;
    HMMTRAttributeReportDistributor * _reportDistributor;
    bool  _requiresThreadRouter;
    HMFTimer * _residentReachabilityUpdateWaitTimer;
    bool  _serviceEnumerationFailed;
    NSMutableArray * _serviceEnumerationFromDeviceCompletionHandlers;
    bool  _serviceEnumerationInProgress;
    bool  _servicesEnumerated;
    NSNumber * _setUpPINCode;
    NSString * _setupPayloadString;
    bool  _shouldPairWithoutResident;
    NSNumber * _softwareVersionNumber;
    NSString * _softwareVersionString;
    id /* block */  _stageCompletion;
    id /* block */  _stageDeviceCredentialHandler;
    bool  _stageNetworkScanRequested;
    id /* block */  _stageProgressUpdateHandler;
    id /* block */  _stageThreadScanResultsHandler;
    id /* block */  _stageWiFiScanResultsHandler;
    HMFTimer * _stateCaptureConfigChangeTimer;
    HMFTimer * _stateCaptureDeviceConnectedTimer;
    HMMTRStorage * _storage;
    bool  _storageUpdatePending;
    NSNumber * _supportedLinkLayerTypes;
    NSData * _topology;
    NSNumber * _vendorID;
    NSString * _vendorNameFromDcl;
    bool  _wedDevice;
}

@property (nonatomic, readonly) HMFActivity *activity;
@property (nonatomic, retain) NSMutableDictionary *attributeTimers;
@property (nonatomic) bool bleScanPending;
@property (nonatomic) bool blockInvalidation;
@property (nonatomic, retain) NSNumber *bridgedAccessoryReachabilityReaderTimeoutNSecs;
@property (nonatomic) HMMTRAccessoryServerBrowser *browser;
@property (getter=isCertified, nonatomic) bool certified;
@property (nonatomic, readonly) NSMutableDictionary *characteristicProtocolMappingStates;
@property (nonatomic) <HMMTRAccessoryServerDelegate> *chipDelegate;
@property (copy) id /* block */ chipReportHandler;
@property (nonatomic, retain) NSMutableDictionary *clusterIDCharacteristicMap;
@property (nonatomic) bool commissioneeHasActiveNetwork;
@property (nonatomic, retain) NSNumber *commissioneeNetworkCommissioningClusterEndpoint;
@property (nonatomic, retain) NSArray *commissioneeNetworks;
@property (nonatomic) bool commissioningCompleted;
@property (nonatomic, retain) NSError *commissioningFailureOverridingError;
@property (nonatomic, retain) NSUUID *commissioningID;
@property (nonatomic) bool commissioningSessionEstablished;
@property (nonatomic) bool controllerRevokeHandlerRegistered;
@property (retain) HMMTRControllerWrapper *controllerWrapper;
@property (nonatomic, retain) HMMTRMetricBundle *currentMetricBundle;
@property (nonatomic, readonly) HMMTRPairing *currentPairing;
@property (nonatomic, retain) HMMTRPairing *currentPairingInfo;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (nonatomic, retain) NSData *defaultThreadOperationalDataset;
@property (nonatomic, copy) id /* block */ defaultThreadOperationalDatasetReceiveBlock;
@property (nonatomic) bool defaultThreadOperationalDatasetRetrieved;
@property (nonatomic) bool deferStartThreadForPairing;
@property (nonatomic) bool delayDiscovery;
@property (readonly, copy) NSString *description;
@property (copy) id /* block */ descriptorClusterManager;
@property (nonatomic, retain) NSString *deviceConnectedStateCaptureInformation;
@property (nonatomic) unsigned long long deviceConnectedStateHandle;
@property (nonatomic, readonly) MTRDeviceController *deviceController;
@property (nonatomic) <HMMTRAccessoryServerDiagnosticsEventDelegate> *diagnosticsEventDelegate;
@property (nonatomic) bool discoveredOverBLE;
@property (nonatomic, retain) NSNumber *discriminator;
@property (nonatomic) bool discriminatorIsOriginatedFromShort;
@property (retain) HMMTRSyncClusterDoorLock *doorLockCluster;
@property (retain) HMFFuture *doorLockClusterFuture;
@property (nonatomic, retain) NSString *eMACAddress;
@property (nonatomic, retain) NSNumber *fabricID;
@property (nonatomic) bool fullServiceEnumerationPendingCachePrimedEvent;
@property (nonatomic, readonly) HMMTRHAPEnumerator *hapEnumerator;
@property (readonly) bool hasPreferredLocalLink;
@property (nonatomic) bool hasPriorSuccessfulPairing;
@property (readonly) unsigned long long hash;
@property (nonatomic) <HMMTRHMDHAPAccessoryDelegate> *hmdHAPAccessoryDelegate;
@property (retain) NSUUID *initialMTRDeviceStateTimeoutId;
@property (nonatomic) bool knownToSystemCommissioner;
@property (nonatomic, retain) NSError *lastFabricLabelUpdateError;
@property (nonatomic, retain) NSArray *lastPendingFabricLabel;
@property (nonatomic) long long linkLayerType;
@property (nonatomic) bool locallyDiscovered;
@property (retain) MTRDevice *matterDevice;
@property (nonatomic, retain) HMMTRFirmwareUpdateStatus *matterFirmwareUpdateStatus;
@property (nonatomic, retain) HMMTRDuration *maxMetricDuration;
@property (nonatomic) bool mtrDeviceConnected;
@property (nonatomic) bool mtrDeviceStateReported;
@property unsigned int networkProvisioningFailures;
@property (nonatomic, retain) NSNumber *nodeID;
@property (nonatomic, readonly) NSNumber *objectID;
@property (nonatomic, retain) NSString *onboardingSetupPayloadString;
@property (nonatomic) bool operationDisabled;
@property (nonatomic) unsigned long long operationDisabledReason;
@property (nonatomic, retain) NSData *originalPairingAttemptOperationalCert;
@property (nonatomic, retain) NSData *originalPairingAttemptRootCert;
@property (nonatomic, retain) HMMTROTAAnnounceTimer *otaAnnounceTimer;
@property (nonatomic, retain) HMMTROTAApplyUpdateRequestTimer *otaApplyUpdateRequestTimer;
@property (retain) NSFileHandle *otaFileHandle;
@property (retain) NSNumber *otaFileOffset;
@property (nonatomic, retain) HMMTROTAApplyUpdateTimer *otaUpdateTimer;
@property (retain) NSData *otaUpdateToken;
@property (nonatomic) long long pairedState;
@property (nonatomic, retain) NSMutableDictionary *pairingDurationDictionary;
@property (nonatomic, readonly) HMMTRAccessoryPairingEndContext *pairingEndContextWhenRemove;
@property (nonatomic) unsigned long long pairingProgress;
@property (retain) HMMTRFabric *pairingTargetFabric;
@property (retain) NSUUID *pairingTargetHomeUUID;
@property (nonatomic, retain) HMFTimer *pairingTimer;
@property (nonatomic) bool pairingUsingMatterSupport;
@property (nonatomic) unsigned long long partsListStateCaptureHandle;
@property (nonatomic, retain) NSString *partsListStateCaptureInformation;
@property (nonatomic, readonly) NSMutableDictionary *pendingMTRDeviceReadReadyHandlers;
@property (nonatomic, retain) HAPAccessory *primaryAccessory;
@property (nonatomic, readonly) HAPAccessory *primaryAccessoryForServer;
@property (nonatomic, retain) NSNumber *productID;
@property (nonatomic, retain) NSString *productNameFromDcl;
@property (nonatomic, retain) HMMTRAccessoryReachabilityManager *reachabilityManager;
@property (nonatomic) bool removalInProgress;
@property (nonatomic, readonly) NSError *removeReason;
@property (nonatomic, readonly) HMMTRAttributeReportDistributor *reportDistributor;
@property (nonatomic) bool requiresThreadRouter;
@property (nonatomic, retain) HMFTimer *residentReachabilityUpdateWaitTimer;
@property (readonly) NSData *rootPublicKey;
@property (nonatomic) bool serviceEnumerationFailed;
@property (readonly) NSMutableArray *serviceEnumerationFromDeviceCompletionHandlers;
@property (nonatomic) bool serviceEnumerationInProgress;
@property (nonatomic) bool servicesEnumerated;
@property (nonatomic, retain) NSNumber *setUpPINCode;
@property (nonatomic, retain) NSString *setupPayloadString;
@property (nonatomic) bool shouldPairWithoutResident;
@property (nonatomic, retain) NSNumber *softwareVersionNumber;
@property (nonatomic, retain) NSString *softwareVersionString;
@property (nonatomic, copy) id /* block */ stageCompletion;
@property (nonatomic, copy) id /* block */ stageDeviceCredentialHandler;
@property (nonatomic) bool stageNetworkScanRequested;
@property (nonatomic, copy) id /* block */ stageProgressUpdateHandler;
@property (nonatomic, copy) id /* block */ stageThreadScanResultsHandler;
@property (nonatomic, copy) id /* block */ stageWiFiScanResultsHandler;
@property (nonatomic, retain) HMFTimer *stateCaptureConfigChangeTimer;
@property (nonatomic, retain) HMFTimer *stateCaptureDeviceConnectedTimer;
@property (nonatomic) HMMTRStorage *storage;
@property (nonatomic) bool storageUpdatePending;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSNumber *supportedLinkLayerTypes;
@property (nonatomic, retain) NSData *topology;
@property (nonatomic, retain) NSNumber *vendorID;
@property (nonatomic, retain) NSString *vendorNameFromDcl;
@property (getter=isWEDDevice, nonatomic) bool wedDevice;

+ (bool)certificateSubjectHasCATs:(id)arg1;
+ (id)logCategory;
+ (id)shortDescription;

- (void).cxx_destruct;
- (void)_buildHAPCategoriesFromCHIPWithCompletionHandler:(id /* block */)arg1;
- (id)_categoryFromAccessoryInfo:(id)arg1 endpoint:(id)arg2;
- (id)_categoryFromTopology:(id)arg1 endpoint:(id)arg2;
- (void)_clearCommissioneeInfoAfterPairingCompletion;
- (void)_collectNetworkCredentials:(id)arg1;
- (void)_commissionWithParams:(id)arg1;
- (void)_continueNetworkProvisioning;
- (void)_controller:(id)arg1 commissioningComplete:(id)arg2 nodeID:(id)arg3 abstractMetrics:(id)arg4;
- (bool)_controllerIsOnWiFiNetworkWhichSupportsBothBands;
- (id)_convertFetchedCredentials:(id)arg1;
- (void)_createFirmwareUpdateServiceWithInstanceID:(long long)arg1 device:(id)arg2 completionHandler:(id /* block */)arg3;
- (bool)_delegateRespondsToSelector:(SEL)arg1;
- (void)_deleteAccessoryServerData;
- (void)_deregisterDeviceConnectedStateCaptureHandler;
- (void)_deregisterPartsListStateCaptureHandler;
- (void)_deregisterStateCaptureHandlerWithHandle:(unsigned long long)arg1;
- (void)_deregisterStateCaptureHandlers;
- (void)_deviceInternalStateChanged:(id)arg1;
- (void)_disconnectWithError:(id)arg1;
- (id)_distinctEndpointsHavingHapServicesForTopology:(id)arg1;
- (id)_endCurrentMetricTimeWithName:(id)arg1;
- (void)_endpointForOTARequestorWithTopology:(id)arg1 mtrDevice:(id)arg2 callbackQueue:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)_fetchAdditionalThreadNetworkInformationFromDevice:(id)arg1 completion:(id /* block */)arg2;
- (void)_fetchAdditionalThreadNetworkInformationWithCompletion:(id /* block */)arg1;
- (void)_fetchCurrentPairingWithCompletionHandler:(id /* block */)arg1;
- (void)_fetchSerialNumberWithCompletionHandler:(id /* block */)arg1;
- (void)_finalizePairing;
- (void)_findSystemCommissionerPairingMatchingSetupPayload:(id)arg1 systemCommissionerPairings:(id)arg2 pairingManager:(id)arg3;
- (void)_finishMaximumDurationCollection;
- (void)_flushMTRDeviceReadReadyHandlers;
- (void)_getCommissioneeHasActiveNetworkWithNetworkCommissioningCluster:(id)arg1 completion:(id /* block */)arg2;
- (void)_getCommissioneeNetworkCommissioningClusterEndpointWithDevice:(id)arg1 completion:(id /* block */)arg2;
- (id)_getFirstNonOtherCategory:(id)arg1;
- (long long)_getLinkLayerTypeForAccessory:(id)arg1;
- (id)_getOperationalHardwareAddressFromReadValue:(id)arg1;
- (id)_getOperationalNetworkAddressForAccessory:(id)arg1;
- (id)_getSupportedLinkLayerTypesForAccessory:(id)arg1;
- (void)_handleAddNocCompletionDuringSystemCommissionerFabricCommissioningWithDispatchGroup:(id)arg1 fabricID:(id)arg2 rootCACert:(id)arg3 ipk:(id)arg4 controllerNodeID:(id)arg5 commissioneeNodeID:(id)arg6 error:(id)arg7;
- (void)_handleAddTrustedRootCertificateCompletionDuringSystemCommissionerFabricCommissioningWithDispatchGroup:(id)arg1 fabricID:(id)arg2 rootCACert:(id)arg3 operationalPublicKey:(struct __SecKey { }*)arg4 ipk:(id)arg5 controllerNodeID:(id)arg6;
- (void)_handleArmFailSafeResponseDuringSystemCommissionerFabricCommissioningWithDispatchGroup:(id)arg1 error:(id)arg2;
- (void)_handleCSRResponseDuringSystemCommissionerFabricCommissioningWithDispatchGroup:(id)arg1 responseParams:(id)arg2 error:(id)arg3;
- (void)_handleDiagnosticsEvent:(id)arg1;
- (void)_handleNewSystemCommissionerFabricNodeID:(id)arg1 dispatchGroup:(id)arg2 fabricID:(id)arg3 rootCACert:(id)arg4 operationalPublicKey:(struct __SecKey { }*)arg5 ipk:(id)arg6 controllerNodeID:(id)arg7 device:(id)arg8;
- (void)_handlePairOnSystemCommissionerFabricSuccess;
- (void)_handlePairingFailureWithError:(id)arg1 context:(id)arg2;
- (void)_handleSystemCommissionerRootCertificate:(id)arg1 fabricID:(id)arg2 ipk:(id)arg3 controllerNodeID:(id)arg4 dispatchGroup:(id)arg5 csrResponseParams:(id)arg6 device:(id)arg7;
- (void)_handleThreadRadioStateChanged;
- (bool)_handleUnmappedAttributeReport:(id)arg1;
- (void)_handleUnreachableStateWithError:(id)arg1;
- (id)_hapAccessoryAtEndpoint:(id)arg1;
- (bool)_ignoreAttributeReport:(id)arg1;
- (void)_initAccessoriesForServer;
- (bool)_isBridgedBasicInformation:(id)arg1 reportClusterID:(id)arg2;
- (id)_matterCredentialsFromTHCredentials:(id)arg1;
- (void)_metricCollectionWithError:(id)arg1 description:(id)arg2 progressState:(long long)arg3;
- (void)_notifyDelegateOfMTRMetrics:(id)arg1;
- (void)_notifyDelegateOfPairingProgress:(long long)arg1;
- (void)_notifyDelegateOfPairingProgress:(long long)arg1 error:(id)arg2;
- (void)_notifyDelegateOfPairingStep:(unsigned long long)arg1;
- (void)_onNetworkScanResults:(id)arg1;
- (void)_onThreadScanResults:(id)arg1;
- (void)_onUnpairFinishedWithError:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (void)_onWiFiScanResults:(id)arg1;
- (void)_openPairingWindowForDuration:(double)arg1 completionHandler:(id /* block */)arg2;
- (void)_openPairingWindowWithPINForDuration:(double)arg1 completionHandler:(id /* block */)arg2;
- (void)_pairOnSystemCommissionerFabric;
- (void)_pairOnSystemCommissionerFabricUnlessAlreadyPairedWithRootPublicKey:(id)arg1;
- (void)_pairingComplete:(id)arg1 context:(id)arg2;
- (bool)_pairingInProgressForMatterSupportFallback;
- (id)_pairingSetupPayload;
- (void)_persistAccessoryServerData;
- (bool)_populateCommissioningParameterCountryCode:(id)arg1;
- (id)_populateHandlingForCharacteristics:(id)arg1;
- (void)_populateServiceForCharacteristic:(id)arg1;
- (void)_populateThreadCredentials:(id)arg1 completion:(id /* block */)arg2;
- (void)_populateWifiCredentials:(id)arg1 scanResults:(id)arg2 completion:(id /* block */)arg3;
- (void)_prepareThreadCredentials;
- (id)_processEvent:(id)arg1;
- (id)_progressStateToString:(long long)arg1;
- (void)_queryBridgedAccessoryAndUnreachablePerCacheForCharacteristic:(id)arg1 completion:(id /* block */)arg2;
- (void)_readCharacteristicValueFromCacheAfterConfirmingBridgedAccessroyReachabilityWithCharacteristic:(id)arg1 responseHandler:(id /* block */)arg2;
- (void)_readCharacteristicValueFromCacheWithCharacteristic:(id)arg1 responseHandler:(id /* block */)arg2;
- (void)_readCharacteristicValues:(id)arg1 timeout:(double)arg2 skipCache:(bool)arg3 sendNotification:(bool)arg4 completionQueue:(id)arg5 completionHandler:(id /* block */)arg6;
- (id)_readFixedCharacteristicValue:(id)arg1;
- (id)_readLocallyMaintainedCharacteristicValue:(id)arg1;
- (id)_readPastEventsFromAccessory:(id)arg1 forClusters:(id)arg2;
- (void)_rebuildHAPServicesFromCHIPWithCompletionHandler:(id /* block */)arg1;
- (unsigned long long)_registerStateCaptureHandlerWithStateCaptureInformation:(id)arg1;
- (void)_removeSharedAdminControllerNodeIDFromACLWithCompletion:(id /* block */)arg1;
- (void)_reportPairingComplete;
- (void)_requestAccessoryNetworkScanWithCompletionHandler:(id /* block */)arg1;
- (void)_restoreCommissioneeInfoBeforeNextPairingAttempt;
- (void)_retryPairing;
- (void)_returnMatterSupportPairingAsStagedPairing;
- (void)_setCategoryForPrimaryAccessory:(id)arg1;
- (void)_setSupportedLinkLayerTypes:(id)arg1;
- (void)_setupMatterDevice;
- (void)_setupPairingProperties;
- (bool)_shouldUpdateUnreachableState;
- (void)_startCurrentMetricTimeWithName:(id)arg1;
- (void)_startInitialReachableStateTimerWithCompletion:(id /* block */)arg1;
- (void)_startLocallyDiscoveredAccessoryServerPairingWithRequest:(id)arg1 fabricID:(id)arg2;
- (void)_startPairingWithError:(id*)arg1 pairingEndContext:(id*)arg2;
- (void)_startPairingWithReadyToCancelHandler:(id /* block */)arg1 error:(id*)arg2 pairingEndContext:(id*)arg3;
- (void)_tryPairingUsingMatterSupport;
- (void)_tryPairingWithOnboardingPayload:(id)arg1 systemCommissionerPairings:(id)arg2 pairingManager:(id)arg3;
- (void)_unpair:(id)arg1 completion:(id /* block */)arg2;
- (void)_updateAdditionalCharacteristicsFromCharacteristicUpdate:(id)arg1 service:(id)arg2 path:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)_updateAttributeTimer:(id)arg1 report:(id)arg2 timeout:(double)arg3 server:(id)arg4;
- (void)_updateDefaultEntriesForBridgedClusterIDCharacteristicMap:(id)arg1;
- (void)_updateDefaultEntriesForClusterIDCharacteristicMap:(id)arg1;
- (void)_updateDelegateOfConnectionStatus:(bool)arg1 withError:(id)arg2;
- (void)_updateMetricWithProgressState:(long long)arg1 error:(id)arg2;
- (void)_updateMetrics;
- (void)_updatedCharacteristicsForAttributeReport:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_updatedCharacteristicsForEventReport:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_writeCharacteristicValues:(id)arg1 responseTuples:(id)arg2 completionQueue:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)abortStagingWithError:(id)arg1 context:(id)arg2;
- (bool)accessoryLinkLayerTypeIsWifiOrEthernet;
- (id)accessoryProductID;
- (id)accessoryVendorID;
- (id)activity;
- (void)addMetricsWithDuration:(id)arg1 metricsKey:(id)arg2;
- (void)addPairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)announceOtaProvider:(id)arg1 providerEndpoint:(id)arg2 immediateAnnouncement:(bool)arg3 completionHandler:(id /* block */)arg4;
- (id)attributeDescriptions;
- (id)attributeTimers;
- (bool)bleScanPending;
- (bool)blockInvalidation;
- (id)bridgedAccessoryReachabilityReaderTimeoutNSecs;
- (id)browser;
- (id)characteristicProtocolMappingStates;
- (id)chipDelegate;
- (id)chipNodeId;
- (id /* block */)chipReportHandler;
- (id)clusterIDCharacteristicMap;
- (id)collectDiagnosticsForAccessory:(id)arg1;
- (bool)commissioneeHasActiveNetwork;
- (id)commissioneeNetworkCommissioningClusterEndpoint;
- (id)commissioneeNetworks;
- (bool)commissioningCompleted;
- (id)commissioningFailureOverridingError;
- (id)commissioningID;
- (bool)commissioningSessionEstablished;
- (void)commitStagedPairing;
- (long long)communicationProtocol;
- (id)connectedNetworkIDFromReadValue:(id)arg1;
- (void)controller:(id)arg1 commissioningComplete:(id)arg2 nodeID:(id)arg3 metrics:(id)arg4;
- (void)controller:(id)arg1 commissioningSessionEstablishmentDone:(id)arg2;
- (void)controller:(id)arg1 statusUpdate:(long long)arg2;
- (bool)controllerRevokeHandlerRegistered;
- (id)controllerWrapper;
- (id)createDoorLockClusterObjectWithFlow:(id)arg1;
- (struct os_state_data_s { unsigned int x1; union { unsigned int x_2_1_1 : 32; unsigned int x_2_1_2; } x2; struct os_state_data_decoder_s { BOOL x_3_1_1[64]; BOOL x_3_1_2[64]; } x3; BOOL x4[64]; unsigned char x5[0]; }*)createStateData:(id)arg1 data:(id)arg2;
- (id)currentMetricBundle;
- (id)currentPairing;
- (id)currentPairingInfo;
- (id)currentWiFiNetworkInfo;
- (id)dataOfReadValue:(id)arg1;
- (void)dealloc;
- (id)defaultThreadOperationalDataset;
- (id /* block */)defaultThreadOperationalDatasetReceiveBlock;
- (bool)defaultThreadOperationalDatasetRetrieved;
- (bool)deferStartThreadForPairing;
- (bool)delayDiscovery;
- (id /* block */)descriptorClusterManager;
- (void)device:(id)arg1 receivedAttributeReport:(id)arg2;
- (void)device:(id)arg1 receivedEventReport:(id)arg2;
- (void)device:(id)arg1 stateChanged:(unsigned long long)arg2;
- (void)deviceCachePrimed:(id)arg1;
- (void)deviceConfigurationChanged:(id)arg1;
- (id)deviceConnectedStateCaptureInformation;
- (unsigned long long)deviceConnectedStateHandle;
- (id)deviceController;
- (id)deviceID;
- (id)deviceTopology;
- (id)diagnosticsEventDelegate;
- (void)didUpdateReachability:(bool)arg1;
- (void)disable;
- (void)disconnect;
- (void)disconnectWithError:(id)arg1;
- (void)discoverAccessories;
- (bool)discoveredOverBLE;
- (id)discriminator;
- (bool)discriminatorIsOriginatedFromShort;
- (void)dispatchAfter:(unsigned long long)arg1 block:(id /* block */)arg2;
- (void)dispatchBlock:(id /* block */)arg1;
- (bool)doesMatchDiscriminator:(id)arg1;
- (bool)doesPeriodicSessionChecks;
- (id)doorLockCluster;
- (id)doorLockClusterFuture;
- (id)dumpState:(id)arg1;
- (id)eMACAddress;
- (void)enableEvents:(bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(id /* block */)arg3 queue:(id)arg4;
- (id)endPointForHapAccessory:(id)arg1;
- (id)endpointForDiagnosticCluster:(id)arg1 clusterName:(id)arg2 amongEndpoints:(id)arg3 topology:(id)arg4 device:(id)arg5 definitelyUnsupported:(bool*)arg6;
- (id)endpointsForHAPAccessory:(id)arg1 topology:(id)arg2;
- (void)enumerateHAPServices:(id /* block */)arg1;
- (id)errorCountOfThreadNetworkDiagnostics:(id)arg1;
- (id)errorCountOfWiFiNetworkDiagnostics:(id)arg1;
- (id)fabricID;
- (void)fetchAndNotifyCharacteristics:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)fetchColorControlClusterForHapAccessory:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)fetchExtendedMACAddressFromDevice:(id)arg1 completion:(id /* block */)arg2;
- (void)fetchPairingsWithCompletionHandler:(id /* block */)arg1;
- (void)fetchSoftwareVersion:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)fetchWEDSupportInformationFromDevice:(id)arg1 completion:(id /* block */)arg2;
- (void)findSystemCommissionerPairingMatchingSetupPayload:(id)arg1 systemCommissionerPairings:(id)arg2 pairingManager:(id)arg3;
- (void)finishPairing;
- (bool)fullServiceEnumerationPendingCachePrimedEvent;
- (id)generalDiagnosticsClusterFromEndpoints:(id)arg1 topology:(id)arg2 device:(id)arg3 definitelyUnsupported:(bool*)arg4;
- (void)generateStateCaptureInformationForReason:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)getConnectNetworkIDForAccessory:(id)arg1;
- (long long)getLinkLayerTypeForAccessory:(id)arg1;
- (id)getOperationalNetworkAddressForAccessory:(id)arg1;
- (id)getSupportedLinkLayerTypesForAccessory:(id)arg1;
- (id)getSupportedLinkLayerTypesFromNetworkCommissioningClusterFeatureMap:(id)arg1;
- (id)getThreadNetworkLinkQualityForAccessory:(id)arg1;
- (id)getWiFiNetworkLinkQualityForAccessory:(id)arg1;
- (void)handleCHIPRemoteRequest:(id)arg1 completion:(id /* block */)arg2;
- (void)handleCHIPRemoteRequest:(id)arg1 device:(id)arg2 completion:(id /* block */)arg3;
- (void)handleDownloadLogCommand:(id)arg1 device:(id)arg2 completion:(id /* block */)arg3;
- (void)handleEventReportForNotification:(id)arg1;
- (void)handleFirmwareUpdateStatusChange:(long long)arg1;
- (void)handleThreadDirectConnectionSleepyTypeChange:(bool)arg1;
- (void)handleThreadNetworkStateChangedNotification:(id)arg1;
- (void)handleUpdatesForCharacteristics:(id)arg1 stateNumber:(id)arg2;
- (void)handleWEDDisconnectedWhileNotPairing;
- (id)hapEnumerator;
- (bool)hasNetworkProvisioningFailed:(unsigned int)arg1;
- (bool)hasPreferredLocalLink;
- (bool)hasPriorSuccessfulPairing;
- (unsigned long long)hash;
- (id)highestRSSIofThreadNetworkDiagnostics:(id)arg1;
- (id)hmdHAPAccessoryDelegate;
- (void)identifyWithCompletion:(id /* block */)arg1;
- (id)initWithKeystore:(id)arg1 browser:(id)arg2;
- (id)initialMTRDeviceStateTimeoutId;
- (bool)isCertified;
- (bool)isDisabled;
- (void)isDiscoverableWithCompletion:(id /* block */)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isKnownToSystemCommissioner;
- (bool)isLocallyDiscoveredServer;
- (bool)isPaired;
- (bool)isPairedInStorage;
- (bool)isPairingInProgress;
- (bool)isReadyToReadFromMTRDevice;
- (bool)isStaged;
- (bool)isWEDDevice;
- (bool)knownToSystemCommissioner;
- (id)lastFabricLabelUpdateError;
- (id)lastPendingFabricLabel;
- (long long)linkLayerType;
- (long long)linkType;
- (void)listPairingsWithCompletionQueue:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)locallyDiscovered;
- (id)logIdentifier;
- (bool)matchesSetupID:(id)arg1;
- (bool)matchesSetupID:(id)arg1 serverIdentifier:(id)arg2;
- (id)matterDevice;
- (id)matterFirmwareUpdateStatus;
- (id)maxMetricDuration;
- (id)mergeExistingAclEntries:(id)arg1 withAdminNodes:(id)arg2 regularUserNodes:(id)arg3;
- (id)mergeExistingAclEntries:(id)arg1 withNewNodes:(id)arg2 withPrivilege:(unsigned char)arg3;
- (bool)mtrDeviceConnected;
- (bool)mtrDeviceStateReported;
- (id)mtrDeviceWithNodeID:(id)arg1 controller:(id)arg2;
- (id)networkCommissioningClusterFromEndpoints:(id)arg1 topology:(id)arg2 device:(id)arg3 definitelyUnsupported:(bool*)arg4;
- (unsigned int)networkProvisioningFailures;
- (id)nodeID;
- (void)notifyMatterFirmwareRevisionNumberCharacteristicChanged;
- (unsigned long long)numActiveSessionClients;
- (id)numberOfReadValue:(id)arg1;
- (id)objectID;
- (id)onboardingSetupPayloadString;
- (void)openPairingWindowForDuration:(double)arg1 completionHandler:(id /* block */)arg2;
- (void)openPairingWindowWithPINForDuration:(double)arg1 completionHandler:(id /* block */)arg2;
- (bool)operationDisabled;
- (unsigned long long)operationDisabledReason;
- (id)originalPairingAttemptOperationalCert;
- (id)originalPairingAttemptRootCert;
- (id)otaAnnounceTimer;
- (id)otaApplyUpdateRequestTimer;
- (id)otaFileHandle;
- (id)otaFileOffset;
- (id)otaUpdateTimer;
- (id)otaUpdateToken;
- (id)packetCountOfThreadNetworkDiagnostics:(id)arg1;
- (id)packetCountOfWiFiNetworkDiagnostics:(id)arg1;
- (long long)pairedState;
- (id)pairingDurationDictionary;
- (id)pairingEndContextWhenRemove;
- (unsigned long long)pairingProgress;
- (id)pairingTargetFabric;
- (id)pairingTargetHomeUUID;
- (id)pairingTimer;
- (bool)pairingUsingMatterSupport;
- (unsigned long long)partsListStateCaptureHandle;
- (id)partsListStateCaptureInformation;
- (id)pendingMTRDeviceReadReadyHandlers;
- (bool)pingSupported;
- (id)populateACLEntriesAfterPairing;
- (id)populateACLEntriesForPairing;
- (id)primaryAccessory;
- (id)primaryAccessoryForServer;
- (id)privateDescription;
- (void)processAttributeReport:(id)arg1;
- (id)productID;
- (id)productNameFromDcl;
- (id)protocolMappingStateForCharacteristic:(id)arg1;
- (void)queueAccessoryOperation:(id /* block */)arg1 highPriority:(bool)arg2 completion:(id /* block */)arg3;
- (id)reachabilityChangedReason;
- (id)reachabilityManager;
- (void)readCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)readPairingWindowStatusWithCompletionHandler:(id /* block */)arg1;
- (id)readPastDiagnosticEventsFromAccessory:(id)arg1 fromEventNumber:(id)arg2;
- (void)refreshThreadCapabilitiesWithCompletion:(id /* block */)arg1;
- (bool)removalInProgress;
- (void)removeAllPairingsWithCompletionHandler:(id /* block */)arg1;
- (id)removeNode:(id)arg1 withPrivilge:(unsigned char)arg2 fromExistingAclEntries:(id)arg3;
- (void)removePairing:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)removePairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(id /* block */)arg3;
- (bool)removePairingForCurrentControllerOnQueue:(id)arg1 completion:(id /* block */)arg2;
- (id)removeReason;
- (id)reportDistributor;
- (bool)requiresThreadRouter;
- (void)resetThreadNetworkDiagnosticsCountForAccessory:(id)arg1;
- (void)resetWiFiNetworkDiagnosticsCountForAccessory:(id)arg1;
- (id)residentReachabilityUpdateWaitTimer;
- (id)rootPublicKey;
- (bool)serviceEnumerationFailed;
- (id)serviceEnumerationFromDeviceCompletionHandlers;
- (bool)serviceEnumerationInProgress;
- (bool)servicesEnumerated;
- (unsigned long long)sessionCheckInterval;
- (void)setAttributeTimers:(id)arg1;
- (void)setBleScanPending:(bool)arg1;
- (void)setBlockInvalidation:(bool)arg1;
- (void)setBridgedAccessoryReachabilityReaderTimeoutNSecs:(id)arg1;
- (void)setBrowser:(id)arg1;
- (void)setCHIPReportHandler:(id /* block */)arg1;
- (void)setCertified:(bool)arg1;
- (void)setChipDelegate:(id)arg1;
- (void)setChipReportHandler:(id /* block */)arg1;
- (void)setClusterIDCharacteristicMap:(id)arg1;
- (void)setClusterIDForCharacteristic:(id)arg1 endpointID:(id)arg2 clusterID:(id)arg3;
- (void)setCommissioneeHasActiveNetwork:(bool)arg1;
- (void)setCommissioneeNetworkCommissioningClusterEndpoint:(id)arg1;
- (void)setCommissioneeNetworks:(id)arg1;
- (void)setCommissioningCompleted:(bool)arg1;
- (void)setCommissioningFailureOverridingError:(id)arg1;
- (void)setCommissioningID:(id)arg1;
- (void)setCommissioningSessionEstablished:(bool)arg1;
- (void)setControllerRevokeHandlerRegistered:(bool)arg1;
- (void)setControllerWrapper:(id)arg1;
- (void)setCurrentMetricBundle:(id)arg1;
- (void)setCurrentPairingInfo:(id)arg1;
- (void)setDefaultThreadOperationalDataset:(id)arg1;
- (void)setDefaultThreadOperationalDatasetReceiveBlock:(id /* block */)arg1;
- (void)setDefaultThreadOperationalDatasetRetrieved:(bool)arg1;
- (void)setDeferStartThreadForPairing:(bool)arg1;
- (void)setDelayDiscovery:(bool)arg1;
- (void)setDescriptorClusterManager:(id /* block */)arg1;
- (void)setDeviceConnectedStateCaptureInformation:(id)arg1;
- (void)setDeviceConnectedStateHandle:(unsigned long long)arg1;
- (void)setDiagnosticsEventDelegate:(id)arg1;
- (void)setDiagnosticsEventHandler:(id)arg1;
- (void)setDiscoveredOverBLE:(bool)arg1;
- (void)setDiscriminator:(id)arg1;
- (void)setDiscriminatorIsOriginatedFromShort:(bool)arg1;
- (void)setDoorLockCluster:(id)arg1;
- (void)setDoorLockClusterFuture:(id)arg1;
- (void)setEMACAddress:(id)arg1;
- (void)setFabricID:(id)arg1;
- (void)setFullServiceEnumerationPendingCachePrimedEvent:(bool)arg1;
- (void)setHasPriorSuccessfulPairing:(bool)arg1;
- (void)setHmdHAPAccessoryDelegate:(id)arg1;
- (void)setInitialMTRDeviceStateTimeoutId:(id)arg1;
- (void)setKnownToSystemCommissioner:(bool)arg1;
- (void)setLastFabricLabelUpdateError:(id)arg1;
- (void)setLastPendingFabricLabel:(id)arg1;
- (void)setLinkLayerType:(long long)arg1;
- (void)setLocallyDiscovered:(bool)arg1;
- (void)setMatterDevice:(id)arg1;
- (void)setMatterFirmwareUpdateStatus:(id)arg1;
- (void)setMaxMetricDuration:(id)arg1;
- (void)setMtrDeviceConnected:(bool)arg1;
- (void)setMtrDeviceStateReported:(bool)arg1;
- (void)setNetworkProvisioningFailures:(unsigned int)arg1;
- (void)setNodeID:(id)arg1;
- (void)setOnboardingSetupPayloadString:(id)arg1;
- (void)setOperationDisabled:(bool)arg1;
- (void)setOperationDisabledReason:(unsigned long long)arg1;
- (void)setOriginalPairingAttemptOperationalCert:(id)arg1;
- (void)setOriginalPairingAttemptRootCert:(id)arg1;
- (void)setOtaAnnounceTimer:(id)arg1;
- (void)setOtaApplyUpdateRequestTimer:(id)arg1;
- (void)setOtaFileHandle:(id)arg1;
- (void)setOtaFileOffset:(id)arg1;
- (void)setOtaUpdateTimer:(id)arg1;
- (void)setOtaUpdateToken:(id)arg1;
- (void)setPairedState:(long long)arg1;
- (void)setPairingDurationDictionary:(id)arg1;
- (void)setPairingProgress:(unsigned long long)arg1;
- (void)setPairingTargetFabric:(id)arg1;
- (void)setPairingTargetHomeUUID:(id)arg1;
- (void)setPairingTimer:(id)arg1;
- (void)setPairingUsingMatterSupport:(bool)arg1;
- (void)setPartsListStateCaptureHandle:(unsigned long long)arg1;
- (void)setPartsListStateCaptureInformation:(id)arg1;
- (void)setPrimaryAccessory:(id)arg1;
- (void)setProductID:(id)arg1;
- (void)setProductNameFromDcl:(id)arg1;
- (void)setReachabilityManager:(id)arg1;
- (void)setRemovalInProgress:(bool)arg1;
- (void)setRemoveReason:(id)arg1 pairingEndContextWhenRemove:(id)arg2;
- (void)setRequiresThreadRouter:(bool)arg1;
- (void)setResidentReachabilityUpdateWaitTimer:(id)arg1;
- (void)setServiceEnumerationFailed:(bool)arg1;
- (void)setServiceEnumerationInProgress:(bool)arg1;
- (void)setServicesEnumerated:(bool)arg1;
- (void)setSetUpPINCode:(id)arg1;
- (void)setSetupPayloadString:(id)arg1;
- (void)setShouldPairWithoutResident:(bool)arg1;
- (void)setSoftwareVersionNumber:(id)arg1;
- (void)setSoftwareVersionString:(id)arg1;
- (void)setStageCompletion:(id /* block */)arg1;
- (void)setStageDeviceCredentialHandler:(id /* block */)arg1;
- (void)setStageNetworkScanRequested:(bool)arg1;
- (void)setStageProgressUpdateHandler:(id /* block */)arg1;
- (void)setStageThreadScanResultsHandler:(id /* block */)arg1;
- (void)setStageWiFiScanResultsHandler:(id /* block */)arg1;
- (void)setStateCaptureConfigChangeTimer:(id)arg1;
- (void)setStateCaptureDeviceConnectedTimer:(id)arg1;
- (void)setStorage:(id)arg1;
- (void)setStorageUpdatePending:(bool)arg1;
- (void)setSupportedLinkLayerTypes:(id)arg1;
- (void)setTopology:(id)arg1;
- (id)setUpPINCode;
- (void)setVendorID:(id)arg1;
- (void)setVendorNameFromDcl:(id)arg1;
- (void)setWedDevice:(bool)arg1;
- (id)setupPayloadString;
- (void)setupReporting;
- (void)setupThreadPairing;
- (bool)shouldPairWithoutResident;
- (id)softwareVersionNumber;
- (id)softwareVersionString;
- (id /* block */)stageCompletion;
- (id /* block */)stageDeviceCredentialHandler;
- (bool)stageNetworkScanRequested;
- (id /* block */)stageProgressUpdateHandler;
- (id /* block */)stageThreadScanResultsHandler;
- (id /* block */)stageWiFiScanResultsHandler;
- (void)startPairingMetricWithActivity:(id)arg1;
- (void)startPairingWithRequest:(id)arg1;
- (void)startStagedPairingWithCompletion:(id /* block */)arg1;
- (void)startStagedPairingWithDeviceCredentialHandler:(id /* block */)arg1 wifiScanResultsHandler:(id /* block */)arg2 threadScanResultsHandler:(id /* block */)arg3 readyToCancelHandler:(id /* block */)arg4 progressUpdateHandler:(id /* block */)arg5 scanningNetworks:(bool)arg6 completion:(id /* block */)arg7;
- (id)stateCaptureConfigChangeTimer;
- (id)stateCaptureDeviceConnectedTimer;
- (bool)stopPairingWithError:(id*)arg1;
- (id)storage;
- (bool)storageUpdatePending;
- (id)stringOfReadValue:(id)arg1;
- (id)supportedLinkLayerTypes;
- (id)threadNetworkDiagnosticsClusterFromEndpoints:(id)arg1 topology:(id)arg2 device:(id)arg3 definitelyUnsupported:(bool*)arg4;
- (void)timerDidFire:(id)arg1;
- (id)topology;
- (void)triggerEstablishingMatterSubscription;
- (bool)tryPairingPassword:(id)arg1 onboardingSetupPayloadString:(id)arg2 error:(id*)arg3;
- (void)tryPairingWithOnboardingPayload:(id)arg1 systemCommissionerPairings:(id)arg2 pairingManager:(id)arg3;
- (void)updateAccessoryControlToAdministratorNodes:(id)arg1 sharedUserNodes:(id)arg2 completion:(id /* block */)arg3;
- (void)updateAccessoryControlToIncludeAdministratorNodes:(id)arg1 sharedUserNodes:(id)arg2 completion:(id /* block */)arg3;
- (void)updateAccessoryControlToRemoveAdministratorNode:(id)arg1 completion:(id /* block */)arg2;
- (void)updateAccessoryName:(id)arg1;
- (void)updateAllCharacteristicValuesPostHAPServiceEnumeration:(id /* block */)arg1;
- (void)updateDefaultOtaProvider:(id)arg1 providerEndpoint:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)updateFabricLabel:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)updateProductAttributes;
- (void)updateSoftwareVersion:(id)arg1;
- (void)updateVidPidWithAttestationDeviceInfo:(id)arg1;
- (void)validateAttestationDeviceInfo:(id)arg1 error:(id)arg2 completion:(id /* block */)arg3;
- (id)vendorID;
- (id)vendorNameFromDcl;
- (id)wifiNetworkDiagnosticsClusterFromEndpoints:(id)arg1 topology:(id)arg2 device:(id)arg3 definitelyUnsupported:(bool*)arg4;
- (id)wifiNetworkInfoForSSID:(id)arg1;
- (void)writeCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(id /* block */)arg4;

@end
