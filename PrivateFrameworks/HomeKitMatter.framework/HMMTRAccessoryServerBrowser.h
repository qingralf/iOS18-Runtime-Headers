/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HomeKitMatter.framework/HomeKitMatter
 */

@interface HMMTRAccessoryServerBrowser : HAPAccessoryServerBrowser <CBCentralManagerDelegate, HAPPowerManagerProtocol, HMFLogging, HMMTRFabricDataFetcherKeychainDelegate, HMMTRResidentStateManagerDelegate, HMMTRStorageDelegate> {
    <HMMTRAccessoryServerBrowserDelegate> * _accessoryServerBrowserDelegate;
    NSMutableSet * _allowedNodeIDsForConnectionRequests;
    HMMTRAttestationDataStore * _attestationDataStore;
    HMMTRAttestationStatus * _attestationStatus;
    bool  _bleScanActive;
    NSObject<OS_nw_browser> * _bonjourBrowser;
    NSMutableArray * _bonjourBrowserChanges;
    unsigned long long  _browserState;
    CBCentralManager * _cbCentral;
    HMMTRAccessoryServer * _commissioneeAccessoryServer;
    NSObject<OS_dispatch_group> * _configureDispatchGroup;
    NSNumber * _configuredPreWarmTargetFabricID;
    bool  _connectionRequestSuspended;
    HMMTRControllerFactory * _controllerFactory;
    id  _controllerFactoryEnablePerPrimaryResidentConfirmationToken;
    NSNumber * _currentFabricID;
    <HAPAccessoryServerBrowserDelegate> * _delegate;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    NSMutableArray * _deviceControllerHandlers;
    NSDate * _diagnosticTimerStart;
    HMFTimer * _diagnosticsTimer;
    NSMutableSet * _discoveredAccessoryServers;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _fabricSetLock;
    NSMutableSet * _fabricsWithActiveClients;
    NSMutableOrderedSet * _fabricsWithActiveConnections;
    NSMutableSet * _fabricsWithActiveSecondaryClients;
    NSMutableOrderedSet * _fabricsWithPendingConnections;
    HMMTRFabricControllerStore * _homeFabricControllers;
    int  _homeKeychainReadyNotificationToken;
    bool  _lockStateNotificationRegistered;
    int  _lockStateNotificationRegistrationToken;
    NSDictionary * _matterStorageItems;
    int  _mtsKeychainReadyNotificationToken;
    HMMTRMatterKeypair * _nocSigner;
    NSMutableSet * _nodesAddedToHome;
    NSMutableSet * _nodesWithPendingACLOverwrite;
    HMMTROTAProviderDelegate * _otaProviderDelegate;
    HMMTRMatterKeypair * _ownerLocalOperationalKeyPair;
    HMMTRMatterKeypair * _ownerSharedOperationalKeyPair;
    HMMTRPairingWindowInfoTable * _pairingWindowInfoTable;
    bool  _pendingMatterStackRestart;
    HAPPowerManager * _powerManager;
    bool  _preWarmTargetIsSystemCommissionerFabric;
    NSNumber * _preWarmedFabricID;
    bool  _preventThreadStopDuringStackRestart;
    HMMTRRegulatoryInfo * _regulatoryInfo;
    bool  _requestedBLEScan;
    HMMTRResidentStateManager * _residentStateManager;
    unsigned long long  _restartCount;
    HMMTRSoftwareUpdateProvider * _softwareUpdateProvider;
    NSMutableSet * _stagedAccessoryServers;
    HMMTRStorage * _storage;
    HMMTRSystemCommissionerControllerParams * _systemCommissionerControllerParams;
    bool  _systemCommissionerFeatureEnabled;
    bool  _systemCommissionerMode;
    HMMTRSystemCommissionerPairingManager * _systemCommissionerPairingManager;
    HMMTRThreadRadioManager * _threadRadioManager;
    HMMTRThreadSoftwareUpdateController * _threadSoftwareUpdateController;
    HMMTRUIDialogPresenter * _uiDialogPresenter;
    HMMTRUserAuthorizationForPairing * _userAuthorizationForPairing;
    bool  _userOwnsConfiguredPreWarmTargetFabric;
    <HMMTRVendorMetadataStore> * _vendorMetadataStore;
}

@property (nonatomic) <HMMTRAccessoryServerBrowserDelegate> *accessoryServerBrowserDelegate;
@property (readonly) NSMutableSet *allowedNodeIDsForConnectionRequests;
@property (readonly) NSData *appleHomeFabricRootPublicKey;
@property (nonatomic, readonly) HMMTRAttestationDataStore *attestationDataStore;
@property (nonatomic, readonly) HMMTRAttestationStatus *attestationStatus;
@property (nonatomic) bool bleScanActive;
@property (nonatomic, retain) NSObject<OS_nw_browser> *bonjourBrowser;
@property (nonatomic, retain) NSMutableArray *bonjourBrowserChanges;
@property unsigned long long browserState;
@property (nonatomic, retain) CBCentralManager *cbCentral;
@property (nonatomic, retain) HMMTRAccessoryServer *commissioneeAccessoryServer;
@property (readonly) NSObject<OS_dispatch_group> *configureDispatchGroup;
@property (nonatomic, retain) NSNumber *configuredPreWarmTargetFabricID;
@property (readonly) bool connectionRequestSuspended;
@property (nonatomic, readonly) HMMTRControllerFactory *controllerFactory;
@property (nonatomic, retain) id controllerFactoryEnablePerPrimaryResidentConfirmationToken;
@property (nonatomic, retain) NSNumber *currentFabricID;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (nonatomic) <HAPAccessoryServerBrowserDelegate> *delegate;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *delegateQueue;
@property (readonly, copy) NSString *description;
@property (readonly) MTRDeviceController *deviceController;
@property (nonatomic, readonly) NSMutableArray *deviceControllerHandlers;
@property (nonatomic, retain) NSDate *diagnosticTimerStart;
@property (nonatomic, retain) HMFTimer *diagnosticsTimer;
@property (nonatomic, readonly, copy) NSSet *fabricsWithActiveClients;
@property (nonatomic, readonly, copy) NSSet *fabricsWithActiveSecondaryClients;
@property (readonly) unsigned long long hash;
@property (readonly) HMMTRFabricControllerStore *homeFabricControllers;
@property int homeKeychainReadyNotificationToken;
@property (nonatomic, readonly) bool isCurrentDeviceMobileAndAllowedAccessoryControl;
@property (nonatomic, readonly) bool isCurrentDevicePrimaryResident;
@property bool lockStateNotificationRegistered;
@property int lockStateNotificationRegistrationToken;
@property (retain) NSDictionary *matterStorageItems;
@property int mtsKeychainReadyNotificationToken;
@property (nonatomic, retain) HMMTRMatterKeypair *nocSigner;
@property (nonatomic, retain) NSMutableSet *nodesAddedToHome;
@property (retain) NSMutableSet *nodesWithPendingACLOverwrite;
@property (nonatomic, readonly) HMMTROTAProviderDelegate *otaProviderDelegate;
@property (nonatomic, retain) HMMTRMatterKeypair *ownerLocalOperationalKeyPair;
@property (nonatomic, retain) HMMTRMatterKeypair *ownerSharedOperationalKeyPair;
@property (readonly) HMMTRPairingWindowInfoTable *pairingWindowInfoTable;
@property bool pendingMatterStackRestart;
@property (nonatomic, retain) HAPPowerManager *powerManager;
@property bool preWarmTargetIsSystemCommissionerFabric;
@property (nonatomic, retain) NSNumber *preWarmedFabricID;
@property bool preventThreadStopDuringStackRestart;
@property (nonatomic, readonly) HMMTRRegulatoryInfo *regulatoryInfo;
@property (nonatomic) bool requestedBLEScan;
@property (nonatomic, readonly) HMMTRResidentStateManager *residentStateManager;
@property unsigned long long restartCount;
@property (nonatomic, readonly) HMMTRSoftwareUpdateProvider *softwareUpdateProvider;
@property (nonatomic, readonly) NSMutableSet *stagedAccessoryServers;
@property (nonatomic, readonly) HMMTRStorage *storage;
@property (readonly) Class superclass;
@property (nonatomic, readonly) HMMTRSystemCommissionerControllerParams *systemCommissionerControllerParams;
@property (nonatomic, readonly) HMMTRControllerWrapper *systemCommissionerControllerWrapper;
@property (nonatomic, readonly) NSNumber *systemCommissionerFabricID;
@property (readonly) NSData *systemCommissionerFabricRootPublicKey;
@property (getter=isSystemCommissionerFeatureEnabled, nonatomic, readonly) bool systemCommissionerFeatureEnabled;
@property (getter=isSystemCommissionerMode, readonly) bool systemCommissionerMode;
@property (nonatomic, readonly) HMMTRMatterKeypair *systemCommissionerNocSigner;
@property (nonatomic, readonly) HMMTRSystemCommissionerPairingManager *systemCommissionerPairingManager;
@property (nonatomic, readonly) HMMTRThreadRadioManager *threadRadioManager;
@property (nonatomic, readonly) HMMTRThreadSoftwareUpdateController *threadSoftwareUpdateController;
@property (nonatomic, readonly) HMMTRUIDialogPresenter *uiDialogPresenter;
@property (nonatomic, readonly) HMMTRUserAuthorizationForPairing *userAuthorizationForPairing;
@property bool userOwnsConfiguredPreWarmTargetFabric;
@property (nonatomic, readonly) <HMMTRVendorMetadataStore> *vendorMetadataStore;

+ (id)logCategory;

- (void).cxx_destruct;
- (void)_abortAllOperationsForFabricID:(id)arg1 reason:(id)arg2;
- (void)_accessoryServerForSystemCommissionerDeviceWithNodeID:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_addToActiveFabrics:(id)arg1;
- (void)_addToPendingFabrics:(id)arg1;
- (id)_allServers;
- (void)_cleanupDisappearedServersOverBLE;
- (void)_cleanupDiscoveredServers;
- (void)_cleanupDiscoveredServersWithReason:(id)arg1 completion:(id /* block */)arg2;
- (void)_cleanupLocallyDiscoveredServers;
- (void)_cleanupStagedServers;
- (void)_clearLocallyDiscoveredFlags;
- (void)_connectPendingFabricConnections;
- (void)_connectPendingFabricConnectionsForFabricID:(id)arg1;
- (id)_createCHIPAccessoryForNodeID:(unsigned long long)arg1;
- (id)_createCHIPAccessoryForNodeID:(unsigned long long)arg1 ifPaired:(bool)arg2 fatalError:(id*)arg3;
- (bool)_createFabricKeyPairsIfAbsent;
- (bool)_createOperationalKeyPairIfAbsent;
- (id)_currentHomeFabricDeviceController;
- (id)_currentHomeFabricDeviceControllerStartupParams;
- (id)_currentHomeFabricDeviceControllerStartupParams1;
- (id)_currentHomeFabricDeviceControllerStartupParams2;
- (bool)_delegateRespondsToSelector:(SEL)arg1;
- (void)_deleteOldPairings;
- (void)_disconnectFromIdleFabric:(id)arg1 reason:(id)arg2;
- (id)_discoveredServerWithDiscriminator:(id)arg1 vendorID:(id)arg2 productID:(id)arg3;
- (int)_discriminator:(id*)arg1 vendorID:(id*)arg2 productID:(id*)arg3 CM:(id*)arg4 fromTXTRecord:(id)arg5;
- (void)_establishConnectionWhenAllowedWithAccessoryConnectionRequest:(id)arg1;
- (void)_establishConnectionWhenAllowedWithFabricConnectionRequest:(id)arg1;
- (void)_fetchDevicePairingsForSystemCommissionerDeviceWithNodeID:(id)arg1 completionHandler:(id /* block */)arg2;
- (unsigned long long)_generateNodeID;
- (unsigned long long)_getRandomFabricId;
- (id)_getSystemCommissionerFabricRootCertificateWithIndex:(id)arg1 ipk:(id*)arg2 controllerNodeID:(id*)arg3;
- (void)_handleAddOrUpdateWithDiscriminator:(id)arg1 vendorID:(id)arg2 productID:(id)arg3 overBLE:(bool)arg4;
- (void)_handleBLEAddOrUpdateWithDiscriminator:(id)arg1 vendorID:(id)arg2 productID:(id)arg3;
- (void)_handleBonjourAddOrUpdateWithDiscriminator:(id)arg1 vendorID:(id)arg2 productID:(id)arg3;
- (void)_handleBonjourBrowserBatchResults;
- (void)_handleBonjourRemoveWithDiscriminator:(id)arg1 vendorID:(id)arg2 productID:(id)arg3 txtRecordRemove:(bool)arg4;
- (void)_handleClientsRemovedWithFabricID:(id)arg1 updateConnectionIdleTimeout:(bool)arg2 reason:(id)arg3;
- (void)_handleLockStateNotification;
- (int)_initializeAndStartBonjourBrowser;
- (void)_invalidateAccessoryServer:(id)arg1 reason:(id)arg2 withCompletion:(id /* block */)arg3;
- (bool)_isDeviceIDPaired:(id)arg1 nodeID:(id*)arg2 fabricID:(id*)arg3;
- (bool)_isDevicePaired:(unsigned long long)arg1;
- (bool)_isNodeIDPaired:(id)arg1 fabricID:(id*)arg2;
- (bool)_isPerControllerStorageEnabled;
- (bool)_isSystemCommissionerFeaturePreferenceEnabled;
- (bool)_loadFabricKeyPairs;
- (void)_logHMMTRFeatures;
- (void)_notifyDelegateOfPairingStep:(unsigned long long)arg1;
- (void)_operationsCompletedForFabricConnectionRequest:(id)arg1 reason:(id)arg2;
- (id)_populateControllerFactoryParams;
- (void)_preWarmCommissioningSession;
- (void)_prepareForPairingWithSetupPayload:(id)arg1 fabricID:(id)arg2 controllerWrapper:(id)arg3 hasPriorSuccessfulPairing:(bool)arg4 category:(id)arg5 completionHandler:(id /* block */)arg6;
- (void)_prepareServerForBLEDiscovery;
- (void)_queueBonjourBrowserOldResult:(id)arg1 newResult:(id)arg2;
- (void)_reenumeratePairedDevices;
- (void)_removeFromActiveFabrics:(id)arg1;
- (void)_removeFromPendingFabrics:(id)arg1;
- (void)_reportAccessoriesKnownToSystemCommissioner;
- (void)_restartDiscovery;
- (id)_serverFromMTSDevicePairing:(id)arg1;
- (void)_setReachability:(bool)arg1 forServer:(id)arg2;
- (void)_setupAndPersistStorageStateForHomeFabricID:(id)arg1 completion:(id /* block */)arg2;
- (void)_setupPairedDevices;
- (void)_setupStorageStateAfterCertFetchForHomeFabricID:(id)arg1 completion:(id /* block */)arg2;
- (void)_setupStorageStateForHomeFabricID:(id)arg1;
- (void)_setupStorageStateForUpdatedHomeFabricID:(id)arg1;
- (void)_setupStorageStateForUpdatedHomeFabricID:(id)arg1 rediscoverAccessories:(bool)arg2;
- (void)_setupStorageStateForUpdatedHomeFabricID:(id)arg1 rediscoverAccessories:(bool)arg2 overrideAccessoryControlAllowed:(bool)arg3;
- (void)_setupStorageStateIfNotFabricID:(id)arg1 rediscoverAccessories:(bool)arg2;
- (void)_stageAccessoryServerWithSetupPayload:(id)arg1 deviceCredentialHandler:(id /* block */)arg2 wifiScanResultsHandler:(id /* block */)arg3 threadScanResultsHandler:(id /* block */)arg4 readyToCancelHandler:(id /* block */)arg5 progressUpdateHandler:(id /* block */)arg6 scanningNetworks:(bool)arg7 hasPriorSuccessfulPairing:(bool)arg8 category:(id)arg9 completionHandler:(id /* block */)arg10;
- (void)_stopMatterStackWithReason:(id)arg1;
- (void)_stopSystemCommissionerFabricID:(id)arg1 reason:(id)arg2;
- (void)_suspendOperationsForFabricID:(id)arg1;
- (bool)_tryAddAccessoryConnectionRequestToExistingFabric:(id)arg1;
- (void)_updateACLOnPairedAccessories;
- (void)_updateAccessoryControlListForServer:(id)arg1 completion:(id /* block */)arg2;
- (void)_updateCentralManager;
- (void)_updateLocallyDiscoveredServerPairedStates;
- (void)abortAndSuspendAllOperationsWithReason:(id)arg1;
- (void)abortOperationsForAccessoryServer:(id)arg1 reason:(id)arg2;
- (id)accessoryServerBrowserDelegate;
- (void)accessoryServerForSystemCommissionerDeviceWithNodeID:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)accessoryServerWithNodeID:(id)arg1;
- (void)addFabricWithActiveClientForFabricID:(id)arg1;
- (void)addFabricWithActiveClients:(id)arg1;
- (void)addFabricWithActiveSecondaryClients:(id)arg1;
- (id)allowedNodeIDsForConnectionRequests;
- (void)announceOtaProviderForNodeID:(id)arg1;
- (id)appleHomeFabricRootPublicKey;
- (id)appleHomeFabricWithID:(id)arg1;
- (id)appleHomeFabricWithUUID:(id)arg1;
- (id)appleHomeTargetFabricUUIDWithID:(id)arg1;
- (id)attestationDataStore;
- (id)attestationStatus;
- (bool)bleScanActive;
- (id)bonjourBrowser;
- (id)bonjourBrowserChanges;
- (unsigned long long)browserState;
- (void)cacheOperationalCertificate:(id)arg1 fabricID:(id)arg2;
- (bool)canEstablishConnectionForNodeID:(id)arg1;
- (id)cbCentral;
- (void)centralManager:(id)arg1 didDiscoverPeripheral:(id)arg2 advertisementData:(id)arg3 RSSI:(id)arg4;
- (void)centralManagerDidUpdateState:(id)arg1;
- (void)cleanUpStaleSystemCommissionerPairingsWithNewlyPairedUUID:(id)arg1 vendorID:(id)arg2 productID:(id)arg3 serialNumber:(id)arg4 setupPayload:(id)arg5;
- (void)clearPreWarmTarget;
- (id)commissioneeAccessoryServer;
- (void)commitStagedAccessoryServer:(id)arg1;
- (void)configure;
- (void)configureControllerForFabric:(id)arg1;
- (id)configureDispatchGroup;
- (id)configuredPreWarmTargetFabricID;
- (void)connectToAccessoryWhenAllowed:(id)arg1 highPriority:(bool)arg2 completion:(id /* block */)arg3;
- (bool)connectionRequestSuspended;
- (id)controllerFactory;
- (id)controllerFactoryEnablePerPrimaryResidentConfirmationToken;
- (void)createMatterOperationalKeyPairIfAbsentWithCompletion:(id /* block */)arg1;
- (void)createNewFabricDataForFabric:(id)arg1 completion:(id /* block */)arg2;
- (void)createNewFabricDataForFabricID:(id)arg1 completion:(id /* block */)arg2;
- (void)createNewFabricIDWithCompletion:(id /* block */)arg1;
- (void)createNewSystemCommissionerFabricNodeIDWithCompletion:(id /* block */)arg1;
- (id)createSystemCommissionerFabricNOCWithSigningCertificate:(id)arg1 operationalPublicKey:(struct __SecKey { }*)arg2 fabricID:(id)arg3 nodeID:(id)arg4 caseAuthenticatedTags:(id)arg5 error:(id*)arg6;
- (id)currentFabric;
- (id)currentFabricID;
- (id)currentHomeFabricDeviceControllerWrapper;
- (void)dealloc;
- (id)delegate;
- (id)delegateQueue;
- (id)deviceController;
- (id)deviceControllerHandlers;
- (void)devicePowerStateChanged:(unsigned long long)arg1;
- (id)diagnosticTimerStart;
- (id)diagnosticsTimer;
- (void)didFinishPairingAccessoryServer:(id)arg1 operationDisabled:(bool)arg2;
- (void)disableUnrestrictedOperationsForAccessoryServer:(id)arg1;
- (void)discardStagedAccessoryServerWithIdentifier:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)discoverAccessoryServerWithIdentifier:(id)arg1;
- (void)discoverAccessoryServerWithNodeID:(id)arg1 completion:(id /* block */)arg2;
- (id)discoveredAccessoryServers;
- (void)dispatchAfter:(unsigned long long)arg1 block:(id /* block */)arg2;
- (void)dispatchAfterConfiguration:(id /* block */)arg1;
- (void)dispatchBlock:(id /* block */)arg1;
- (void)enableUnrestrictedOperationsForAccessoryServer:(id)arg1;
- (id)fabricsWithActiveClients;
- (id)fabricsWithActiveConnections;
- (id)fabricsWithActiveSecondaryClients;
- (id)fabricsWithPendingConnections;
- (void)fetchAllDevicePairingsForSystemCommissionerDeviceWithNodeID:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)fetchCachedOperationalCertificateForFabricID:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)fetchCertificatesForMatterNodeWithCommissionerNodeID:(id)arg1 commissioneeNodeID:(id)arg2 forOwner:(bool)arg3 publicKey:(id)arg4 fabricID:(id)arg5 completionHandler:(id /* block */)arg6;
- (void)fetchCommissioningCertificatesForAccessoryWithOperationalPublicKey:(id)arg1 rootCertificate:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)fetchCommissioningCertificatesForSharedAdminWithDeviceNodeID:(id)arg1 forOwner:(bool)arg2 publicKey:(id)arg3 fabricID:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)fetchCommissioningCertificatesFromOwnerForPublicKey:(id)arg1 fabricID:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)fetchPreferredThreadCredentialsForServer:(id)arg1 withCompletion:(id /* block */)arg2;
- (void)fetchSystemCommissionerRootCertificateWithCompletion:(id /* block */)arg1;
- (void)finishSystemCommissionerFabricCommissioningWithFabricID:(id)arg1 rootCACert:(id)arg2 ipk:(id)arg3 controllerNodeID:(id)arg4 commissioneeNodeID:(id)arg5 queue:(id)arg6 completion:(id /* block */)arg7;
- (void)getNOCFromResidentForSharedUserForFabric:(id)arg1;
- (void)handleDeviceNoLongerPrimaryResidentWithCompletion:(id /* block */)arg1;
- (void)handleHomeAddedAccessoryWithNodeID:(id)arg1 fabric:(id)arg2;
- (void)handleHomeDeletionWithFabric:(id)arg1;
- (void)handleHomeRemovedAccessoryWithNodeID:(id)arg1;
- (void)handlePairingCompletionForAccessoryWithNodeID:(id)arg1 fabricID:(id)arg2 vendorID:(id)arg3 productID:(id)arg4 configNumber:(id)arg5 category:(id)arg6 topology:(id)arg7;
- (void)handlePairingForThreadAccessoryWithFabricID:(id)arg1 nodeID:(id)arg2;
- (void)handlePrimaryResidentDataReady;
- (void)handleResidentReachabilityChangeForFabric:(id)arg1;
- (void)handleSystemKeychainStoreUpdatedNotification:(id)arg1;
- (void)handleThreadNetworkStateChangedNotification:(id)arg1;
- (void)handleThreadRadioStateChanged;
- (void)handleUpdateNotificationsEnabled:(bool)arg1 forFabric:(id)arg2 keepAliveOnly:(bool)arg3;
- (id)homeFabricControllers;
- (int)homeKeychainReadyNotificationToken;
- (void)indicateNotificationFromServer:(id)arg1 notifyType:(unsigned long long)arg2 withDictionary:(id)arg3;
- (id)initWithQueue:(id)arg1 storeDirectoryURL:(id)arg2;
- (void)invalidateAccessoryServer:(id)arg1 reason:(id)arg2;
- (void)invalidateAccessoryServer:(id)arg1 reason:(id)arg2 withCompletion:(id /* block */)arg3;
- (void)invalidateAllDiscoveredServersWithReason:(id)arg1 completion:(id /* block */)arg2;
- (bool)isCurrentDeviceAllowedAccessoryControlDespiteReachableResident;
- (bool)isCurrentDeviceAllowedAccessoryControlDespiteReachableResidentForFabric:(id)arg1;
- (bool)isCurrentDeviceAllowedAccessoryControlPerExplicitRequestDespiteReachableResidentForFabric:(id)arg1;
- (bool)isCurrentDeviceMobileAndAllowedAccessoryControl;
- (bool)isCurrentDeviceMobileAndResidentReachable;
- (bool)isCurrentDeviceMobileAndResidentReachableAndThreadCapableForFabric:(id)arg1;
- (bool)isCurrentDevicePrimaryResident;
- (bool)isOperationAllowedForAccessoryServer:(id)arg1;
- (bool)isOwnerForHomeWithFabric:(id)arg1;
- (bool)isSystemCommissionerFeatureEnabled;
- (bool)isSystemCommissionerMode;
- (long long)linkType;
- (bool)lockStateNotificationRegistered;
- (int)lockStateNotificationRegistrationToken;
- (id)logIdentifier;
- (void)matchAccessoryServerWithSetupID:(id)arg1 serverIdentifier:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)matterStorageItems;
- (int)mtsKeychainReadyNotificationToken;
- (id)nocSigner;
- (id)nodeIDForFabricID:(id)arg1 deviceIdentifier:(id)arg2;
- (id)nodesAddedToHome;
- (id)nodesWithPendingACLOverwrite;
- (void)notifyPairingCompletionForAccessoryServer:(id)arg1;
- (void)openCommissioningWindowForSystemCommissionerDeviceWithNodeID:(id)arg1 duration:(double)arg2 completionHandler:(id /* block */)arg3;
- (void)operationsStartedForFabricConnectionRequest:(id)arg1;
- (id)otaProviderDelegate;
- (void)overrideCurrentFabricID:(id)arg1;
- (id)ownerLocalOperationalKeyPair;
- (id)ownerSharedOperationalKeyPair;
- (id)pairingWindowInfoTable;
- (bool)pendingMatterStackRestart;
- (id)powerManager;
- (bool)preWarmTargetIsSystemCommissionerFabric;
- (id)preWarmedFabricID;
- (void)prepareForPairingWithSetupPayload:(id)arg1 fabric:(id)arg2 targetFabricUUID:(id)arg3 fabricID:(id)arg4 owner:(bool)arg5 ownerCertFetchSupported:(bool)arg6 completionHandler:(id /* block */)arg7;
- (bool)preventThreadStopDuringStackRestart;
- (void)readCommissioningWindowStatusForSystemCommissionerDeviceWithNodeID:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)registerPairingWindowWithSetupPayload:(id)arg1 duration:(double)arg2 accessoryServer:(id)arg3;
- (id)regulatoryInfo;
- (void)removeActiveClientWithFabricID:(id)arg1 updateConnectionIdleTimeout:(bool)arg2 reason:(id)arg3;
- (void)removeActiveSecondaryClientWithFabricID:(id)arg1 updateConnectionIdleTimeout:(bool)arg2 reason:(id)arg3;
- (void)removeAllDevicePairingsForSystemCommissionerDeviceWithNodeID:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)removeDevicePairingFabricForSystemCommissionerDeviceWithNodeID:(id)arg1 fabric:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)removeFabricWithActiveClients:(id)arg1;
- (void)removeFabricWithActiveSecondaryClients:(id)arg1;
- (void)removeSystemCommissionerFabricAccessoryWithNodeID:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)requestedBLEScan;
- (id)residentStateManager;
- (unsigned long long)restartCount;
- (void)restartDiscovery;
- (void)resumeAllOperations;
- (void)setAccessoryServerBrowserDelegate:(id)arg1;
- (void)setBleScanActive:(bool)arg1;
- (void)setBonjourBrowser:(id)arg1;
- (void)setBonjourBrowserChanges:(id)arg1;
- (void)setBrowserState:(unsigned long long)arg1;
- (void)setCbCentral:(id)arg1;
- (void)setCommissioneeAccessoryServer:(id)arg1;
- (void)setConfiguredPreWarmTargetFabricID:(id)arg1;
- (void)setConnectionRequestSuspended:(bool)arg1;
- (void)setControllerFactoryEnablePerPrimaryResidentConfirmationToken:(id)arg1;
- (void)setCurrentFabricID:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDelegate:(id)arg1 queue:(id)arg2;
- (void)setDelegateQueue:(id)arg1;
- (void)setDiagnosticTimerStart:(id)arg1;
- (void)setDiagnosticsTimer:(id)arg1;
- (void)setHomeKeychainReadyNotificationToken:(int)arg1;
- (void)setLockStateNotificationRegistered:(bool)arg1;
- (void)setLockStateNotificationRegistrationToken:(int)arg1;
- (void)setMatterStorageItems:(id)arg1;
- (void)setMtsKeychainReadyNotificationToken:(int)arg1;
- (void)setNocSigner:(id)arg1;
- (void)setNodesAddedToHome:(id)arg1;
- (void)setNodesWithPendingACLOverwrite:(id)arg1;
- (void)setOwnerLocalOperationalKeyPair:(id)arg1;
- (void)setOwnerSharedOperationalKeyPair:(id)arg1;
- (void)setPendingMatterStackRestart:(bool)arg1;
- (void)setPowerManager:(id)arg1;
- (void)setPreWarmTargetIsSystemCommissionerFabric:(bool)arg1;
- (void)setPreWarmTargetToFabricWithID:(id)arg1 isOwner:(bool)arg2;
- (void)setPreWarmTargetToSystemCommissionerFabric;
- (void)setPreWarmedFabricID:(id)arg1;
- (void)setPreventThreadStopDuringStackRestart:(bool)arg1;
- (void)setRequestedBLEScan:(bool)arg1;
- (void)setRestartCount:(unsigned long long)arg1;
- (void)setSystemCommissionerMode:(bool)arg1;
- (void)setSystemCommissionerPairingManager:(id)arg1;
- (void)setUserOwnsConfiguredPreWarmTargetFabric:(bool)arg1;
- (void)setupPairedDevices;
- (void)setupStorageStateAfterCertFetchForHomeFabricID:(id)arg1 completion:(id /* block */)arg2;
- (void)setupStorageStateAndRediscoverAccessoriesForHomeFabricID:(id)arg1;
- (void)setupStorageStateForHomeFabricID:(id)arg1;
- (void)setupStorageStateForHomeFabricID:(id)arg1 completion:(id /* block */)arg2;
- (void)setupStorageStateWithoutRediscoveringAccessoriesForHomeFabricID:(id)arg1;
- (id)softwareUpdateProvider;
- (void)stageAccessoryServerWithSetupPayload:(id)arg1 fabricID:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)stageAccessoryServerWithSetupPayload:(id)arg1 fabricID:(id)arg2 deviceCredentialHandler:(id /* block */)arg3 wifiScanResultsHandler:(id /* block */)arg4 threadScanResultsHandler:(id /* block */)arg5 readyToCancelHandler:(id /* block */)arg6 progressUpdateHandler:(id /* block */)arg7 scanningNetworks:(bool)arg8 completionHandler:(id /* block */)arg9;
- (void)stageAccessoryServerWithSetupPayload:(id)arg1 hasPriorSuccessfulPairing:(bool)arg2 category:(id)arg3 completionHandler:(id /* block */)arg4;
- (id)stagedAccessoryServerWithIdentifier:(id)arg1;
- (id)stagedAccessoryServers;
- (void)startBluetoothScan;
- (void)startDiscoveringAccessoryServers;
- (void)stopBluetoothScan;
- (void)stopDiscoveringAccessoryServers;
- (id)storage;
- (void)storageDidBecomeAvailable:(id)arg1;
- (void)storageDidUpdateData:(id)arg1 isLocalChange:(bool)arg2;
- (bool)supportsCommissioningCertificateRetrievalForCurrentlyPairingAccessory;
- (bool)supportsCommissioningCertificateRetrievalForHomeUUID:(id)arg1;
- (id)systemCommissionerControllerParams;
- (id)systemCommissionerControllerWrapper;
- (id)systemCommissionerFabricID;
- (id)systemCommissionerFabricRootPublicKey;
- (bool)systemCommissionerMode;
- (id)systemCommissionerNocSigner;
- (id)systemCommissionerPairingManager;
- (id)threadRadioManager;
- (id)threadSoftwareUpdateController;
- (id)uiDialogPresenter;
- (void)updateAccessoryACLAndGetNOCFromResidentForSharedUserForFabric:(id)arg1;
- (id)userAuthorizationForPairing;
- (bool)userOwnsConfiguredPreWarmTargetFabric;
- (id)vendorMetadataStore;
- (void)waitForDeviceControllerWithCompletion:(id /* block */)arg1;

@end
