/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HomeKitMatter.framework/HomeKitMatter
 */

@interface HMMTRSystemCommissionerControllerParams : HMFObject <MTROperationalCertificateIssuer> {
    NSNumber * _adminNodeID;
    NSArray * _certificationDeclarationCertificates;
    NSNumber * _commissioneeNodeID;
    NSNumber * _commissioningFabricID;
    HMMTRControllerFactory * _controllerFactory;
    HMMTRControllerWrapper * _controllerWrapper;
    bool  _generatingKeyPair;
    NSArray * _productAttestationAuthorityCertificates;
    HMMTRMatterKeypair * _v1keypair;
    NSObject<OS_dispatch_queue> * _workQueue;
}

@property (nonatomic, retain) NSNumber *adminNodeID;
@property (nonatomic, copy) NSArray *certificationDeclarationCertificates;
@property (retain) NSNumber *commissioneeNodeID;
@property (nonatomic, retain) NSNumber *commissioningFabricID;
@property (nonatomic, readonly) HMMTRControllerFactory *controllerFactory;
@property (nonatomic, retain) HMMTRControllerWrapper *controllerWrapper;
@property (nonatomic) bool generatingKeyPair;
@property (nonatomic, copy) NSArray *productAttestationAuthorityCertificates;
@property (nonatomic, readonly) bool shouldSkipAttestationCertificateValidation;
@property (nonatomic, retain) HMMTRMatterKeypair *v1keypair;
@property (readonly) NSObject<OS_dispatch_queue> *workQueue;

+ (id)logCategory;

- (void).cxx_destruct;
- (id)_buildControllerParams1WithV1Keypair:(id)arg1;
- (id)_buildControllerParams2WithV1Keypair:(id)arg1;
- (void)_buildV1KeyFromScratch;
- (void)_buildV1KeyFromV0KeyAllowingNew:(bool)arg1;
- (void)_buildV1KeyWithPrivateKey:(struct __SecKey { }*)arg1 operationalKey:(struct __SecKey { }*)arg2 ipk:(id)arg3 rootCert:(id)arg4 operationalCert:(id)arg5 updatingMTSKeyValueStore:(bool)arg6;
- (void)_buildV1KeyWithV0KeyPair:(id)arg1;
- (bool)_checkAndUpdateValidityPeriodOfV1Keypair:(id)arg1 newKeyPair:(id*)arg2;
- (bool)_findFabricRecordInMTSKeyValueStoreMatchingKeyPair:(id)arg1 ipk:(id*)arg2 rootCert:(id*)arg3 operationalKey:(id*)arg4 operationalCert:(id*)arg5;
- (void)_handleKeychainDataChanged;
- (void)_obtainControllerWrapperWithV1KeyPair:(id)arg1 startupParams:(id)arg2;
- (void)_startWithV1Keypair:(id)arg1;
- (void)_updateMTSKeyValueStore:(id)arg1;
- (id)adminNodeID;
- (id)certificationDeclarationCertificates;
- (id)commissioneeNodeID;
- (id)commissioningFabricID;
- (id)controllerFactory;
- (id)controllerWrapper;
- (bool)fetchControllerParamsAllowingNew:(bool)arg1 nocSigner:(id*)arg2 controllerWrapper:(id*)arg3;
- (bool)generatingKeyPair;
- (void)handleKeyPairDataChanged;
- (id)initWithQueue:(id)arg1 controllerFactory:(id)arg2;
- (void)issueOperationalCertificateForRequest:(id)arg1 attestationInfo:(id)arg2 controller:(id)arg3 completion:(id /* block */)arg4;
- (id)mtsKeyValueStore;
- (id)productAttestationAuthorityCertificates;
- (void)setAdminNodeID:(id)arg1;
- (void)setCertificationDeclarationCertificates:(id)arg1;
- (void)setCommissioneeNodeID:(id)arg1;
- (void)setCommissioningFabricID:(id)arg1;
- (void)setControllerWrapper:(id)arg1;
- (void)setGeneratingKeyPair:(bool)arg1;
- (void)setMTSStoredValue:(id)arg1 forKey:(id)arg2 error:(id*)arg3;
- (void)setProductAttestationAuthorityCertificates:(id)arg1;
- (void)setV1keypair:(id)arg1;
- (bool)shouldSkipAttestationCertificateValidation;
- (id)storeV0MatterKeypair;
- (id)storeV0MatterKeypairWithPrivateKey:(struct __SecKey { }*)arg1;
- (id)storeV1MatterKeypairWithPrivateKey:(struct __SecKey { }*)arg1 operationalKey:(struct __SecKey { }*)arg2 rootCert:(id)arg3 operationalCert:(id)arg4 ipk:(id)arg5;
- (id)v0MatterKeypairFromKeychain;
- (bool)v1KeypairIsEquivalentTo:(id)arg1;
- (id)v1MatterKeypairFromKeychain;
- (id)v1keypair;
- (id)workQueue;

@end
