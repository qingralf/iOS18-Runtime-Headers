/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HomeKitMetrics.framework/HomeKitMetrics
 */

@interface HMMStandardCounterGroup : NSObject <HMMCounterGroup> {
    HMMCoreDataNamedGroup * _coreDataGroup;
    long long  _coreDataGroupToken;
    HMMCoreDataCounterStorage * _coreDataStorage;
    HMMDateProvider * _dateProvider;
    NSMutableDictionary * _ephemeralContainers;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    NSMutableDictionary * _observers;
    <HMMCounterDatePartitionProvider> * _partitionProvider;
    NSMutableDictionary * _runningDurationCounters;
    <HMMUptimeProvider> * _uptimeProvider;
}

@property (nonatomic, readonly) HMMCoreDataNamedGroup *coreDataGroup;
@property (nonatomic, readonly) HMMCoreDataCounterStorage *coreDataStorage;
@property (nonatomic, readonly) HMMDateProvider *dateProvider;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly, copy) NSArray *ephemeralContainerNames;
@property (nonatomic, readonly) NSMutableDictionary *ephemeralContainers;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSMutableDictionary *observers;
@property (nonatomic, readonly) <HMMCounterDatePartitionProvider> *partitionProvider;
@property (nonatomic, readonly) NSMutableDictionary *runningDurationCounters;
@property (readonly) Class superclass;
@property (nonatomic, readonly) <HMMUptimeProvider> *uptimeProvider;

+ (void)deleteCountersUsingPredicate:(id)arg1 coreDataStorage:(id)arg2;
+ (void)deletePartitionsAfterDate:(id)arg1 coreDataStorage:(id)arg2;
+ (void)deletePartitionsBeforeDate:(id)arg1 coreDataStorage:(id)arg2;
+ (id)groupFromSpecifier:(id)arg1 dateProvider:(id)arg2 partitionProvider:(id)arg3 coreDataStorage:(id)arg4;
+ (id)groupFromSpecifier:(id)arg1 dateProvider:(id)arg2 partitionProvider:(id)arg3 coreDataStorage:(id)arg4 uptimeProvider:(id)arg5;

- (void).cxx_destruct;
- (void)addDuration:(double)arg1 toCounter:(id)arg2 endTime:(id)arg3;
- (bool)addEphemeralContainerWithName:(id)arg1;
- (void)addObserver:(id)arg1 forCounter:(id)arg2;
- (id)coreDataGroup;
- (id)coreDataStorage;
- (id)countersInDatePartition:(id)arg1;
- (id)countersInEphemeralContainer:(id)arg1;
- (id)datePartitions;
- (id)dateProvider;
- (void)deactivateEphemeralContainerWithName:(id)arg1;
- (double)durationForCounter:(id)arg1 inDatePartition:(id)arg2;
- (double)durationForCounter:(id)arg1 inEphemeralContainer:(id)arg2;
- (id)ephemeralContainerNames;
- (id)ephemeralContainers;
- (void)incrementCounter:(id)arg1;
- (void)incrementCounter:(id)arg1 by:(long long)arg2;
- (void)incrementCounter:(id)arg1 inDatePartition:(id)arg2 by:(long long)arg3;
- (id)initWithCoreDataGroup:(id)arg1 dateProvider:(id)arg2 partitionProvider:(id)arg3 coreDataStorage:(id)arg4;
- (id)initWithCoreDataGroup:(id)arg1 dateProvider:(id)arg2 partitionProvider:(id)arg3 coreDataStorage:(id)arg4 uptimeProvider:(id)arg5;
- (void)notifyObserversForCounter:(id)arg1 previousCount:(long long)arg2 newCount:(long long)arg3;
- (id)observers;
- (id)observersForCounter:(id)arg1;
- (id)partitionProvider;
- (void)pauseDurationCounter:(id)arg1;
- (void)removeEphemeralContainerWithName:(id)arg1;
- (void)resumeDurationCounter:(id)arg1;
- (id)runningDurationCounters;
- (long long)sumOfCountersInDatePartition:(id)arg1;
- (long long)sumOfCountersInEphemeralContainer:(id)arg1;
- (void)updateAllDurationCounters;
- (void)updateCountersBeforeSave;
- (void)updateDurationCounter:(id)arg1;
- (id)uptimeProvider;
- (long long)valueForCounter:(id)arg1 inDatePartition:(id)arg2;
- (long long)valueForCounter:(id)arg1 inEphemeralContainer:(id)arg2;

@end
