/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/IDSFoundation.framework/IDSFoundation
 */

@interface IDSIncomingNiceMessage : NSObject {
    NSString * _cachedDescription;
    NSDictionary * _messageDictionary;
    NSString * _topic;
}

@property (nonatomic, retain) NSString *cachedDescription;
@property (nonatomic, readonly) NSData *certifiedDeliveryRTS;
@property (nonatomic, readonly) NSNumber *certifiedDeliveryVersion;
@property (nonatomic, readonly) NSNumber *command;
@property (nonatomic, readonly) NSNumber *commandContext;
@property (nonatomic, readonly) NSNumber *desiredProtocol;
@property (nonatomic, readonly) NSData *encryptedPayload;
@property (nonatomic, readonly) NSString *encryptionTypeStr;
@property (nonatomic, readonly) NSNumber *expectsPeerResponse;
@property (nonatomic, readonly) NSNumber *expirationDate;
@property (nonatomic, readonly) NSString *failureMessageID;
@property (nonatomic, readonly) NSNumber *failureReason;
@property (nonatomic, readonly) NSString *failureReasonMessage;
@property (nonatomic, readonly) IDSURI *fromURI;
@property (nonatomic, readonly) NSData *groupIDData;
@property (nonatomic, readonly) NSNumber *isBulkedPayload;
@property (nonatomic, readonly) bool isTrustedSender;
@property (nonatomic, readonly) NSNumber *messageChunkNumber;
@property (nonatomic, retain) NSDictionary *messageDictionary;
@property (nonatomic, readonly) NSArray *messageList;
@property (nonatomic, readonly) NSNumber *originalCommand;
@property (nonatomic, readonly) NSNumber *originalTimestamp;
@property (nonatomic, readonly) NSString *originalUUID;
@property (nonatomic, readonly) NSData *payloadMetadataData;
@property (nonatomic, readonly) NSString *peerResponseIdentifier;
@property (nonatomic, readonly) NSNumber *pendingMessageCount;
@property (nonatomic, readonly) NSNumber *pendingMessagePerSenderCount;
@property (nonatomic, readonly) NSString *pushUUID;
@property (nonatomic, readonly) NSData *rawBulkedData;
@property (nonatomic, readonly) NSDictionary *rawMessage;
@property (nonatomic, readonly) NSData *rawUnencryptedPayload;
@property (nonatomic, readonly) NSString *receiverShortHandle;
@property (nonatomic, readonly) NSString *reportID;
@property (nonatomic, readonly) NSNumber *retryCount;
@property (nonatomic, readonly) IDSPushToken *senderPushToken;
@property (nonatomic, readonly) NSString *senderShortHandle;
@property (nonatomic, readonly) NSNumber *serverTimestamp;
@property (nonatomic, readonly) NSNumber *storageContext;
@property (nonatomic, readonly) NSString *storageFetchUUID;
@property (nonatomic, readonly) NSNumber *storageFlags;
@property (nonatomic, readonly) IDSURI *toURI;
@property (nonatomic, retain) NSString *topic;
@property (nonatomic, readonly) NSNumber *totalChunkCount;
@property (nonatomic, readonly) NSData *updateHash;
@property (nonatomic, readonly) NSNumber *wantsAppAck;
@property (nonatomic, readonly) NSNumber *wantsCheckpointing;

- (void).cxx_destruct;
- (id)cachedDescription;
- (id)certifiedDeliveryRTS;
- (id)certifiedDeliveryVersion;
- (id)command;
- (id)commandContext;
- (id)copy;
- (id)description;
- (id)desiredProtocol;
- (id)encryptedPayload;
- (id)encryptionTypeStr;
- (id)expectsPeerResponse;
- (id)expirationDate;
- (id)failureMessageID;
- (id)failureReason;
- (id)failureReasonMessage;
- (id)fromURI;
- (id)groupIDData;
- (id)initWithMessageDictionary:(id)arg1 topic:(id)arg2;
- (id)isBulkedPayload;
- (bool)isEqual:(id)arg1;
- (bool)isTrustedSender;
- (id)messageChunkNumber;
- (id)messageDictionary;
- (id)messageList;
- (id)originalCommand;
- (id)originalTimestamp;
- (id)originalUUID;
- (id)payloadMetadataData;
- (id)peerResponseIdentifier;
- (id)pendingMessageCount;
- (id)pendingMessagePerSenderCount;
- (id)pushUUID;
- (id)rawBulkedData;
- (id)rawMessage;
- (id)rawUnencryptedPayload;
- (id)receiverShortHandle;
- (id)reportID;
- (id)retryCount;
- (id)senderPushToken;
- (id)senderShortHandle;
- (id)serverTimestamp;
- (void)setCachedDescription:(id)arg1;
- (void)setMessageDictionary:(id)arg1;
- (void)setTopic:(id)arg1;
- (id)storageContext;
- (id)storageFetchUUID;
- (id)storageFlags;
- (id)toURI;
- (id)topic;
- (id)totalChunkCount;
- (id)updateHash;
- (id)wantsAppAck;
- (id)wantsCheckpointing;

@end
