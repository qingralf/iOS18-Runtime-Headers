/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/LockedContentServices.framework/LockedContentServices
 */

@interface LCSCaptureApplicationMonitor : NSObject <LCSCaptureApplicationProvider, LCSCaptureApplicationTCCObserver, LCSExtensionObserver> {
    LCSFirstUnlockManager * _firstUnlockManager;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    NSDictionary * _lock_knownCaptureApplicationsByBundleIdentifier;
    <NSObject> * _metadataChangedObserverToken;
    NSObject<OS_dispatch_queue> * _queue;
    <LCSExtensionProvider> * _queue_extensionMonitor;
    NSHashTable * _queue_observers;
    <LCSCaptureApplicationTCCObservationToken> * _tccObservationToken;
}

@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSDictionary *knownCaptureApplicationsByBundleIdentifier;
@property (readonly) Class superclass;

+ (id)_bundleRecordForBundleIdentifier:(id)arg1;
+ (bool)_hasCameraUsageDescriptionForBundleIdentifier:(id)arg1;
+ (bool)_hasCaptureAppIntentForBundleIdentifier:(id)arg1 extensionBundleIdentifier:(id)arg2;

- (void).cxx_destruct;
- (void)_beginObservingMetadataChanges;
- (id)_captureApplicationsFromKnownExtensions:(id)arg1 currentCaptureApplications:(id)arg2;
- (void)_endObservingMetadataChanges;
- (id)_lock_evaluateCaptureApplicationRequirementsForKnownExtensions:(id)arg1;
- (void)_lock_updateKnownCaptureApplications:(id)arg1;
- (void)_processMetadataChangeForBundleIdentifiers:(id)arg1;
- (void)_queue_cancel;
- (void)_queue_start;
- (void)_reevaluateCaptureApplicationRequirements;
- (void)_updateTCCMonitorForBundleIdentifiers:(id)arg1;
- (void)addObserver:(id)arg1;
- (void)captureExtensionProvider:(id)arg1 didUpdateKnownExtensions:(id)arg2;
- (void)dealloc;
- (id)init;
- (void)invalidate;
- (bool)isCaptureApplication:(id)arg1;
- (id)knownCaptureApplicationsByBundleIdentifier;
- (void)removeObserver:(id)arg1;
- (void)tccMonitor:(id)arg1 didUpdateCameraTCCStatuses:(id)arg2;

@end
