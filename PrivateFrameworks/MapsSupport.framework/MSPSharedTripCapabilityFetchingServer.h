/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MapsSupport.framework/MapsSupport
 */

@interface MSPSharedTripCapabilityFetchingServer : NSObject <MSPSharedTripCapabilityFetchingQueueDelegate, NSXPCListenerDelegate> {
    GCDTimer * _blockListCoalescingTimer;
    id  _blockListMonitoringObserver;
    NSMutableDictionary * _identifierToMapsStatus;
    NSMutableDictionary * _identifierToMessagesStatus;
    NSMutableDictionary * _identifierToTextMessageStatus;
    NSXPCListener * _listener;
    MSPSharedTripIDSCapabilityFetchingQueue * _mapsStatusFetchQueue;
    IDSBatchIDQueryController * _messagesBatchController;
    MSPSharedTripIDSCapabilityFetchingQueue * _messagesStatusFetchQueue;
    NSMapTable * _peersByConnection;
    GCDTimer * _purgeTimer;
    MSPSharedTripMessagesCapabilityFetchingQueue * _textMessageStatusFetchQueue;
    NSObject<OS_dispatch_queue> * _workQueue;
}

@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)_checkBlockList;
- (bool)_connectionCanControlSharing:(id)arg1;
- (void)_notifyPeersForIDSHandlesIfNeeded:(id)arg1;
- (void)_performBlockOnAllCachedStatus:(id /* block */)arg1;
- (void)_performBlockOnAllQueues:(id /* block */)arg1;
- (void)_purgeExpiredStatuses;
- (void)_removePeerForConnection:(id)arg1;
- (id)_resolvedStatusForHandle:(id)arg1;
- (void)_scheduleCoalescedBlockListCheckIfNeeded;
- (bool)_shouldPermitFetchingHandle:(id)arg1;
- (void)_startMonitoringSystemBlockListIfNeeded;
- (void)_stopMonitoringSystemBlockList;
- (void)_systemBlockListDidUpdate;
- (void)_verifyCurrentlyBlockedStatuses;
- (void)_verifyCurrentlyUnblockedStatuses;
- (void)cancelFetchCapabilitiesForContacts:(id)arg1;
- (void)capabilityFetchingQueue:(id)arg1 didFetchStatusForHandles:(id)arg2;
- (void)cleanConnections;
- (void)createXPCListener;
- (void)dealloc;
- (void)fetchCapabilitiesForContacts:(id)arg1;
- (id)init;
- (bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;

@end
