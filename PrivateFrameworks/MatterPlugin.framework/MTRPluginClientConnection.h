/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MatterPlugin.framework/MatterPlugin
 */

@interface MTRPluginClientConnection : NSObject <MTRXPCServerProtocol> {
    bool  _backgroundModeEntitled;
    NSXPCConnection * _connection;
    NSDictionary * _context;
    <MTRPluginClientConnectionDelegate> * _delegate;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    NSUUID * _homeUUID;
    int  _pid;
    MTRPluginClient * _pluginClient;
    NSObject<OS_dispatch_queue> * _queue;
    NSUUID * _sessionID;
}

@property bool backgroundModeEntitled;
@property (retain) NSXPCConnection *connection;
@property (retain) NSDictionary *context;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (retain) <MTRPluginClientConnectionDelegate> *delegate;
@property (retain) NSObject<OS_dispatch_queue> *delegateQueue;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (retain) NSUUID *homeUUID;
@property int pid;
@property (retain) MTRPluginClient *pluginClient;
@property (retain) NSObject<OS_dispatch_queue> *queue;
@property (retain) NSUUID *sessionID;
@property (readonly) Class superclass;

+ (id)_interfaceForClientProtocol;
+ (id)_interfaceForServerProtocol;
+ (id)clientConnectionQueue;

- (void).cxx_destruct;
- (bool)_deliverMessagePayloadToPrimaryResident:(id)arg1 responseHandler:(id /* block */)arg2;
- (bool)_isRunning;
- (bool)_setupConnection;
- (bool)backgroundModeEntitled;
- (id)connection;
- (id)context;
- (id)delegate;
- (id)delegateQueue;
- (id)description;
- (oneway void)deviceController:(id)arg1 controllerNodeIDWithReply:(id /* block */)arg2;
- (oneway void)deviceController:(id)arg1 getIsRunningWithReply:(id /* block */)arg2;
- (oneway void)deviceController:(id)arg1 getUniqueIdentifierWithReply:(id /* block */)arg2;
- (oneway void)deviceController:(id)arg1 nodeID:(id)arg2 downloadLogOfType:(long long)arg3 timeout:(double)arg4 completion:(id /* block */)arg5;
- (oneway void)deviceController:(id)arg1 nodeID:(id)arg2 getDeviceCachePrimedWithReply:(id /* block */)arg3;
- (oneway void)deviceController:(id)arg1 nodeID:(id)arg2 getEstimatedStartTimeWithReply:(id /* block */)arg3;
- (oneway void)deviceController:(id)arg1 nodeID:(id)arg2 getEstimatedSubscriptionLatencyWithReply:(id /* block */)arg3;
- (oneway void)deviceController:(id)arg1 nodeID:(id)arg2 getStateWithReply:(id /* block */)arg3;
- (oneway void)deviceController:(id)arg1 nodeID:(id)arg2 invokeCommandWithEndpointID:(id)arg3 clusterID:(id)arg4 commandID:(id)arg5 commandFields:(id)arg6 expectedValues:(id)arg7 expectedValueInterval:(id)arg8 timedInvokeTimeout:(id)arg9 serverSideProcessingTimeout:(id)arg10 completion:(id /* block */)arg11;
- (oneway void)deviceController:(id)arg1 nodeID:(id)arg2 openCommissioningWindowWithSetupPasscode:(id)arg3 discriminator:(id)arg4 duration:(id)arg5 completion:(id /* block */)arg6;
- (oneway void)deviceController:(id)arg1 nodeID:(id)arg2 readAttributePaths:(id)arg3 withReply:(id /* block */)arg4;
- (oneway void)deviceController:(id)arg1 nodeID:(id)arg2 readAttributeWithEndpointID:(id)arg3 clusterID:(id)arg4 attributeID:(id)arg5 params:(id)arg6 withReply:(id /* block */)arg7;
- (oneway void)deviceController:(id)arg1 nodeID:(id)arg2 writeAttributeWithEndpointID:(id)arg3 clusterID:(id)arg4 attributeID:(id)arg5 value:(id)arg6 expectedValueInterval:(id)arg7 timedWriteTimeout:(id)arg8;
- (oneway void)deviceController:(id)arg1 updateControllerConfiguration:(id)arg2;
- (id)homeUUID;
- (id)initWithClientConnection:(id)arg1 backgroundModeEntitled:(bool)arg2 pid:(int)arg3 context:(id)arg4 delegate:(id)arg5 delegateQueue:(id)arg6;
- (void)interrupted;
- (void)invalidate;
- (void)invalidated;
- (int)pid;
- (id)pluginClient;
- (id)queue;
- (void)resume;
- (id)sessionID;
- (void)setBackgroundModeEntitled:(bool)arg1;
- (void)setConnection:(id)arg1;
- (void)setContext:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDelegateQueue:(id)arg1;
- (void)setHomeUUID:(id)arg1;
- (void)setPid:(int)arg1;
- (void)setPluginClient:(id)arg1;
- (void)setQueue:(id)arg1;
- (void)setSessionID:(id)arg1;
- (void)updateControllerConfigurationForRemotePeer;

@end
