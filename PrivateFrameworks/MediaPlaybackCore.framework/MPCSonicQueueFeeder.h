/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore
 */

@interface MPCSonicQueueFeeder : MPQueueFeeder <MPCModelPlaybackRequestEnvironmentConsuming, MPCQueueControllerBehaviorMusicDataSource, MPRTCReportingItemSessionContaining> {
    NSDictionary * _endTimeModifications;
    MPModelGenericObject * _fallbackSectionRepresentation;
    MPCModelGenericAVItemUserIdentityPropertySet * _identityPropertySet;
    bool  _isSiriInitiated;
    MPCModelPlaybackContext * _playbackContext;
    MPCPlaybackRequestEnvironment * _playbackRequestEnvironment;
    MPModelRequest<MPCModelPlaybackRequest> * _request;
    MPRequestResponseController * _requestController;
    MSVSectionedCollection * _responseContentIDs;
    NSString * _rtcReportingPlayQueueSourceIdentifier;
    <MPMutableIdentifierListSection> * _section;
    MPIdentifierSet * _startItemIdentifiers;
    NSDictionary * _startTimeModifications;
    MPCSonicQueueFeeder_Swift * _swift;
}

@property (nonatomic, readonly) bool containsLiveStream;
@property (nonatomic, readonly) bool containsRadioContent; /* unknown property attribute: ? */
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (nonatomic, copy) MPModelGenericObject *fallbackSectionRepresentation;
@property (readonly) unsigned long long hash;
@property (nonatomic, copy) MPCPlaybackRequestEnvironment *playbackRequestEnvironment;
@property (nonatomic, readonly) MSVSectionedCollection *responseContentIDs;
@property (nonatomic, readonly, copy) NSString *rtcReportingPlayQueueSourceIdentifier;
@property (readonly) Class superclass;
@property (nonatomic, readonly) MPCSonicQueueFeeder_Swift *swift;

+ (bool)usesIdentifierRegistry;

- (void).cxx_destruct;
- (id)_sectionedModelObjectsRepresentationForSectionedContentIDs:(id)arg1;
- (id)_supplementalLibraryRequestWithError:(id*)arg1;
- (id)accountIDForItem:(id)arg1 inSection:(id)arg2;
- (void)applyVolumeNormalizationForItem:(id)arg1;
- (bool)canJumpToItem:(id)arg1 reason:(id*)arg2;
- (bool)containsLiveStream;
- (bool)containsTransportableContentWithReason:(id*)arg1;
- (id)fallbackSectionRepresentation;
- (id)firstItemIntersectingIdentifierSet:(id)arg1;
- (id)firstModelPlayEvent;
- (void)getRepresentativeMetadataForPlaybackContext:(id)arg1 properties:(id)arg2 completion:(id /* block */)arg3;
- (id)identifiersForItem:(id)arg1 inSection:(id)arg2;
- (id)init;
- (bool)isExportableMediaTypeForItem:(id)arg1 inSection:(id)arg2;
- (id)itemForItem:(id)arg1 inSection:(id)arg2;
- (void)loadPlaybackContext:(id)arg1 completion:(id /* block */)arg2;
- (id)modelPlayEventForItem:(id)arg1 inSection:(id)arg2;
- (id)playbackInfoForItem:(id)arg1;
- (id)playbackRequestEnvironment;
- (void)reloadSection:(id)arg1 completion:(id /* block */)arg2;
- (id)responseContentIDs;
- (id)rtcReportingPlayQueueSourceIdentifier;
- (bool)section:(id)arg1 shouldShuffleExcludeItem:(id)arg2;
- (bool)section:(id)arg1 supportsShuffleType:(long long)arg2;
- (void)setFallbackSectionRepresentation:(id)arg1;
- (void)setPlaybackRequestEnvironment:(id)arg1;
- (bool)shouldUsePlaceholderForItem:(id)arg1 inSection:(id)arg2;
- (long long)supplementalPlaybackContextBehavior;
- (id)supplementalPlaybackContextWithReason:(long long)arg1;
- (bool)supportsAutoPlayForItem:(id)arg1 inSection:(id)arg2;
- (id)swift;
- (id)uniqueIdentifier;
- (id)updatedPlaybackContext;

@end
