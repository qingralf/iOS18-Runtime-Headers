/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore
 */

@interface _MPCQueueControllerBehaviorPodcasts : NSObject <MPCQueueControllerBehaviorDynamicLoadingImplementation, MPCQueueControllerBehaviorImplementation, MPCQueueControllerBehaviorRestorableImplementation, MPCQueueControllerBehaviorTransportableImplementation, MPCQueueControllerBehaviorUpNextImplementation, MPCQueueControllerReusableBehavior, MPCQueueControllerUpNextBehavior, NSSecureCoding> {
    union { in /* Warning: Unrecognized filer type: 'u' using 'void*' */ void*x1; long x2; long x3; }  activePlaybackContext;
    void allowsQueueModifications;
    void contentItemIDsMap;
    void hasUserMutations;
    void host;
    void managedQueue;
    union { in /* Warning: Unrecognized filer type: 'u' using 'void*' */ void*x1; long x2; long x3; }  nextRequest;
    void podcastsMediaLibrary;
    void queueRestorationSnapshot;
    void restorationTailInsertionContentIdentifier;
    void restorationTrackIdentifiers;
    void sessionID;
}

@property (nonatomic) bool allowsQueueModifications;
@property (nonatomic, readonly) bool containsRestorableContent;
@property (nonatomic) bool hasUserMutations;
@property (nonatomic, retain) <MPCQueueControllerBehaviorHost> *host;
@property (nonatomic, readonly) bool isEmpty;
@property (nonatomic, readonly) long long playbackPositionRestorationPolicy;
@property (nonatomic, readonly) long long preferredUpcomingItemCount;
@property (nonatomic, readonly) NSArray *queueTrackIdentifiers;
@property (nonatomic, copy) NSString *sessionID;

+ (bool)canLoadQueue:(id)arg1 reason:(id*)arg2;
+ (id)makeExtensionWithInvalidatable:(id)arg1;
+ (void)setSupportsSecureCoding:(bool)arg1;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)_itemForContentItemID:(id)arg1;
- (id)_stateDictionaryIncludingQueue:(bool)arg1;
- (void)activeItemFlagsDidChange:(unsigned short)arg1;
- (bool)allowsQueueModifications;
- (bool)canJumpToContentItemID:(id)arg1 reason:(id*)arg2;
- (bool)canNextItemFromContentItemID:(id)arg1 reason:(id*)arg2;
- (bool)canPreviousItemFromContentItemID:(id)arg1 reason:(id*)arg2;
- (bool)canRemoveContentItemID:(id)arg1 reason:(id*)arg2;
- (void)canReuseQueue:(id)arg1 completion:(id /* block */)arg2;
- (void)clearAllItemsAfterContentItemID:(id)arg1;
- (id)componentsForContentItemID:(id)arg1;
- (void)connectToHost:(id)arg1;
- (bool)containsRestorableContent;
- (id)contentItemIDEnumeratorStartingAfterContentItemID:(id)arg1 mode:(long long)arg2 options:(unsigned long long)arg3;
- (void)currentItemDidChangeFromContentItemID:(id)arg1 toContentItemID:(id)arg2;
- (void)didReachEndOfQueueWithReason:(id)arg1;
- (void)disconnectFromHost:(id)arg1;
- (long long)displayItemCount;
- (void)encodeWithCoder:(id)arg1;
- (id)finalizeStateRestorationWithTargetContentItemID:(id)arg1 completion:(id /* block */)arg2;
- (bool)hasUserMutations;
- (id)host;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithSessionID:(id)arg1;
- (bool)isEmpty;
- (bool)isExportableSessionType:(id)arg1 forContentItemID:(id)arg2 extension:(id)arg3 reason:(id*)arg4;
- (bool)isSupportedInsertionPosition:(long long)arg1 fromContentItemID:(id)arg2 reason:(id*)arg3;
- (bool)itemExistsForContentItemID:(id)arg1;
- (void)loadAdditionalUpcomingItems:(long long)arg1 completion:(id /* block */)arg2;
- (void)moveContentItemID:(id)arg1 afterContentItemID:(id)arg2 completion:(id /* block */)arg3;
- (void)moveContentItemID:(id)arg1 beforeContentItemID:(id)arg2 completion:(id /* block */)arg3;
- (void)performInsertCommand:(id)arg1 targetContentItemID:(id)arg2 completion:(id /* block */)arg3;
- (id)performLoadCommand:(id)arg1 completion:(id /* block */)arg2;
- (long long)playbackPositionRestorationPolicy;
- (long long)preferredUpcomingItemCount;
- (id)queueTrackIdentifiers;
- (void)removeContentItemID:(id)arg1 completion:(id /* block */)arg2;
- (id)sessionID;
- (void)setAllowsQueueModifications:(bool)arg1;
- (void)setHasUserMutations:(bool)arg1;
- (void)setHost:(id)arg1;
- (void)setSessionID:(id)arg1;
- (id)tailInsertionContentItemIDForTargetContentItemID:(id)arg1;

@end
