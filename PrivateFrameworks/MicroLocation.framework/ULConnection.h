/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MicroLocation.framework/MicroLocation
 */

@interface ULConnection : NSObject {
    NSXPCConnection * _connection;
    ULDarwinNotificationHelper * _darwinNotificationHelper;
    <ULConnectionDelegate> * _delegate;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    bool  _interrupted;
    NSUUID * _legacyServiceIdentifier;
    NSObject<OS_dispatch_queue> * _queue;
    NSUUID * _serviceIdentifier;
    ULServiceStatus * _serviceStatus;
    ULUpdateConfiguration * _updateConfiguration;
}

@property (nonatomic, retain) NSXPCConnection *connection;
@property (nonatomic, retain) ULDarwinNotificationHelper *darwinNotificationHelper;
@property (nonatomic) <ULConnectionDelegate> *delegate;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *delegateQueue;
@property (nonatomic) bool interrupted;
@property (nonatomic, retain) NSUUID *legacyServiceIdentifier;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, retain) NSUUID *serviceIdentifier;
@property (nonatomic, retain) ULServiceStatus *serviceStatus;
@property (nonatomic, retain) ULUpdateConfiguration *updateConfiguration;

+ (id)_createNSXPCConnectionWithWeakProxy:(id)arg1;
+ (id)createServiceIdentifierForToken:(id)arg1;
+ (void)createServiceWithServiceType:(unsigned long long)arg1 locationTypes:(id)arg2 reply:(id /* block */)arg3;
+ (void)deleteServiceWithIdentifier:(id)arg1 reply:(id /* block */)arg2;
+ (void)donateMicroLocationTruthTagWithTagUUID:(id)arg1 correspondingToTriggerUUID:(id)arg2 handler:(id /* block */)arg3;
+ (void)donateMicroLocationTruthTagWithTagUUID:(id)arg1 forRecordingEventsBetweenDate:(id)arg2 andDate:(id)arg3 handler:(id /* block */)arg4;
+ (void)exportDatabaseWithReply:(id /* block */)arg1;
+ (id)getMicroLocationInternalVersion;
+ (id)getRecordingTriggerUUIDAndRequestMicroLocationRecordingScanWithAdditionalInformation:(id)arg1 shouldForceRecording:(bool)arg2 handler:(id /* block */)arg3;
+ (id)metadataForHomekitAccessoryControlEventWithUUID:(id)arg1 stateString:(id)arg2 serviceUUID:(id)arg3 serviceType:(id)arg4 characteristicType:(id)arg5 serviceGroupUUID:(id)arg6 source:(id)arg7 roomUUID:(id)arg8;
+ (id)metadataForHomekitActionSetEventWithUUID:(id)arg1 name:(id)arg2 type:(id)arg3 clientName:(id)arg4 source:(id)arg5 homeName:(id)arg6;
+ (void)purgeDatabaseWithReply:(id /* block */)arg1;
+ (void)queryServicesWithReply:(id /* block */)arg1;
+ (void)requestCurrentMicroLocationWithAdditionalInformation:(id)arg1;
+ (void)requestMicroLocationRecordingScanWithAdditionalInformation:(id)arg1 shouldForceRecording:(bool)arg2;

- (void).cxx_destruct;
- (void)_checkAndRecoverIfNeeded;
- (void)_invalidate;
- (void)_manageConnectionAvailableNotificationObservation:(bool)arg1;
- (void)_performAsyncOnDelegateQueueIfRespondsToSelector:(SEL)arg1 block:(id /* block */)arg2;
- (void)_xpcInterruptionHandler;
- (void)_xpcInvalidationHandler;
- (id)connect;
- (id)connection;
- (id)darwinNotificationHelper;
- (void)dealloc;
- (id)delegate;
- (id)delegateQueue;
- (void)didCompleteObservationWithMetaInformation:(id)arg1;
- (void)didCompletePredictionWithMetaInformation:(id)arg1;
- (void)didCompleteRequest:(id)arg1 withError:(id)arg2;
- (void)didCreateCustomLocationOfInterestWithError:(id)arg1;
- (void)didFailWithError:(id)arg1;
- (void)didRemoveCustomLocationOfInterestWithIdentifier:(id)arg1 withError:(id)arg2;
- (void)didSendGenericEvent:(unsigned long long)arg1 withDescription:(id)arg2;
- (void)didUpdatePrediction:(id)arg1;
- (void)didUpdateServiceStatus:(id)arg1;
- (void)disableMicrolocationAtlocationWithIdentifier:(id)arg1;
- (id)disconnect;
- (void)enableMicrolocationAtCurrentLocation;
- (void)enableMicrolocationAtCurrentLocationWithConfiguration:(id)arg1;
- (id)initWithDelegate:(id)arg1 serviceIdentifier:(id)arg2;
- (bool)interrupted;
- (id)labelRequestIdentifier:(id)arg1 withPlaceIdentifier:(id)arg2;
- (id)legacyServiceIdentifier;
- (id)queue;
- (id)requestAllModelsLearning;
- (id)requestObservation;
- (id)requestPrediction;
- (id)serviceIdentifier;
- (id)serviceStatus;
- (void)setConnection:(id)arg1;
- (void)setDarwinNotificationHelper:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDelegateQueue:(id)arg1;
- (void)setInterrupted:(bool)arg1;
- (void)setLegacyServiceIdentifier:(id)arg1;
- (void)setQueue:(id)arg1;
- (void)setServiceIdentifier:(id)arg1;
- (void)setServiceStatus:(id)arg1;
- (void)setUpdateConfiguration:(id)arg1;
- (id)startUpdatingWithConfiguration:(id)arg1;
- (id)stopUpdating;
- (id)updateConfiguration;
- (void)updateLegacyServiceIdentifier:(id)arg1;

@end
