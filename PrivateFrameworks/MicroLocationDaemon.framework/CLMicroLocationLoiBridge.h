/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MicroLocationDaemon.framework/MicroLocationDaemon
 */

@interface CLMicroLocationLoiBridge : NSObject <CLLocationManagerDelegate, CLMicroLocationLoiBridgeProtocol> {
    CLLocationManager * _clLocationManager;
    ULTimer * _fetchPlaceInferenceTimer;
    struct CLMicroLocationLoiClient { int (**x1)(); } * _microlocationLoiClient;
    NSObject<OS_dispatch_queue> * _queue;
    CLMonitor * _regionMonitor;
    CLMonitorConfiguration * _regionMonitorConfiguration;
    RTRoutineManager * _routineManager;
}

@property (nonatomic, retain) CLLocationManager *clLocationManager;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) ULTimer *fetchPlaceInferenceTimer;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, retain) CLMonitor *regionMonitor;
@property (nonatomic, retain) CLMonitorConfiguration *regionMonitorConfiguration;
@property (nonatomic, retain) RTRoutineManager *routineManager;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)clLocationManager;
- (unsigned long long)convertMonitoringEventToGeofenceState:(id)arg1;
- (void)dealloc;
- (void)fetchLocationOfInterestAtLocation:(id)arg1;
- (void)fetchPlaceInferenceAtCurrentLocationWithPolicy:(unsigned long long)arg1;
- (id)fetchPlaceInferenceTimer;
- (void)fetchRelatedLoisForLoi:(id)arg1;
- (void)generateGeofenceUpdateToClient:(id)arg1;
- (id)generateLocationManagerNotAvailableError;
- (id)generateRegionMonitorNotAvailableError;
- (void)getAllActiveGeofences;
- (void)getCurrentLocation;
- (id)initWithQueue:(id)arg1;
- (void)invalidateFetchPlaceInferenceTimer;
- (void)locationManager:(id)arg1 didFailWithError:(id)arg2;
- (void)locationManager:(id)arg1 didUpdateLocations:(id)arg2;
- (void)locationManager:(id)arg1 didVisit:(id)arg2;
- (struct CLMicroLocationLoiClient { int (**x1)(); }*)microLocationLoiClient;
- (id)queue;
- (id)regionMonitor;
- (void)regionMonitor:(id)arg1 didGenerateEvent:(id)arg2;
- (id)regionMonitorConfiguration;
- (void)removeGeofenceWithRegionId:(id)arg1;
- (void)removeGeofencesNearLocationWithLatitude:(double)arg1 andLongitude:(double)arg2;
- (void)requestBootstrapWithLastGeofenceStates;
- (id)retrieveAllActiveGeofences;
- (id)routineManager;
- (void)setClLocationManager:(id)arg1;
- (void)setFetchPlaceInferenceTimer:(id)arg1;
- (void)setGeofenceAtLocation:(id)arg1;
- (void)setMicroLocationLoiClient:(struct CLMicroLocationLoiClient { int (**x1)(); }*)arg1;
- (void)setQueue:(id)arg1;
- (void)setRegionMonitor:(id)arg1;
- (void)setRegionMonitorConfiguration:(id)arg1;
- (void)setRoutineManager:(id)arg1;
- (void)setupFetchPlaceInferenceTimer;
- (void)setupRegionMonitoring;
- (void)startLeechingLocationUpdates;
- (void)startVisitMonitoring;
- (void)stopLeechingLocationUpdates;

@end
