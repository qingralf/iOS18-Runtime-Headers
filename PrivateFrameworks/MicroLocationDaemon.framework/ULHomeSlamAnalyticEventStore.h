/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MicroLocationDaemon.framework/MicroLocationDaemon
 */

@interface ULHomeSlamAnalyticEventStore : ULStore <ULStoreProtocol>

@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (Class)MOClass;
+ (id)defaultSortProperty;
+ (unsigned int)maxEntriesInTable;

- (struct vector<CLMiLoHomeSlamAnalyticEventTable::Entry, std::allocator<CLMiLoHomeSlamAnalyticEventTable::Entry>> { struct Entry {} *x1; struct Entry {} *x2; struct __compressed_pair<CLMiLoHomeSlamAnalyticEventTable::Entry *, std::allocator<CLMiLoHomeSlamAnalyticEventTable::Entry>> { struct Entry {} *x_3_1_1; } x3; })_fetchAnalyticEventsByAndPredicates:(id)arg1 sortDescriptors:(id)arg2 andLimit:(unsigned long long)arg3;
- (struct vector<CLMiLoHomeSlamAnalyticEventTable::Entry, std::allocator<CLMiLoHomeSlamAnalyticEventTable::Entry>> { struct Entry {} *x1; struct Entry {} *x2; struct __compressed_pair<CLMiLoHomeSlamAnalyticEventTable::Entry *, std::allocator<CLMiLoHomeSlamAnalyticEventTable::Entry>> { struct Entry {} *x_3_1_1; } x3; })fetchAllRecordsWithLimit:(unsigned int)arg1;
- (struct vector<CLMiLoHomeSlamAnalyticEventTable::Entry, std::allocator<CLMiLoHomeSlamAnalyticEventTable::Entry>> { struct Entry {} *x1; struct Entry {} *x2; struct __compressed_pair<CLMiLoHomeSlamAnalyticEventTable::Entry *, std::allocator<CLMiLoHomeSlamAnalyticEventTable::Entry>> { struct Entry {} *x_3_1_1; } x3; })fetchAnalyticEventsASCFromTime:(double)arg1 toTime:(double)arg2;
- (struct optional<CLMiLoHomeSlamAnalyticEventTable::Entry> { union { BOOL x_1_1_1; struct Entry { struct time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> { struct duration<long double, std::ratio<1>> { long doublex_1_4_1; } x_1_3_1; } x_2_2_1; short x_2_2_2; } x_1_1_2; } x1; bool x2; })fetchFirstEvent;
- (struct optional<CLMiLoHomeSlamAnalyticEventTable::Entry> { union { BOOL x_1_1_1; struct Entry { struct time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> { struct duration<long double, std::ratio<1>> { long doublex_1_4_1; } x_1_3_1; } x_2_2_1; short x_2_2_2; } x_1_1_2; } x1; bool x2; })fetchLatestAnalyticEventType:(const void*)arg1 beforeTime:(double)arg2;
- (bool)insertEntries:(const void*)arg1;

@end
