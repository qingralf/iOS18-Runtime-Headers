/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MicroLocationDaemon.framework/MicroLocationDaemon
 */

@interface ULLogicAdapter : NSObject <ULDataProtectionMonitorHandling, ULDiagnosticsProvider, ULLogicDiagnosticsHandling, ULLogicLegacyServiceHandling, ULLogicServiceHandling, ULRapportMonitorHandling> {
    ULEnvironment * _environment;
    CLMicroLocationLoiBridge * _loiBridge;
    NSMutableArray * _sleepWakeEventsQueue;
    struct unique_ptr<ULLogicAdapterImpl, std::default_delete<ULLogicAdapterImpl>> { 
        struct __compressed_pair<ULLogicAdapterImpl *, std::default_delete<ULLogicAdapterImpl>> { 
            struct ULLogicAdapterImpl {} *__value_; 
        } __ptr_; 
    }  logicAdapterImpl;
}

@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) ULEnvironment *environment;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSMutableArray *sleepWakeEventsQueue;
@property (readonly) Class superclass;

+ (id)_newULServiceDescriptorFromInternalDescriptor:(const void*)arg1;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_analyticsExecute:(id)arg1;
- (void)_exportiCloudBackupExecute:(id)arg1;
- (void)_handleULAirplaneModeMonitorEventAirplaneMode:(id)arg1;
- (void)_handleULBatteryModeMonitorEventLowPowerMode:(id)arg1;
- (void)_handleULBatteryModeMonitorEventUnlimitedPower:(id)arg1;
- (void)_handleULBluetoothMonitorEventPowerOn:(id)arg1;
- (void)_handleULBuddyMonitorEventBuddyComplete:(id)arg1;
- (void)_handleULDataProtectionMonitorEventDataAvailable:(id)arg1;
- (void)_handleULDisplayMonitorEventDisplayState:(id)arg1;
- (void)_handleULDisplayMonitorEventDisplayState_OSX:(id)arg1;
- (void)_handleULInternalNotifyMonitorEventLocalize:(id)arg1;
- (void)_handleULInternalNotifyMonitorEventPurge:(id)arg1;
- (void)_handleULInternalNotifyMonitorEventRecord:(id)arg1;
- (void)_handleULInternalNotifyMonitorEventSettingsRefrsh:(id)arg1;
- (void)_handleULPrivacyMonitorEventLocationServices:(id)arg1;
- (void)_handleULRapportMonitorEventDeviceFound:(id)arg1;
- (void)_handleULRapportMonitorEventIdentities:(id)arg1;
- (void)_handleULSleepWakeMonitorEvent:(id)arg1;
- (void)_learnExecute:(id)arg1;
- (void)_maintenanceExecute:(id)arg1;
- (void)_registerOnDatabaseValidNotification;
- (void)_registerOrUnregisterForActivities:(bool)arg1;
- (void)_registerOrUnregisterForBackgroundTaskWithRequest:(id)arg1 withSelector:(SEL)arg2 requiresMiLoEnabled:(bool)arg3 isRegister:(bool)arg4;
- (void)_routineStateAnalyzerExecute:(id)arg1;
- (void)_start;
- (void)_startMonitoringEvents;
- (void)_startSensors;
- (void)_startSpectating;
- (void)_stop;
- (void)_stopMonitoringEvents;
- (void)_wifiAnalyticsExecute:(id)arg1;
- (void)connectWithServiceIdentifier:(id)arg1 legacyServiceIdentifier:(id)arg2 clientIdentifier:(id)arg3 connectionToken:(id)arg4 requestIdentifier:(id)arg5;
- (void)createCustomLoiAtCurrentLocationForConnectionToken:(id)arg1 withConfiguration:(id)arg2;
- (void)dealloc;
- (id)deleteServiceWithIdentifier:(id)arg1 clientIdentifier:(id)arg2;
- (id)diagnosticInfo;
- (void)disconnectWithConnectionToken:(id)arg1 clientIdentifier:(id)arg2 requestIdentifier:(id)arg3;
- (id)donateMicroLocationTruthTagWithTagUUID:(id)arg1 correspondingToTriggerUUID:(id)arg2 handler:(id /* block */)arg3 clientId:(id)arg4;
- (id)donateMicroLocationTruthTagWithTagUUID:(id)arg1 forRecordingEventsBetweenDate:(id)arg2 andDate:(id)arg3 handler:(id /* block */)arg4 clientId:(id)arg5;
- (id)environment;
- (id)exportDatabase;
- (id)getMicroLocationInternalVersion;
- (id)getRecordingTriggerUUIDAndRequestMicroLocationRecordingScanWithAdditionalInformation:(id)arg1 shouldForceRecording:(bool)arg2 handler:(id /* block */)arg3 clientId:(id)arg4;
- (id)init;
- (id)initWithEnvironment:(id)arg1 delegate:(id)arg2;
- (bool)isDataAvailable;
- (void)labelObservationForConnectionToken:(id)arg1 withRequestIdentifier:(id)arg2 andPlaceIdentifier:(id)arg3 andReturnIdentifier:(id)arg4;
- (id)purgeDatabase;
- (bool)purgeMicroLocationData;
- (id)queryServicesForClient:(id)arg1;
- (void)removeCustomLoiWithIdentifier:(id)arg1 forConnectionToken:(id)arg2;
- (void)removePendingConnectionRequestsByConnectionToken:(id)arg1;
- (void)requestCurrentMicroLocationWithAdditionalInformation:(id)arg1 clientId:(id)arg2;
- (void)requestMicroLocationRecordingScanWithAdditionalInformation:(id)arg1 clientId:(id)arg2;
- (void)requestModelLearningForConnectionToken:(id)arg1 requestIdentifier:(id)arg2;
- (void)requestObservationForConnectionToken:(id)arg1 clientIdentifier:(id)arg2 requestIdentifier:(id)arg3;
- (void)requestPredictionForConnectionToken:(id)arg1 clientIdentifier:(id)arg2 requestIdentifier:(id)arg3;
- (void)setEnvironment:(id)arg1;
- (void)setSleepWakeEventsQueue:(id)arg1;
- (id)sleepWakeEventsQueue;
- (void)startRapportSession;
- (void)startUpdatingForConnectionToken:(id)arg1 updateConfiguration:(id)arg2 requestIdentifier:(id)arg3;
- (void)stopRapportSession;
- (void)stopUpdatingForConnectionToken:(id)arg1 requestIdentifier:(id)arg2;

@end
