/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MicroLocationDaemon.framework/MicroLocationDaemon
 */

@interface ULRecordingEventStore : ULStore <ULStoreProtocol>

@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (Class)MOClass;
+ (id)defaultSortProperty;
+ (unsigned int)maxEntriesInTable;

- (struct vector<CLMicroLocationRecordingEventsTable::Entry, std::allocator<CLMicroLocationRecordingEventsTable::Entry>> { struct Entry {} *x1; struct Entry {} *x2; struct __compressed_pair<CLMicroLocationRecordingEventsTable::Entry *, std::allocator<CLMicroLocationRecordingEventsTable::Entry>> { struct Entry {} *x_3_1_1; } x3; })_fetchRecordingEventTriggers:(const void*)arg1 atLoiGroupId:(const void*)arg2 fromTime:(struct optional<const double> { union { BOOL x_1_1_1; double x_1_1_2; } x1; bool x2; })arg3 toTime:(struct optional<const double> { union { BOOL x_1_1_1; double x_1_1_2; } x1; bool x2; })arg4 withLimit:(unsigned int)arg5;
- (struct vector<CLMicroLocationRecordingEventsTable::Entry, std::allocator<CLMicroLocationRecordingEventsTable::Entry>> { struct Entry {} *x1; struct Entry {} *x2; struct __compressed_pair<CLMicroLocationRecordingEventsTable::Entry *, std::allocator<CLMicroLocationRecordingEventsTable::Entry>> { struct Entry {} *x_3_1_1; } x3; })_fetchRecordingEventsByAndPredicates:(id)arg1 sortDescriptors:(id)arg2 andLimit:(unsigned long long)arg3;
- (bool)batchTransferRecordingEventsForRecordingUUIDs:(const void*)arg1 withEventTypes:(const void*)arg2 batchSize:(unsigned long long)arg3 andLimit:(unsigned int)arg4 intoTargetStore:(id)arg5 withCancelFunc:(struct function<bool ()>={__value_func<bool ()>={type=[24C] {})arg6;
- (bool)batchTransferRecordsUsingBatchSize:(unsigned long long)arg1 andLimit:(unsigned long long)arg2 intoTargetStore:(id)arg3 withCancelFunc:(struct function<bool ()>={__value_func<bool ()>={type=[24C] {})arg4;
- (unsigned int)countRecordingEventsForLoiGroupId:(const struct uuid { unsigned char x1[16]; }*)arg1;
- (unsigned int)countRecordingEventsFromTime:(double)arg1 toTime:(double)arg2 atLoiGroupId:(const struct uuid { unsigned char x1[16]; }*)arg3;
- (bool)deleteRecordingEventsFromRecordingUUIDs:(const void*)arg1;
- (struct vector<CLMicroLocationRecordingEventsTable::Entry, std::allocator<CLMicroLocationRecordingEventsTable::Entry>> { struct Entry {} *x1; struct Entry {} *x2; struct __compressed_pair<CLMicroLocationRecordingEventsTable::Entry *, std::allocator<CLMicroLocationRecordingEventsTable::Entry>> { struct Entry {} *x_3_1_1; } x3; })fetchAllRecordsWithLimit:(unsigned int)arg1;
- (struct vector<boost::uuids::uuid, std::allocator<boost::uuids::uuid>> { struct uuid {} *x1; struct uuid {} *x2; struct __compressed_pair<boost::uuids::uuid *, std::allocator<boost::uuids::uuid>> { struct uuid {} *x_3_1_1; } x3; })fetchDistinctRecordingEventsFromTime:(double)arg1 toTime:(double)arg2 atLoiGroupId:(const struct uuid { unsigned char x1[16]; }*)arg3 withLimit:(unsigned int)arg4;
- (struct optional<CLMicroLocationRecordingEventsTable::Entry> { union { BOOL x_1_1_1; struct Entry { struct uuid { unsigned char x_1_3_1[16]; } x_2_2_1; struct time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> { struct duration<long double, std::ratio<1>> { long doublex_1_4_1; } x_2_3_1; } x_2_2_2; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __short { BOOL x_1_7_1[23]; unsigned char x_1_7_2[0]; unsigned int x_1_7_3 : 7; unsigned int x_1_7_4 : 1; } x_1_6_1; struct __long { char *x_2_7_1; unsigned long long x_2_7_2; unsigned int x_2_7_3 : 63; unsigned int x_2_7_4 : 1; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_3_3_1; } x_2_2_3; struct uuid { unsigned char x_4_3_1[16]; } x_2_2_4; struct time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> { struct duration<long double, std::ratio<1>> { long doublex_1_4_1; } x_5_3_1; } x_2_2_5; int x_2_2_6; struct RecordingEvent { int (**x_7_3_1)(); double x_7_3_2; struct ReceivedEventAction {} *x_7_3_3; struct AppLaunch {} *x_7_3_4; struct BacklightOn {} *x_7_3_5; struct BatteryChargerConnected {} *x_7_3_6; struct ForcedRecording {} *x_7_3_7; struct HomeKitAccessory {} *x_7_3_8; struct HomeKitScene {} *x_7_3_9; int x_7_3_10; bool x_7_3_11; bool x_7_3_12; struct NowPlaying {} *x_7_3_13; struct RecordingRequest {} *x_7_3_14; struct TruthLabelDonation {} *x_7_3_15; struct RepeatedField<int> { int *x_16_4_1; int x_16_4_2; int x_16_4_3; } x_7_3_16; int x_7_3_17; int x_7_3_18; struct AssociatedAccessPointInfo {} *x_7_3_19; int x_7_3_20; unsigned int x_7_3_21[1]; } x_2_2_7; } x_1_1_2; } x1; })fetchMostRecentRecordingForLoiGroupId:(const struct uuid { unsigned char x1[16]; }*)arg1;
- (struct vector<CLMicroLocationRecordingEventsTable::Entry, std::allocator<CLMicroLocationRecordingEventsTable::Entry>> { struct Entry {} *x1; struct Entry {} *x2; struct __compressed_pair<CLMicroLocationRecordingEventsTable::Entry *, std::allocator<CLMicroLocationRecordingEventsTable::Entry>> { struct Entry {} *x_3_1_1; } x3; })fetchRecordingEventTriggersForLearningMeasurements:(const void*)arg1;
- (struct vector<CLMicroLocationRecordingEventsTable::Entry, std::allocator<CLMicroLocationRecordingEventsTable::Entry>> { struct Entry {} *x1; struct Entry {} *x2; struct __compressed_pair<CLMicroLocationRecordingEventsTable::Entry *, std::allocator<CLMicroLocationRecordingEventsTable::Entry>> { struct Entry {} *x_3_1_1; } x3; })fetchRecordingEventTriggersForLearningMeasurements:(const void*)arg1 atLoiGroupId:(const void*)arg2;
- (struct vector<CLMicroLocationRecordingEventsTable::Entry, std::allocator<CLMicroLocationRecordingEventsTable::Entry>> { struct Entry {} *x1; struct Entry {} *x2; struct __compressed_pair<CLMicroLocationRecordingEventsTable::Entry *, std::allocator<CLMicroLocationRecordingEventsTable::Entry>> { struct Entry {} *x_3_1_1; } x3; })fetchRecordingEventsForRecordingUUIDs:(const void*)arg1;
- (struct vector<CLMicroLocationRecordingEventsTable::Entry, std::allocator<CLMicroLocationRecordingEventsTable::Entry>> { struct Entry {} *x1; struct Entry {} *x2; struct __compressed_pair<CLMicroLocationRecordingEventsTable::Entry *, std::allocator<CLMicroLocationRecordingEventsTable::Entry>> { struct Entry {} *x_3_1_1; } x3; })fetchRecordingEventsFromTriggerUUIDs:(const void*)arg1;
- (struct vector<CLMicroLocationRecordingEventsTable::Entry, std::allocator<CLMicroLocationRecordingEventsTable::Entry>> { struct Entry {} *x1; struct Entry {} *x2; struct __compressed_pair<CLMicroLocationRecordingEventsTable::Entry *, std::allocator<CLMicroLocationRecordingEventsTable::Entry>> { struct Entry {} *x_3_1_1; } x3; })fetchRecordingEventsWithScanMeasurements:(const void*)arg1 fromTime:(double)arg2 toTime:(double)arg3 withLimit:(unsigned int)arg4;
- (id)getDistinctRecordingUUIDsWithLimit:(unsigned int)arg1;
- (struct time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> { struct duration<long double, std::ratio<1>> { long doublex_1_1_1; } x1; })getOldestRecordingTimestamp;
- (id)getRecordingUUIDsForLocalizationActionsFromTime:(struct optional<const double> { union { BOOL x_1_1_1; double x_1_1_2; } x1; bool x2; })arg1 toTime:(struct optional<const double> { union { BOOL x_1_1_1; double x_1_1_2; } x1; bool x2; })arg2;
- (id)getRecordingUUIDsForRecordingEventActionsAtLoiGroupId:(struct optional<const boost::uuids::uuid> { union { BOOL x_1_1_1; struct uuid { unsigned char x_2_2_1[16]; } x_1_1_2; } x1; bool x2; })arg1 fromTime:(struct optional<const double> { union { BOOL x_1_1_1; double x_1_1_2; } x1; bool x2; })arg2 toTime:(struct optional<const double> { union { BOOL x_1_1_1; double x_1_1_2; } x1; bool x2; })arg3 withLimit:(unsigned int)arg4;
- (id)getRecordingUUIDsOlderThan:(double)arg1 orNewerThan:(double)arg2;
- (id)getTriggerUUIDsForLoiGroupId:(const struct uuid { unsigned char x1[16]; }*)arg1;
- (bool)insertEntries:(const void*)arg1;
- (struct vector<std::string, std::allocator<std::string>> { void *x1; void *x2; struct __compressed_pair<std::string *, std::allocator<std::string>> { void *x_3_1_1; } x3; })selectAllRecordingLOITypesFromTime:(double)arg1 andLimit:(unsigned long long)arg2;

@end
