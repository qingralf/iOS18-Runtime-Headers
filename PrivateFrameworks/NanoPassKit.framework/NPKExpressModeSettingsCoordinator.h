/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/NanoPassKit.framework/NanoPassKit
 */

@interface NPKExpressModeSettingsCoordinator : NSObject {
    NSObject<OS_dispatch_queue> * _callbackQueue;
    id /* block */  _completionHandler;
    LAContext * _currentContext;
    PKPass * _currentPass;
    NPKExpressState * _currentState;
    <NPKExpressModeSettingsCoordinatorDelegate> * _delegate;
    PKExpressPassController * _expressPassController;
    bool  _expressStateUpdatePending;
    int  _notifyToken;
    <NPKPassesDataSource> * _passDataSource;
    NSMutableDictionary * _previousPassStates;
    NSObject<OS_dispatch_queue> * _workQueue;
}

@property (nonatomic, retain) NSObject<OS_dispatch_queue> *callbackQueue;
@property (nonatomic, copy) id /* block */ completionHandler;
@property (nonatomic, retain) LAContext *currentContext;
@property (nonatomic, retain) PKPass *currentPass;
@property (nonatomic, retain) NPKExpressState *currentState;
@property (nonatomic) <NPKExpressModeSettingsCoordinatorDelegate> *delegate;
@property (nonatomic, retain) PKExpressPassController *expressPassController;
@property (nonatomic) bool expressStateUpdatePending;
@property (nonatomic) int notifyToken;
@property (nonatomic, retain) <NPKPassesDataSource> *passDataSource;
@property (nonatomic, retain) NSMutableDictionary *previousPassStates;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *workQueue;

- (void).cxx_destruct;
- (void)_checkForConflictsInEnablingExpressForPass:(id)arg1 completion:(id /* block */)arg2;
- (void)_enableExpressForPass:(id)arg1 mode:(unsigned long long)arg2 withCredential:(id)arg3;
- (id)_expressStateForPassWithUniqueID:(id)arg1;
- (id)_expressStateForPassWithUniqueID:(id)arg1 fromControllerState:(id)arg2;
- (void)_handleExpressStateChange;
- (void)_handleFailedEnableExpress;
- (void)_handleFailedPassUpgrade;
- (void)_handleFailedUserAuthentication;
- (void)_handleSuccessForPass:(id)arg1;
- (void)_handleSuccessfulUserAuthenticationWithCredential:(id)arg1 forPass:(id)arg2 withExpressMode:(unsigned long long)arg3;
- (void)_handleUserCancelled;
- (void)_invokeCompletionHandlerWithSuccess:(bool)arg1;
- (bool)_isExpressMode:(unsigned long long)arg1 supportedForPassWithUniqueID:(id)arg2;
- (bool)_isNFCExpressModeSupportedForPass:(id)arg1;
- (id)_newExpressStateForMode:(unsigned long long)arg1 pass:(id)arg2 enable:(bool)arg3;
- (void)_requestUserAuthenticationForPass:(id)arg1 withExpressMode:(unsigned long long)arg2;
- (void)_upgradeExpressModeForPass:(id)arg1 withCredential:(id)arg2;
- (id)callbackQueue;
- (id /* block */)completionHandler;
- (id)currentContext;
- (id)currentPass;
- (id)currentState;
- (id)delegate;
- (void)disableExpressForPass:(id)arg1 mode:(unsigned long long)arg2 completionHandler:(id /* block */)arg3;
- (id)eligibleExpressUpgradeRequestsForPass:(id)arg1;
- (void)enableExpressForPass:(id)arg1 mode:(unsigned long long)arg2 completionHandler:(id /* block */)arg3;
- (id)expressAppletIdentifiersForPass:(id)arg1;
- (id)expressPassController;
- (id)expressStateForPass:(id)arg1;
- (bool)expressStateUpdatePending;
- (bool)inSessionExpressEnabledForPass:(id)arg1;
- (id)initWithExpressPassController:(id)arg1 workQueue:(id)arg2 callbackQueue:(id)arg3;
- (bool)isExpressMode:(unsigned long long)arg1 supportedForPass:(id)arg2;
- (bool)needUpgradeForPass:(id)arg1;
- (int)notifyToken;
- (id)passDataSource;
- (id)previousPassStates;
- (void)setCallbackQueue:(id)arg1;
- (void)setCompletionHandler:(id /* block */)arg1;
- (void)setCurrentContext:(id)arg1;
- (void)setCurrentPass:(id)arg1;
- (void)setCurrentState:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setExpressPassController:(id)arg1;
- (void)setExpressStateUpdatePending:(bool)arg1;
- (void)setNotifyToken:(int)arg1;
- (void)setPassDataSource:(id)arg1;
- (void)setPreviousPassStates:(id)arg1;
- (void)setWorkQueue:(id)arg1;
- (id)workQueue;

@end
