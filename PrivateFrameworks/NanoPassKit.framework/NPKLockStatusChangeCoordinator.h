/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/NanoPassKit.framework/NanoPassKit
 */

@interface NPKLockStatusChangeCoordinator : NSObject {
    NSMutableArray * _blocksToPerformAfterDeviceLock;
    NSMutableArray * _blocksToPerformAfterDeviceUnlock;
    <NPKLockStatusChangeCoordinatorDelegate> * _delegate;
    int  _notifyLockStatesToken;
    NSObject<OS_dispatch_queue> * _queue;
    bool  _wipeBlocksAfterPerform;
}

@property (nonatomic, retain) NSMutableArray *blocksToPerformAfterDeviceLock;
@property (nonatomic, retain) NSMutableArray *blocksToPerformAfterDeviceUnlock;
@property (nonatomic) <NPKLockStatusChangeCoordinatorDelegate> *delegate;
@property (nonatomic) int notifyLockStatesToken;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property bool wipeBlocksAfterPerform;

+ (id)descriptionOfLockStatusChangeEvent:(unsigned long long)arg1;

- (void).cxx_destruct;
- (void)_handleLockStateChange;
- (bool)_hasLockBlocksToPerform;
- (bool)_hasUnlockBlocksToPerform;
- (bool)_isLockedForLockState:(int)arg1;
- (bool)_isUnlockedForLockState:(int)arg1;
- (int)_lockState;
- (void)_performLockWork;
- (void)_performUnlockWork;
- (void)_performWorkForEvent:(unsigned long long)arg1 withBlocks:(id)arg2;
- (void)_registerForLockStatusChanges;
- (id)blocksToPerformAfterDeviceLock;
- (id)blocksToPerformAfterDeviceUnlock;
- (void)dealloc;
- (id)delegate;
- (bool)hasBlocksToPerform;
- (id)initWithQueue:(id)arg1;
- (int)notifyLockStatesToken;
- (void)performBlocksIfPossible;
- (void)performSubjectToEvent:(unsigned long long)arg1 blockToPerform:(id /* block */)arg2;
- (id)queue;
- (void)setBlocksToPerformAfterDeviceLock:(id)arg1;
- (void)setBlocksToPerformAfterDeviceUnlock:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setNotifyLockStatesToken:(int)arg1;
- (void)setQueue:(id)arg1;
- (void)setWipeBlocksAfterPerform:(bool)arg1;
- (bool)wipeBlocksAfterPerform;

@end
