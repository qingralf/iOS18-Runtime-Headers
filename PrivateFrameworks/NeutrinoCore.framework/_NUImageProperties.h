/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/NeutrinoCore.framework/NeutrinoCore
 */

@interface _NUImageProperties : NSObject <NUImageProperties> {
    long long  _alphaInfo;
    NSMutableDictionary * _auxiliaryImagesProperties;
    NUColorSpace * _colorSpace;
    long long  _componentInfo;
    float  _contentHeadroom;
    NSString * _fileUTI;
    <NUFlexRangeProperties> * _flexRangeProperties;
    NSNumber * _gainMapHeadroomValue;
    NSDictionary * _metadata;
    long long  _orientation;
    <NURAWImageProperties> * _rawProperties;
    <NUSemanticStyleProperties> * _semanticStyleProperties;
    struct { 
        long long width; 
        long long height; 
    }  _size;
    NSURL * _url;
}

@property long long alphaInfo;
@property (nonatomic, retain) NUColorSpace *colorSpace;
@property long long componentInfo;
@property (nonatomic) float contentHeadroom;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (retain) NSString *fileUTI;
@property (retain) <NUFlexRangeProperties> *flexRangeProperties;
@property double gainMapHeadroom;
@property (readonly) bool hasGainMap;
@property (readonly) unsigned long long hash;
@property (readonly) bool isHDR;
@property (nonatomic, retain) NSDictionary *metadata;
@property (readonly) NUVersion *meteorPlusGainMapVersion;
@property long long orientation;
@property (retain) <NURAWImageProperties> *rawProperties;
@property (retain) <NUSemanticStyleProperties> *semanticStyleProperties;
@property struct { long long x1; long long x2; } size;
@property (readonly) Class superclass;
@property (retain) NSURL *url;

+ (void)_computeMeteorPlusGain:(double*)arg1 gainMapValue:(double*)arg2 forContentHeadroom:(double)arg3;
+ (struct CGImageMetadata { }*)createGainMapMetadataWithHeadroom:(double)arg1;
+ (bool)getGainMapHeadroom:(double*)arg1 fromMakerNote:(id)arg2;
+ (bool)getGainMapHeadroom:(double*)arg1 fromMetadata:(struct CGImageMetadata { }*)arg2;
+ (bool)setGainMapHeadroom:(double)arg1 toMakerNote:(id)arg2;
+ (bool)setGainMapHeadroom:(double)arg1 toMetadata:(struct CGImageMetadata { }*)arg2;
+ (id)versionFromFlexRangeMetadata:(struct CGImageMetadata { }*)arg1;
+ (id)versionFromMetadataTag:(struct CGImageMetadataTag { }*)arg1;
+ (id)versionFromMeteorPlusMetadata:(struct CGImageMetadata { }*)arg1;

- (void).cxx_destruct;
- (double)_computeGainMapHeadroom;
- (void)_updateGainMapHeadroomMetadata:(double)arg1;
- (void)_updateGainMapMetadata:(struct CGImageMetadata { }*)arg1;
- (void)_updateMakerNote:(id)arg1;
- (long long)alphaInfo;
- (id)auxiliaryImagePropertiesForType:(long long)arg1;
- (id)colorSpace;
- (long long)componentInfo;
- (float)contentHeadroom;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (void)enumerateAuxiliaryImageProperties:(id /* block */)arg1;
- (id)fileUTI;
- (id)flexRangeProperties;
- (double)gainMapHeadroom;
- (bool)hasGainMap;
- (id)init;
- (id)initWithProperties:(id)arg1;
- (bool)isHDR;
- (id)metadata;
- (id)meteorPlusGainMapVersion;
- (long long)orientation;
- (id)rawProperties;
- (void)resetAuxiliaryImageProperties;
- (id)semanticStyleProperties;
- (void)setAlphaInfo:(long long)arg1;
- (void)setAuxiliaryImageProperties:(id)arg1 forType:(long long)arg2;
- (void)setColorSpace:(id)arg1;
- (void)setComponentInfo:(long long)arg1;
- (void)setContentHeadroom:(float)arg1;
- (void)setFileUTI:(id)arg1;
- (void)setFlexRangeProperties:(id)arg1;
- (void)setGainMapHeadroom:(double)arg1;
- (void)setMetadata:(id)arg1;
- (void)setOrientation:(long long)arg1;
- (void)setRawProperties:(id)arg1;
- (void)setSemanticStyleProperties:(id)arg1;
- (void)setSize:(struct { long long x1; long long x2; })arg1;
- (void)setUrl:(id)arg1;
- (struct { long long x1; long long x2; })size;
- (id)url;

@end
