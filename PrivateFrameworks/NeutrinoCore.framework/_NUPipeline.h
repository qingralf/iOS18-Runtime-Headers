/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/NeutrinoCore.framework/NeutrinoCore
 */

@interface _NUPipeline : NSObject <NUMutablePipeline, NUPipeline> {
    NUIdentifier * _identifier;
    NSMutableArray * _innerPipelines;
    NSMutableArray * _inputChannels;
    NSMutableDictionary * _inputPorts;
    _NUPipeline * _outerPipeline;
    NSMutableArray * _outputChannels;
    NSMutableDictionary * _outputPorts;
}

@property (nonatomic, readonly) NSString *alias;
@property (nonatomic, readonly) NSString *compactDescription;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NUIdentifier *identifier;
@property (nonatomic, readonly, copy) NSArray *innerPipelines;
@property (nonatomic, readonly, copy) NSArray *inputChannels;
@property (nonatomic, readonly) NSString *name;
@property (nonatomic) _NUPipeline *outerPipeline;
@property (nonatomic, readonly, copy) NSArray *outputChannels;
@property (readonly) Class superclass;

+ (id)buildFilterPipelineWithName:(id)arg1 error:(out id*)arg2;
+ (id)buildPipelineWithIdentifier:(id)arg1 error:(out id*)arg2;
+ (id)buildSourcePipeline;

- (void).cxx_destruct;
- (id)_compactDescription;
- (id)_description;
- (bool)_isPrivate;
- (id)addCIFilterPipelineWithName:(id)arg1 error:(out id*)arg2;
- (void)addInnerPipeline:(id)arg1;
- (id)addInputChannel:(id)arg1;
- (id)addOutputChannel:(id)arg1;
- (id)addPipelineWithIdentifier:(id)arg1 error:(out id*)arg2;
- (id)addSourcePipeline;
- (id)alias;
- (bool)bind:(id)arg1 to:(id)arg2 error:(out id*)arg3;
- (bool)bindInputChannel:(id)arg1 to:(id)arg2 error:(out id*)arg3;
- (bool)bindInputPort:(id)arg1 to:(id)arg2 error:(out id*)arg3;
- (bool)canConnectInputPort:(id)arg1 toOutputPort:(id)arg2 error:(out id*)arg3;
- (id)compactDescription;
- (bool)connect:(id)arg1 input:(id)arg2 to:(id)arg3 error:(out id*)arg4;
- (bool)connect:(id)arg1 input:(id)arg2 to:(id)arg3 key:(id)arg4 error:(out id*)arg5;
- (bool)connect:(id)arg1 input:(id)arg2 to:(id)arg3 output:(id)arg4 error:(out id*)arg5;
- (bool)connect:(id)arg1 to:(id)arg2 output:(id)arg3 error:(out id*)arg4;
- (bool)connectInputPort:(id)arg1 toOutputPort:(id)arg2 error:(out id*)arg3;
- (id)description;
- (id)evaluate:(id)arg1 error:(out id*)arg2;
- (id)evaluateOutputChannel:(id)arg1 error:(out id*)arg2;
- (id)evaluateOutputPort:(id)arg1 error:(out id*)arg2;
- (id)identifier;
- (id)initWithIdentifier:(id)arg1;
- (id)innerPipelines;
- (id)inputChannelMatching:(id)arg1;
- (id)inputChannels;
- (id)inputPortForChannel:(id)arg1;
- (id)inputPortMatching:(id)arg1;
- (id)name;
- (id)outerPipeline;
- (id)outputChannelMatching:(id)arg1;
- (id)outputChannels;
- (id)outputPortForChannel:(id)arg1;
- (id)outputPortMatching:(id)arg1;
- (void)setOuterPipeline:(id)arg1;
- (bool)validateInputPort:(id)arg1 error:(out id*)arg2;
- (bool)validateOutputPort:(id)arg1 error:(out id*)arg2;

@end
