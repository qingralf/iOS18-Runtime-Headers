/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PerfPowerServicesReader.framework/PerfPowerServicesReader
 */

@interface PPSTimestampConverter : NSObject {
    NSURL * _filepath;
    struct vector<std::pair<double, double>, std::allocator<std::pair<double, double>>> { 
        void *__begin_; 
        void *__end_; 
        struct __compressed_pair<std::pair<double, double> *, std::allocator<std::pair<double, double>>> { 
            void *__value_; 
        } __end_cap_; 
    }  _systemOffsets;
    struct vector<std::pair<double, double>, std::allocator<std::pair<double, double>>> { 
        void *__begin_; 
        void *__end_; 
        struct __compressed_pair<std::pair<double, double> *, std::allocator<std::pair<double, double>>> { 
            void *__value_; 
        } __end_cap_; 
    }  _timeZoneOffsets;
}

@property (readonly) /* Warning: unhandled struct encoding: '{vector<std::pair<double' */ struct  systemOffsets; /* unknown property attribute:  double>>>=^v}} */
@property (readonly) /* Warning: unhandled struct encoding: '{vector<std::pair<double' */ struct  timeZoneOffsets; /* unknown property attribute:  double>>>=^v}} */

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_addSystemOffset:(double)arg1 withMonotonicTime:(double)arg2;
- (struct vector<std::pair<double, double>, std::allocator<std::pair<double, double>>> { void *x1; void *x2; struct __compressed_pair<std::pair<double, double> *, std::allocator<std::pair<double, double>>> { void *x_3_1_1; } x3; })_systemOffsetsForTableName:(id)arg1;
- (id)_tableNameForSystemOffset;
- (id)_tableNameForTimeZoneOffset;
- (struct vector<std::pair<double, double>, std::allocator<std::pair<double, double>>> { void *x1; void *x2; struct __compressed_pair<std::pair<double, double> *, std::allocator<std::pair<double, double>>> { void *x_3_1_1; } x3; })_timeZoneOffsetsForTableName:(id)arg1;
- (double)epochTimeFromMonotonicTime:(double)arg1;
- (id)initWithFilepath:(id)arg1;
- (id)initWithSubsystem:(id)arg1 category:(id)arg2;
- (double)localTimeFromMonotonicTime:(double)arg1;
- (double)monotonicTimeFromEpochTime:(double)arg1;
- (double)systemOffsetFromMonotonicTime:(double)arg1;
- (struct vector<std::pair<double, double>, std::allocator<std::pair<double, double>>> { void *x1; void *x2; struct __compressed_pair<std::pair<double, double> *, std::allocator<std::pair<double, double>>> { void *x_3_1_1; } x3; })systemOffsets;
- (double)timeZoneOffsetForMonotonicTime:(double)arg1;
- (struct vector<std::pair<double, double>, std::allocator<std::pair<double, double>>> { void *x1; void *x2; struct __compressed_pair<std::pair<double, double> *, std::allocator<std::pair<double, double>>> { void *x_3_1_1; } x3; })timeZoneOffsets;

@end
