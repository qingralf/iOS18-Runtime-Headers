/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotoImaging.framework/PhotoImaging
 */

@interface PIInpaintCacheNode : NUCacheNode {
    NSString * _cacheKey;
    NSObject<OS_dispatch_queue> * _inpaintQueue;
    <NUMutableBufferImage> * _inputImage;
    NURegion * _inputRegion;
    NSArray * _operations;
    <NUBufferImage> * _outputImage;
    NURegion * _outputRegion;
    bool  _sourceIsHDR;
    long long  _sourceOrientation;
}

@property (nonatomic, readonly) NURenderNode *inpaintInputNode;
@property (nonatomic, readonly) long long padding;
@property (nonatomic, readonly) bool shouldCacheIntermediates;

+ (id)inpaintNodeWithInput:(id)arg1 operations:(id)arg2 masks:(id)arg3 error:(out id*)arg4;
+ (id)intermediateCache;
+ (void)purge;

- (void).cxx_destruct;
- (bool)_applyInpaintOperation:(id)arg1 toImage:(id)arg2 operationIndex:(unsigned long long)arg3 renderer:(id)arg4 error:(out id*)arg5;
- (id)_computeBaseIdentifier;
- (void)_debugDumpMaskImage:(id)arg1 name:(id)arg2;
- (id)_evaluateImage:(out id*)arg1;
- (id)_evaluateImageGeometry:(out id*)arg1;
- (struct { struct { long long x_1_1_1; long long x_1_1_2; } x1; struct { long long x_2_1_1; long long x_2_1_2; } x2; })_exclusionMaskExtentForOperation:(id)arg1 error:(out id*)arg2;
- (struct { struct { long long x_1_1_1; long long x_1_1_2; } x1; struct { long long x_2_1_1; long long x_2_1_2; } x2; })_extentForInputIdentifiers:(id)arg1 error:(out id*)arg2;
- (struct { struct { long long x_1_1_1; long long x_1_1_2; } x1; struct { long long x_2_1_1; long long x_2_1_2; } x2; })_maskExtentForOperation:(id)arg1 error:(out id*)arg2;
- (id)_modifyEvaluatedGeometry:(id)arg1;
- (id)_newMaskImageFromIdentifiers:(id)arg1 useSourceImage:(bool)arg2 error:(out id*)arg3;
- (bool)_renderBackgroundImage:(id)arg1 intoMutableBuffer:(id)arg2 renderer:(id)arg3 error:(out id*)arg4;
- (bool)_renderWithBackgroundImage:(id)arg1 error:(out id*)arg2;
- (bool)_tryLoad:(out id*)arg1;
- (bool)_updateInputRegion:(id)arg1 outputRegion:(id)arg2 forOperation:(id)arg3 geometry:(id)arg4 error:(out id*)arg5;
- (bool)applyInpaintOperations:(id)arg1 toImage:(id)arg2 renderer:(id)arg3 error:(out id*)arg4;
- (id)descriptionSubClassHook;
- (id)evaluateRenderDependenciesWithRequest:(id)arg1 error:(out id*)arg2;
- (id)initWithInputs:(id)arg1 settings:(id)arg2;
- (id)initWithInputs:(id)arg1 settings:(id)arg2 subsampleFactor:(long long)arg3;
- (id)inpaintInputNode;
- (id)newExclusionMaskImageForOperation:(id)arg1 inputImage:(id)arg2 error:(out id*)arg3;
- (id)newImageOfSize:(struct { long long x1; long long x2; })arg1 colorSpace:(id)arg2;
- (id)newMaskImageForOperation:(id)arg1 useSourceImage:(bool)arg2 error:(out id*)arg3;
- (id)nodeByReplayingAgainstCache:(id)arg1 pipelineState:(id)arg2 error:(out id*)arg3;
- (id)outputRegion;
- (long long)padding;
- (void)provideImageData:(void*)arg1 bytesPerRow:(unsigned long long)arg2 origin:(unsigned long long)arg3 :(unsigned long long)arg4 size:(unsigned long long)arg5 :(unsigned long long)arg6 userInfo:(id)arg7;
- (bool)shouldCacheIntermediates;
- (bool)shouldDumpSourceMasks;
- (long long)subsampleFactorForScale:(struct { long long x1; long long x2; })arg1;
- (bool)tryLoad:(out id*)arg1;
- (id)uniqueInputNode;
- (bool)wantsDependentJob;

@end
