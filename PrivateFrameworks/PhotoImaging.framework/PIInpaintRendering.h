/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotoImaging.framework/PhotoImaging
 */

@interface PIInpaintRendering : NSObject

+ (id)_imageByOverlayingForegroundImage:(id)arg1 onImage:(id)arg2 withOpacity:(double)arg3;
+ (void)addModelsToInpaintFilter:(id)arg1;
+ (float)computeLocalHeadroomForHDRImage:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 context:(id)arg3;
+ (double)dilationAmountForMaskSize:(struct CGSize { double x1; double x2; })arg1 fullSize:(struct CGSize { double x1; double x2; })arg2;
+ (id)imageByOverlayingBoundsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 onImage:(id)arg2;
+ (id)imageByOverlayingMaskImage:(id)arg1 onImage:(id)arg2 withOpacity:(double)arg3;
+ (void)initialize;
+ (id)inpaintedImageWithInputImage:(id)arg1 maskImage:(id)arg2 exclusionMaskImage:(id)arg3 headroom:(float)arg4;
+ (id)maskByAddingMask:(id)arg1 toMask:(id)arg2;
+ (id)maskByDilatingMask:(id)arg1 fullExtent:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
+ (id)maskByFillingHolesInMask:(id)arg1;
+ (id)maskByRemovingMask:(id)arg1 fromMask:(id)arg2;
+ (id)maskByUpscalingMask:(id)arg1 withGuideImage:(id)arg2;
+ (id)redactedImageWithInputImage:(id)arg1 maskImage:(id)arg2;
+ (bool)renderImage:(id)arg1 intoMutableBuffer:(id)arg2 destinationBounds:(struct { struct { long long x_1_1_1; long long x_1_1_2; } x1; struct { long long x_2_1_1; long long x_2_1_2; } x2; })arg3 renderer:(id)arg4 error:(out id*)arg5;
+ (bool)shouldDilateMaskForOperation:(id)arg1;
+ (struct { struct { long long x_1_1_1; long long x_1_1_2; } x1; struct { long long x_2_1_1; long long x_2_1_2; } x2; })sourceExtentForMaskExtent:(struct { struct { long long x_1_1_1; long long x_1_1_2; } x1; struct { long long x_2_1_1; long long x_2_1_2; } x2; })arg1 exclusionMaskExtent:(struct { struct { long long x_1_1_1; long long x_1_1_2; } x1; struct { long long x_2_1_1; long long x_2_1_2; } x2; })arg2 imageExtent:(struct { struct { long long x_1_1_1; long long x_1_1_2; } x1; struct { long long x_2_1_1; long long x_2_1_2; } x2; })arg3;

@end
