/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotosFaceLayout.framework/PhotosFaceLayout
 */

@interface PFLLayoutConfiguration : NSObject {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _acceptableCropRect;
    NSString * _assetId;
    struct CGSize { 
        double width; 
        double height; 
    }  _assetSize;
    PIParallaxColorAnalysis * _colorAnalysis;
    double  _cropScore;
    NSArray * _faceRects;
    struct __CVBuffer { } * _foregroundMask;
    double  _layoutScore;
    bool  _maskIsInverted;
    NSArray * _petRects;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _preferredCropRect;
    unsigned long long  _timePosition;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _timeRect;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _timeRectInAsset;
    bool  _usesMask;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _visibleRect;
}

@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } acceptableCropRect;
@property (nonatomic, readonly) NSString *assetId;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } assetSize;
@property (nonatomic, readonly) PIParallaxColorAnalysis *colorAnalysis;
@property (nonatomic, readonly) double cropScore;
@property (nonatomic, readonly) NSArray *faceRects;
@property (nonatomic, readonly) struct __CVBuffer { }*foregroundMask;
@property (nonatomic, readonly) double layoutScore;
@property (nonatomic, readonly) bool maskIsInverted;
@property (nonatomic, readonly) NSArray *petRects;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } preferredCropRect;
@property (nonatomic, readonly) unsigned long long timePosition;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } timeRect;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } timeRectInAsset;
@property (nonatomic, readonly) bool usesMask;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visibleRect;

- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })acceptableCropRect;
- (id)assetId;
- (struct CGSize { double x1; double x2; })assetSize;
- (id)colorAnalysis;
- (double)cropScore;
- (void)dealloc;
- (id)description;
- (id)faceRects;
- (struct __CVBuffer { }*)foregroundMask;
- (id)initWithAsset:(id)arg1 timePosition:(unsigned long long)arg2 segmentationData:(id)arg3 coreLayout:(id)arg4;
- (double)layoutScore;
- (bool)maskIsInverted;
- (id)petRects;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })preferredCropRect;
- (unsigned long long)timePosition;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })timeRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })timeRectInAsset;
- (bool)usesMask;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleRect;

@end
