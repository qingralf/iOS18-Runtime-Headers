/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore
 */

@interface PXPhotosSectionHeaderLayout : PXGLayout <PXGNamedImageSource, PXGSolidColorSource, PXGStringSource, PXPhotosSectionedLayoutHeader> {
    PXAssetCollectionReference * _assetCollectionReference;
    NSIndexSet * _axSpriteIndexes;
    NSString * _axSpriteText;
    NSDictionary * _badgeAttributes;
    struct CGSize { 
        double width; 
        double height; 
    }  _badgeSize;
    NSString * _badgeTitle;
    unsigned short  _badgeVersion;
    NSString * _buttonTitle;
    NSDictionary * _buttonTitleAttributes;
    struct CGSize { 
        double width; 
        double height; 
    }  _buttonTitleSize;
    unsigned short  _buttonVersion;
    UIColor * _dividerColor;
    unsigned short  _dividerVersion;
    id /* block */  _filterActionHandler;
    NSString * _filterButtonCaption;
    bool  _filterButtonHighlighting;
    struct CGSize { 
        double width; 
        double height; 
    }  _filterButtonSize;
    NSString * _filterButtonTitle;
    unsigned short  _filterButtonVersion;
    NSString * _finalTitle;
    NSDictionary * _finalTitleAttributes;
    NSDictionary * _finalTitleLightGradientAttributes;
    struct CGSize { 
        double width; 
        double height; 
    }  _finalTitleSize;
    unsigned short  _finalTitleVersion;
    unsigned short  _gradientResizableCapInsetsIndex;
    bool  _isBadgeVisible;
    bool  _isFirstSectionHeader;
    double  _relativeOffsetAlpha;
    bool  _showLegibilityGradient;
    PXPhotosLayoutSpec * _spec;
    NSString * _subtitle;
    NSDictionary * _subtitleAttributes;
    struct CGSize { 
        double width; 
        double height; 
    }  _subtitleSize;
    unsigned short  _subtitleVersion;
    NSString * _title;
    struct { 
        unsigned long long needsUpdate; 
        unsigned long long updated; 
        bool isPerformingUpdate; 
        bool willPerformUpdate; 
    }  _updateFlags;
    bool  isInSelectMode;
    PXSelectionSnapshot * selectionSnapshot;
}

@property (nonatomic, readonly) bool allowsInteraction;
@property (nonatomic, retain) PXAssetCollectionReference *assetCollectionReference;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } axSpriteFrame;
@property (nonatomic, readonly) NSString *axSpriteText;
@property (nonatomic, copy) NSDictionary *badgeAttributes;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } badgeSize;
@property (nonatomic, copy) NSString *badgeTitle;
@property (nonatomic, copy) NSString *buttonTitle;
@property (nonatomic, copy) NSDictionary *buttonTitleAttributes;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } buttonTitleSize;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) UIColor *dividerColor;
@property (nonatomic, copy) id /* block */ filterActionHandler;
@property (nonatomic, copy) NSString *filterButtonCaption;
@property (nonatomic) bool filterButtonHighlighting;
@property (nonatomic, readonly, copy) PXGSpriteReference *filterButtonReference;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } filterButtonSize;
@property (nonatomic, copy) NSString *filterButtonTitle;
@property (nonatomic, copy) NSString *finalTitle;
@property (nonatomic, copy) NSDictionary *finalTitleAttributes;
@property (nonatomic, copy) NSDictionary *finalTitleLightGradientAttributes;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } finalTitleSize;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isBadgeVisible;
@property (nonatomic) bool isFirstSectionHeader;
@property (nonatomic) bool isInSelectMode;
@property (nonatomic, readonly) double relativeOffsetAlpha;
@property (nonatomic, retain) PXSelectionSnapshot *selectionSnapshot;
@property (nonatomic) bool showLegibilityGradient;
@property (nonatomic, retain) PXPhotosLayoutSpec *spec;
@property (nonatomic, copy) NSString *subtitle;
@property (nonatomic, copy) NSDictionary *subtitleAttributes;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } subtitleSize;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *title;
@property (nonatomic, readonly) bool wantsButton;
@property (nonatomic, readonly) bool wantsChevron;

- (void).cxx_destruct;
- (id)_filterButtonConfiguration;
- (void)_handleFilterAction;
- (void)_invalidateAttributes;
- (void)_invalidateBadgeMediaVersion;
- (void)_invalidateButtonTitleMediaVersion;
- (void)_invalidateContent;
- (void)_invalidateDividerMediaVersion;
- (void)_invalidateFilterUI;
- (void)_invalidateFinalTitle;
- (void)_invalidateFinalTitleMediaVersion;
- (void)_invalidateRelativeOffsetAlpha;
- (void)_invalidateSpritesAlpha;
- (void)_invalidateSubtitleMediaVersion;
- (void)_updateAttributes;
- (void)_updateContent;
- (void)_updateFinalTitle;
- (void)_updateRelativeOffsetAlpha;
- (void)_updateSpritesAlpha;
- (bool)allowsInteraction;
- (id)assetCollectionReference;
- (id)attributedStringForSpriteAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (id)axContentInfoAtSpriteIndex:(unsigned int)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })axSpriteFrame;
- (id)axSpriteIndexes;
- (id)axSpriteIndexesInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)axSpriteText;
- (id)axVisibleSpriteIndexes;
- (id)badgeAttributes;
- (struct CGSize { double x1; double x2; })badgeSize;
- (id)badgeTitle;
- (id)buttonTitle;
- (id)buttonTitleAttributes;
- (struct CGSize { double x1; double x2; })buttonTitleSize;
- (id)colorAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (void)contentSizeDidChange;
- (void)didUpdate;
- (void)displayScaleDidChange;
- (id)dividerColor;
- (id /* block */)filterActionHandler;
- (id)filterButtonCaption;
- (bool)filterButtonHighlighting;
- (id)filterButtonReference;
- (struct CGSize { double x1; double x2; })filterButtonSize;
- (id)filterButtonTitle;
- (id)finalTitle;
- (id)finalTitleAttributes;
- (id)finalTitleLightGradientAttributes;
- (struct CGSize { double x1; double x2; })finalTitleSize;
- (void)floatingOffsetDidChange;
- (id)hitTestResultForSpriteIndex:(unsigned int)arg1;
- (id)imageConfigurationAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (id)init;
- (id)initWithSpec:(id)arg1;
- (bool)isBadgeVisible;
- (bool)isFirstSectionHeader;
- (bool)isInSelectMode;
- (void)referenceSizeDidChange;
- (double)relativeOffsetAlpha;
- (void)safeAreaInsetsDidChange;
- (id)selectionSnapshot;
- (void)setAssetCollectionReference:(id)arg1;
- (void)setBadgeAttributes:(id)arg1;
- (void)setBadgeTitle:(id)arg1;
- (void)setButtonTitle:(id)arg1;
- (void)setButtonTitleAttributes:(id)arg1;
- (void)setDividerColor:(id)arg1;
- (void)setFilterActionHandler:(id /* block */)arg1;
- (void)setFilterButtonCaption:(id)arg1;
- (void)setFilterButtonHighlighting:(bool)arg1;
- (void)setFilterButtonTitle:(id)arg1;
- (void)setFinalTitle:(id)arg1;
- (void)setFinalTitleAttributes:(id)arg1;
- (void)setFinalTitleLightGradientAttributes:(id)arg1;
- (void)setFinalTitleLightGradientAttributess:(id)arg1;
- (void)setIsBadgeVisible:(bool)arg1;
- (void)setIsFirstSectionHeader:(bool)arg1;
- (void)setIsInSelectMode:(bool)arg1;
- (void)setRelativeOffsetAlpha:(double)arg1;
- (void)setSelectionSnapshot:(id)arg1;
- (void)setShowLegibilityGradient:(bool)arg1;
- (void)setSpec:(id)arg1;
- (void)setSubtitle:(id)arg1;
- (void)setSubtitleAttributes:(id)arg1;
- (void)setTitle:(id)arg1;
- (bool)showLegibilityGradient;
- (id)spec;
- (id)stringAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (id)stringAttributesAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (id)subtitle;
- (id)subtitleAttributes;
- (struct CGSize { double x1; double x2; })subtitleSize;
- (id)title;
- (void)update;
- (long long)verticalAlignmentForStringAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (Class)viewClassForSpriteAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (void)viewEnvironmentDidChange;
- (id)viewUserDataForSpriteAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (void)visibleRectDidChange;
- (bool)wantsButton;
- (bool)wantsChevron;
- (void)willUpdate;

@end
