/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotosUIPrivate.framework/PhotosUIPrivate
 */

@interface PUCleanupToolController : PUPhotoEditToolController <CEKSliderDelegate, PIBrushStrokeHistoryPlaybackDelegate, PUCleanupFaceRectsImageSizeDelegate, PUCleanupMaskTransformerDelegate, PUCleanupOverlayViewControllerDelegate, PUCleanupUserPromptViewLayoutDelegate, PUVFXCleanupOverlayDelegate, PXSettingsKeyObserver> {
    bool  _awaitingMediaView;
    UILabel * _brushModeBrushSizeLabel;
    CEKSlider * _brushModeBrushSizeSlider;
    PUPhotoEditToolbarButton * _brushModeButton;
    bool  _busy;
    unsigned long long  _cleanupMode;
    bool  _cleanupViewsHaveBeenPrepared;
    UILabel * _defaultModeBrushSizeLabel;
    CEKSlider * _defaultModeBrushSizeSlider;
    bool  _didPixellate;
    double  _exclusionMaskHitTestRadius;
    PUCleanupToolFaceRectsView * _faceRectsView;
    PXEditCleanupFeedbackActionPerformer * _feedbackActionPerformer;
    UIButton * _feedbackThumbsDownButton;
    UIButton * _feedbackThumbsUpButton;
    UIView * _feedbackViewContainer;
    NSArray * _feedbackViewContainerConstraints;
    PLImageGeometry * _geometry;
    bool  _isUnsafeInitially;
    bool  _isZooming;
    PIInpaintMaskContext * _maskContext;
    bool  _maskContextCreationHasBegun;
    PUCleanupToolMaskView * _maskView;
    bool  _mediaViewIsReady;
    PEModelDeliveryManager * _modelDeliveryManager;
    NSArray * _modelDeliveryProgressConstraints;
    bool  _modelDeliveryProgressInErrorState;
    PXModelDeliveryProgressObjCViewController * _modelDeliveryProgressViewController;
    bool  _needsHDRUI;
    NSMutableArray * _overlayConstraints;
    PUCleanupOverlayViewController * _overlayController;
    double  _progressDelay;
    bool  _promptViewHasBeenShown;
    bool  _promptViewWasHidden;
    PLPhotoEditRenderer * _renderer;
    PUPhotoEditToolActivationButton * _resetButton;
    PUVFXRetouchOverlay * _retouchVFXOverlay;
    NSNumber * _savedMediaViewScrollViewMinimumNumberOfTouches;
    PISensitiveContentAnalysisRequest * _sensitivityRequest;
    NSMutableArray * _tasksWaitingOnCleanupReady;
    NSMutableArray * _toolConstraints;
    PUCleanupUserPromptView * _userPromptView;
    NSMutableArray * _userPromptViewConstraints;
    NSTimer * _userPromptViewTimer;
}

@property (getter=isAwaitingMediaView, setter=_setAwaitingMediaView:, nonatomic) bool awaitingMediaView;
@property (nonatomic, retain) PUPhotoEditToolbarButton *brushModeButton;
@property (getter=isBusy, setter=_setBusy:, nonatomic) bool busy;
@property (nonatomic) unsigned long long cleanupMode;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) PUCleanupToolFaceRectsView *faceRectsView;
@property (nonatomic, retain) PXEditCleanupFeedbackActionPerformer *feedbackActionPerformer;
@property (nonatomic, retain) UIButton *feedbackThumbsDownButton;
@property (nonatomic, retain) UIButton *feedbackThumbsUpButton;
@property (nonatomic, retain) UIView *feedbackViewContainer;
@property (nonatomic, retain) NSArray *feedbackViewContainerConstraints;
@property (nonatomic, retain) PLImageGeometry *geometry;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isZooming;
@property (nonatomic, retain) PIInpaintMaskContext *maskContext;
@property (nonatomic, retain) PUCleanupToolMaskView *maskView;
@property (nonatomic, retain) PEModelDeliveryManager *modelDeliveryManager;
@property (nonatomic, retain) NSArray *modelDeliveryProgressConstraints;
@property (nonatomic) bool modelDeliveryProgressInErrorState;
@property (nonatomic, retain) PXModelDeliveryProgressObjCViewController *modelDeliveryProgressViewController;
@property (nonatomic) bool needsHDRUI;
@property (nonatomic) double progressDelay;
@property (nonatomic, retain) PLPhotoEditRenderer *renderer;
@property (nonatomic, retain) NSNumber *savedMediaViewScrollViewMinimumNumberOfTouches;
@property (nonatomic, retain) PISensitiveContentAnalysisRequest *sensitivityRequest;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)_addImageSpaceInpaintingStroke:(id)arg1 closeAndFillStroke:(bool)arg2 needsPixellation:(bool)arg3 recordStroke:(bool)arg4 exclusionMask:(id)arg5 exclusionMaskHitTestRadius:(double)arg6 completion:(id /* block */)arg7;
- (void)_addOverlayIfNeeded;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationWillResignActive:(id)arg1;
- (void)_brushModeButtonTapped:(id)arg1;
- (bool)_canReset;
- (void)_createFaceRectsView;
- (void)_createMaskView;
- (void)_createRendererIfNeeded;
- (id)_createSubjectExclusionMask;
- (void)_createVFXMaskOverlays;
- (void)_didRedo:(id)arg1;
- (void)_didUndo:(id)arg1;
- (void)_displayProcessingWithSelectedMask:(id)arg1 unselectedMaskImage:(id)arg2 exclusionMasks:(id)arg3 point:(struct CGPoint { double x1; double x2; })arg4;
- (void)_displayProcessingWithSelectedMaskImage:(id)arg1 unselectedMaskImage:(id)arg2 exclusionMasks:(id)arg3 point:(struct CGPoint { double x1; double x2; })arg4;
- (bool)_enableFeedback;
- (void)_handleOperationExceedsSizeLimit;
- (id)_newOverlayMask;
- (void)_prepareViewsForCleanupIfReady;
- (void)_prepareViewsForCleanupIfReadyAndNotify:(id /* block */)arg1;
- (void)_removePreparingProgress;
- (void)_reportFeedbackAction:(unsigned long long)arg1;
- (void)_resetTapped:(id)arg1;
- (void)_setAwaitingMediaView:(bool)arg1;
- (void)_setBusy:(bool)arg1;
- (void)_setBusy:(bool)arg1 withDelay:(double)arg2;
- (void)_setCleanupMode:(unsigned long long)arg1;
- (void)_setShowCleanupBrushSizeSlider:(id)arg1 show:(bool)arg2 animate:(bool)arg3;
- (void)_setupCleanupBrushSizeSlider:(id)arg1 label:(id)arg2;
- (void)_setupCleanupBrushSizeSliders;
- (void)_setupCleanupControls;
- (void)_setupResetButton;
- (void)_showCleanupBrushSizeSlider:(id)arg1 label:(id)arg2 show:(bool)arg3;
- (bool)_showFeedbackThumbs;
- (void)_showPreparingProgress;
- (void)_updateFaceRectsView;
- (void)_updateFeedbackViewVisibility;
- (void)_updateMaskContext;
- (void)_updateMaskViewForBrushMode;
- (void)_updateMaskViewForDefaultMode;
- (void)_updateMaskViewForDefaultModeIfNecessary;
- (void)_updateMaskViewWithUnselectedMaskImage:(id)arg1 foregroundMasks:(id)arg2 backgroundMasks:(id)arg3;
- (void)_updatePreparingProgressConstraints;
- (void)_updateResetButtonState;
- (void)_updateToolConstraints;
- (void)_updateVFXMaskOverlayWithSelectedMask:(id)arg1 point:(struct CGPoint { double x1; double x2; })arg2;
- (void)_willRedo:(id)arg1;
- (void)_willUndo:(id)arg1;
- (void)addAttachmentsForTapToRadar:(id)arg1;
- (void)addDeclutter;
- (void)addImageSpaceInpaintingStroke:(id)arg1 exclusionMask:(id)arg2 closeAndFillStroke:(bool)arg3 needsPixellation:(bool)arg4 recordStroke:(bool)arg5 completion:(id /* block */)arg6;
- (void)addObjectRemovalAtImageSpacePoint:(struct CGPoint { double x1; double x2; })arg1 completion:(id /* block */)arg2;
- (void)addObjectRemovalAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)addObjectRemovalUsingImageSpaceStroke:(id)arg1 exclusionMask:(id)arg2 completion:(id /* block */)arg3;
- (void)addObjectRemovalUsingStroke:(id)arg1 exclusionMask:(id)arg2;
- (void)addStroke:(id)arg1 closeAndFillStroke:(bool)arg2;
- (void)addUserPromptViewOfType:(unsigned long long)arg1 animated:(bool)arg2;
- (id)brushModeButton;
- (float)brushRadiusForTouchType:(long long)arg1;
- (id)brushStrokeExclusionMaskForStrokeStartingAtImageSpacePoint:(struct CGPoint { double x1; double x2; })arg1 withRadius:(double)arg2;
- (bool)canBecomeActiveTool;
- (id)centerToolbarView;
- (void)checkPotentialInpaintOperation:(id /* block */)arg1 handler:(id /* block */)arg2;
- (id)cleanupActionNames;
- (unsigned long long)cleanupMode;
- (void)compositionControllerDidChangeForAdjustments:(id)arg1;
- (void)createAllAvailableMasks:(id /* block */)arg1;
- (long long)currentLayoutStyle;
- (double)currentRenderViewWidth;
- (void)deleteUserPromptViewAnimated:(bool)arg1 completion:(id /* block */)arg2;
- (void)didBecomeActiveTool;
- (void)didResignActiveTool;
- (id)faceRectsView;
- (void)fadeOutBrushStrokeWithDuration:(double)arg1;
- (id)feedbackActionPerformer;
- (void)feedbackThumbsButtonAction:(id)arg1;
- (id)feedbackThumbsDownButton;
- (id)feedbackThumbsUpButton;
- (id)feedbackView;
- (id)feedbackViewContainer;
- (id)feedbackViewContainerConstraints;
- (id)geometry;
- (void)hidePromptViewIfNeeded;
- (struct CGSize { double x1; double x2; })imageSize;
- (id)initWithCoder:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)internalToolActionsForMenu;
- (bool)isAwaitingMediaView;
- (bool)isBusy;
- (bool)isIpadLayout;
- (bool)isPortrait;
- (bool)isZooming;
- (void)leavingEditWithCancel;
- (id)localizedName;
- (id)maskContext;
- (id)maskView;
- (void)mediaView:(id)arg1 didZoom:(double)arg2;
- (void)mediaViewDidEndZooming:(id)arg1;
- (void)mediaViewDidScroll:(id)arg1;
- (void)mediaViewIsReady;
- (void)mediaViewWillBeginZooming:(id)arg1;
- (id)modelDeliveryManager;
- (id)modelDeliveryProgressConstraints;
- (bool)modelDeliveryProgressInErrorState;
- (id)modelDeliveryProgressViewController;
- (void)modifyInpaintAdjustmentWithBlock:(id /* block */)arg1 actionStringKey:(id)arg2 completion:(id /* block */)arg3;
- (bool)needsHDRUI;
- (struct CGPoint { double x1; double x2; })originalPointFromOverlayViewPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)ppt_replayCleanupBrushStrokeWithCompletionBlock:(id /* block */)arg1;
- (void)prepareForSave:(bool)arg1;
- (void)previewingOriginalDidStart;
- (void)previewingOriginalDidStop;
- (double)progressDelay;
- (void)redoInitiated:(id)arg1;
- (void)reloadToolbarButtons:(bool)arg1;
- (id)renderer;
- (void)replayBrushstrokesWithCompletion:(id /* block */)arg1;
- (id)savedMediaViewScrollViewMinimumNumberOfTouches;
- (float)scaledBrushRadiusForTouchType:(long long)arg1;
- (long long)segmentationCount;
- (id)selectedToolbarIconGlyphName;
- (id)sensitivityRequest;
- (void)setBrushModeButton:(id)arg1;
- (void)setCleanupMode:(unsigned long long)arg1;
- (void)setFaceRectsView:(id)arg1;
- (void)setFeedbackActionPerformer:(id)arg1;
- (void)setFeedbackThumbsDownButton:(id)arg1;
- (void)setFeedbackThumbsUpButton:(id)arg1;
- (void)setFeedbackViewContainer:(id)arg1;
- (void)setFeedbackViewContainerConstraints:(id)arg1;
- (void)setGeometry:(id)arg1;
- (void)setIsZooming:(bool)arg1;
- (void)setLayoutOrientation:(long long)arg1 withTransitionCoordinator:(id)arg2;
- (void)setMaskContext:(id)arg1;
- (void)setMaskView:(id)arg1;
- (void)setModelDeliveryManager:(id)arg1;
- (void)setModelDeliveryProgressConstraints:(id)arg1;
- (void)setModelDeliveryProgressInErrorState:(bool)arg1;
- (void)setModelDeliveryProgressViewController:(id)arg1;
- (void)setNeedsHDRUI:(bool)arg1;
- (void)setProgressDelay:(double)arg1;
- (void)setRenderer:(id)arg1;
- (void)setSavedMediaViewScrollViewMinimumNumberOfTouches:(id)arg1;
- (void)setSensitivityRequest:(id)arg1;
- (void)settings:(id)arg1 changedValueForKey:(id)arg2;
- (void)setupWithAsset:(id)arg1 compositionController:(id)arg2 editSource:(id)arg3 valuesCalculator:(id)arg4;
- (void)sliderDidEndScrolling:(id)arg1;
- (void)sliderDidScroll:(id)arg1;
- (void)sliderWillBeginScrolling:(id)arg1;
- (id)sourceImageOfSize:(struct CGSize { double x1; double x2; })arg1;
- (double)subjectExclusionMaskBrushRadiusForScreenSpaceRadius:(double)arg1;
- (bool)supportsGesturesOfType:(unsigned long long)arg1;
- (id)toolActionsForMenu;
- (long long)toolControllerTag;
- (void)toolControllerWantsToShowOriginal:(bool)arg1;
- (id)toolbarIconAccessibilityLabel;
- (id)toolbarIconGlyphName;
- (id)trailingToolbarViews;
- (id)transformedImage:(id)arg1 error:(id*)arg2;
- (id)transformedImageForBrushStrokeExclusionMask:(id)arg1;
- (struct CGPoint { double x1; double x2; })transformedPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)undoInitiated:(id)arg1;
- (void)updateViewConstraints;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;
- (bool)wantsTapToToggleOriginalEnabled;
- (bool)wantsZoomAndPanEnabled;
- (void)willBecomeActiveTool;
- (void)willResignActiveTool;

@end
