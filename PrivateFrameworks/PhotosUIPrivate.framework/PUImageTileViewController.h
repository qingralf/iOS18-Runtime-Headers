/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotosUIPrivate.framework/PhotosUIPrivate
 */

@interface PUImageTileViewController : PUTileViewController <PUAssetViewModelChangeObserver, PUImageRequesterObserver, PXChangeObserver, PXEventCoalescerObserver> {
    long long  __assetLoadingStage;
    NSDate * __assetLoadingStartDate;
    NSData * __fullSizeImageData;
    long long  __fullSizeImageOrientation;
    struct CGSize { 
        double width; 
        double height; 
    }  __fullSizeImageSize;
    NSURL * __fullSizeImageURL;
    struct CGSize { 
        double width; 
        double height; 
    }  __fullSizeImageUntransformedSize;
    CALayer<PLTileableLayer> * __fullSizeTiledLayer;
    PUImageRequester * __imageRequester;
    UIImageView * __imageView;
    bool  __needsUpdateDidRequestHDR;
    bool  __needsUpdateFullSizeImageMetadata;
    bool  __needsUpdateFullSizeTiledLayer;
    bool  __needsUpdateImage;
    bool  __needsUpdateImageLayerModulator;
    bool  __needsUpdateImageLayerModulatorInput;
    bool  __needsUpdateImageLayerModulatorManager;
    struct CGSize { 
        double width; 
        double height; 
    }  __targetSize;
    bool  _animatesImageTransitions;
    <PUDisplayAsset> * _asset;
    PUAssetViewModel * _assetViewModel;
    PUBrowsingViewModel * _browsingViewModel;
    bool  _canUseFullSizeTiledLayer;
    bool  _didRequestHDR;
    <PUImageRequesterResult> * _displayedImageRequestResult;
    struct CGImage { } * _gainMapImage;
    float  _gainMapValue;
    PXImageLayerModulator * _imageLayerModulator;
    PXImageModulationManager * _imageModulationManager;
    bool  _isDisplayingFullQualityImage;
    PUMediaProvider * _mediaProvider;
    bool  _needsUpdateTargetSize;
    UIColor * _placeholderColor;
    <PUImageTileViewControllerPresentingDelegate> * _presentingDelegate;
    struct { 
        bool respondsToPresentingViewController; 
        bool respondsToShouldShowVisualIntelligenceOverlay; 
        bool respondsToShouldEnableSubjectLiftingForVisualIntelligenceOverlay; 
        bool respondsToPPTShouldSignalDeferredProcessingDoneAndFinalImageDisplayed; 
        bool respondsToFullQualityImageDisplayed; 
    }  _presentingDelegateFlags;
    bool  _requiresFullQualityImage;
    bool  _shouldAnimateToFullQualityResult;
    bool  _shouldRetainNonFinalImageUntilZoom;
    bool  _shouldUseFullSizeImageData;
    PXEventCoalescer * _targetSizeUpdateRateLimiter;
    PXNumberAnimator * _tiledLayerAlphaAnimator;
    UIView * _tiledLayerHostingView;
}

@property (setter=_setAssetLoadingStage:, nonatomic) long long _assetLoadingStage;
@property (setter=_setAssetLoadingStartDate:, nonatomic, retain) NSDate *_assetLoadingStartDate;
@property (setter=_setFullSizeImageData:, nonatomic, retain) NSData *_fullSizeImageData;
@property (setter=_setFullSizeImageOrientation:, nonatomic) long long _fullSizeImageOrientation;
@property (setter=_setFullSizeImageSize:, nonatomic) struct CGSize { double x1; double x2; } _fullSizeImageSize;
@property (setter=_setFullSizeImageURL:, nonatomic, retain) NSURL *_fullSizeImageURL;
@property (setter=_setFullSizeImageUntransformedSize:, nonatomic) struct CGSize { double x1; double x2; } _fullSizeImageUntransformedSize;
@property (setter=_setFullSizeTiledLayer:, nonatomic, retain) CALayer<PLTileableLayer> *_fullSizeTiledLayer;
@property (setter=_setImageRequester:, nonatomic, retain) PUImageRequester *_imageRequester;
@property (nonatomic, readonly) UIImageView *_imageView;
@property (setter=_setNeedsUpdateDidRequestHDR:, nonatomic) bool _needsUpdateDidRequestHDR;
@property (setter=_setNeedsUpdateFullSizeImageMetadata:, nonatomic) bool _needsUpdateFullSizeImageMetadata;
@property (setter=_setNeedsUpdateFullSizeTiledLayer:, nonatomic) bool _needsUpdateFullSizeTiledLayer;
@property (setter=_setNeedsUpdateImage:, nonatomic) bool _needsUpdateImage;
@property (setter=_setNeedsUpdateImageLayerModulator:, nonatomic) bool _needsUpdateImageLayerModulator;
@property (setter=_setNeedsUpdateImageLayerModulatorInput:, nonatomic) bool _needsUpdateImageLayerModulatorInput;
@property (setter=_setNeedsUpdateImageLayerModulatorManager:, nonatomic) bool _needsUpdateImageLayerModulatorManager;
@property (setter=_setTargetSize:, nonatomic) struct CGSize { double x1; double x2; } _targetSize;
@property (nonatomic) bool animatesImageTransitions;
@property (nonatomic, retain) <PUDisplayAsset> *asset;
@property (nonatomic, retain) PUAssetViewModel *assetViewModel;
@property (nonatomic, retain) PUBrowsingViewModel *browsingViewModel;
@property (nonatomic) bool canUseFullSizeTiledLayer;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool didRequestHDR;
@property (nonatomic, readonly) <PUImageRequesterResult> *displayedImageRequestResult;
@property (nonatomic, readonly) struct CGImage { }*gainMapImage;
@property (nonatomic, readonly) bool gainMapImageIsAvailable;
@property (nonatomic, readonly) float gainMapValue;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) UIImage *image;
@property (nonatomic, retain) PXImageLayerModulator *imageLayerModulator;
@property (nonatomic, retain) PXImageModulationManager *imageModulationManager;
@property (nonatomic, readonly) UIImageView *imageView;
@property (nonatomic, readonly) bool isDeferredProcessingFinished;
@property (nonatomic, readonly) bool isDisplayingFullQualityImage;
@property (nonatomic, retain) PUMediaProvider *mediaProvider;
@property (nonatomic) bool needsUpdateTargetSize;
@property (nonatomic, copy) UIColor *placeholderColor;
@property (nonatomic) <PUImageTileViewControllerPresentingDelegate> *presentingDelegate;
@property (nonatomic) bool requiresFullQualityImage;
@property (nonatomic) bool shouldAnimateToFullQualityResult;
@property (nonatomic) bool shouldRetainNonFinalImageUntilZoom;
@property (nonatomic) bool shouldUseFullSizeImageData;
@property (readonly) Class superclass;
@property (nonatomic, readonly) PXEventCoalescer *targetSizeUpdateRateLimiter;
@property (nonatomic, retain) PXNumberAnimator *tiledLayerAlphaAnimator;
@property (nonatomic, retain) UIView *tiledLayerHostingView;

+ (id)_supportedZoomImageFormats;

- (void).cxx_destruct;
- (void)_applyHDRSuppressionToWithTraitEnvironment:(id)arg1;
- (long long)_assetLoadingStage;
- (id)_assetLoadingStartDate;
- (bool)_assetNeedsHDR;
- (void)_cancelAllImageRequests;
- (void)_configureImageViewPreferredImageDynamicRange;
- (id)_fullSizeImageData;
- (long long)_fullSizeImageOrientation;
- (struct CGSize { double x1; double x2; })_fullSizeImageSize;
- (id)_fullSizeImageURL;
- (struct CGSize { double x1; double x2; })_fullSizeImageUntransformedSize;
- (id)_fullSizeTiledLayer;
- (void)_handleAssetViewModel:(id)arg1 didChange:(id)arg2;
- (void)_handleBrowsingViewModel:(id)arg1 didChange:(id)arg2;
- (void)_handleShouldReloadAssetMediaNotification:(id)arg1;
- (id)_imageRequester;
- (id)_imageView;
- (void)_invalidate;
- (void)_invalidateDidRequestHDR;
- (void)_invalidateFullSizeImageMetadata;
- (void)_invalidateFullSizeTiledLayer;
- (void)_invalidateImage;
- (void)_invalidateImageLayerModulator;
- (void)_invalidateImageLayerModulatorInput;
- (void)_invalidateImageLayerModulatorManager;
- (void)_invalidateTargetSize;
- (bool)_needsUpdate;
- (bool)_needsUpdateDidRequestHDR;
- (bool)_needsUpdateFullSizeImageMetadata;
- (bool)_needsUpdateFullSizeTiledLayer;
- (bool)_needsUpdateImage;
- (bool)_needsUpdateImageLayerModulator;
- (bool)_needsUpdateImageLayerModulatorInput;
- (bool)_needsUpdateImageLayerModulatorManager;
- (void)_notifyDeferredProcessingDoneAndFinalImageDisplayedIfNeeded;
- (void)_notifyFullQualityImageDisplayed;
- (void)_registerIfPossibleForHeadroomUsageTraitChangesOfView:(id)arg1;
- (double)_screenScale;
- (void)_setAssetLoadingStage:(long long)arg1;
- (void)_setAssetLoadingStartDate:(id)arg1;
- (void)_setAssetWithoutUpdateIfNeeded:(id)arg1;
- (void)_setFullSizeImageData:(id)arg1;
- (void)_setFullSizeImageOrientation:(long long)arg1;
- (void)_setFullSizeImageSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_setFullSizeImageURL:(id)arg1;
- (void)_setFullSizeImageUntransformedSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_setFullSizeTiledLayer:(id)arg1;
- (void)_setImageRequester:(id)arg1;
- (void)_setNeedsUpdateDidRequestHDR:(bool)arg1;
- (void)_setNeedsUpdateFullSizeImageMetadata:(bool)arg1;
- (void)_setNeedsUpdateFullSizeTiledLayer:(bool)arg1;
- (void)_setNeedsUpdateImage:(bool)arg1;
- (void)_setNeedsUpdateImageLayerModulator:(bool)arg1;
- (void)_setNeedsUpdateImageLayerModulatorInput:(bool)arg1;
- (void)_setNeedsUpdateImageLayerModulatorManager:(bool)arg1;
- (void)_setTargetSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })_targetSize;
- (void)_updateAssetLoadingStage;
- (void)_updateDidRequestHDRIfNeeded;
- (void)_updateFullSizeImageMetadataIfNeeded;
- (void)_updateFullSizeTiledLayerIfNeeded;
- (void)_updateIfNeeded;
- (void)_updateImageIfNeeded;
- (void)_updateImageLayerModulatorIfNeeded;
- (void)_updateImageLayerModulatorInputIfNeeded;
- (void)_updateImageLayerModulatorManagerIfNeeded;
- (void)_updateImageRequesterFullSizeImageDataProperties;
- (void)_updateImageRequesterTargetSize;
- (void)_updateImageViewBackgroundColor;
- (void)_updateModulatorManager;
- (void)_updateReadyForDisplay;
- (void)_updateTargetSizeIfNeeded;
- (bool)animatesImageTransitions;
- (void)applyLayoutInfo:(id)arg1;
- (id)asset;
- (void)assetDidChange;
- (id)assetViewModel;
- (void)assetViewModelDidChange:(id)arg1;
- (void)becomeReusable;
- (id)browsingViewModel;
- (bool)canUseFullSizeTiledLayer;
- (void)dealloc;
- (void)didChangeVisibleRect;
- (bool)didRequestHDR;
- (void)displayImageRequestResult:(id)arg1;
- (id)displayedImageRequestResult;
- (void)displayedImageRequestResultDidChange;
- (void)expectedPresentationSizeDidChange;
- (struct CGImage { }*)gainMapImage;
- (bool)gainMapImageIsAvailable;
- (float)gainMapValue;
- (id)generateAssetTransitionInfo;
- (id)image;
- (id)imageLayerModulator;
- (id)imageModulationManager;
- (void)imageRequester:(id)arg1 didProduceResult:(id)arg2;
- (void)imageRequesterDidUpdateFullSizeImageData:(id)arg1;
- (id)imageView;
- (id)initWithReuseIdentifier:(id)arg1;
- (bool)isDeferredProcessingFinished;
- (bool)isDisplayingFullQualityImage;
- (void)isViewControllerTransitioningDidChange;
- (id)loadView;
- (id)mediaProvider;
- (bool)needsUpdateTargetSize;
- (void)observable:(id)arg1 didChange:(unsigned long long)arg2 context:(void*)arg3;
- (void)outputEventSignaledForCoalescer:(id)arg1;
- (id)placeholderColor;
- (id)presentingDelegate;
- (bool)requiresFullQualityImage;
- (void)setAnimatesImageTransitions:(bool)arg1;
- (void)setAsset:(id)arg1;
- (void)setAssetViewModel:(id)arg1;
- (void)setBrowsingViewModel:(id)arg1;
- (void)setCanUseFullSizeTiledLayer:(bool)arg1;
- (void)setDisplayedImageRequestResult:(id)arg1;
- (void)setEdgeAntialiasingEnabled:(bool)arg1;
- (void)setGainMapImage:(struct CGImage { }*)arg1;
- (void)setGainMapValue:(float)arg1;
- (void)setImageLayerModulator:(id)arg1;
- (void)setImageModulationManager:(id)arg1;
- (void)setIsDisplayingFullQualityImage:(bool)arg1;
- (void)setMediaProvider:(id)arg1;
- (void)setNeedsUpdateTargetSize:(bool)arg1;
- (void)setPlaceholderColor:(id)arg1;
- (void)setPreloadedImage:(id)arg1;
- (void)setPresentingDelegate:(id)arg1;
- (void)setRequiresFullQualityImage:(bool)arg1;
- (void)setShouldAnimateToFullQualityResult:(bool)arg1;
- (void)setShouldRetainNonFinalImageUntilZoom:(bool)arg1;
- (void)setShouldUseFullSizeImageData:(bool)arg1;
- (void)setTiledLayerAlphaAnimator:(id)arg1;
- (void)setTiledLayerHostingView:(id)arg1;
- (bool)shouldAdoptResult:(id)arg1 overExistingResult:(id)arg2;
- (bool)shouldAnimateAppearanceOfResult:(id)arg1 overExistingResult:(id)arg2;
- (bool)shouldAnimatePreferredDynamicRangeChanges;
- (bool)shouldAnimateToFullQualityResult;
- (bool)shouldAvoidInPlaceSnapshottedFadeOut;
- (bool)shouldRequestHDR;
- (bool)shouldRetainNonFinalImageUntilZoom;
- (bool)shouldUseFullSizeImageData;
- (struct CGSize { double x1; double x2; })targetSizeForProposedTargetSize:(struct CGSize { double x1; double x2; })arg1;
- (id)targetSizeUpdateRateLimiter;
- (id)tiledLayerAlphaAnimator;
- (id)tiledLayerHostingView;
- (void)updateModulator;
- (void)updateModulatorInputs;
- (void)updateMutableImageLayerModulator:(id)arg1;
- (void)viewModel:(id)arg1 didChange:(id)arg2;
- (bool)wantsVisibleRectChanges;

@end
