/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PlatformSSOCore.framework/PlatformSSOCore
 */

@interface POJWTSigning : NSObject <POJWTSigningAlgorithm> {
    NSString * _alg;
    struct __CFString { } * _algorithm;
    NSString * _algorithmName;
}

@property (readonly) NSString *alg;
@property (readonly) struct __CFString { }*algorithm;
@property (readonly) NSString *algorithmName;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (id)algorithmWithIdentifier:(id)arg1;
+ (id)algorithmWithSigningAlgorithm:(id)arg1;
+ (id)encodeAndSignJWT:(id)arg1 algorithm:(id)arg2 key:(struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*)arg3 certificate:(struct __SecCertificate { }*)arg4;
+ (id)encodeAndSignJWT:(id)arg1 algorithm:(id)arg2 key:(struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*)arg3 certificate:(struct __SecCertificate { }*)arg4 error:(id*)arg5;
+ (id)encodeAndSignJWT:(id)arg1 signingAlgorithm:(id)arg2 key:(struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*)arg3 certificate:(struct __SecCertificate { }*)arg4;
+ (id)encodeAndSignJWT:(id)arg1 signingAlgorithm:(id)arg2 key:(struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*)arg3 certificate:(struct __SecCertificate { }*)arg4 error:(id*)arg5;
+ (bool)verifyJWTSignature:(id)arg1 algorithm:(id)arg2 key:(struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*)arg3;
+ (bool)verifyJWTSignature:(id)arg1 signingAlgorithm:(id)arg2 key:(struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*)arg3;

- (void).cxx_destruct;
- (id)alg;
- (struct __CFString { }*)algorithm;
- (id)algorithmName;
- (id)encodeAndSignJWT:(id)arg1 key:(struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*)arg2 certificate:(struct __SecCertificate { }*)arg3 error:(id*)arg4;
- (id)initWithSecKeyAlgorithm:(struct __CFString { }*)arg1 algorithmName:(id)arg2 alg:(id)arg3;
- (id)signData:(id)arg1 usingKey:(struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*)arg2 error:(id*)arg3;
- (bool)verifyJWTSignature:(id)arg1 key:(struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*)arg2;
- (bool)verifySignature:(id)arg1 onData:(id)arg2 usingCertificateString:(id)arg3;
- (bool)verifySignature:(id)arg1 onData:(id)arg2 usingKey:(struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*)arg3;

@end
