/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PlatformSSOCore.framework/PlatformSSOCore
 */

@interface POLoginConfiguration : NSObject <NSCopying, NSSecureCoding> {
    NSData * __hpkeAuthPublicKeyData;
    NSData * __loginRequestEncryptionPublicKeyData;
    NSString * _accountDisplayName;
    NSString * _additionalAuthorizationScopes;
    NSString * _additionalScopes;
    NSString * _audience;
    NSString * _clientID;
    NSDictionary * _customAssertionRequestBodyClaims;
    NSDictionary * _customAssertionRequestHeaderClaims;
    NSArray * _customDecryptionRequestValues;
    NSArray * _customFederationUserPreauthenticationRequestValues;
    NSDictionary * _customKeyExchangeRequestBodyClaims;
    NSDictionary * _customKeyExchangeRequestHeaderClaims;
    NSArray * _customKeyExchangeRequestValues;
    NSDictionary * _customKeyRequestBodyClaims;
    NSDictionary * _customKeyRequestHeaderClaims;
    NSArray * _customKeyRequestValues;
    NSDictionary * _customLoginRequestBodyClaims;
    NSDictionary * _customLoginRequestHeaderClaims;
    NSArray * _customLoginRequestValues;
    NSArray * _customNonceRequestValues;
    NSDictionary * _customRefreshRequestBodyClaims;
    NSDictionary * _customRefreshRequestHeaderClaims;
    NSArray * _customRefreshRequestValues;
    NSString * _customRequestJWTParameterName;
    NSURL * _decryptionEndpointURL;
    NSData * _deviceContext;
    NSURL * _federationMexURL;
    NSString * _federationMexURLKeypath;
    NSString * _federationPredicate;
    NSString * _federationRequestURN;
    unsigned long long  _federationType;
    NSURL * _federationUserPreauthenticationURL;
    NSString * _groupRequestClaimName;
    NSString * _groupResponseClaimName;
    NSData * _hpkePsk;
    NSData * _hpkePsk_id;
    bool  _includePreviousRefreshTokenInLoginRequest;
    NSString * _invalidCredentialPredicate;
    NSString * _issuer;
    NSURL * _jwksEndpointURL;
    NSArray * _jwksTrustedRootCertificates;
    NSArray * _kerberosTicketMappings;
    NSURL * _keyEndpointURL;
    NSData * _loginRequestEncryptionAPVPrefix;
    NSNumber * _loginRequestEncryptionAlgorithm;
    NSData * _loginRequestHpkePsk;
    NSData * _loginRequestHpkePsk_id;
    NSURL * _nonceEndpointURL;
    NSString * _nonceResponseKeypath;
    NSString * _previousRefreshTokenClaimName;
    NSURL * _refreshEndpointURL;
    NSString * _serverNonceClaimName;
    NSURL * _tokenEndpointURL;
    NSString * _uniqueIdentifierClaimName;
    unsigned long long  _userSEPKeyBiometricPolicy;
}

@property (nonatomic, retain) NSData *_hpkeAuthPublicKeyData;
@property (nonatomic, retain) NSData *_loginRequestEncryptionPublicKeyData;
@property (nonatomic, copy) NSString *accountDisplayName;
@property (nonatomic, copy) NSString *additionalAuthorizationScopes;
@property (nonatomic, copy) NSString *additionalScopes;
@property (nonatomic, copy) NSString *audience;
@property (nonatomic, readonly) NSString *clientID;
@property (retain) NSDictionary *customAssertionRequestBodyClaims;
@property (retain) NSDictionary *customAssertionRequestHeaderClaims;
@property (nonatomic, copy) NSArray *customDecryptionRequestValues;
@property (nonatomic, copy) NSArray *customFederationUserPreauthenticationRequestValues;
@property (retain) NSDictionary *customKeyExchangeRequestBodyClaims;
@property (retain) NSDictionary *customKeyExchangeRequestHeaderClaims;
@property (nonatomic, copy) NSArray *customKeyExchangeRequestValues;
@property (retain) NSDictionary *customKeyRequestBodyClaims;
@property (retain) NSDictionary *customKeyRequestHeaderClaims;
@property (nonatomic, copy) NSArray *customKeyRequestValues;
@property (retain) NSDictionary *customLoginRequestBodyClaims;
@property (retain) NSDictionary *customLoginRequestHeaderClaims;
@property (nonatomic, copy) NSArray *customLoginRequestValues;
@property (nonatomic, copy) NSArray *customNonceRequestValues;
@property (retain) NSDictionary *customRefreshRequestBodyClaims;
@property (retain) NSDictionary *customRefreshRequestHeaderClaims;
@property (nonatomic, copy) NSArray *customRefreshRequestValues;
@property (nonatomic, copy) NSString *customRequestJWTParameterName;
@property (nonatomic, copy) NSURL *decryptionEndpointURL;
@property (nonatomic, copy) NSData *deviceContext;
@property (nonatomic, copy) NSURL *federationMexURL;
@property (nonatomic, copy) NSString *federationMexURLKeypath;
@property (nonatomic, copy) NSString *federationPredicate;
@property (nonatomic, copy) NSString *federationRequestURN;
@property (nonatomic) unsigned long long federationType;
@property (nonatomic, copy) NSURL *federationUserPreauthenticationURL;
@property (nonatomic, copy) NSString *groupRequestClaimName;
@property (nonatomic, copy) NSString *groupResponseClaimName;
@property (nonatomic) struct __SecKey { }*hpkeAuthPublicKey;
@property (nonatomic, copy) NSData *hpkePsk;
@property (nonatomic, copy) NSData *hpkePsk_id;
@property (nonatomic) bool includePreviousRefreshTokenInLoginRequest;
@property (nonatomic, copy) NSString *invalidCredentialPredicate;
@property (nonatomic, readonly) NSString *issuer;
@property (nonatomic, copy) NSURL *jwksEndpointURL;
@property (nonatomic, copy) NSArray *jwksTrustedRootCertificates;
@property (nonatomic, copy) NSArray *kerberosTicketMappings;
@property (nonatomic, copy) NSURL *keyEndpointURL;
@property (nonatomic, retain) NSData *loginRequestEncryptionAPVPrefix;
@property (nonatomic, copy) NSNumber *loginRequestEncryptionAlgorithm;
@property (nonatomic) struct __SecKey { }*loginRequestEncryptionPublicKey;
@property (nonatomic, copy) NSData *loginRequestHpkePsk;
@property (nonatomic, copy) NSData *loginRequestHpkePsk_id;
@property (nonatomic, copy) NSURL *nonceEndpointURL;
@property (nonatomic, copy) NSString *nonceResponseKeypath;
@property (nonatomic, copy) NSString *previousRefreshTokenClaimName;
@property (nonatomic, copy) NSURL *refreshEndpointURL;
@property (nonatomic, copy) NSString *serverNonceClaimName;
@property (nonatomic, copy) NSURL *tokenEndpointURL;
@property (nonatomic, copy) NSString *uniqueIdentifierClaimName;
@property (nonatomic) unsigned long long userSEPKeyBiometricPolicy;

+ (void)configurationWithOpenIdConfigurationURL:(id)arg1 clientID:(id)arg2 issuer:(id)arg3 completion:(id /* block */)arg4;
+ (void)configurationWithOpenIdConfigurationURL:(id)arg1 identityProviderURL:(id)arg2 clientId:(id)arg3 issuer:(id)arg4 completion:(id /* block */)arg5;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)_hpkeAuthPublicKeyData;
- (id)_initWithClientId:(id)arg1 issuer:(id)arg2 tokenEndpointURL:(id)arg3 jwksEndpointURL:(id)arg4 audience:(id)arg5;
- (id)_loginRequestEncryptionPublicKeyData;
- (id)accountDisplayName;
- (id)additionalAuthorizationScopes;
- (id)additionalScopes;
- (id)audience;
- (id)clientID;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)customAssertionRequestBodyClaims;
- (id)customAssertionRequestHeaderClaims;
- (id)customDecryptionRequestValues;
- (id)customFederationUserPreauthenticationRequestValues;
- (id)customKeyExchangeRequestBodyClaims;
- (id)customKeyExchangeRequestHeaderClaims;
- (id)customKeyExchangeRequestValues;
- (id)customKeyRequestBodyClaims;
- (id)customKeyRequestHeaderClaims;
- (id)customKeyRequestValues;
- (id)customLoginRequestBodyClaims;
- (id)customLoginRequestHeaderClaims;
- (id)customLoginRequestValues;
- (id)customNonceRequestValues;
- (id)customRefreshRequestBodyClaims;
- (id)customRefreshRequestHeaderClaims;
- (id)customRefreshRequestValues;
- (id)customRequestJWTParameterName;
- (id)dataRepresentation;
- (id)dataRepresentationForDisplay:(bool)arg1;
- (id)decryptionEndpointURL;
- (id)description;
- (id)deviceContext;
- (void)encodeWithCoder:(id)arg1;
- (id)federationMexURL;
- (id)federationMexURLKeypath;
- (id)federationPredicate;
- (id)federationRequestURN;
- (unsigned long long)federationType;
- (id)federationUserPreauthenticationURL;
- (id)groupRequestClaimName;
- (id)groupResponseClaimName;
- (struct __SecKey { }*)hpkeAuthPublicKey;
- (id)hpkePsk;
- (id)hpkePsk_id;
- (bool)includePreviousRefreshTokenInLoginRequest;
- (id)initWithClientID:(id)arg1 issuer:(id)arg2 tokenEndpointURL:(id)arg3 jwksEndpointURL:(id)arg4 audience:(id)arg5;
- (id)initWithCoder:(id)arg1;
- (id)initWithData:(id)arg1;
- (id)invalidCredentialPredicate;
- (id)issuer;
- (id)jwksEndpointURL;
- (id)jwksTrustedRootCertificates;
- (id)kerberosTicketMappings;
- (id)keyEndpointURL;
- (id)loginRequestEncryptionAPVPrefix;
- (id)loginRequestEncryptionAlgorithm;
- (struct __SecKey { }*)loginRequestEncryptionPublicKey;
- (id)loginRequestHpkePsk;
- (id)loginRequestHpkePsk_id;
- (id)mergedConfigurationWithUserLoginConfiguration:(id)arg1;
- (id)nonceEndpointURL;
- (id)nonceResponseKeypath;
- (id)previousRefreshTokenClaimName;
- (id)refreshEndpointURL;
- (id)serverNonceClaimName;
- (void)setAccountDisplayName:(id)arg1;
- (void)setAdditionalAuthorizationScopes:(id)arg1;
- (void)setAdditionalScopes:(id)arg1;
- (void)setAudience:(id)arg1;
- (void)setCustomAssertionRequestBodyClaims:(id)arg1;
- (bool)setCustomAssertionRequestBodyClaims:(id)arg1 returningError:(id*)arg2;
- (void)setCustomAssertionRequestHeaderClaims:(id)arg1;
- (bool)setCustomAssertionRequestHeaderClaims:(id)arg1 returningError:(id*)arg2;
- (bool)setCustomDecryptionRequestBodyClaims:(id)arg1 returningError:(id*)arg2;
- (bool)setCustomDecryptionRequestHeaderClaims:(id)arg1 returningError:(id*)arg2;
- (void)setCustomDecryptionRequestValues:(id)arg1;
- (void)setCustomFederationUserPreauthenticationRequestValues:(id)arg1;
- (void)setCustomKeyExchangeRequestBodyClaims:(id)arg1;
- (bool)setCustomKeyExchangeRequestBodyClaims:(id)arg1 returningError:(id*)arg2;
- (void)setCustomKeyExchangeRequestHeaderClaims:(id)arg1;
- (bool)setCustomKeyExchangeRequestHeaderClaims:(id)arg1 returningError:(id*)arg2;
- (void)setCustomKeyExchangeRequestValues:(id)arg1;
- (void)setCustomKeyRequestBodyClaims:(id)arg1;
- (bool)setCustomKeyRequestBodyClaims:(id)arg1 returningError:(id*)arg2;
- (void)setCustomKeyRequestHeaderClaims:(id)arg1;
- (bool)setCustomKeyRequestHeaderClaims:(id)arg1 returningError:(id*)arg2;
- (void)setCustomKeyRequestValues:(id)arg1;
- (void)setCustomLoginRequestBodyClaims:(id)arg1;
- (bool)setCustomLoginRequestBodyClaims:(id)arg1 returningError:(id*)arg2;
- (void)setCustomLoginRequestHeaderClaims:(id)arg1;
- (bool)setCustomLoginRequestHeaderClaims:(id)arg1 returningError:(id*)arg2;
- (void)setCustomLoginRequestValues:(id)arg1;
- (void)setCustomNonceRequestValues:(id)arg1;
- (void)setCustomRefreshRequestBodyClaims:(id)arg1;
- (bool)setCustomRefreshRequestBodyClaims:(id)arg1 returningError:(id*)arg2;
- (void)setCustomRefreshRequestHeaderClaims:(id)arg1;
- (bool)setCustomRefreshRequestHeaderClaims:(id)arg1 returningError:(id*)arg2;
- (void)setCustomRefreshRequestValues:(id)arg1;
- (void)setCustomRequestJWTParameterName:(id)arg1;
- (void)setDecryptionEndpointURL:(id)arg1;
- (void)setDeviceContext:(id)arg1;
- (void)setFederationMexURL:(id)arg1;
- (void)setFederationMexURLKeypath:(id)arg1;
- (void)setFederationPredicate:(id)arg1;
- (void)setFederationRequestURN:(id)arg1;
- (void)setFederationType:(unsigned long long)arg1;
- (void)setFederationUserPreauthenticationURL:(id)arg1;
- (void)setGroupRequestClaimName:(id)arg1;
- (void)setGroupResponseClaimName:(id)arg1;
- (void)setHpkeAuthPublicKey:(struct __SecKey { }*)arg1;
- (void)setHpkePsk:(id)arg1;
- (void)setHpkePsk_id:(id)arg1;
- (void)setIncludePreviousRefreshTokenInLoginRequest:(bool)arg1;
- (void)setInvalidCredentialPredicate:(id)arg1;
- (void)setJwksEndpointURL:(id)arg1;
- (void)setJwksTrustedRootCertificates:(id)arg1;
- (void)setKerberosTicketMappings:(id)arg1;
- (void)setKeyEndpointURL:(id)arg1;
- (void)setLoginRequestEncryptionAPVPrefix:(id)arg1;
- (void)setLoginRequestEncryptionAlgorithm:(id)arg1;
- (void)setLoginRequestEncryptionPublicKey:(struct __SecKey { }*)arg1;
- (void)setLoginRequestHpkePsk:(id)arg1;
- (void)setLoginRequestHpkePsk_id:(id)arg1;
- (void)setNonceEndpointURL:(id)arg1;
- (void)setNonceResponseKeypath:(id)arg1;
- (void)setPreviousRefreshTokenClaimName:(id)arg1;
- (void)setRefreshEndpointURL:(id)arg1;
- (void)setServerNonceClaimName:(id)arg1;
- (void)setTokenEndpointURL:(id)arg1;
- (void)setUniqueIdentifierClaimName:(id)arg1;
- (void)setUserSEPKeyBiometricPolicy:(unsigned long long)arg1;
- (void)set_hpkeAuthPublicKeyData:(id)arg1;
- (void)set_loginRequestEncryptionPublicKeyData:(id)arg1;
- (id)tokenEndpointURL;
- (id)uniqueIdentifierClaimName;
- (unsigned long long)userSEPKeyBiometricPolicy;

@end
