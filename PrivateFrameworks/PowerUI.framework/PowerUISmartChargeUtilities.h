/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PowerUI.framework/PowerUI
 */

@interface PowerUISmartChargeUtilities : NSObject

+ (double)areaOverEightyWithBatteryLevelDurations:(double*)arg1;
+ (double)batteryLevelAtDate:(id)arg1;
+ (id)batteryLevelHistogramAroundTime:(id)arg1 withDelta:(double)arg2 withOffset:(double)arg3;
+ (id)batteryProperties;
+ (double)cachedHistorical80ToFullDuration;
+ (id)concatenateChargeSessions:(id)arg1 withMaxDeltaSecondsBetweenEvents:(unsigned long long)arg2;
+ (id)curentDateStringFromDate:(id)arg1 withFormat:(id)arg2;
+ (long long)currentBatteryLevelWithContext:(id)arg1;
+ (id)dateForPreferenceKey:(id)arg1 inDomain:(id)arg2;
+ (unsigned long long)decileClassificationWithTopBinCutOff:(float*)arg1;
+ (bool)deviceConnectedToWirelessChargerWithContext:(id)arg1;
+ (bool)deviceHasEnoughPluggedInTimeWithMinimumDays:(double)arg1 withContext:(id)arg2 withDefaultsDomain:(id)arg3;
+ (bool)deviceWasConnectedToChargerWithinSeconds:(double)arg1 withContext:(id)arg2;
+ (bool)doesTimeOfDayForDate:(id)arg1 fallBetweenDate:(id)arg2 andDate:(id)arg3;
+ (id)drainBetweenRelevantEventsBefore:(id)arg1 withMinimumDuration:(double)arg2;
+ (id)drainBetweenRelevantEventsFromDrainSessionInfo:(id)arg1;
+ (id)drainSessionsInfoBetweenRelevantChargesBefore:(id)arg1 withMinimumDuration:(double)arg2;
+ (id)filterChargeSessions:(id)arg1 startsBefore:(id)arg2 dynamicallyAroundDate:(id)arg3 withinSeconds:(unsigned long long)arg4;
+ (void)getBatteryLevelDurations:(double*)arg1;
+ (id)getCurrentBootSessionUUID;
+ (struct MemoryFootprint { unsigned long long x1; unsigned long long x2; })getMemoryUsage;
+ (id)getTestVector:(id)arg1;
+ (id)historicalFullChargeDurationStartingAt:(int)arg1 withMinimumPluginDuration:(int)arg2;
+ (bool)isDEoCDryRunSupported;
+ (bool)isDesktopDeviceWithDurations:(double*)arg1 withAOEThreshold:(double)arg2;
+ (bool)isInflowInhibitSupported;
+ (bool)isInternalBuild;
+ (bool)isOBCSupported;
+ (bool)isPluggedInWithContext:(id)arg1;
+ (bool)isUltraWatch;
+ (bool)isWeekend:(id)arg1;
+ (bool)isiPad;
+ (bool)isiPhone;
+ (bool)isiPod;
+ (id)lastPluggedInDate;
+ (id)log;
+ (void)logMemoryUsageInternalForEvent:(id)arg1;
+ (void)mergeDrainSessionsInfo:(id)arg1 intoResult:(id)arg2;
+ (id)numberForPreferenceKey:(id)arg1 inDomain:(id)arg2;
+ (double)percentageOfBatteryDurations:(double*)arg1 aboveBatteryLevel:(double)arg2;
+ (id)percentageOfTimeForBatteryLevels:(double*)arg1 withLog:(id)arg2;
+ (id)pluginEventsBefore:(id)arg1 withMinimumDuration:(double)arg2 ignoringDisconnectsShorterThan:(double)arg3;
+ (id)pluginEventsBefore:(id)arg1 withMinimumDuration:(double)arg2 withMinimumPlugoutBatteryLevel:(double)arg3 ignoringDisconnectsShorterThan:(double)arg4;
+ (id)readDictForPreferenceKey:(id)arg1 inDomain:(id)arg2;
+ (id)readStringForPreferenceKey:(id)arg1 inDomain:(id)arg2;
+ (id)recentEngagementHistory;
+ (id)roundedDateFromDate:(id)arg1;
+ (void)setDate:(id)arg1 forPreferenceKey:(id)arg2 inDomain:(id)arg3;
+ (void)setDict:(id)arg1 forPreferenceKey:(id)arg2 inDomain:(id)arg3;
+ (void)setNumber:(id)arg1 forPreferenceKey:(id)arg2 inDomain:(id)arg3;
+ (void)setString:(id)arg1 forPreferenceKey:(id)arg2 inDomain:(id)arg3;
+ (id)timeStringFromDate:(id)arg1;
+ (id)timelineEventDate:(id)arg1 withDefaultsDomain:(id)arg2;
+ (double)timestampOfFirstEventReachingBatteryLevel:(int)arg1 betweenStartTime:(id)arg2 andEndTime:(id)arg3;
+ (double)totalPluginDurationAfter:(id)arg1 withMinimumDuration:(double)arg2 withPluginEvents:(id)arg3;

@end
