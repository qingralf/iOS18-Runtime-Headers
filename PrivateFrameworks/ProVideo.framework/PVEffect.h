/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo
 */

@interface PVEffect : NSObject <NSCopying, NSSecureCoding, PVEffectHitArea, PVEffectSceneManager, PVEffectTextual, PVEffectTimedProperties, PVEffectTimeline, PVEffectTranscript, PVEffectTransformable> {
    NSMutableArray * _components;
    bool  _conformToInputAspect;
    NSDictionary * _contentProperties;
    NSString * _displayName;
    NSString * _effectID;
    NSMutableDictionary * _effectParameters;
    struct { 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } start; 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } duration; 
    }  _effectRange;
    NSString * _effectType;
    NSMutableDictionary * _inspectableProperties;
    NSLock * _inspectablePropertiesLock;
    bool  _isInInteractiveMode;
    bool  _isPreview;
    bool  _isRecording;
    void * _loadCount;
    bool  _shouldDisableFadeOut;
    PVEffectTimedPropertiesComponent * _timedPropertiesComponent;
}

@property (nonatomic) bool conformToInputAspect;
@property (nonatomic, retain) NSDictionary *contentProperties;
@property (nonatomic, retain) NSMutableDictionary *effectParameters;
@property (nonatomic) struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; } effectRange;
@property (nonatomic) bool forceDisableBuildAnimation;
@property (nonatomic) bool forceDisableLoop;
@property (getter=isHidden, nonatomic) bool hidden;
@property (nonatomic, copy) NSDictionary *inspectableProperties;
@property (nonatomic) bool isInInteractiveMode;
@property (nonatomic) bool isPreview;
@property (nonatomic) bool isRecording;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } loopTimeOverride;
@property (nonatomic) bool loopTimeOverrideEnabled;
@property (nonatomic) bool shouldDisableFadeOut;
@property (nonatomic) bool useLocalLoopTime;

+ (id)_effectRegistry;
+ (id)_effectRegistryForLookup;
+ (void)_registerBuiltInEffects;
+ (void)_registerEffectsInBundle:(id)arg1 atPath:(id)arg2;
+ (id)_registeredEffectClasses;
+ (id)_registryEntryForEffectID:(id)arg1;
+ (id)allRegisteredEffectIDs;
+ (void)appFinishedLaunching:(id)arg1;
+ (id)attributeForName:(id)arg1 fromAttributedString:(id)arg2 defaultAttributes:(id)arg3;
+ (double)baselineOffsetFromAttributedString:(id)arg1;
+ (id)categoryForEffectID:(id)arg1;
+ (Class)classForEffectID:(id)arg1;
+ (void)cleanupEffectsCache;
+ (void)clearPreviewStats;
+ (double)defaultPlayableAspectRatio;
+ (int)defaultPlayableAspectRatioPreservationMode;
+ (id)defaultVideoTransitionEffectID;
+ (void)deferEffectRegistrationForClass:(Class)arg1;
+ (id)descriptionForEffectID:(id)arg1;
+ (id)displayNameForEffectID:(id)arg1;
+ (id)displayNameForEffectType:(id)arg1;
+ (bool)effectIDIsNone:(id)arg1;
+ (bool)effectIDIsRegistered:(id)arg1;
+ (id)effectTypeForEffectID:(id)arg1;
+ (void)ensureEffectsRegistered;
+ (id)firstRegisteredEffectIDContainingSubstring:(id)arg1;
+ (void)handleApplicationDidReceiveMemoryWarning;
+ (void)handleApplicationWillTerminate;
+ (void)handleCleanupEffectsCache;
+ (void)initEffectRegistry;
+ (void)initEffectRegistryWithHostDelegate:(id)arg1;
+ (bool)isAllCapsFromAttributes:(id)arg1;
+ (bool)isInteractiveMode;
+ (bool)isVideoForEffectID:(id)arg1;
+ (void)modifyAttributedStringByAdjustingFont:(id)arg1 toFitSize:(struct CGSize { double x1; double x2; })arg2;
+ (void)modifyAttributedStringByAdjustingFontSize:(id)arg1 scale:(double)arg2;
+ (void)modifyAttributedStringByAdjustingForNegativeLineSpacing:(id)arg1;
+ (void)modifyAttributedStringByAdjustingForNegativeLineSpacing:(id)arg1 scale:(double)arg2;
+ (void)modifyAttributedStringByAdjustingKerning:(id)arg1 attributes:(id)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 scale:(double)arg4;
+ (void)modifyAttributedStringByAdjustingOutline:(id)arg1 attributes:(id)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
+ (void)modifyAttributedStringByAdjustingOutline:(id)arg1 attributes:(id)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 scale:(double)arg4;
+ (void)modifyAttributedStringByAdjustingShadow:(id)arg1 effectTransform:(id)arg2;
+ (void)modifyAttributedStringByAdjustingShadow:(id)arg1 scale:(double)arg2 rotation:(double)arg3;
+ (void)modifyAttributedStringByApplyingSubstituteFont:(id)arg1 attributes:(id)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
+ (id)newEffectWithData:(id)arg1;
+ (id)newEffectWithID:(id)arg1;
+ (id)newEffectWithURL:(id)arg1;
+ (void)noteApplicationDidReceiveMemoryWarning;
+ (void)noteApplicationWillTerminate;
+ (id)propertiesForEffect:(id)arg1;
+ (void)registerEffectClass:(Class)arg1 forEffectID:(id)arg2 withProperties:(id)arg3;
+ (void)registerEffects;
+ (id)registeredEffectIDsForClass:(Class)arg1;
+ (id)registeredEffectIDsForEffectType:(id)arg1;
+ (id)registeredEffectIDsForEffectTypes:(id)arg1;
+ (void)runDeferredRegistration;
+ (void)setInteractiveMode:(bool)arg1;
+ (id)shadowFromAttributedString:(id)arg1 defaultAttributes:(id)arg2;
+ (bool)supportsSecureCoding;
+ (double)textHeightFromAttributedString:(id)arg1 defaultAttributes:(id)arg2;
+ (double)textHeightFromAttributedString:(id)arg1 defaultAttributes:(id)arg2 scale:(double)arg3;
+ (id)themeForEffectID:(id)arg1;
+ (id)userVisibleEffectIDs;
+ (long long)verticalAlignmentFromAttributedString:(id)arg1 defaultAttributes:(id)arg2;
+ (void)willTerminate:(id)arg1;
+ (double)xOffsetForTextTrackingFromAttributedString:(id)arg1;

- (void).cxx_destruct;
- (void)_configureComponents;
- (void)_copyWithZone:(struct _NSZone { }*)arg1 into:(id)arg2;
- (void)_decodeFromCoder:(id)arg1 into:(id)arg2;
- (void)_postInit:(id)arg1;
- (void)add3DObject:(id)arg1 handle:(id)arg2;
- (void)addEntriesToInspectableProperties:(id)arg1;
- (void)addTimedPropertiesDelegate:(id)arg1 userContext:(id)arg2;
- (id)addToTopLevelTransform:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 forcePosterFrame:(bool)arg3 restrictToBounds:(bool)arg4 viewSize:(struct CGSize { double x1; double x2; })arg5 viewOrigin:(int)arg6;
- (void)applyInspectableProperties;
- (bool)applyTimedPropertiesForTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)assertInspectablePropertiesAreLocked;
- (id)attributedStringAtIndex:(unsigned long long)arg1;
- (id)attributedStringForKey:(id)arg1 defaultValue:(id)arg2;
- (void)beginEditingTextAtIndex:(unsigned int)arg1;
- (void)beginTextEditing;
- (bool)boolForKey:(id)arg1;
- (bool)bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 forcePosterFrame:(bool)arg3 includeDropShadow:(bool)arg4 includeMasks:(bool)arg5;
- (id)cameraProjection;
- (id)cameraTransform;
- (id)categoryName;
- (void)clearTranscription;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })componentTimeFromTimelineTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })componentTimeRangeFromTimelineTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (bool)conformToInputAspect;
- (id)contentBundle;
- (id)contentProperties;
- (id)contentPropertyForKey:(id)arg1;
- (id)contentRegistryProperties;
- (id)contentRegistryPropertyForKey:(id)arg1;
- (void)convertPointFromView:(struct CGPoint { double x1; double x2; })arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 viewSize:(struct CGSize { double x1; double x2; })arg3 viewOrigin:(int)arg4;
- (struct CGPoint { double x1; double x2; })convertPointToView:(void *)arg1 atTime:(void *)arg2 forcePosterFrame:(void *)arg3 includeTransformAnimation:(void *)arg4 includePlayableAspectScale:(void *)arg5 viewSize:(void *)arg6 viewOrigin:(void *)arg7; // needs 7 arg types, found 6: struct { long long x1; int x2; unsigned int x3; long long x4; }, bool, bool, bool, struct CGSize { double x1; double x2; }, int
- (struct CGPoint { double x1; double x2; })convertPointToView:(void *)arg1 withEffectToViewTransform:(void *)arg2 viewSize:(void *)arg3; // needs 3 arg types, found 2: struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; }, struct CGSize { double x1; double x2; }
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (struct PVCGPointQuad { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; struct CGPoint { double x_4_1_1; double x_4_1_2; } x4; })cornersAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 includeDropShadow:(bool)arg3 scale:(struct CGPoint { double x1; double x2; })arg4 viewSize:(struct CGSize { double x1; double x2; })arg5 viewOrigin:(int)arg6;
- (struct CGPath { }*)createPathsForHitTestingAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 scale:(struct CGPoint { double x1; double x2; })arg3 adjustForMinimumSize:(bool)arg4 minimumSize:(double)arg5 sizeThreshold:(double)arg6 viewSize:(struct CGSize { double x1; double x2; })arg7 viewOrigin:(int)arg8 outExpandedPath:(out const struct CGPath {}**)arg9;
- (void)dealloc;
- (id)debugDisplayName;
- (id)defaultAttributedString:(unsigned long long)arg1;
- (void)deleteObjectsWithHandles:(id)arg1;
- (id)description;
- (id)descriptionOfInspectableProperties;
- (void)disableCameraOverride;
- (id)displayName;
- (double)doubleForKey:(id)arg1 defaultValue:(double)arg2;
- (id)effectDescription;
- (id)effectID;
- (id)effectParameters;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })effectRange;
- (id)effectType;
- (void)enableCameraOverride:(id)arg1 projection:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (void)endEditingTextAtIndex:(unsigned int)arg1;
- (void)endTextEditing;
- (bool)forceDisableBuildAnimation;
- (bool)forceDisableLoop;
- (bool)forceRenderAtPosterFrame;
- (void)getScale;
- (id)handleForOZID:(unsigned int)arg1;
- (bool)hasAllNecessaryResources;
- (bool)hasBuiltInEnvironment;
- (bool)hasTimedPropertiesDelegate:(id)arg1;
- (bool)hasTimedPropertiesDelegates;
- (struct HGRef<HGNode> { struct HGNode {} *x1; })hgNodeForTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 inputs:(const void*)arg2 renderer:(const void*)arg3 igContext:(struct HGRef<PVInstructionGraphContext> { struct PVInstructionGraphContext {} *x1; })arg4;
- (id)hitAreaPointsAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 includeDropShadow:(bool)arg3 scale:(struct CGPoint { double x1; double x2; })arg4 viewSize:(struct CGSize { double x1; double x2; })arg5 viewOrigin:(int)arg6;
- (bool)hitTest:(struct CGPoint { double x1; double x2; })arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 forcePosterFrame:(bool)arg3 scale:(struct CGPoint { double x1; double x2; })arg4 adjustForMinimumSize:(bool)arg5 minimumSize:(double)arg6 sizeThreshold:(double)arg7 viewSize:(struct CGSize { double x1; double x2; })arg8 viewOrigin:(int)arg9;
- (id)initWithCoder:(id)arg1;
- (id)initWithContentID:(id)arg1 andDictionary:(id)arg2;
- (id)initWithEffectID:(id)arg1;
- (id)inspectableProperties;
- (id)inspectablePropertyForKey:(id)arg1;
- (bool)isBuildInAnimationEnabled;
- (bool)isBuildOutAnimationEnabled;
- (bool)isCameraOverrideEnabled;
- (bool)isEphemeralProperty:(id)arg1;
- (bool)isHidden;
- (bool)isInInteractiveMode;
- (bool)isLoopedRangeRenderCacheable;
- (bool)isPreview;
- (bool)isReady;
- (bool)isRecording;
- (bool)isTemporalProperty:(id)arg1;
- (bool)isTextFlipped;
- (bool)isTitleCard;
- (bool)isTranscription;
- (bool)isVisible;
- (bool)loadEffect;
- (void)loadEffectOnQueue:(id)arg1 completion:(id /* block */)arg2;
- (bool)loadResources;
- (void)loadResourcesOnQueue:(id)arg1 completion:(id /* block */)arg2;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })loopTimeOverride;
- (bool)loopTimeOverrideEnabled;
- (id)mainTitle;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })matrixDouble4x4ForKey:(id)arg1;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })matrixFloat4x4ForKey:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (id)objectHitTest:(struct CGPoint { double x1; double x2; })arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 forcePosterFrame:(bool)arg3 scale:(struct CGPoint { double x1; double x2; })arg4 adjustForMinimumSize:(bool)arg5 minimumSize:(double)arg6 sizeThreshold:(double)arg7 viewSize:(struct CGSize { double x1; double x2; })arg8 viewOrigin:(int)arg9;
- (int)orientation;
- (int)origin;
- (double)outputAspectRatio;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })outputROI;
- (struct CGSize { double x1; double x2; })outputSize;
- (double)playableAspectRatio;
- (int)playableAspectRatioPreservationMode;
- (int)playableAspectRatioPreservationMode_NoLock:(id)arg1;
- (double)playableAspectRatio_NoLock:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })playableRectInView:(struct CGSize { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })playableRectInView_NoLock:(struct CGSize { double x1; double x2; })arg1 properties:(id)arg2;
- (double)playableScaleInView:(struct CGSize { double x1; double x2; })arg1;
- (double)playableScaleInView_NoLock:(struct CGSize { double x1; double x2; })arg1 properties:(id)arg2;
- (struct CGPoint { double x1; double x2; })pointForKey:(id)arg1 defaultValue:(struct CGPoint { double x1; double x2; })arg2;
- (id)posterFrameMarker;
- (float)proxyRenderScale;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForKey:(id)arg1 defaultValue:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)releaseEffect;
- (void)releaseResources;
- (void)removeAllTimedPropertiesDelegates;
- (void)removeTimedPropertiesDelegate:(id)arg1;
- (void)resetToDefaultTranscriptionForLocaleID:(id)arg1;
- (bool)resourcesAreReady;
- (void)runWithInspectableProperties:(id /* block */)arg1;
- (void)runWithInspectableProperties_NoLock:(id /* block */)arg1;
- (id)scaleToFit:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 forcePosterFrame:(bool)arg3 viewSize:(struct CGSize { double x1; double x2; })arg4 viewOrigin:(int)arg5 restrictToBounds:(bool)arg6;
- (void)setAttributedString:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)setAttributedString:(id)arg1 forKey:(id)arg2;
- (void)setBool:(bool)arg1 forKey:(id)arg2;
- (void)setBuildInAnimationEnabled:(bool)arg1;
- (void)setBuildOutAnimationEnabled:(bool)arg1;
- (void)setConformToInputAspect:(bool)arg1;
- (void)setContentProperties:(id)arg1;
- (void)setDouble:(double)arg1 forKey:(id)arg2;
- (void)setEffectParameters:(id)arg1;
- (void)setEffectRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (void)setForceDisableBuildAnimation:(bool)arg1;
- (void)setForceDisableLoop:(bool)arg1;
- (void)setForceRenderAtPosterFrame:(bool)arg1;
- (void)setHidden:(bool)arg1;
- (void)setInspectableProperties:(id)arg1;
- (void)setInspectableProperty:(id)arg1 forKey:(id)arg2;
- (void)setIsInInteractiveMode:(bool)arg1;
- (void)setIsPreview:(bool)arg1;
- (void)setIsRecording:(bool)arg1;
- (void)setLoopTimeOverride:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setLoopTimeOverrideEnabled:(bool)arg1;
- (void)setLoopedRangeRenderIsCacheable:(bool)arg1;
- (void)setMainTitle:(id)arg1;
- (void)setMatrixDouble4x4:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1 forKey:(id)arg2;
- (void)setMatrixFloat4x4:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1 forKey:(id)arg2;
- (void)setOutputAspectRatio:(double)arg1;
- (void)setPlayableAspectRatio:(double)arg1;
- (void)setPlayableAspectRatioPreservationMode:(int)arg1;
- (void)setPoint:(struct CGPoint { double x1; double x2; })arg1 forKey:(id)arg2;
- (id)setPositionInView:(struct CGPoint { double x1; double x2; })arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 viewSize:(struct CGSize { double x1; double x2; })arg3 viewOrigin:(int)arg4 restrictToBounds:(bool)arg5;
- (void)setRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forKey:(id)arg2;
- (void)setScale;
- (void)setShouldDisableFadeOut:(bool)arg1;
- (void)setSize:(struct CGSize { double x1; double x2; })arg1 forKey:(id)arg2;
- (void)setString:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)setString:(id)arg1 forKey:(id)arg2;
- (void)setSubtitle:(id)arg1;
- (void)setTopLevelGroupTransform:(id)arg1;
- (void)setTranscriptionText:(id)arg1;
- (void)setTransform:(id)arg1;
- (void)setTransformAnimation:(id)arg1;
- (void)setTransformObject:(id)arg1 forKey:(id)arg2;
- (void)setTransformUnitsAreInMeters:(bool)arg1;
- (void)setUseLocalLoopTime:(bool)arg1;
- (bool)shouldDisableFadeOut;
- (struct CGSize { double x1; double x2; })sizeForKey:(id)arg1 defaultValue:(struct CGSize { double x1; double x2; })arg2;
- (id)stringForKey:(id)arg1 defaultValue:(id)arg2;
- (id)subtitle;
- (bool)supportsExtendedRangeInputs;
- (bool)supportsFlippingText;
- (bool)supportsOrientation;
- (struct PVCGPointQuad { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; struct CGPoint { double x_4_1_1; double x_4_1_2; } x4; })textCornersAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 index:(unsigned long long)arg2 forcePosterFrame:(bool)arg3 includeDropShadow:(bool)arg4 scale:(struct CGPoint { double x1; double x2; })arg5 viewSize:(struct CGSize { double x1; double x2; })arg6 viewOrigin:(int)arg7;
- (id)textEditingBounds:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (id)textEditingBoundsAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 useParagraphBounds:(bool)arg3 includeDropShadow:(bool)arg4 includeMasks:(bool)arg5;
- (id)textTransformsAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 includeTransformAnimation:(bool)arg3 includePlayableAspectScale:(bool)arg4 viewSize:(struct CGSize { double x1; double x2; })arg5 viewOrigin:(int)arg6;
- (id)textTransformsAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 includeTransformAnimation:(bool)arg3 viewSize:(struct CGSize { double x1; double x2; })arg4 viewOrigin:(int)arg5;
- (id)textTransformsAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 viewSize:(struct CGSize { double x1; double x2; })arg3 viewOrigin:(int)arg4;
- (id)timedPropertiesDelegates;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })timelineDuration;
- (unsigned int)timelineDurationInFrames;
- (double)timelineDurationInSeconds;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })timelineFrameDuration;
- (double)timelineFrameRate;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })timelineLastFrame;
- (id)timelineMarkers;
- (id)timelineMarkersOfType:(int)arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })timelineTimeFromComponentTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })timelineTimeRangeFromComponentTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (id)topLevelGroupTransform;
- (double)topLevelOpacity;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })transcriptionDuration;
- (bool)transcriptionHitTest:(struct CGPoint { double x1; double x2; })arg1 time:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
- (id)transformAnimation;
- (id)transformAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 includeTransformAnimation:(bool)arg3 includePlayableAspectScale:(bool)arg4 viewSize:(struct CGSize { double x1; double x2; })arg5 viewOrigin:(int)arg6;
- (id)transformAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 includeTransformAnimation:(bool)arg3 viewSize:(struct CGSize { double x1; double x2; })arg4 viewOrigin:(int)arg5;
- (id)transformAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 viewSize:(struct CGSize { double x1; double x2; })arg3 viewOrigin:(int)arg4;
- (id)transformObjectForKey:(id)arg1;
- (bool)transformUnitsAreInMeters;
- (void)updateInspectableProperties;
- (void)updateInspectableProperties:(id)arg1;
- (void)updateLiveTitlePickerLoopTime:(bool)arg1;
- (bool)useLocalLoopTime;
- (id)userContextForTimedPropertiesDelegate:(id)arg1;
- (bool)usesDefaultChannelDataEncoding;
- (bool)writeDefaultChannels;

@end
