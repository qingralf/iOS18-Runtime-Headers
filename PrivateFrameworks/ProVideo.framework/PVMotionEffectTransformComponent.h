/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo
 */

@interface PVMotionEffectTransformComponent : PVMotionEffectComponent <PVEffectTransformable> {
    unsigned int  _cameraID;
    int  _cameraIDStatus;
    bool  _isFixedSourceDropShadow;
    double  _metersToWorldUnitScale;
    struct CGSize { 
        double width; 
        double height; 
    }  _normalizedFixedShadowSize;
    unsigned int  _top3DGroupID;
    int  _top3DGroupIDStatus;
}

- (bool)addCameraToDocumentOnce_NoLock:(const void*)arg1;
- (id)addToTopLevelTransform:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 forcePosterFrame:(bool)arg3 restrictToBounds:(bool)arg4 viewSize:(struct CGSize { double x1; double x2; })arg5 viewOrigin:(int)arg6;
- (id)addToTopLevelTransform_NoLock:(const void*)arg1 transform:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg2 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 forcePosterFrame:(bool)arg4 restrictToBounds:(bool)arg5 viewSize:(struct CGSize { double x1; double x2; })arg6 viewOrigin:(int)arg7 properties:(id)arg8;
- (id)additionalTopLevelScaleInDictionary:(id)arg1 orInDefaultDictionary:(id)arg2;
- (id)applyAdditionalTopLevelScale:(struct CGPoint { double x1; double x2; })arg1 aroundPoint:(struct CGPoint { double x1; double x2; })arg2 toTransform:(id)arg3;
- (void)applyTopLevelGroupTransform_NoLock:(const void*)arg1 transform:(id)arg2;
- (void)applyTransforms_NoLock:(const void*)arg1 dirtyProperties:(id)arg2 defaultProperties:(id)arg3 componentTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg4;
- (bool)bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 forcePosterFrame:(bool)arg3 includeDropShadow:(bool)arg4 includeMasks:(bool)arg5;
- (id)cameraProjection;
- (id)cameraTransform;
- (void)convertPointFromView:(struct CGPoint { double x1; double x2; })arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 viewSize:(struct CGSize { double x1; double x2; })arg3 viewOrigin:(int)arg4;
- (void)convertPointFromView_NoLock:(const void*)arg1 viewPoint:(struct CGPoint { double x1; double x2; })arg2 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 viewSize:(struct CGSize { double x1; double x2; })arg4 viewOrigin:(int)arg5 properties:(id)arg6;
- (struct CGPoint { double x1; double x2; })convertPointToView:(void *)arg1 atTime:(void *)arg2 forcePosterFrame:(void *)arg3 includeTransformAnimation:(void *)arg4 includePlayableAspectScale:(void *)arg5 viewSize:(void *)arg6 viewOrigin:(void *)arg7; // needs 7 arg types, found 6: struct { long long x1; int x2; unsigned int x3; long long x4; }, bool, bool, bool, struct CGSize { double x1; double x2; }, int
- (struct CGPoint { double x1; double x2; })convertPointToView:(void *)arg1 withEffectToViewTransform:(void *)arg2 viewSize:(void *)arg3; // needs 3 arg types, found 2: struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; }, struct CGSize { double x1; double x2; }
- (struct CGPoint { double x1; double x2; })convertPointToView_NoLock:(void *)arg1 effectPoint:(void *)arg2 atTime:(void *)arg3 forcePosterFrame:(void *)arg4 includeTransformAnimation:(void *)arg5 includePlayableAspectScale:(void *)arg6 viewSize:(void *)arg7 viewOrigin:(void *)arg8 properties:(void *)arg9; // needs 9 arg types, found 8: const void*, struct { long long x1; int x2; unsigned int x3; long long x4; }, bool, bool, bool, struct CGSize { double x1; double x2; }, int, id
- (struct CGPoint { double x1; double x2; })convertPointToView_NoLock:(void *)arg1 effectPoint:(void *)arg2 withEffectToViewTransform:(void *)arg3 viewSize:(void *)arg4; // needs 4 arg types, found 3: const void*, struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; }, struct CGSize { double x1; double x2; }
- (struct PVCGPointQuad { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; struct CGPoint { double x_4_1_1; double x_4_1_2; } x4; })cornersAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 includeDropShadow:(bool)arg3 scale:(struct CGPoint { double x1; double x2; })arg4 viewSize:(struct CGSize { double x1; double x2; })arg5 viewOrigin:(int)arg6;
- (struct PVCGPointQuad { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; struct CGPoint { double x_4_1_1; double x_4_1_2; } x4; })cornersAtTime_NoLock:(const void*)arg1 time:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 forcePosterFrame:(bool)arg3 includeDropShadow:(bool)arg4 scale:(struct CGPoint { double x1; double x2; })arg5 viewSize:(struct CGSize { double x1; double x2; })arg6 viewOrigin:(int)arg7 properties:(id)arg8;
- (void)disableCameraOverride;
- (bool)disableCameraOverride_NoLock:(const void*)arg1;
- (void)enableCameraOverride:(id)arg1 projection:(id)arg2;
- (bool)enableCameraOverride_NoLock:(const void*)arg1 transform:(id)arg2 projection:(id)arg3 transformUnitsAreInMeters:(bool)arg4;
- (bool)encloseTopGroupIn3DGroupOnce_NoLock:(const void*)arg1;
- (void)getScale;
- (id)initWithMotionEffect:(id)arg1;
- (bool)isCameraOverrideEnabled;
- (bool)isForceRenderAtPosterFrameEnabledInDictionary:(id)arg1 orInDefaultDictionary:(id)arg2;
- (void)motionEffect:(id)arg1 didBecomeReady:(const void*)arg2 properties:(id)arg3;
- (bool)motionEffect:(id)arg1 propertiesDisableCache:(id)arg2 time:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 forcePosterFrame:(bool)arg4;
- (bool)motionEffect:(id)arg1 shouldInvalidateCachedRenderForProperty:(id)arg2 oldValue:(id)arg3 newValue:(id)arg4;
- (void)motionEffect:(id)arg1 willRender:(const void*)arg2 properties:(id)arg3 time:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg4;
- (void)motionEffectDidUnload:(id)arg1;
- (id)motionEffectPropertyKeysThatInvalidateCachedRender:(id)arg1;
- (int)objectBounds_NoLock:(void*)arg1 objectID:(unsigned int)arg2 timelineTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 includeDropShadow:(bool)arg4 includeMasks:(bool)arg5 documentInfo:(const void*)arg6;
- (struct PVCGPointQuad { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; struct CGPoint { double x_4_1_1; double x_4_1_2; } x4; })objectCorners_NoLock:(unsigned int)arg1 timelineTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 componentTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 includeDropShadow:(bool)arg4 includeMasks:(bool)arg5 documentInfo:(const void*)arg6;
- (id)objectToImageTransform_NoLock:(unsigned int)arg1 timelineTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 componentTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 flatten:(bool)arg4 includeTransformAnimation:(bool)arg5 includePlayableAspectScale:(bool)arg6 documentInfo:(const void*)arg7 properties:(id)arg8;
- (id)scaleToFit:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 forcePosterFrame:(bool)arg3 viewSize:(struct CGSize { double x1; double x2; })arg4 viewOrigin:(int)arg5 restrictToBounds:(bool)arg6;
- (id)scaleToFit_NoLock:(const void*)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 forcePosterFrame:(bool)arg4 viewSize:(struct CGSize { double x1; double x2; })arg5 viewOrigin:(int)arg6 restrictToBounds:(bool)arg7 properties:(id)arg8;
- (bool)setCameraProjection_NoLock:(const void*)arg1 transform:(id)arg2;
- (bool)setCameraTransform_NoLock:(const void*)arg1 transform:(id)arg2 transformUnitsAreInMeters:(bool)arg3;
- (id)setPositionInView:(struct CGPoint { double x1; double x2; })arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 viewSize:(struct CGSize { double x1; double x2; })arg3 viewOrigin:(int)arg4 restrictToBounds:(bool)arg5;
- (id)setPositionInView_NoLock:(const void*)arg1 viewPoint:(struct CGPoint { double x1; double x2; })arg2 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 forcePosterFrame:(bool)arg4 viewSize:(struct CGSize { double x1; double x2; })arg5 viewOrigin:(int)arg6 restrictToBounds:(bool)arg7 topLevelTransform:(id)arg8 properties:(id)arg9;
- (void)setScale;
- (void)setTopLevelGroupTransform:(id)arg1;
- (void)setTransform:(id)arg1;
- (void)setTransformUnitsAreInMeters:(bool)arg1;
- (bool)setTransform_NoLock:(const void*)arg1 transform:(id)arg2 transformUnitsAreInMeters:(bool)arg3;
- (id)topLevelGroupTransform;
- (id)transformAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 includeTransformAnimation:(bool)arg3 includePlayableAspectScale:(bool)arg4 viewSize:(struct CGSize { double x1; double x2; })arg5 viewOrigin:(int)arg6;
- (id)transformAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 includeTransformAnimation:(bool)arg3 viewSize:(struct CGSize { double x1; double x2; })arg4 viewOrigin:(int)arg5;
- (id)transformAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 viewSize:(struct CGSize { double x1; double x2; })arg3 viewOrigin:(int)arg4;
- (id)transformAtTime_NoLock:(const void*)arg1 time:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 forcePosterFrame:(bool)arg3 includeTransformAnimation:(bool)arg4 includePlayableAspectScale:(bool)arg5 includeCoordinateSystemTranslationInEffectViewTransform:(bool)arg6 viewSize:(struct CGSize { double x1; double x2; })arg7 viewOrigin:(int)arg8 properties:(id)arg9;
- (struct PVCGPointQuad { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; struct CGPoint { double x_4_1_1; double x_4_1_2; } x4; })transformObjectCornersToImage_NoLock:(struct PVCGPointQuad { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; struct CGPoint { double x_4_1_1; double x_4_1_2; } x4; })arg1 objectID:(unsigned int)arg2 timelineTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 componentTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg4 flatten:(bool)arg5 documentInfo:(const void*)arg6 properties:(id)arg7;
- (id)transformObjectPointsToImage_NoLock:(id)arg1 objectID:(unsigned int)arg2 timelineTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 componentTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg4 flatten:(bool)arg5 documentInfo:(const void*)arg6 properties:(id)arg7;
- (bool)transformUnitsAreInMeters;
- (void)updateIsFixedSourceDropShadow_NoLock:(const void*)arg1 properties:(id)arg2;

@end
