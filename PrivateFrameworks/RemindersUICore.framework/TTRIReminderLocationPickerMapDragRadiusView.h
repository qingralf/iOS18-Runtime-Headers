/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/RemindersUICore.framework/RemindersUICore
 */

@interface TTRIReminderLocationPickerMapDragRadiusView : UIView {
    UIColor * _circleColor;
    <TTRIReminderLocationPickerMapDragRadiusViewDelegate> * _delegate;
    UIColor * _handleColor;
    UIImageView * _handleImageView;
    struct CGPoint { 
        double x; 
        double y; 
    }  _initialHandleCenterForDraggin;
    bool  _isDragging;
    bool  _isMaximum;
    bool  _isMinimum;
    MKMapView * _mapView;
    double  _maximumRadius;
    NSMeasurementFormatter * _measurementFormatter;
    double  _minimumRadius;
    TTRIWorldBoundingMKCircle * _overlay;
    double  _radiusPaddingMultiplier;
    CLCircularRegion * _region;
    CAShapeLayer * _shapeLayer;
}

@property (nonatomic, retain) UIColor *circleColor;
@property (nonatomic) <TTRIReminderLocationPickerMapDragRadiusViewDelegate> *delegate;
@property (nonatomic, retain) UIColor *handleColor;
@property (nonatomic, retain) UIImageView *handleImageView;
@property (nonatomic) struct CGPoint { double x1; double x2; } initialHandleCenterForDraggin;
@property (nonatomic) bool isDragging;
@property (nonatomic) bool isMaximum;
@property (nonatomic) bool isMinimum;
@property (nonatomic, retain) MKMapView *mapView;
@property (nonatomic) double maximumRadius;
@property (nonatomic, retain) NSMeasurementFormatter *measurementFormatter;
@property (nonatomic) double minimumRadius;
@property (nonatomic, retain) TTRIWorldBoundingMKCircle *overlay;
@property (nonatomic) double radius;
@property (nonatomic) double radiusPaddingMultiplier;
@property (nonatomic, retain) CLCircularRegion *region;
@property (nonatomic, retain) CAShapeLayer *shapeLayer;

- (void).cxx_destruct;
- (void)_animateHandleIn:(bool)arg1;
- (id)_bezierPathWithEndPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_centerAndZoomToFitRegion:(id)arg1 animated:(bool)arg2;
- (double)_currentHandleDistance;
- (id)_currentHandleDistanceMeasurement;
- (void)_hideCircleAfterDelay;
- (struct CGPoint { double x1; double x2; })_maxPoint;
- (id)_measurementFor:(double)arg1 fromUnit:(id)arg2 toUnit:(id)arg3 normalized:(bool)arg4;
- (struct CGPoint { double x1; double x2; })_minPoint;
- (struct CGPoint { double x1; double x2; })_pointForRadius:(double)arg1;
- (void)_popAnimateHandle;
- (double)_radiusForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_removeHandle;
- (id)_shapeLayerWithEndPoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)_ttriAccessibilityRadiusByAdding:(double)arg1;
- (double)_ttriAccessibilityRadiusIncrement;
- (void)_ttriAccessibilityUpdateWithRadius:(double)arg1;
- (void)_updateHandleImageView;
- (void)_updateHandleImageViewWithPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_updateRegionWithPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_updateRegionWithRadius:(double)arg1;
- (bool)_usesMetric;
- (void)accessibilityDecrement;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessibilityFrame;
- (void)accessibilityIncrement;
- (id)accessibilityLabel;
- (unsigned long long)accessibilityTraits;
- (id)accessibilityValue;
- (id)circleColor;
- (id)delegate;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)handleColor;
- (id)handleImageView;
- (void)handlePanGesture:(id)arg1;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 mapView:(id)arg2;
- (struct CGPoint { double x1; double x2; })initialHandleCenterForDraggin;
- (bool)isAccessibilityElement;
- (bool)isDragging;
- (bool)isMaximum;
- (bool)isMinimum;
- (bool)isOpaque;
- (id)mapView;
- (void)mapView:(id)arg1 regionDidChangeAnimated:(bool)arg2;
- (void)mapView:(id)arg1 regionWillChangeAnimated:(bool)arg2;
- (double)maximumRadius;
- (id)measurementFormatter;
- (double)minimumRadius;
- (id)overlay;
- (double)radius;
- (double)radiusPaddingMultiplier;
- (id)region;
- (void)setCircleColor:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHandleColor:(id)arg1;
- (void)setHandleImageView:(id)arg1;
- (void)setInitialHandleCenterForDraggin:(struct CGPoint { double x1; double x2; })arg1;
- (void)setIsDragging:(bool)arg1;
- (void)setIsMaximum:(bool)arg1;
- (void)setIsMinimum:(bool)arg1;
- (void)setMapView:(id)arg1;
- (void)setMaximumRadius:(double)arg1;
- (void)setMeasurementFormatter:(id)arg1;
- (void)setMinimumRadius:(double)arg1;
- (void)setOverlay:(id)arg1;
- (void)setRadius:(double)arg1;
- (void)setRadiusPaddingMultiplier:(double)arg1;
- (void)setRegion:(id)arg1;
- (void)setShapeLayer:(id)arg1;
- (id)shapeLayer;
- (void)startEditingRegion:(id)arg1;
- (void)stopEditing;

@end
