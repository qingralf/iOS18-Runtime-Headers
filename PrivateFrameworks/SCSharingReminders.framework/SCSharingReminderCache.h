/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SCSharingReminders.framework/SCSharingReminders
 */

@interface SCSharingReminderCache : NSObject <NSSecureCoding> {
    long long  _consecutiveNotificationCount;
    NSMutableDictionary * _ignorableIdentifiersByType;
    NSDate * _lastFiredDate;
    NSMutableOrderedSet * _scheduledSharingReminders;
    NSMutableDictionary * _sharingRemindersByType;
}

@property (nonatomic, readonly) long long consecutiveNotificationCount;
@property (nonatomic, retain) NSMutableDictionary *ignorableIdentifiersByType;
@property (nonatomic, readonly) NSArray *ignoredIdentifiers;
@property (nonatomic, retain) NSDate *lastFiredDate;
@property (nonatomic, readonly) NSArray *scheduledReminders;
@property (nonatomic, retain) NSMutableOrderedSet *scheduledSharingReminders;
@property (nonatomic, retain) NSMutableDictionary *sharingRemindersByType;

+ (id)cacheWithState:(struct { unsigned char x1; id x2; id x3; id x4; })arg1;
+ (id)new;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)addIgnoredIdentifiers:(id)arg1 withType:(id)arg2;
- (void)addSharingReminders:(id)arg1;
- (long long)consecutiveNotificationCount;
- (void)deliverGeneralSharingReminderAfter:(double)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)ignorableIdentifiersByType;
- (id)ignoredIdentifiers;
- (id)ignoredIdentifiersForType:(id)arg1;
- (void)incrementNotificationCount;
- (id)initFromState:(struct { unsigned char x1; id x2; id x3; id x4; })arg1;
- (id)initWithCoder:(id)arg1;
- (bool)isEqual:(id)arg1;
- (id)lastFiredDate;
- (id)remindersDueBy:(id)arg1;
- (void)removeRemindersWithIdentifiers:(id)arg1;
- (void)removeSharingReminders:(id)arg1 wereDelivered:(bool)arg2;
- (void)resetNotificationCount;
- (id)scheduledReminders;
- (id)scheduledSharingReminders;
- (void)setIgnorableIdentifiersByType:(id)arg1;
- (void)setLastFiredDate:(id)arg1;
- (void)setScheduledSharingReminders:(id)arg1;
- (void)setSharingRemindersByType:(id)arg1;
- (id)sharingRemindersByType;
- (struct { unsigned char x1; id x2; id x3; id x4; })toCacheState;

@end
