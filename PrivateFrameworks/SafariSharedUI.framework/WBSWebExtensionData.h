/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI
 */

@interface WBSWebExtensionData : WBSSafariExtension <WBSWebExtensionDataForwarding> {
    bool  _allowedInPrivateBrowsing;
    NSUUID * _baseURIHost;
    NSArray * _commands;
    NSString * _composedIdentifier;
    NSString * _containingAppBundleIdentifier;
    NSExtension * _extension;
    NSString * _extensionBundleIdentifier;
    bool  _hasFirstNativeMessagePort;
    bool  _hasLoadedPermissionsFromStorage;
    bool  _isAllowedInPrivateBrowsingValuePopulated;
    bool  _permissionsAreBeingUpdatedDueToAnExternalChange;
    NSMutableArray * _queuedNativeMessages;
    NSURL * _resourcesDirectoryURL;
    WBSWebExtensionToolbarItem * _toolbarItem;
    NSString * _toolbarLabel;
    NSString * _toolbarPopupPath;
    NSUUID * _uniqueIdentifier;
    WKWebExtensionContext * _webKitContext;
    WKWebExtension * _webKitExtension;
    NSMutableArray * _webKitMessagePorts;
    NSMutableArray * _websiteRequestsPendingApproval;
}

@property (nonatomic) bool allowedInPrivateBrowsing;
@property (nonatomic, readonly) NSSet *apiNamesPendingApproval;
@property (nonatomic, readonly) bool backgroundPageIsPersistent;
@property (nonatomic, readonly) bool backgroundPageIsServiceWorker;
@property (nonatomic, readonly) NSURL *backgroundPageURL;
@property (nonatomic, readonly) WKWebView *backgroundWebView;
@property (nonatomic, readonly) NSArray *commands;
@property (nonatomic, readonly) NSString *composedIdentifier;
@property (nonatomic, readonly) NSDictionary *configuredPermissionOrigins;
@property (nonatomic, readonly) NSDictionary *configuredPermissions;
@property (nonatomic, readonly) NSString *containingAppBundleIdentifier;
@property (nonatomic, readonly) NSSet *currentPermissionOrigins;
@property (nonatomic, readonly) NSSet *currentPermissions;
@property (nonatomic, readonly) NSString *displayDescription;
@property (nonatomic, readonly) NSString *displayName;
@property (nonatomic, readonly) NSString *displayShortName;
@property (nonatomic, readonly) NSString *displayVersion;
@property (nonatomic, readonly) NSExtension *extension;
@property (nonatomic) WBSWebExtensionsController *extensionsController;
@property (nonatomic, copy) NSDictionary *grantedPermissionOrigins;
@property (nonatomic, copy) NSDictionary *grantedPermissions;
@property (nonatomic, readonly) bool hasAbilityToInjectContentIntoWebpages;
@property (nonatomic, readonly) bool hasAction;
@property (nonatomic, readonly) bool hasBrowserAction;
@property (nonatomic, readonly) bool hasCommands;
@property (nonatomic, readonly) bool hasDeclarativeNetRequestHostAccessPermission;
@property (nonatomic, readonly) bool hasDeclarativeNetRequestPermission;
@property (nonatomic) bool hasLoadedPermissionsFromStorage;
@property (nonatomic, readonly) bool hasPageAction;
@property (nonatomic, readonly) bool hasStorage;
@property (nonatomic, readonly) UIImage *icon;
@property (nonatomic, readonly) NSUUID *identifier;
@property (nonatomic, readonly, copy) NSDictionary *manifest;
@property (nonatomic, readonly) NSSet *manifestAccessibleOrigins;
@property (nonatomic, readonly) NSArray *manifestErrors;
@property (nonatomic, readonly) NSSet *manifestOptionalPermissionOrigins;
@property (nonatomic, readonly) NSSet *manifestOptionalPermissions;
@property (nonatomic, readonly) bool manifestParsedSuccessfully;
@property (nonatomic, readonly) NSSet *manifestPermissionOrigins;
@property (nonatomic, readonly) NSSet *manifestPermissions;
@property (nonatomic, readonly) long long manifestVersion;
@property (nonatomic, readonly) NSURL *newTabOverridePageURL;
@property (nonatomic, readonly) NSURL *optionsPageURL;
@property (nonatomic, readonly) UIImage *preferencesIcon;
@property (nonatomic, readonly) NSString *processDisplayName;
@property (nonatomic) bool requestedOptionalAccessToAllHosts;
@property (nonatomic, readonly) NSSet *requestedPermissionOriginsNotAlreadyConfigured;
@property (nonatomic, readonly) NSSet *requestedPermissionsNotAlreadyConfigured;
@property (nonatomic, readonly) bool requestsAccessToAllHosts;
@property (nonatomic, readonly) NSURL *resourcesDirectoryURL;
@property (nonatomic, copy) NSDictionary *revokedPermissionOrigins;
@property (nonatomic, copy) NSDictionary *revokedPermissions;
@property (nonatomic, readonly) bool shouldShowInWebsitePreferences;
@property (nonatomic, readonly) UIImage *toolbarImage;
@property (nonatomic, retain) WBSWebExtensionToolbarItem *toolbarItem;
@property (nonatomic, readonly, copy) NSString *toolbarLabel;
@property (nonatomic, readonly, copy) NSString *toolbarPopupPath;
@property (nonatomic, readonly) NSUUID *uniqueIdentifier;
@property (nonatomic, readonly) NSSet *urlsPendingApproval;
@property (nonatomic, readonly) NSDictionary *userVisiblePermissions;
@property (nonatomic, readonly) bool usesManifestVersion3;
@property (nonatomic, readonly) NSString *version;
@property (nonatomic, readonly) WKWebExtensionContext *webKitContext;
@property (nonatomic, readonly) WKWebExtension *webKitExtension;

+ (bool)_isShortVersion:(id)arg1 supportedInSafariVersion:(id)arg2;
+ (id)_manifestKeySupportForDictionary:(id)arg1 withSupportedFeatures:(id)arg2 currentSafariShortVersion:(id)arg3;
+ (void)_mergeKeySupportDictionary:(id)arg1 intoDictionary:(id)arg2;
+ (id)_unsupportedKeysFromKeySupportDictionary:(id)arg1;
+ (id)_unsupportedValuesInArray:(id)arg1 withSupportedFeatures:(id)arg2 currentSafariShortVersion:(id)arg3;
+ (id)createWebExtensionError:(long long)arg1;
+ (id)createWebExtensionError:(long long)arg1 customLocalizedDescription:(id)arg2;
+ (id)createWebExtensionError:(long long)arg1 underlyingError:(id)arg2;
+ (id)supportedPermissions;
+ (id)supportedWebExtensionFeaturesForManifestVersion:(unsigned long long)arg1;
+ (id)supportedWebExtensionPatternSchemes;
+ (id)unlocalizedManifestDictionaryFromData:(id)arg1 withExtensionIdentifier:(id)arg2 error:(id*)arg3;
+ (id)unsupportedManifestKeysInDictionary:(id)arg1 withSupportedFeatures:(id)arg2 currentSafariShortVersion:(id)arg3;
+ (id)webExtensionForWebKitExtensionContext:(id)arg1;

- (void).cxx_destruct;
- (bool)_applicationIsActive;
- (id)_backgroundWebViewConfiguration;
- (void)_configureWebKitExtensionContext;
- (id)_configuredDictionaryWithRequested:(id)arg1 granted:(id)arg2 revoked:(id)arg3;
- (id)_containingAppIcon;
- (void)_hidePermissionBanner;
- (void)_loadToolbarItem;
- (void)_loadToolbarItemInPrivateBrowsing;
- (id)_maximumSafariVersionString;
- (id)_minimumSafariVersionString;
- (id)_remoteInspectionMenuTitle;
- (bool)_requestsAccessToAllHostsThroughImplicitPermission;
- (bool)_shouldAutomaticallyEnableInPrivateBrowsing;
- (void)_unloadInPrivateBrowsing;
- (void)_unloadToolbarItem;
- (void)_unloadToolbarItemInPrivateBrowsing;
- (id)_userInfoDictionaryForPermissionsNotificationWithPermissions:(id)arg1 origins:(id)arg2;
- (void)_validateToolbarItemInAllWindows;
- (bool)allowedInPrivateBrowsing;
- (id)apiNamesPendingApproval;
- (bool)backgroundPageIsPersistent;
- (bool)backgroundPageIsServiceWorker;
- (id)backgroundPageURL;
- (id)backgroundWebView;
- (id)baseURIHost;
- (bool)canLoad;
- (bool)canLoadWithErrorString:(id*)arg1;
- (id)commands;
- (id)composedIdentifier;
- (id)configuredPermissionOrigins;
- (id)configuredPermissions;
- (void)connectUsingMessagePort:(id)arg1;
- (id)containingAppBundleIdentifier;
- (id)currentPermissionOrigins;
- (id)currentPermissions;
- (id)description;
- (void)dispatchAllPendingWebsiteRequests;
- (void)dispatchExpiredPendingWebsiteRequests;
- (void)dispatchPendingWebsiteRequestsMatchingOriginPatterns:(id)arg1;
- (id)displayDescription;
- (id)displayName;
- (id)displayShortName;
- (id)displayVersion;
- (id)extension;
- (id)extensionStateWithPreviousState:(id)arg1;
- (long long)extensionSupportsCurrentSafariVersion;
- (long long)extensionSupportsSafariShortVersion:(id)arg1;
- (void)grantPermissions:(id)arg1 origins:(id)arg2 expirationDate:(id)arg3;
- (id)grantedPermissionOrigins;
- (id)grantedPermissions;
- (bool)hasAbilityToInjectContentIntoWebpages;
- (bool)hasAction;
- (bool)hasActiveUserGestureInTab:(id)arg1;
- (bool)hasBrowserAction;
- (bool)hasCommands;
- (bool)hasDeclarativeNetRequestHostAccessPermission;
- (bool)hasDeclarativeNetRequestPermission;
- (bool)hasInjectedContentDataForURL:(id)arg1;
- (bool)hasLoadedPermissionsFromStorage;
- (bool)hasMoreThanOneRequestedOriginNotAlreadyConfigured;
- (bool)hasPageAction;
- (bool)hasPendingWebsiteRequests;
- (bool)hasPermission:(id)arg1;
- (bool)hasPermission:(id)arg1 inTab:(id)arg2;
- (bool)hasPermissionToAccessAllHosts;
- (bool)hasPermissionToAccessAllURLs;
- (bool)hasPermissionToAccessURL:(id)arg1;
- (bool)hasPermissionToAccessURL:(id)arg1 inTab:(id)arg2;
- (bool)hasStorage;
- (id)icon;
- (id)identifier;
- (id)initWithExtension:(id)arg1 extensionsController:(id)arg2;
- (id)initWithExtension:(id)arg1 extensionsController:(id)arg2 extensionBundleIdentifier:(id)arg3 extensionIdentifier:(id)arg4 uniqueIdentifier:(id)arg5 baseURIHost:(id)arg6;
- (id)initWithManifestDictionary:(id)arg1 extensionIdentifier:(id)arg2 uniqueIdentifier:(id)arg3;
- (void)load;
- (void)loadBackgroundPageIfNecessaryWithCompletionHandler:(id /* block */)arg1;
- (id)manifest;
- (id)manifestAccessibleOrigins;
- (id)manifestDictionary;
- (id)manifestErrors;
- (id)manifestOptionalPermissionOrigins;
- (id)manifestOptionalPermissions;
- (bool)manifestParsedSuccessfully;
- (id)manifestPermissionOrigins;
- (id)manifestPermissions;
- (long long)manifestVersion;
- (void)messageReceivedFromContainingAppWithName:(id)arg1 userInfo:(id)arg2;
- (id)newTabOverridePageURL;
- (id)optionsPageURL;
- (long long)permissionStateForURL:(id)arg1;
- (long long)permissionStateForURL:(id)arg1 inTab:(id)arg2;
- (long long)permissionStateForURL:(id)arg1 inTab:(id)arg2 options:(unsigned long long)arg3;
- (long long)permissionStateForURL:(id)arg1 options:(unsigned long long)arg2;
- (id)preferencesIcon;
- (void)previouslyGrantedPermissionOriginsMayHaveBeenChangedExternally:(id)arg1 previouslyRevokedPermissionOrigins:(id)arg2;
- (id)processDisplayName;
- (void)promptForAccessToURLs:(id)arg1 inTab:(id)arg2 completionHandler:(id /* block */)arg3;
- (bool)readAllowedInPrivateBrowsingValueFromDisk;
- (void)removeGrantedAndRevokedPermissions:(id)arg1 origins:(id)arg2 exactPatternMatchesOnly:(bool)arg3;
- (void)removeGrantedPermissions:(id)arg1 origins:(id)arg2 exactPatternMatchesOnly:(bool)arg3;
- (void)removeTemporaryPermissionsForTab:(id)arg1;
- (bool)requestedOptionalAccessToAllHosts;
- (id)requestedPermissionOriginsNotAlreadyConfigured;
- (id)requestedPermissionsNotAlreadyConfigured;
- (bool)requestsAccessToAllHosts;
- (id)resourcesDirectoryURL;
- (void)revokePermissions:(id)arg1 origins:(id)arg2 expirationDate:(id)arg3;
- (id)revokedPermissionOrigins;
- (id)revokedPermissions;
- (void)setAllowedInPrivateBrowsing:(bool)arg1;
- (void)setGrantedPermissionOrigins:(id)arg1;
- (void)setGrantedPermissions:(id)arg1;
- (void)setHasLoadedPermissionsFromStorage:(bool)arg1;
- (void)setRequestedOptionalAccessToAllHosts:(bool)arg1;
- (void)setRevokedPermissionOrigins:(id)arg1;
- (void)setRevokedPermissions:(id)arg1;
- (void)setToolbarItem:(id)arg1;
- (bool)shouldShowInWebsitePreferences;
- (bool)shouldShowToolbarItemForTab:(id)arg1;
- (id)toolbarImage;
- (id)toolbarItem;
- (id)toolbarLabel;
- (id)toolbarPopupPath;
- (id)uniqueIdentifier;
- (void)unload;
- (id)urlsPendingApproval;
- (void)userGesturePerformedInTab:(id)arg1;
- (id)userVisiblePermissions;
- (bool)usesManifestVersion3;
- (id)version;
- (id)webKitContext;
- (id)webKitExtension;

@end
