/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SampleAnalysis.framework/SampleAnalysis
 */

@interface SASampleStore : NSObject <NSSecureCoding> {
    NSString * _actionTaken;
    NSDictionary * _activeTrials;
    unsigned int  _additionalCSSymbolicatorFlags;
    bool  _appleInternalIsKnown;
    struct _CSArchitecture { 
        int cpu_type; 
        int cpu_subtype; 
    }  _arch;
    bool  _attemptedResampling;
    double  _attemptedSamplingInterval;
    bool  _attemptedToGatherModelInfo;
    NSString * _automatedDeviceGroup;
    SABinaryLocator * _binaryLocator;
    NSString * _bootArgs;
    bool  _bulkSymbolicationFailed;
    unsigned long long  _bytesWritten;
    unsigned long long  _bytesWrittenLimit;
    NSDictionary * _clusterFlagsForCPUNumMapping;
    NSString * _countryCode;
    double  _cpuDuration;
    double  _cpuLimit;
    double  _cpuLimitDuration;
    SAFrame * _cpuSignalHandlerStackLeafKernelFrame;
    double  _cpuUsed;
    NSString * _customOutput;
    unsigned long long  _dataGatheringOptions;
    unsigned long long  _dataSource;
    unsigned long long  _dataStyle;
    NSString * _durationNote;
    SATimestamp * _endTime;
    NSString * _event;
    NSString * _eventNote;
    SATimeRange * _eventTimeRange;
    NSMutableArray * _exclaves;
    double  _extraDuration;
    NSMutableArray * _fanSpeeds;
    NSMutableArray * _gestures;
    unsigned long long  _gpuRestartCount;
    unsigned long long  _gpuRestartLastMachAbs;
    bool  _hardwareKeyboard;
    NSString * _hardwareModel;
    bool  _hasEnterprisePersona;
    bool  _hasHardwareKeyboardInfo;
    bool  _hasInternalCarryDeviceDistinction;
    bool  _haveKPerfSched;
    NSMutableArray * _hidEvents;
    bool  _hidEventsHaveHighFidelityTimelines;
    NSDictionary * _homeVolumeSpace;
    unsigned int  _hwPageSize;
    NSMutableArray * _idsToUseDsymForUUID;
    NSArray * _installedRootNames;
    NSMutableArray * _ioEvents;
    NSMutableDictionary * _ioEventsByTid;
    bool  _isAppleInternal;
    bool  _isInternalCarryDevice;
    bool  _isRootInstalled;
    bool  _kPerfPETParsePastLastStackshot;
    bool  _keepMicrostackshotsWithoutLoadInfo;
    NSMutableArray * _kernelCaches;
    NSString * _kernelVersion;
    NSString * _kextStat;
    NSArray * _keyboardLanguages;
    NSArray * _kperfTriggers;
    double  _lastWakeTime;
    struct mach_timebase_info { 
        unsigned int numer; 
        unsigned int denom; 
    }  _machTimebase;
    NSMutableArray * _memoryPressureEvents;
    NSArray * _models;
    SASharedCache * _mostRecentNativeSharedCache;
    SAMountStatusTracker * _mountStatusTracker;
    NSMutableArray * _namesToUseDsymForUUID;
    bool  _nextSampleIsFirstSamplingAllProcesses;
    bool  _nextSampleIsFirstSamplingAllThreads;
    NSDictionary * _nonDefaultFeatureFlags;
    unsigned int  _numActiveCPUs;
    unsigned long long  _numMicrostackshotsSkippedDueToMissingLoadInfos;
    long long  _numOSCryptexFileExtents;
    unsigned long long  _numSamples;
    unsigned long long  _numVnodesAllocated;
    unsigned long long  _numVnodesFree;
    unsigned long long  _numVnodesHardLimit;
    unsigned long long  _numVnodesSoftLimit;
    unsigned long long  _numWakeups;
    unsigned long long  _numWakeupsLimit;
    bool  _omitSensitiveStrings;
    NSString * _osBuildVersion;
    NSString * _osProductName;
    NSString * _osProductVersion;
    NSString * _osProductVersionExtra;
    NSMutableSet * _pidsToTrack;
    NSMutableArray * _powerModeTransitions;
    NSArray * _preferredLanguages;
    NSArray * _previousSAVersions;
    unsigned long long  _previousSampleTimestamp;
    unsigned int  _previousStackshotBufferSize;
    NSMutableDictionary * _processAddressTranslations;
    NSDictionary * _processNameForUnknownPids;
    NSString * _reason;
    double  _reportTimeThreshold;
    bool  _reportedMissingMachineInfoForCustomCallstacks;
    bool  _reportedMissingMachineInfoForMicrostackshots;
    double  _sampleIntervalLimit;
    bool  _sampleOnlyMainThreads;
    NSMutableArray * _sampleTimestamps;
    bool  _sanitizePaths;
    NSMutableArray * _sharedCaches;
    bool  _shouldGatherKextStat;
    NSString * _signature;
    bool  _stackshotsOnlyIncludeSpecificProcesses;
    SATimestamp * _startTime;
    NSString * _stepsNote;
    NSDictionary * _systemAdvisoryLevels;
    unsigned long long  _targetDispatchQueueId;
    unsigned long long  _targetHIDEventEndMachAbs;
    unsigned long long  _targetHIDEventMachAbs;
    SATask * _targetProcess;
    int  _targetProcessId;
    unsigned long long  _targetThreadId;
    NSMutableDictionary * _tasksByPid;
    NSMutableDictionary * _tasksByUniquePid;
    unsigned int  _threadPolicyVersion;
    SATimestamp * _timeWhenTransitionedToSamplingAllProcesses;
    SATimestamp * _timeWhenTransitionedToSamplingAllThreads;
    SATimestamp * _timestampOfLastStackshot;
    unsigned int  _vmPageSize;
    double  _wakeupsDuration;
    double  _wakeupsLimitDuration;
    unsigned int  _workQueueHardThreadLimit;
    unsigned int  _workQueueSoftThreadLimit;
    NSString * _wrDiagnosticName;
    NSError * _wrError;
    NSString * _wrSignpostCategory;
    unsigned long long  _wrSignpostCount;
    unsigned long long  _wrSignpostCountThreshold;
    double  _wrSignpostDurationSingle;
    double  _wrSignpostDurationSingleThreshold;
    double  _wrSignpostDurationSum;
    double  _wrSignpostDurationSumThreshold;
    double  _wrSignpostDurationUnion;
    double  _wrSignpostDurationUnionThreshold;
    NSString * _wrSignpostName;
    NSString * _wrSignpostSubsystem;
    NSString * _wrTriggeringSignpostCategory;
    NSString * _wrTriggeringSignpostName;
    NSString * _wrTriggeringSignpostSubsystem;
    double  _wrWorkflowDuration;
    double  _wrWorkflowDurationOmittingNetworkBoundIntervals;
    double  _wrWorkflowDurationOmittingNetworkBoundIntervalsThreshold;
    double  _wrWorkflowDurationThreshold;
    NSString * _wrWorkflowName;
    double  _wrWorkflowTimeoutDuration;
    double  _writeDuration;
    double  _writeLimitDuration;
    SAWSUpdateDataStore * _wsDataStore;
}

@property (copy) NSString *actionTaken;
@property (readonly) NSDictionary *activeTrials;
@property unsigned int additionalCSSymbolicatorFlags;
@property (readonly) bool appleInternalIsKnown;
@property double attemptedSamplingInterval;
@property (readonly) NSString *automatedDeviceGroup;
@property (copy) NSString *bootArgs;
@property unsigned long long bytesWritten;
@property unsigned long long bytesWrittenLimit;
@property (readonly) NSString *countryCode;
@property double cpuDuration;
@property double cpuLimit;
@property double cpuLimitDuration;
@property (readonly) SAFrame *cpuSignalHandlerStackLeafKernelFrame;
@property double cpuUsed;
@property (copy) NSString *customOutput;
@property unsigned long long dataGatheringOptions;
@property (readonly) unsigned long long dataSource;
@property (readonly) unsigned long long dataStyle;
@property (copy) NSString *durationNote;
@property (readonly) SATimestamp *endTime;
@property (copy) NSString *event;
@property (copy) NSString *eventNote;
@property (copy) SATimeRange *eventTimeRange;
@property (readonly) NSArray *exclaves;
@property double extraDuration;
@property (readonly) unsigned long long gpuRestartCount;
@property (readonly) unsigned long long gpuRestartLastMachAbs;
@property (readonly) bool hardwareKeyboard;
@property (copy) NSString *hardwareModel;
@property (readonly) bool hasEnterprisePersona;
@property (readonly) bool hasHardwareKeyboardInfo;
@property (readonly) bool hasInternalCarryDeviceDistinction;
@property (readonly) bool haveCPUClusterInfo;
@property bool haveKPerfSched;
@property (readonly) NSArray *hidEvents;
@property (readonly) NSDictionary *homeVolumeSpace;
@property unsigned int hwPageSize;
@property (readonly) NSArray *installedRootNames;
@property (readonly) NSArray *ioEvents;
@property (readonly) bool isAppleInternal;
@property (readonly) bool isInternalCarryDevice;
@property (readonly) bool isRootInstalled;
@property bool kPerfPETParsePastLastStackshot;
@property double kPerfPETSampleIntervalLimit;
@property bool keepMicrostackshotsWithoutLoadInfo;
@property bool keepStateBetweenSampleIndexes;
@property (readonly) NSArray *kernelCaches;
@property (readonly) NSString *kernelVersion;
@property (readonly, copy) NSString *kextStat;
@property (readonly) NSArray *keyboardLanguages;
@property (copy) NSArray *kperfTriggers;
@property (readonly) NSArray *kperfTriggers;
@property (readonly) double lastWakeTime;
@property struct mach_timebase_info { unsigned int x1; unsigned int x2; } machTimebase;
@property (copy) NSString *machineArchitecture;
@property (readonly) NSArray *memoryPressureEvents;
@property (readonly) NSArray *models;
@property (readonly) SAMountStatusTracker *mountStatusTracker;
@property (readonly) NSDictionary *nonDefaultFeatureFlags;
@property unsigned int numActiveCPUs;
@property (readonly) long long numOSCryptexFileExtents;
@property (readonly) unsigned long long numSamples;
@property unsigned long long numWakeups;
@property unsigned long long numWakeupsLimit;
@property bool omitSensitiveStrings;
@property (copy) NSString *osBuildVersion;
@property (copy) NSString *osProductName;
@property (copy) NSString *osProductVersion;
@property (copy) NSString *osProductVersionExtra;
@property (readonly) NSArray *powerModeTransitions;
@property (readonly) NSArray *preferredLanguages;
@property (copy) NSString *reason;
@property double reportTimeThreshold;
@property bool sampleOnlyMainThreads;
@property (readonly) NSArray *sampleTimestamps;
@property bool sanitizePaths;
@property (readonly) NSArray *sharedCaches;
@property bool shouldGatherKextStat;
@property (copy) NSString *signature;
@property bool stackshotsOnlyIncludeSpecificProcesses;
@property (readonly) SATimestamp *startTime;
@property (copy) NSString *stepsNote;
@property (readonly) NSDictionary *systemAdvisoryLevels;
@property unsigned long long targetDispatchQueueId;
@property unsigned long long targetHIDEventEndMachAbs;
@property unsigned long long targetHIDEventMachAbs;
@property (retain) SATask *targetProcess;
@property (readonly) NSString *targetProcessAbsolutePath;
@property (readonly) NSString *targetProcessBundleBuildVersion;
@property (readonly) NSString *targetProcessBundleId;
@property (readonly) NSString *targetProcessBundleName;
@property (readonly) NSString *targetProcessBundleProductBuildVersion;
@property (readonly) NSString *targetProcessBundleProjectName;
@property (readonly) NSString *targetProcessBundleShortVersion;
@property (readonly) NSString *targetProcessBundleSourceVersion;
@property (readonly) NSString *targetProcessBundleVersion;
@property (readonly) NSString *targetProcessCommerceAppID;
@property (readonly) NSString *targetProcessCommerceExternalID;
@property int targetProcessId;
@property (readonly) NSString *targetProcessName;
@property (readonly) NSString *targetProcessVendorID;
@property unsigned long long targetThreadId;
@property (readonly) NSDictionary *tasksByPid;
@property (readonly) NSDictionary *tasksByUniquePid;
@property (readonly) SATimestamp *timeWhenTransitionedToSamplingAllProcesses;
@property (readonly) SATimestamp *timeWhenTransitionedToSamplingAllThreads;
@property (readonly) SATimestamp *timestampOfLastStackshot;
@property unsigned int vmPageSize;
@property double wakeupsDuration;
@property double wakeupsLimitDuration;
@property (readonly) unsigned int workQueueHardThreadLimit;
@property (readonly) unsigned int workQueueSoftThreadLimit;
@property (copy) NSString *wrDiagnosticName;
@property (copy) NSError *wrError;
@property (copy) NSString *wrSignpostCategory;
@property unsigned long long wrSignpostCount;
@property unsigned long long wrSignpostCountThreshold;
@property double wrSignpostDurationSingle;
@property double wrSignpostDurationSingleThreshold;
@property double wrSignpostDurationSum;
@property double wrSignpostDurationSumThreshold;
@property double wrSignpostDurationUnion;
@property double wrSignpostDurationUnionThreshold;
@property (copy) NSString *wrSignpostName;
@property (copy) NSString *wrSignpostSubsystem;
@property (copy) NSString *wrTriggeringSignpostCategory;
@property (copy) NSString *wrTriggeringSignpostName;
@property (copy) NSString *wrTriggeringSignpostSubsystem;
@property double wrWorkflowDuration;
@property double wrWorkflowDurationOmittingNetworkBoundIntervals;
@property double wrWorkflowDurationOmittingNetworkBoundIntervalsThreshold;
@property double wrWorkflowDurationThreshold;
@property (copy) NSString *wrWorkflowName;
@property double wrWorkflowTimeoutDuration;
@property double writeDuration;
@property double writeLimitDuration;

+ (bool)canOpenFileAsKTraceFile:(const char *)arg1 errorOut:(id*)arg2;
+ (id)sampleStoreForBinaryFormat:(id)arg1;
+ (id)sampleStoreForSpindumpFile:(const char *)arg1;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)actionTaken;
- (id)activeTrials;
- (void)addAuxiliaryData:(id)arg1;
- (unsigned long long)addKCDataStackshot:(id)arg1;
- (unsigned long long)addKCDataStackshot:(id)arg1 returningTimestamp:(id*)arg2;
- (unsigned long long)addKCDataStackshots:(id)arg1 createSeparateSamplePerStackshot:(bool)arg2;
- (long long)addMicrostackshotsFromData:(id)arg1 ofTypes:(unsigned int)arg2 inTimeRangeStart:(double)arg3 end:(double)arg4 onlyPid:(int)arg5 onlyTid:(unsigned long long)arg6;
- (long long)addMicrostackshotsFromData:(id)arg1 ofTypes:(unsigned int)arg2 inTimeRangeStart:(double)arg3 end:(double)arg4 onlyPid:(int)arg5 onlyTid:(unsigned long long)arg6 statistics:(id)arg7;
- (int)addMicrostackshotsFromFile:(id)arg1 ofTypes:(unsigned int)arg2 inTimeRangeStart:(double)arg3 end:(double)arg4 onlyPid:(int)arg5 onlyTid:(unsigned long long)arg6;
- (int)addMicrostackshotsFromFile:(id)arg1 ofTypes:(unsigned int)arg2 inTimeRangeStart:(double)arg3 end:(double)arg4 onlyPid:(int)arg5 onlyTid:(unsigned long long)arg6 statistics:(id)arg7;
- (void)addProcessInfoFromTailspin:(id)arg1;
- (void)addUserCallstack:(unsigned long long*)arg1 numUserFrames:(unsigned int)arg2 swiftAsyncCallstack:(unsigned long long*)arg3 numSwiftAsyncFrames:(unsigned int)arg4 swiftAsyncStartIndex:(unsigned int)arg5 kernelCallstack:(unsigned long long*)arg6 numKernelFrames:(unsigned int)arg7 loadInfos:(const struct dyld_uuid_info_64 { unsigned long long x1; unsigned char x2[16]; }*)arg8 numLoadInfos:(unsigned int)arg9 textExecLoadInfos:(const struct dyld_uuid_info_64 { unsigned long long x1; unsigned char x2[16]; }*)arg10 numTextExecLoadInfos:(unsigned int)arg11 uniquePid:(unsigned long long)arg12 pid:(int)arg13 processName:(id)arg14 tid:(unsigned long long)arg15 timestamp:(id)arg16 sharedCache:(id)arg17;
- (void)addUserCallstack:(unsigned long long*)arg1 numUserFrames:(unsigned int)arg2 swiftAsyncCallstack:(unsigned long long*)arg3 numSwiftAsyncFrames:(unsigned int)arg4 swiftAsyncStartIndex:(unsigned int)arg5 kernelCallstack:(unsigned long long*)arg6 numKernelFrames:(unsigned int)arg7 uniquePid:(unsigned long long)arg8 pid:(int)arg9 tid:(unsigned long long)arg10 timestamp:(id)arg11;
- (unsigned int)additionalCSSymbolicatorFlags;
- (bool)appleInternalIsKnown;
- (double)attemptedSamplingInterval;
- (id)automatedDeviceGroup;
- (id)binaryFormat;
- (id)bootArgs;
- (unsigned long long)bytesWritten;
- (unsigned long long)bytesWrittenLimit;
- (bool)cacheLoadInfoForProcess:(int)arg1;
- (id)callTreeForDispatchQueue:(id)arg1 andThread:(id)arg2 inTask:(id)arg3 options:(id)arg4;
- (id)callTreeForDispatchQueue:(id)arg1 swiftTask:(id)arg2 thread:(id)arg3 inTask:(id)arg4 options:(id)arg5;
- (id)callTreeForExecutable:(id)arg1 options:(id)arg2;
- (id)callTreeForSwiftTask:(id)arg1 thread:(id)arg2 inTask:(id)arg3 options:(id)arg4;
- (id)callTreeForTask:(id)arg1 options:(id)arg2;
- (id)callTreeForThread:(id)arg1 inTask:(id)arg2 options:(id)arg3;
- (id)callTreeForThreadsInTask:(id)arg1 options:(id)arg2;
- (id)callTreesForThreadsInTask:(id)arg1 options:(id)arg2;
- (id)countryCode;
- (double)cpuDuration;
- (double)cpuLimit;
- (double)cpuLimitDuration;
- (id)cpuSignalHandlerStackLeafKernelFrame;
- (double)cpuUsed;
- (id)customOutput;
- (unsigned long long)dataGatheringOptions;
- (unsigned long long)dataSource;
- (unsigned long long)dataStyle;
- (void)dealloc;
- (id)durationNote;
- (void)encodeWithCoder:(id)arg1;
- (id)endTime;
- (void)enumerateTasks:(id /* block */)arg1;
- (id)event;
- (id)eventNote;
- (id)eventTimeRange;
- (id)exclaves;
- (double)extraDuration;
- (id)fanSpeedClosestToTimestamp:(id)arg1;
- (bool)findCpuSignalHandlerStackLeafKernelFrame;
- (void)finishedSamplingLiveSystem;
- (void)gatherMachineArchitecture;
- (unsigned long long)gpuRestartCount;
- (unsigned long long)gpuRestartLastMachAbs;
- (bool)hardwareKeyboard;
- (id)hardwareModel;
- (bool)hasEnterprisePersona;
- (bool)hasHardwareKeyboardInfo;
- (bool)hasInternalCarryDeviceDistinction;
- (bool)haveCPUClusterInfo;
- (bool)haveKPerfSched;
- (id)hidEvents;
- (id)homeVolumeSpace;
- (unsigned int)hwPageSize;
- (id)idleThreadSet;
- (unsigned long long)indexOfFirstSampleOnOrAfterTimestamp:(id)arg1;
- (unsigned long long)indexOfLastSampleOnOrBeforeTimestamp:(id)arg1;
- (id)init;
- (id)initForFileParsing;
- (id)initForLiveSampling;
- (id)initWithCoder:(id)arg1;
- (id)installedRootNames;
- (id)ioEvents;
- (bool)isAppleInternal;
- (bool)isECoreForCPUNum:(unsigned int)arg1;
- (bool)isEmpty;
- (bool)isInternalCarryDevice;
- (bool)isPCoreForCPUNum:(unsigned int)arg1;
- (bool)isRootInstalled;
- (bool)kPerfPETParsePastLastStackshot;
- (double)kPerfPETSampleIntervalLimit;
- (bool)keepMicrostackshotsWithoutLoadInfo;
- (bool)keepStateBetweenSampleIndexes;
- (id)kernelCaches;
- (id)kernelVersion;
- (id)kextStat;
- (id)keyboardLanguages;
- (id)kperfTriggers;
- (double)lastWakeTime;
- (struct mach_timebase_info { unsigned int x1; unsigned int x2; })machTimebase;
- (id)machineArchitecture;
- (id)memoryPressureEvents;
- (id)models;
- (id)mountStatusTracker;
- (id)nonDefaultFeatureFlags;
- (unsigned int)numActiveCPUs;
- (long long)numOSCryptexFileExtents;
- (unsigned long long)numSamples;
- (unsigned long long)numWakeups;
- (unsigned long long)numWakeupsLimit;
- (bool)omitSensitiveStrings;
- (id)osBuildVersion;
- (id)osProductName;
- (id)osProductVersion;
- (id)osProductVersionExtra;
- (bool)parseKTraceFile:(const char *)arg1 warningsOut:(id)arg2 errorOut:(id*)arg3;
- (bool)parseStackshotsFromKTraceFile:(const char *)arg1 warningsOut:(id)arg2 errorOut:(id*)arg3;
- (void)postprocess;
- (id)powerModeTransitions;
- (id)preferredLanguages;
- (id)reason;
- (double)reportTimeThreshold;
- (bool)sampleOnlyMainThreads;
- (id)sampleTimestamps;
- (bool)sanitizePaths;
- (bool)saveBinaryFormatToStream:(struct __sFILE { char *x1; int x2; int x3; short x4; short x5; struct __sbuf { char *x_6_1_1; int x_6_1_2; } x6; int x7; void *x8; int (*x9)(); int (*x10)(); int (*x11)(); int (*x12)(); struct __sbuf { char *x_13_1_1; int x_13_1_2; } x13; struct __sFILEX {} *x14; int x15; unsigned char x16[3]; unsigned char x17[1]; struct __sbuf { char *x_18_1_1; int x_18_1_2; } x18; int x19; long long x20; }*)arg1;
- (void)setActionTaken:(id)arg1;
- (void)setAdditionalCSSymbolicatorFlags:(unsigned int)arg1;
- (void)setAttemptedSamplingInterval:(double)arg1;
- (void)setBootArgs:(id)arg1;
- (void)setBytesWritten:(unsigned long long)arg1;
- (void)setBytesWrittenLimit:(unsigned long long)arg1;
- (void)setCpuDuration:(double)arg1;
- (void)setCpuLimit:(double)arg1;
- (void)setCpuLimitDuration:(double)arg1;
- (void)setCpuUsed:(double)arg1;
- (void)setCustomOutput:(id)arg1;
- (void)setDataGatheringOptions:(unsigned long long)arg1;
- (void)setDurationNote:(id)arg1;
- (void)setEvent:(id)arg1;
- (void)setEventNote:(id)arg1;
- (void)setEventTimeRange:(id)arg1;
- (void)setExtraDuration:(double)arg1;
- (void)setHardwareModel:(id)arg1;
- (void)setHaveKPerfSched:(bool)arg1;
- (void)setHwPageSize:(unsigned int)arg1;
- (void)setKPerfPETParsePastLastStackshot:(bool)arg1;
- (void)setKPerfPETSampleIntervalLimit:(double)arg1;
- (void)setKeepMicrostackshotsWithoutLoadInfo:(bool)arg1;
- (void)setKeepStateBetweenSampleIndexes:(bool)arg1;
- (void)setKperfTriggers:(id)arg1;
- (void)setMachTimebase:(struct mach_timebase_info { unsigned int x1; unsigned int x2; })arg1;
- (void)setMachineArchitecture:(id)arg1;
- (void)setNumActiveCPUs:(unsigned int)arg1;
- (void)setNumWakeups:(unsigned long long)arg1;
- (void)setNumWakeupsLimit:(unsigned long long)arg1;
- (void)setOmitSensitiveStrings:(bool)arg1;
- (void)setOsBuildVersion:(id)arg1;
- (void)setOsProductName:(id)arg1;
- (void)setOsProductVersion:(id)arg1;
- (void)setOsProductVersionExtra:(id)arg1;
- (void)setReason:(id)arg1;
- (void)setReportTimeThreshold:(double)arg1;
- (void)setSampleOnlyMainThreads:(bool)arg1;
- (void)setSanitizePaths:(bool)arg1;
- (void)setShouldGatherKextStat:(bool)arg1;
- (void)setSignature:(id)arg1;
- (void)setStackshotsOnlyIncludeSpecificProcesses:(bool)arg1;
- (void)setStepsNote:(id)arg1;
- (void)setTargetDispatchQueueId:(unsigned long long)arg1;
- (void)setTargetHIDEventEndMachAbs:(unsigned long long)arg1;
- (void)setTargetHIDEventMachAbs:(unsigned long long)arg1;
- (void)setTargetProcess:(id)arg1;
- (void)setTargetProcessId:(int)arg1;
- (bool)setTargetProcessWithHint:(id)arg1;
- (void)setTargetThreadId:(unsigned long long)arg1;
- (void)setVmPageSize:(unsigned int)arg1;
- (void)setWakeupsDuration:(double)arg1;
- (void)setWakeupsLimitDuration:(double)arg1;
- (void)setWrDiagnosticName:(id)arg1;
- (void)setWrError:(id)arg1;
- (void)setWrSignpostCategory:(id)arg1;
- (void)setWrSignpostCount:(unsigned long long)arg1;
- (void)setWrSignpostCountThreshold:(unsigned long long)arg1;
- (void)setWrSignpostDurationSingle:(double)arg1;
- (void)setWrSignpostDurationSingleThreshold:(double)arg1;
- (void)setWrSignpostDurationSum:(double)arg1;
- (void)setWrSignpostDurationSumThreshold:(double)arg1;
- (void)setWrSignpostDurationUnion:(double)arg1;
- (void)setWrSignpostDurationUnionThreshold:(double)arg1;
- (void)setWrSignpostName:(id)arg1;
- (void)setWrSignpostSubsystem:(id)arg1;
- (void)setWrTriggeringSignpostCategory:(id)arg1;
- (void)setWrTriggeringSignpostName:(id)arg1;
- (void)setWrTriggeringSignpostSubsystem:(id)arg1;
- (void)setWrWorkflowDuration:(double)arg1;
- (void)setWrWorkflowDurationOmittingNetworkBoundIntervals:(double)arg1;
- (void)setWrWorkflowDurationOmittingNetworkBoundIntervalsThreshold:(double)arg1;
- (void)setWrWorkflowDurationThreshold:(double)arg1;
- (void)setWrWorkflowName:(id)arg1;
- (void)setWrWorkflowTimeoutDuration:(double)arg1;
- (void)setWriteDuration:(double)arg1;
- (void)setWriteLimitDuration:(double)arg1;
- (id)sharedCaches;
- (bool)shouldGatherKextStat;
- (id)signature;
- (bool)stackshotsOnlyIncludeSpecificProcesses;
- (id)startTime;
- (void)startingSamplingLiveSystem;
- (id)stepsNote;
- (void)symbolicate;
- (id)systemAdvisoryLevels;
- (unsigned long long)targetDispatchQueueId;
- (unsigned long long)targetHIDEventEndMachAbs;
- (unsigned long long)targetHIDEventMachAbs;
- (id)targetProcess;
- (id)targetProcessAbsolutePath;
- (id)targetProcessBundleBuildVersion;
- (id)targetProcessBundleId;
- (id)targetProcessBundleName;
- (id)targetProcessBundleProductBuildVersion;
- (id)targetProcessBundleProjectName;
- (id)targetProcessBundleShortVersion;
- (id)targetProcessBundleSourceVersion;
- (id)targetProcessBundleVersion;
- (id)targetProcessCommerceAppID;
- (id)targetProcessCommerceExternalID;
- (int)targetProcessId;
- (id)targetProcessName;
- (id)targetProcessVendorID;
- (unsigned long long)targetThreadId;
- (id)tasksByPid;
- (id)tasksByUniquePid;
- (id)tidToPidDict;
- (id)tidsForPid:(int)arg1;
- (id)timeWhenTransitionedToSamplingAllProcesses;
- (id)timeWhenTransitionedToSamplingAllThreads;
- (id)timestampOfLastStackshot;
- (void)useDsymForUUIDFor:(id)arg1;
- (unsigned int)vmPageSize;
- (double)wakeupsDuration;
- (double)wakeupsLimitDuration;
- (unsigned int)workQueueHardThreadLimit;
- (unsigned int)workQueueSoftThreadLimit;
- (id)wrDiagnosticName;
- (id)wrError;
- (id)wrSignpostCategory;
- (unsigned long long)wrSignpostCount;
- (unsigned long long)wrSignpostCountThreshold;
- (double)wrSignpostDurationSingle;
- (double)wrSignpostDurationSingleThreshold;
- (double)wrSignpostDurationSum;
- (double)wrSignpostDurationSumThreshold;
- (double)wrSignpostDurationUnion;
- (double)wrSignpostDurationUnionThreshold;
- (id)wrSignpostName;
- (id)wrSignpostSubsystem;
- (id)wrTriggeringSignpostCategory;
- (id)wrTriggeringSignpostName;
- (id)wrTriggeringSignpostSubsystem;
- (double)wrWorkflowDuration;
- (double)wrWorkflowDurationOmittingNetworkBoundIntervals;
- (double)wrWorkflowDurationOmittingNetworkBoundIntervalsThreshold;
- (double)wrWorkflowDurationThreshold;
- (id)wrWorkflowName;
- (double)wrWorkflowTimeoutDuration;
- (double)writeDuration;
- (double)writeLimitDuration;

@end
