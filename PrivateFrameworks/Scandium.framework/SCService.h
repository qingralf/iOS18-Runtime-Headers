/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Scandium.framework/Scandium
 */

@interface SCService : NSObject <SCDeviceDelegate, SCHealthLiteConnectionDelegate, SCProcessorDelegate> {
    bool  _backgroundIsAllowed;
    SCHealthLiteConnection * _connection;
    SCDevice * _device;
    unsigned char  _firmwareState;
    bool  _ledState;
    unsigned char  _operatingMode;
    SCPacketDropDetector * _packetDropDetector;
    SCPowerAssertion * _powerAssertion;
    SCPreferences * _preferences;
    bool  _previousBackgroundReadingExists;
    double  _previousBackgroundReadingWallclock;
    bool  _previousBackgroundReadingWasSuccessful;
    SCProcessor * _processor;
    NSObject<OS_dispatch_queue> * _serviceQueue;
    bool  _started;
    unsigned long long  _systemInstance;
    SCTimeReference * _timeReference;
    struct SCRTPTimestampReference { 
        double cfAbsoluteTime; 
        unsigned long long rtpTimestamp; 
        unsigned int ticksPerSecond; 
    }  _timestampReference;
}

@property (nonatomic) bool backgroundIsAllowed;
@property (nonatomic, retain) SCHealthLiteConnection *connection;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) SCDevice *device;
@property (nonatomic) unsigned char firmwareState;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool ledState;
@property (nonatomic) unsigned char operatingMode;
@property (nonatomic, readonly) SCPacketDropDetector *packetDropDetector;
@property (nonatomic, retain) SCPowerAssertion *powerAssertion;
@property (nonatomic, readonly) SCPreferences *preferences;
@property (nonatomic) bool previousBackgroundReadingExists;
@property (nonatomic) double previousBackgroundReadingWallclock;
@property (nonatomic) bool previousBackgroundReadingWasSuccessful;
@property (nonatomic, retain) SCProcessor *processor;
@property (readonly) NSObject<OS_dispatch_queue> *serviceQueue;
@property (nonatomic) bool started;
@property (readonly) Class superclass;
@property (nonatomic, readonly) unsigned long long systemInstance;
@property (nonatomic, retain) SCTimeReference *timeReference;
@property (nonatomic) struct SCRTPTimestampReference { double x1; unsigned long long x2; unsigned int x3; } timestampReference;

- (void).cxx_destruct;
- (void)abortSession;
- (bool)backgroundIsAllowed;
- (void)beginSession;
- (id)connection;
- (id)device;
- (unsigned char)firmwareState;
- (void)handleAbort:(unsigned char)arg1 withAnalytics:(const struct SCAnalytics { id x1; id x2; id x3; id x4; id x5; id x6; id x7; id x8; id x9; id x10; id x11; id x12; id x13; id x14; id x15; id x16; id x17; id x18; id x19; id x20; id x21; id x22; id x23; id x24; id x25; id x26; id x27; id x28; id x29; id x30; id x31; id x32; id x33; id x34; id x35; id x36; id x37; id x38; id x39; id x40; id x41; id x42; id x43; id x44; id x45; id x46; id x47; id x48; id x49; id x50; id x51; id x52; id x53; id x54; id x55; id x56; id x57; id x58; id x59; id x60; id x61; id x62; id x63; id x64; id x65; id x66; id x67; id x68; id x69; id x70; id x71; id x72; id x73; id x74; id x75; id x76; id x77; id x78; id x79; id x80; id x81; id x82; id x83; id x84; id x85; id x86; id x87; id x88; id x89; id x90; id x91; id x92; id x93; id x94; id x95; id x96; id x97; id x98; id x99; id x100; id x101; id x102; id x103; id x104; id x105; id x106; id x107; id x108; id x109; id x110; id x111; id x112; id x113; id x114; id x115; id x116; id x117; id x118; id x119; id x120; id x121; id x122; id x123; id x124; id x125; id x126; }*)arg2 atTimestamp:(double)arg3;
- (void)handleConnectionInvalidation;
- (void)handleHealthLiteDeath;
- (void)handleInitialConnect;
- (void)handleMotionStatusChange:(bool)arg1 atTimestamp:(double)arg2;
- (void)handlePostureStatusChange:(bool)arg1 atTimestamp:(double)arg2;
- (void)handleResult:(const struct SCResult { float x1; float x2; }*)arg1 withAnalytics:(const struct SCAnalytics { id x1; id x2; id x3; id x4; id x5; id x6; id x7; id x8; id x9; id x10; id x11; id x12; id x13; id x14; id x15; id x16; id x17; id x18; id x19; id x20; id x21; id x22; id x23; id x24; id x25; id x26; id x27; id x28; id x29; id x30; id x31; id x32; id x33; id x34; id x35; id x36; id x37; id x38; id x39; id x40; id x41; id x42; id x43; id x44; id x45; id x46; id x47; id x48; id x49; id x50; id x51; id x52; id x53; id x54; id x55; id x56; id x57; id x58; id x59; id x60; id x61; id x62; id x63; id x64; id x65; id x66; id x67; id x68; id x69; id x70; id x71; id x72; id x73; id x74; id x75; id x76; id x77; id x78; id x79; id x80; id x81; id x82; id x83; id x84; id x85; id x86; id x87; id x88; id x89; id x90; id x91; id x92; id x93; id x94; id x95; id x96; id x97; id x98; id x99; id x100; id x101; id x102; id x103; id x104; id x105; id x106; id x107; id x108; id x109; id x110; id x111; id x112; id x113; id x114; id x115; id x116; id x117; id x118; id x119; id x120; id x121; id x122; id x123; id x124; id x125; id x126; }*)arg2 atTimestamp:(double)arg3;
- (void)handleScandiumInputReport:(id)arg1;
- (id)initWithDevice:(struct __IOHIDDevice { }*)arg1;
- (bool)ledState;
- (unsigned char)operatingMode;
- (id)packetDropDetector;
- (id)powerAssertion;
- (id)preferences;
- (bool)previousBackgroundReadingExists;
- (double)previousBackgroundReadingWallclock;
- (bool)previousBackgroundReadingWasSuccessful;
- (id)processor;
- (void)reportBackgroundIntervalAnalyticsWithSuccess:(bool)arg1;
- (void)reportSessionAnalytics:(const struct SCAnalytics { id x1; id x2; id x3; id x4; id x5; id x6; id x7; id x8; id x9; id x10; id x11; id x12; id x13; id x14; id x15; id x16; id x17; id x18; id x19; id x20; id x21; id x22; id x23; id x24; id x25; id x26; id x27; id x28; id x29; id x30; id x31; id x32; id x33; id x34; id x35; id x36; id x37; id x38; id x39; id x40; id x41; id x42; id x43; id x44; id x45; id x46; id x47; id x48; id x49; id x50; id x51; id x52; id x53; id x54; id x55; id x56; id x57; id x58; id x59; id x60; id x61; id x62; id x63; id x64; id x65; id x66; id x67; id x68; id x69; id x70; id x71; id x72; id x73; id x74; id x75; id x76; id x77; id x78; id x79; id x80; id x81; id x82; id x83; id x84; id x85; id x86; id x87; id x88; id x89; id x90; id x91; id x92; id x93; id x94; id x95; id x96; id x97; id x98; id x99; id x100; id x101; id x102; id x103; id x104; id x105; id x106; id x107; id x108; id x109; id x110; id x111; id x112; id x113; id x114; id x115; id x116; id x117; id x118; id x119; id x120; id x121; id x122; id x123; id x124; id x125; id x126; }*)arg1 withTimestamp:(double)arg2;
- (void)selectAnOperatingModeOtherThanForeground;
- (id)serviceQueue;
- (void)setBackgroundAllowed:(bool)arg1;
- (void)setBackgroundIsAllowed:(bool)arg1;
- (void)setConnection:(id)arg1;
- (void)setFirmwareState:(unsigned char)arg1;
- (void)setLedState:(bool)arg1;
- (void)setOperatingMode:(unsigned char)arg1;
- (void)setPowerAssertion:(id)arg1;
- (void)setPreviousBackgroundReadingExists:(bool)arg1;
- (void)setPreviousBackgroundReadingWallclock:(double)arg1;
- (void)setPreviousBackgroundReadingWasSuccessful:(bool)arg1;
- (void)setProcessor:(id)arg1;
- (void)setStarted:(bool)arg1;
- (void)setTimeReference:(id)arg1;
- (void)setTimestampReference:(struct SCRTPTimestampReference { double x1; unsigned long long x2; unsigned int x3; })arg1;
- (void)start;
- (bool)started;
- (unsigned long long)systemInstance;
- (id)timeReference;
- (struct SCRTPTimestampReference { double x1; unsigned long long x2; unsigned int x3; })timestampReference;
- (double)wallclockForRTPTimestamp:(unsigned long long)arg1;

@end
