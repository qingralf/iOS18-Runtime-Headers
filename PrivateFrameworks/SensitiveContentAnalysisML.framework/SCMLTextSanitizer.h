/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SensitiveContentAnalysisML.framework/SensitiveContentAnalysisML
 */

@interface SCMLTextSanitizer : NSObject {
    unsigned long long  _backends;
    unsigned int  _granularity;
    NSMutableArray * _llmBackends;
    NSLocale * _locale;
    unsigned int  _mode;
    struct mutex { 
        struct _opaque_pthread_mutex_t { 
            long long __sig; 
            BOOL __opaque[56]; 
        } __m_; 
    }  _mutex;
    struct unique_ptr<scml::MultiwordGazetteer, std::default_delete<scml::MultiwordGazetteer>> { 
        struct __compressed_pair<scml::MultiwordGazetteer *, std::default_delete<scml::MultiwordGazetteer>> { 
            struct MultiwordGazetteer {} *__value_; 
        } __ptr_; 
    }  _personsGazetteer;
    struct unique_ptr<scml::(anonymous namespace)::RuleBasedTextSanitizer, std::default_delete<scml::(anonymous namespace)::RuleBasedTextSanitizer>>="__ptr_"{__compressed_pair<scml::(anonymous namespace)::RuleBasedTextSanitizer *, std::default_delete<scml::(anonymous namespace)::RuleBasedTextSanitizer>>="__value_"^{RuleBasedTextSanitizer {}  _rulesBasedSanitizer;
    _TtC26SensitiveContentAnalysisML26SCMLTextModerationLMFromMM * _sanitizerLM;
    bool  _throwInAdapterAsyncHandler;
    bool  _throwInModerationLMAsyncHandler;
    struct unique_ptr<scml::MultiwordGazetteer, std::default_delete<scml::MultiwordGazetteer>> { 
        struct __compressed_pair<scml::MultiwordGazetteer *, std::default_delete<scml::MultiwordGazetteer>> { 
            struct MultiwordGazetteer {} *__value_; 
        } __ptr_; 
    }  _visualGenerationIgnoreGazetteer;
}

@property (nonatomic, readonly) NSLocale *locale;

+ (unsigned int)violationCategoryForAdapterLabel:(id)arg1;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_sanitizeRequest:(id)arg1 error:(id*)arg2;
- (void)_sanitizeRequestAsynchronously:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)doLLMBackend:(id)arg1 withText:(id)arg2 isChildPresent:(bool)arg3 withResponder:(void*)arg4;
- (void)doModeration:(id)arg1 withResponder:(void*)arg2;
- (id)initWithConfiguration:(id)arg1 error:(id*)arg2;
- (id)locale;
- (void)sanitizeRequestAsynchronously:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)sanitizeText:(id)arg1 error:(id*)arg2;
- (void)sanitizeTextAsynchronously:(id)arg1 completionHandler:(id /* block */)arg2;

@end
