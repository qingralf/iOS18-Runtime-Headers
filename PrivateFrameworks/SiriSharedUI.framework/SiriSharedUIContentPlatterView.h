/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SiriSharedUI.framework/SiriSharedUI
 */

@interface SiriSharedUIContentPlatterView : SiriSharedUIStandardView <SiriSharedUIAccessibilityFocusing, SiriSharedUIContentPlatterScrollViewDelegate, SiriSharedUIDarkening, UIScrollViewDelegate> {
    bool  _allowAutomaticContentViewsScaling;
    SiriSharedUIStandardView * _contentHostingView;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _contentInsets;
    NSArray * _contentViews;
    double  _currentContentOffset;
    SiriSharedUIContentPlatterDarkenMaskView * _darkenMaskView;
    <SiriSharedUIContentPlatterViewDelegate> * _delegate;
    SiriSharedUIPanDismissalGestureRecognizer * _dismissalGestureRecognizer;
    UIVisualEffectView * _fakeNavigationBarBackgroundView;
    bool  _ignoreSafeAreaInsetChanges;
    bool  _isInAmbient;
    bool  _isInAmbientInteractivity;
    bool  _isNextLevelCard;
    bool  _makeBackgroundPlatterTransparent;
    double  _minimumScrollViewBottomInset;
    bool  _platterNeedsLayout;
    PLPlatterView * _platterView;
    bool  _reducedOrbOpacity;
    SiriSharedUIContentPlatterScrollView * _scrollView;
    _TtC12SiriSharedUI28SiriSharedUIVariableBlurView * _scrollViewStickyHeaderBlurView;
    SiriSharedUITouchPassthroughView * _scrollViewStickyHeaderContainerView;
    _TtC12SiriSharedUI24SiriSharedUIGradientView * _scrollViewStickyHeaderDimmingGradientView;
    UIViewSpringAnimationBehavior * _scrollViewStickyHeaderSpringAnimationBehavior;
    bool  _shouldAllowDismissalWhileScrollable;
    bool  _showingScrollViewStickyHeader;
    bool  _supportsSAE;
}

@property (nonatomic) bool allowAutomaticContentViewsScaling;
@property (getter=_contentHostingView, nonatomic, retain) SiriSharedUIStandardView *contentHostingView;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } contentInsets;
@property (nonatomic, retain) NSArray *contentViews;
@property (getter=_currentContentOffset, setter=_setCurrentContentOffset:, nonatomic) double currentContentOffset;
@property (nonatomic) double darkenIntensity;
@property (getter=_darkenMaskView, nonatomic, retain) SiriSharedUIContentPlatterDarkenMaskView *darkenMaskView;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (nonatomic) <SiriSharedUIContentPlatterViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) SiriSharedUIPanDismissalGestureRecognizer *dismissalGestureRecognizer;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) double heightForContentSeparators;
@property (nonatomic) bool isInAmbient;
@property (nonatomic) bool isInAmbientInteractivity;
@property (nonatomic) bool isNextLevelCard;
@property (getter=_platterNeedsLayout, setter=_setPlatterNeedsLayout:, nonatomic) bool platterNeedsLayout;
@property (nonatomic, retain) PLPlatterView *platterView;
@property (getter=isScrollEnabled, nonatomic) bool scrollEnabled;
@property (getter=_scrollView, nonatomic, retain) SiriSharedUIContentPlatterScrollView *scrollView;
@property (getter=_shouldAllowDismissalWhenScrollable, setter=_setShouldAllowDismissalWhileScrollable:, nonatomic) bool shouldAllowDismissalWhileScrollable;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_adjustedContentInsetForScrollView:(id)arg1;
- (void)_animateScrollViewStickyHeaderIfNeededGivenCurrentContentOffset:(double)arg1 contentOffsetWhenScrolledToTop:(double)arg2;
- (id)_contentHostingView;
- (struct CGPoint { double x1; double x2; })_contentOffsetForScrollView:(id)arg1;
- (struct CGSize { double x1; double x2; })_contentSizeForScrollView:(id)arg1;
- (double)_cornerRadiusForPlatter;
- (double)_currentContentOffset;
- (id)_darkenMaskView;
- (bool)_hasFakeNavigationBarBackground;
- (bool)_hasScrollViewStickyHeader;
- (bool)_platterNeedsLayout;
- (id)_scrollView;
- (void)_setCurrentContentOffset:(double)arg1;
- (void)_setPlatterNeedsLayout:(bool)arg1;
- (void)_setShouldAllowDismissalWhileScrollable:(bool)arg1;
- (bool)_shouldAllowDismissalWhenScrollable;
- (bool)_shouldAnimatePropertyWithKey:(id)arg1;
- (void)_updateContentFullyScrolled;
- (void)_updateContentScale;
- (void)_updateContentViewTransformationForAmbientUpdate;
- (bool)allowAutomaticContentViewsScaling;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contentInsets;
- (id)contentPlatterScrollView;
- (id)contentViews;
- (double)darkenIntensity;
- (id)delegate;
- (id)dismissalGestureRecognizer;
- (double)heightForContentSeparators;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isInAmbient;
- (bool)isInAmbientInteractivity;
- (bool)isNextLevelCard;
- (bool)isScrollEnabled;
- (void)layoutSubviews;
- (id)platterView;
- (void)prepareForDrillInAnimation;
- (void)prepareForPopAnimationOfType:(long long)arg1;
- (void)safeAreaInsetsDidChange;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)setAllowAutomaticContentViewsScaling:(bool)arg1;
- (void)setBackgroundView:(id)arg1;
- (void)setContentHostingView:(id)arg1;
- (void)setContentInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setContentViews:(id)arg1;
- (void)setDarkenIntensity:(double)arg1;
- (void)setDarkenMaskView:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDismissalGestureRecognizer:(id)arg1;
- (void)setFakeNavigationBarBackgroundHidden:(bool)arg1;
- (void)setIsInAmbient:(bool)arg1;
- (void)setIsInAmbientInteractivity:(bool)arg1;
- (void)setIsNextLevelCard:(bool)arg1;
- (void)setMinimumScrollViewBottomInset:(double)arg1;
- (void)setNeedsLayout;
- (void)setPlatterView:(id)arg1;
- (void)setScrollEnabled:(bool)arg1;
- (void)setScrollView:(id)arg1;
- (bool)shouldAllowSimultaneousGestureRecognizersForScrollView:(id)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;

@end
