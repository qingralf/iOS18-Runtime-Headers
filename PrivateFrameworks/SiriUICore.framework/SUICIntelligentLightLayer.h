/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SiriUICore.framework/SiriUICore
 */

@interface SUICIntelligentLightLayer : CAMetalLayer {
    NSString * _archivePath;
    unsigned long long  _colorPalette;
    <MTLCommandQueue> * _commandQueue;
    CADisplayLink * _displayLink;
    bool  _firstFrame;
    unsigned long long  _firstFrameSignpost;
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*lights[11]; 
    }  _fragUniforms;
    long long  _framesPerSecondBeforePerformanceOptimization;
    long long  _idiom;
    int  _maxPhysicsIterationsBeforePerformanceOptimization;
    float  _minPowerLevel;
    <MTLTexture> * _noiseTexture;
    struct { 
        /* Warning: Unrecognized filer type: '"' using 'void*' */ void*noiseOffset; 
    }  _noiseUniforms;
    struct { 
        struct { 
            unsigned long long physicsRate; 
            int maxPhysicsIterationsPerFrame; 
            float physicsTickDelta; 
            float framerateEnergyModifier; 
            float micPowerLevel; 
            float chipRandomOffset[33]; 
            float chipRotation; 
            bool drawingVeryLastFrame; 
            bool reduceMotion; 
        } common; 
        struct { 
            float value; 
            float curVelocity; 
            float maxAcceleration; 
            float springAmount; 
        } flameSpring; 
        struct { 
            float value; 
            float curVelocity; 
            float maxAcceleration; 
            float springAmount; 
        } onSpring; 
        struct { 
            float value; 
            float curVelocity; 
            float maxAcceleration; 
            float springAmount; 
        } volumeSpring; 
        struct { 
            float value; 
            float curVelocity; 
            float maxAcceleration; 
            float springAmount; 
        } glowSpring; 
        unsigned long long zoning; 
        bool isBuddy; 
        struct { 
            float value; 
            float curVelocity; 
            float maxAcceleration; 
            float springAmount; 
        } energySpring; 
        struct { 
            float value; 
            float curVelocity; 
            float maxAcceleration; 
            float springAmount; 
        } lightnessSpring; 
        float flameDrawnSize; 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*lights[11]; 
    }  _physics;
    bool  _quicktationMode;
    MTLRenderPassDescriptor * _renderPassDesc;
    <MTLRenderPipelineState> * _renderPipeline;
    UIScreen * _screen;
    struct { 
        /* Warning: Unrecognized filer type: '"' using 'void*' */ void*scale; 
    }  _vertUniforms;
    float  _volumeLinearPowerLevel;
}

@property (nonatomic) unsigned long long colorPalette;
@property (nonatomic, readonly) <MTLCommandQueue> *commandQueue;
@property (nonatomic, retain) CADisplayLink *displayLink;
@property (nonatomic) float minPowerLevel;
@property (nonatomic) bool quicktationMode;
@property (nonatomic, retain) MTLRenderPassDescriptor *renderPassDesc;
@property (nonatomic, retain) <MTLRenderPipelineState> *renderPipeline;
@property (nonatomic) float volumeLinearPowerLevel;

+ (id)createNoiseTextureWithDevice:(id)arg1 commandQueue:(id)arg2;
+ (Class)layerClass;
+ (void)prewarm;

- (void).cxx_destruct;
- (void)_commonInitWithScreen:(id)arg1 commandQueue:(id)arg2;
- (void)_drawFrame:(id)arg1;
- (void)_loadMetalPipelines;
- (void)_loadMetalState;
- (void)_updateMetalRatios:(struct CGSize { double x1; double x2; })arg1;
- (void)_updateScreen:(id)arg1;
- (void)cleanup;
- (unsigned long long)colorPalette;
- (id)commandQueue;
- (id)displayLink;
- (void)endReducedFramerateForPerformance;
- (id)init;
- (id)initWithLayer:(id)arg1;
- (id)initWithScreen:(id)arg1 commandQueue:(id)arg2;
- (void)invalidate;
- (float)minPowerLevel;
- (bool)quicktationMode;
- (id)renderPassDesc;
- (id)renderPipeline;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setColorPalette:(unsigned long long)arg1;
- (void)setDisplayLink:(id)arg1;
- (void)setIsQuicktationPill:(bool)arg1;
- (void)setMinPowerLevel:(float)arg1;
- (void)setMinimumPowerLevel:(float)arg1;
- (void)setPaused:(bool)arg1;
- (void)setQuicktationMode:(bool)arg1;
- (void)setRenderPassDesc:(id)arg1;
- (void)setRenderPipeline:(id)arg1;
- (void)setScreen:(id)arg1;
- (void)setVolumeLinearPowerLevel:(float)arg1;
- (void)startReducedFramerateForPerformance;
- (void)stopVolumeInput;
- (void)transitionToNextBuddyStep;
- (void)updateVolumeInputdB:(float)arg1;
- (float)volumeLinearPowerLevel;

@end
