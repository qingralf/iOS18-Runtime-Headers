/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SoftwareUpdateServices.framework/SoftwareUpdateServices
 */

@interface SUAutoInstallManager : NSObject <SUAutoUpdatePasscodePolicyObserver, SUKeybagInterfaceObserver, SUManagerDelegate, SUManagerObserver> {
    bool  _autoInstallAttempted;
    <SUAutoInstallManagerDelegate> * _delegate;
    NSError * _failedToInstallError;
    SUSFollowUpController * _followUpController;
    <SUManagerInterface> * _manager;
    _SUAutoInstallOperationModel * _operationModel;
    SUAutoUpdatePasscodePolicy * _passcodePolicy;
    SUState * _state;
    NSObject<OS_dispatch_queue> * _stateQueue;
}

@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (nonatomic) <SUAutoInstallManagerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly, retain) SUSFollowUpController *followUpController;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly, retain) _SUAutoInstallOperationModel *operationModel;
@property (nonatomic, readonly, retain) SUAutoUpdatePasscodePolicy *passcodePolicy;
@property (nonatomic, readonly, retain) SUState *state;
@property (readonly) Class superclass;

+ (id)rollbackRebootLaterTime;

- (void).cxx_destruct;
- (id)_createOperationModel;
- (void)_installAttemptDone;
- (bool)_queue_canGetAutoInstallOperation;
- (void)_queue_cancelAutoInstallOperation:(id)arg1;
- (void)_queue_clearAutoInstallOperationForReason:(id)arg1 disableKeybagStash:(bool)arg2;
- (void)_queue_consentToAutoInstallOperation:(id)arg1;
- (id)_queue_currentAutoInstallOperationCreatingIfNecessary:(bool)arg1 notifyIfExpired:(bool)arg2 error:(id*)arg3;
- (bool)_queue_isAutoInstallOperationReadyToBegin;
- (bool)_queue_isExpired;
- (void)_queue_noteAutoInstallOperationDidExpire;
- (void)_queue_noteAutoInstallOperationWantsToBegin;
- (void)_queue_resumeOrResetStateIfNecessary;
- (void)_queue_setFailedToInstallError:(id)arg1;
- (void)_queue_trySchedulingAnotherTimeInInstallWindow:(double)arg1;
- (void)cancelAutoInstallOperation:(id)arg1;
- (void)consentToAutoInstallOperation:(id)arg1;
- (void)copyAutoInstallOperationForecast:(id*)arg1 error:(id*)arg2;
- (id)currentAutoInstallOperationCreatingIfNecessary:(bool)arg1 error:(id*)arg2;
- (void)dealloc;
- (id)delegate;
- (void)downloadWasInvalidated:(id)arg1;
- (id)followUpController;
- (id)initWithManager:(id)arg1;
- (bool)isAutoDownload;
- (bool)isAutoInstallOperationReadyToBegin;
- (bool)isAutoUpdateEnabled;
- (bool)isCurrentUpdateAutoUpdate;
- (void)keybagInterfacePasscodeDidChange:(id)arg1;
- (void)noteAutoInstallOperationDidExpire;
- (void)noteAutoInstallOperationUnlockWindowDidBegin;
- (void)noteAutoInstallOperationWantsToBegin;
- (void)noteInstallDidFail:(id)arg1 withError:(id)arg2;
- (void)noteInstallDidFinish:(id)arg1;
- (id)operationModel;
- (id)passcodePolicy;
- (void)passcodePolicyInterface:(id)arg1 passcodePolicyTypeChanged:(unsigned long long)arg2;
- (void)resumeOrResetStateIfNecessary;
- (void)setDelegate:(id)arg1;
- (void)setFailedToInstallError:(id)arg1;
- (id)state;
- (void)trySchedulingAnotherTimeInInstallWindow:(double)arg1;
- (void)trySchedulingAutoInstallAgainLater;
- (void)unattendedInstallationKeybagCreated;

@end
