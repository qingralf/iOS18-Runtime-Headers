/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SoftwareUpdateServices.framework/SoftwareUpdateServices
 */

@interface SUDownloader : NSObject <SUNetworkObserver> {
    unsigned long long  _brainLoadAttemptsForDescriptor;
    SUDescriptor * _brainLoadedForDescriptor;
    bool  _clearingSpace;
    SUManagerCore * _core;
    SUDownload * _download;
    MAAsset * _downloadAsset;
    SUOperationProgress * _downloadProgressSnapshot;
    NSDate * _downloadProgressSnapshotDate;
    bool  _downloadStateResetSinceStartup;
    bool  _downloading;
    bool  _foreground;
    bool  _goNonDiscretionaryOnDownload;
    SUDescriptor * _loadBrainForDescriptor;
}

@property (nonatomic) unsigned long long brainLoadAttemptsForDescriptor;
@property (nonatomic, retain) SUDescriptor *brainLoadedForDescriptor;
@property (getter=isClearingSpace, nonatomic, readonly) bool clearingSpace;
@property (nonatomic) SUManagerCore *core;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) SUDownload *download;
@property (nonatomic, retain) MAAsset *downloadAsset;
@property (nonatomic, retain) SUOperationProgress *downloadProgressSnapshot;
@property (nonatomic, retain) NSDate *downloadProgressSnapshotDate;
@property (nonatomic) bool downloadStateResetSinceStartup;
@property (getter=isDownloading, nonatomic) bool downloading;
@property (getter=isForeground, nonatomic) bool foreground;
@property (nonatomic) bool goNonDiscretionaryOnDownload;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) SUDescriptor *loadBrainForDescriptor;
@property (readonly) Class superclass;

+ (id)purgeOptionsForDescriptor:(id)arg1 downloadOptions:(id)arg2 completionQueue:(id)arg3;

- (void).cxx_destruct;
- (void)_changeDownloadPhase:(id)arg1 progress:(float)arg2 timeRemaining:(double)arg3;
- (void)_downloadFailedWithError:(id)arg1;
- (void)_downloadFinished:(bool)arg1;
- (void)_downloadInvalidatedWithUpdates:(id)arg1;
- (bool)_isWithinAutoDownloadWindowForPolicy:(id)arg1 descriptor:(id)arg2;
- (void)_loadBrainOnUnlockCallback;
- (void)_notePhaseCompleted:(id)arg1;
- (int)_orderForPhase:(id)arg1;
- (bool)_reapplyExistingDownloadPolicyIfDownloadable:(bool)arg1;
- (void)_setDownloadDiscretionary:(bool)arg1;
- (bool)_shouldSendUpdatedProgressToDelegate;
- (void)_snapshotProgress;
- (void)_updateLastSavedDownloadsOptions:(id)arg1;
- (void)_updateNormalizedDownloadProgress;
- (void)_updateNormalizedDownloadProgressAndNotifyDelegate;
- (void)autoUpdateFound:(id)arg1 downloadNow:(bool)arg2;
- (unsigned long long)brainLoadAttemptsForDescriptor;
- (id)brainLoadedForDescriptor;
- (bool)cancelDownload:(bool)arg1 userRequested:(bool)arg2 keepDocAssets:(bool)arg3 error:(id*)arg4;
- (void)cleanupPreviousDownloadState:(bool)arg1;
- (id)core;
- (void)dealloc;
- (void)deviceIsUpToDate;
- (id)download;
- (id)downloadAsset;
- (void)downloadCompleted:(id)arg1;
- (void)downloadCompleted:(id)arg1 informClients:(bool)arg2;
- (void)downloadProgress:(id)arg1;
- (id)downloadProgressSnapshot;
- (id)downloadProgressSnapshotDate;
- (bool)downloadStateResetSinceStartup;
- (void)endAutoDownloadTasksAndResetState;
- (void)ensureSSOTokenIfNeededForDownload:(id)arg1;
- (bool)goNonDiscretionaryOnDownload;
- (id)initWithCore:(id)arg1;
- (bool)isClearingSpace;
- (bool)isDownloadHalted;
- (bool)isDownloading;
- (bool)isForeground;
- (bool)isReadyForDownload:(id)arg1 error:(id*)arg2;
- (bool)isSplatDownload;
- (bool)isUpdateDownloaded;
- (bool)killDownload:(bool)arg1 userRequested:(bool)arg2 keepDocAssets:(bool)arg3 error:(id*)arg4;
- (bool)killDownload:(bool)arg1 userRequested:(bool)arg2 keepDocAssets:(bool)arg3 forUpdates:(id)arg4 error:(id*)arg5;
- (id)loadBrainForDescriptor;
- (void)loadBrainOnUnlockForDescriptor:(id)arg1;
- (bool)needToWaitForUnlockForLoadingBrainForDescriptor:(id)arg1;
- (void)networkChangedFromNetworkType:(int)arg1 toNetworkType:(int)arg2;
- (void)noteAutoDownloadFailedToStart:(id)arg1 withError:(id)arg2;
- (void)noteAutoDownloadFailedToStartWithError:(id)arg1;
- (void)notifyClientOfClearingSpace:(bool)arg1;
- (void)operatorBundleChanged;
- (void)resetDownloadStateOnStartup;
- (void)setBrainLoadAttemptsForDescriptor:(unsigned long long)arg1;
- (void)setBrainLoadedForDescriptor:(id)arg1;
- (void)setClearingSpace:(bool)arg1;
- (void)setCore:(id)arg1;
- (void)setDownload:(id)arg1;
- (void)setDownloadAsset:(id)arg1;
- (void)setDownloadProgressSnapshot:(id)arg1;
- (void)setDownloadProgressSnapshotDate:(id)arg1;
- (void)setDownloadStateResetSinceStartup:(bool)arg1;
- (void)setDownloading:(bool)arg1;
- (void)setForeground:(bool)arg1;
- (void)setGoNonDiscretionaryOnDownload:(bool)arg1;
- (void)setLoadBrainForDescriptor:(id)arg1;
- (id)slaVersion;
- (void)startDownloadWithOptions:(id)arg1 withResult:(id /* block */)arg2;
- (void)tryAutoDownload;
- (bool)updateDownloadOptions:(id)arg1 error:(id*)arg2;

@end
