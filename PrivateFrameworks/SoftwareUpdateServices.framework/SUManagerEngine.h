/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SoftwareUpdateServices.framework/SoftwareUpdateServices
 */

@interface SUManagerEngine : NSObject <SUCoreFSMDelegate, SUCoreUpdateDelegate, SUNetworkObserver> {
    bool  _activated;
    bool  _activating;
    SUCoreScan * _activeScanner;
    SUManagerEngineDownloadDescriptor * _downloadDescriptor;
    SUCoreFSM * _engineFSM;
    SUCoreLog * _engineLog;
    NSString * _engineName;
    bool  _isManagedScan;
    unsigned long long  _loadBrainRetries;
    struct __MKBAssertion { } * _lockAssertion;
    <SUManagerEngineDelegate> * _managerDelegate;
    SUManagerEngineParam * _pendingManagedScanParams;
    SUManagerEngineParam * _pendingPurgeParams;
    SUPolicyFactory * _policyFactory;
    NSString * _rollbackUUID;
    NSDictionary * _stateTable;
    SUCoreUpdate * _updateControl;
}

@property (nonatomic) bool activated;
@property (nonatomic) bool activating;
@property (nonatomic, retain) SUCoreScan *activeScanner;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) SUManagerEngineDownloadDescriptor *downloadDescriptor;
@property (nonatomic, retain) SUCoreFSM *engineFSM;
@property (nonatomic, readonly, retain) SUCoreLog *engineLog;
@property (nonatomic, readonly, retain) NSString *engineName;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isManagedScan;
@property (nonatomic) unsigned long long loadBrainRetries;
@property (nonatomic) struct __MKBAssertion { }*lockAssertion;
@property (nonatomic, readonly) <SUManagerEngineDelegate> *managerDelegate;
@property (nonatomic, retain) SUManagerEngineParam *pendingManagedScanParams;
@property (nonatomic, retain) SUManagerEngineParam *pendingPurgeParams;
@property (nonatomic, retain) SUPolicyFactory *policyFactory;
@property (nonatomic, retain) NSString *rollbackUUID;
@property (nonatomic, readonly, retain) NSDictionary *stateTable;
@property (readonly) Class superclass;
@property (nonatomic, retain) SUCoreUpdate *updateControl;

+ (unsigned long long)SUCoreAudienceTypeToSUSAudienceType:(long long)arg1;
+ (unsigned long long)SUCorePreferredTypeToSUSPreferenceType:(long long)arg1;
+ (bool)SUDescriptor:(id)arg1 matchesSUCoreDescriptor:(id)arg2;
+ (bool)SUDescriptor:(id)arg1 matchesSUCoreDescriptor:(id)arg2 comparisonFlags:(unsigned long long)arg3;
+ (id)SUDescriptorFromCoreDescriptor:(id)arg1;
+ (id)SUDescriptorFromRollbackDescriptor:(id)arg1;
+ (id)_generateStateTable;
+ (id)rollbackDescriptorForSUCoreRollbackDescriptor:(id)arg1;
+ (bool)shouldHideInstallAlertForCoreDescriptor:(id)arg1;
+ (int)softwareUpdateTypeForDescriptor:(id)arg1;
+ (unsigned long long)upgradeTypeForCoreDescriptor:(id)arg1;

- (void).cxx_destruct;
- (id)SUOperationProgressFromSUCoreProgress:(id)arg1;
- (void)_queue_cancelLockAssertion;
- (bool)_queue_createBrainLoadLockAssertion:(id*)arg1;
- (void)_updatePolicyFactoryMetricEventFields:(id)arg1 updateUUID:(id)arg2;
- (void)actionHelper_ReportApplyFailed:(id)arg1;
- (void)actionHelper_ReportDownloadFailedRollingBack;
- (void)actionHelper_ReportInstallFailedNoUpdate;
- (void)actionHelper_ReportInstallFailedRollingBack;
- (void)actionHelper_ReportPrepared:(bool)arg1;
- (void)actionHelper_ReportRemoveFailedRollingBack;
- (void)actionHelper_ReportRollbackCompleted:(id)arg1 withError:(id)arg2;
- (long long)actionUnknownAction:(id)arg1 error:(id*)arg2;
- (long long)action_Activated:(id)arg1 error:(id*)arg2;
- (long long)action_ActivatedClean:(id)arg1 error:(id*)arg2;
- (long long)action_ActivatedHelper:(bool)arg1;
- (long long)action_ArmInstallOrFail:(id)arg1 error:(id*)arg2;
- (long long)action_BrainLoaded:(id)arg1 error:(id*)arg2;
- (long long)action_Cancel:(id)arg1 error:(id*)arg2;
- (long long)action_CanceledDownloadRequested:(id)arg1 error:(id*)arg2;
- (long long)action_CheckLockAndNetwork:(id)arg1 error:(id*)arg2;
- (long long)action_DownloadAndPrepare:(id)arg1 error:(id*)arg2;
- (long long)action_HandleCanceledPendingRollback:(id)arg1 error:(id*)arg2;
- (long long)action_HandlePendingDownload:(id)arg1 error:(id*)arg2;
- (long long)action_HandlePendingRollback:(id)arg1 error:(id*)arg2;
- (long long)action_InstallArmed:(id)arg1 error:(id*)arg2;
- (long long)action_InstallUpdate:(id)arg1 error:(id*)arg2;
- (long long)action_LoadBrain:(id)arg1 error:(id*)arg2;
- (long long)action_NewDownloadPending:(id)arg1 error:(id*)arg2;
- (long long)action_Prepare:(id)arg1 error:(id*)arg2;
- (long long)action_ReloadBrain:(id)arg1 error:(id*)arg2;
- (long long)action_RemoveAll:(id)arg1 error:(id*)arg2;
- (long long)action_RemoveAllPreserveCache:(id)arg1 error:(id*)arg2;
- (long long)action_RemovePreserving:(id)arg1 error:(id*)arg2;
- (long long)action_ReportApplyFailed:(id)arg1 error:(id*)arg2;
- (long long)action_ReportApplyFailedRemoveAll:(id)arg1 error:(id*)arg2;
- (long long)action_ReportAwaitingReboot:(id)arg1 error:(id*)arg2;
- (long long)action_ReportDownloadAwaitingReboot:(id)arg1 error:(id*)arg2;
- (long long)action_ReportDownloadFailedNoUpdate:(id)arg1 error:(id*)arg2;
- (long long)action_ReportDownloadFailedRemoveAll:(id)arg1 error:(id*)arg2;
- (long long)action_ReportDownloadFailedRollingBack:(id)arg1 error:(id*)arg2;
- (long long)action_ReportDownloadInstalling:(id)arg1 error:(id*)arg2;
- (long long)action_ReportDownloadProgress:(id)arg1 error:(id*)arg2;
- (long long)action_ReportInstallAwaitingReboot:(id)arg1 error:(id*)arg2;
- (long long)action_ReportInstallFailedNoUpdate:(id)arg1 error:(id*)arg2;
- (long long)action_ReportInstallFailedRollingBack:(id)arg1 error:(id*)arg2;
- (long long)action_ReportPrepared:(id)arg1 error:(id*)arg2;
- (long long)action_ReportPreparedSet:(id)arg1 error:(id*)arg2;
- (long long)action_ReportRemoveAwaitingReboot:(id)arg1 error:(id*)arg2;
- (long long)action_ReportRemoveFailedRollingBack:(id)arg1 error:(id*)arg2;
- (long long)action_ReportRemoveInstalling:(id)arg1 error:(id*)arg2;
- (long long)action_ReportRollbackAwaitingReboot:(id)arg1 error:(id*)arg2;
- (long long)action_ReportRollbackFailed:(id)arg1 error:(id*)arg2;
- (long long)action_ReportRollbackInstalling:(id)arg1 error:(id*)arg2;
- (long long)action_ReportRollbackSucceeded:(id)arg1 error:(id*)arg2;
- (long long)action_Resume:(id)arg1 error:(id*)arg2;
- (long long)action_RollbackUpdate:(id)arg1 error:(id*)arg2;
- (void)activateLoadingPersisted:(id)arg1;
- (bool)activated;
- (bool)activating;
- (id)activeScanner;
- (void)applyAttemptFailed:(id)arg1;
- (id)availableRollback;
- (void)cancelLockAssertion;
- (void)createBrainLoadLockAssertion:(id /* block */)arg1;
- (id)downloadDescriptor;
- (void)downloadUpdate:(id)arg1;
- (id)engineFSM;
- (id)engineLog;
- (id)engineName;
- (id)initWithDelegate:(id)arg1;
- (void)installUpdate:(id)arg1;
- (bool)isBrainNetworkError:(id)arg1;
- (bool)isBrainReloadError:(id)arg1;
- (bool)isManagedScan;
- (bool)isPasscodeEnabled;
- (bool)isPasscodeLocked;
- (long long)loadBrainHelper:(id)arg1;
- (unsigned long long)loadBrainRetries;
- (struct __MKBAssertion { }*)lockAssertion;
- (int)lockState;
- (id)managerDelegate;
- (void)notifyRollbackStarted:(id)arg1;
- (void)onUnlock;
- (void)pathSatisficationStatusChangedTo:(bool)arg1;
- (id)pendingManagedScanParams;
- (id)pendingPurgeParams;
- (long long)performAction:(id)arg1 onEvent:(id)arg2 inState:(id)arg3 withInfo:(id)arg4 nextState:(id)arg5 error:(id*)arg6;
- (id)policyFactory;
- (id)previousRollback;
- (void)refreshInstallTonightConfig:(id)arg1;
- (void)removeUpdateKeepingDocAssets:(bool)arg1;
- (void)resetPolicy;
- (void)rollbackAttemptFailed:(id)arg1 withError:(id)arg2;
- (id)rollbackPolicy;
- (id)rollbackUUID;
- (void)rollbackUpdateWithOptions:(id)arg1;
- (void)setActivated:(bool)arg1;
- (void)setActivating:(bool)arg1;
- (void)setActiveScanner:(id)arg1;
- (void)setDownloadDescriptor:(id)arg1;
- (void)setEngineFSM:(id)arg1;
- (void)setIsManagedScan:(bool)arg1;
- (void)setLoadBrainRetries:(unsigned long long)arg1;
- (void)setLockAssertion:(struct __MKBAssertion { }*)arg1;
- (void)setPendingManagedScanParams:(id)arg1;
- (void)setPendingPurgeParams:(id)arg1;
- (void)setPolicyFactory:(id)arg1;
- (void)setRollbackUUID:(id)arg1;
- (void)setUpdateControl:(id)arg1;
- (id)stateTable;
- (void)updateAnomaly:(id)arg1;
- (void)updateApplied;
- (void)updateAssetDownloadPreflighted;
- (void)updateAssetDownloadProgress:(id)arg1;
- (void)updateAssetDownloadStalled:(id)arg1;
- (void)updateAssetDownloaded:(id)arg1;
- (void)updateAttemptFailed:(id)arg1;
- (void)updateBrainLoadProgress:(id)arg1;
- (void)updateBrainLoadStalled:(id)arg1;
- (void)updateBrainLoaded:(id)arg1;
- (void)updateCanceled;
- (id)updateControl;
- (id)updatePolicy;
- (void)updatePrepareProgress:(id)arg1;
- (void)updatePrepared:(id)arg1;
- (void)updateRolledBack:(id)arg1;

@end
