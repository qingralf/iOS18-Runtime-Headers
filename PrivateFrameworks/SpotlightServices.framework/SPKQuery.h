/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SpotlightServices.framework/SpotlightServices
 */

@interface SPKQuery : NSObject {
    NSMutableArray * _childQueries;
    id /* block */  _clientResponseHandler;
    NSObject<SPKQueryDelegate> * _delegate;
    bool  _extensionQuery;
    NSString * _internalUnmodifiedUserQueryString;
    SPKQuery * _parentQuery;
    SPSearchQueryContext * _queryContext;
    unsigned long long  _queryGroupId;
    unsigned long long  _queryId;
    unsigned long long  _queryOptions;
    double  _queryStartTime;
    int  _queryState;
    PRSRankingItemRanker * _ranker;
    double  _startTime;
    NSString * _trimmedUserQueryString;
    NSString * _userQueryString;
    bool  _wantsSuggestions;
}

@property (getter=isApplicationQuery, readonly) bool applicationQuery;
@property (getter=isCalculatorQuery, readonly) bool calculatorQuery;
@property (readonly) NSArray *childQueries;
@property (copy) id /* block */ clientResponseHandler;
@property (getter=isCoreSpotlightQuery, readonly) bool coreSpotlightQuery;
@property (nonatomic) NSObject<SPKQueryDelegate> *delegate;
@property (getter=isDictionaryQuery, readonly) bool dictionaryQuery;
@property (getter=isDocumentQuery, readonly) bool documentQuery;
@property (getter=isExtensionQuery, readonly) bool extensionQuery;
@property (retain) NSString *internalUnmodifiedUserQueryString;
@property SPKQuery *parentQuery;
@property (getter=isParsecQuery, readonly) bool parsecQuery;
@property (readonly) SPSearchQueryContext *queryContext;
@property (readonly) unsigned long long queryGroupId;
@property (readonly) unsigned long long queryId;
@property unsigned long long queryOptions;
@property double queryStartTime;
@property int queryState;
@property (readonly) PRSRankingItemRanker *ranker;
@property (readonly) id /* block */ responseHandler;
@property (readonly) bool supportsRefinement;
@property (readonly) NSString *trimmedUserQueryString;
@property (retain) NSString *unmodifiedUserQueryString;
@property (getter=isURLQuery, readonly) bool urlQuery;
@property (readonly) NSString *userQueryString;
@property (nonatomic) bool wantsSuggestions;

+ (bool)isQuerySupported:(unsigned long long)arg1;
+ (unsigned int)searchDomain;

- (void).cxx_destruct;
- (void)_queryDidComplete;
- (void)_queryWillStart;
- (void)activate;
- (void)addChildQuery:(id)arg1;
- (void)cancel;
- (id)childQueries;
- (id /* block */)clientResponseHandler;
- (bool)completedGather;
- (void)deactivate;
- (id)delegate;
- (id)description;
- (int*)getQueryStatePtr;
- (id)initWithUserQuery:(id)arg1;
- (id)initWithUserQuery:(id)arg1 options:(unsigned long long)arg2;
- (id)initWithUserQuery:(id)arg1 queryGroupId:(unsigned long long)arg2;
- (id)initWithUserQuery:(id)arg1 queryGroupId:(unsigned long long)arg2 options:(unsigned long long)arg3 queryContext:(id)arg4;
- (id)internalUnmodifiedUserQueryString;
- (bool)isApplicationQuery;
- (bool)isCalculatorQuery;
- (bool)isCanceled;
- (bool)isCompleted;
- (bool)isCoreSpotlightQuery;
- (bool)isDictionaryQuery;
- (bool)isDocumentQuery;
- (bool)isExtensionQuery;
- (bool)isFinished;
- (bool)isParsecQuery;
- (bool)isStarted;
- (bool)isURLQuery;
- (bool)needsIO;
- (id)parentQuery;
- (void)preheat;
- (id)queryContext;
- (unsigned long long)queryGroupId;
- (unsigned long long)queryId;
- (unsigned long long)queryOptions;
- (double)queryStartTime;
- (int)queryState;
- (id)ranker;
- (id /* block */)responseHandler;
- (bool)sendEmptyResponseIfNecessary;
- (void)setClientResponseHandler:(id /* block */)arg1;
- (void)setDelegate:(id)arg1;
- (void)setInternalUnmodifiedUserQueryString:(id)arg1;
- (void)setParentQuery:(id)arg1;
- (void)setQueryOptions:(unsigned long long)arg1;
- (void)setQueryStartTime:(double)arg1;
- (void)setQueryState:(int)arg1;
- (void)setRankingQueries:(id)arg1;
- (void)setUnmodifiedUserQueryString:(id)arg1;
- (void)setWantsSuggestions:(bool)arg1;
- (bool)shouldReturnEarly;
- (void)start;
- (double)startTime;
- (bool)supportsRefinement;
- (id)trimmedUserQueryString;
- (id)unmodifiedUserQueryString;
- (id)userQueryString;
- (bool)wantsSuggestions;

@end
