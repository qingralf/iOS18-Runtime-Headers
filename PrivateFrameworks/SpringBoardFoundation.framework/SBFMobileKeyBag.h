/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation
 */

@interface SBFMobileKeyBag : NSObject {
    struct _AKSEvent { } * _aksEvent;
    NSObject<OS_dispatch_queue> * _calloutQueue;
    NSObject<OS_dispatch_queue> * _queue;
    bool  _queue_hasPasscodeSet;
    bool  _queue_hasUnlockedSinceBoot;
    NSMutableArray * _queue_observerStateChangedCallbackBlocks;
    NSHashTable * _queue_observers;
    NSMutableArray * _queue_performAfterFirstUnlockBlocks;
}

@property (nonatomic, readonly, copy) SBFMobileKeyBagState *extendedState;
@property (nonatomic, readonly) bool hasBeenUnlockedSinceBoot;
@property (nonatomic, readonly) bool hasPasscodeSet;
@property (nonatomic, readonly) bool isContinuityUnlocked;
@property (nonatomic, readonly) long long maxUnlockAttempts;
@property (nonatomic, readonly, copy) SBFMobileKeyBagState *state;

+ (id)sharedInstance;

- (void).cxx_destruct;
- (struct { unsigned int x1; int x2; unsigned long long x3; unsigned int x4; unsigned int x5; BOOL x6; BOOL x7; unsigned long long x8; unsigned long long x9; int x10; unsigned int x11; unsigned char x12[16]; })_queue_aksDeviceState;
- (void)_queue_createStashBag:(id)arg1 skipSEKeepUserDataOperation:(bool)arg2;
- (void)_queue_firstUnlockOccurred;
- (void)_queue_handleKeybagStatusChanged;
- (bool)_queue_isContinuityUnlocked;
- (id)_queue_keyBagInfo;
- (id)_queue_lockStateExtended:(bool)arg1;
- (void)_queue_setHasPasscodeIfNecessary:(id)arg1;
- (bool)_queue_verifyExpectedStashState:(long long)arg1;
- (bool)_shouldHandleKeyBagEventWithHandleState:(id)arg1;
- (void)addObserver:(id)arg1;
- (bool)beginRecovery:(id)arg1 error:(id*)arg2;
- (void)createStashBagWithOptions:(id)arg1 completion:(id /* block */)arg2;
- (void)createStashBagWithOptions:(id)arg1 completion:(id /* block */)arg2 completionQueue:(id)arg3;
- (void)dealloc;
- (id)extendedState;
- (bool)hasBeenUnlockedSinceBoot;
- (bool)hasPasscodeSet;
- (id)init;
- (bool)isContinuityUnlocked;
- (void)lockSkippingGracePeriod:(bool)arg1;
- (void)lockSkippingGracePeriod:(bool)arg1 endingContinuityUnlock:(bool)arg2;
- (long long)maxUnlockAttempts;
- (void)performAfterFirstUnlockSinceBootUsingBlock:(id /* block */)arg1;
- (void)refreshContinuityUnlockHeartbeat;
- (void)removeObserver:(id)arg1;
- (id)state;
- (bool)unlockWithOptions:(id)arg1 error:(id*)arg2;
- (bool)verifyWithOptions:(id)arg1 error:(id*)arg2;
- (void)waitForUnlockWithTimeout:(float)arg1;

@end
