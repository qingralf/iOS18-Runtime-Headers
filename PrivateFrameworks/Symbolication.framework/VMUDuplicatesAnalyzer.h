/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Symbolication.framework/Symbolication
 */

@interface VMUDuplicatesAnalyzer : VMUAnalyzerBase {
    bool  _fullStacks;
    bool  _invertCallTrees;
    unsigned long long  _minimumLabelCount;
    unsigned int  _objectContentLevel;
    bool  _quiet;
    bool  _showCallTrees;
    bool  _showRawClassNames;
    bool  _showStacks;
    bool  _stringsOnly;
}

@property (nonatomic) bool fullStacks;
@property (nonatomic) bool invertCallTrees;
@property (nonatomic) unsigned long long minimumLabelCount;
@property (nonatomic) unsigned int objectContentLevel;
@property (nonatomic) bool quiet;
@property (nonatomic) bool showCallTrees;
@property (nonatomic) bool showRawClassNames;
@property (nonatomic) bool showStacks;
@property (nonatomic) bool stringsOnly;

- (id)_analysisSummaryWithGraphOrScanner:(id)arg1;
- (id)analysisSummaryWithError:(id*)arg1;
- (const char *)analyzerName;
- (bool)findStringDupsByStack:(id)arg1 stackLogReader:(id)arg2 block:(id /* block */)arg3;
- (bool)findStringDupsByStack:(id)arg1 stackLogReader:(id)arg2 fieldBlock:(id /* block */)arg3;
- (bool)findStringDupsInGraph:(id)arg1 symbolicator:(struct _CSTypeRef { unsigned long long x1; unsigned long long x2; })arg2 stackLogReader:(id)arg3 block:(id /* block */)arg4;
- (bool)findStringDupsInGraph:(id)arg1 symbolicator:(struct _CSTypeRef { unsigned long long x1; unsigned long long x2; })arg2 stackLogReader:(id)arg3 fieldBlock:(id /* block */)arg4;
- (void)fullAnalysisWithBlock:(id /* block */)arg1;
- (bool)fullStacks;
- (bool)invertCallTrees;
- (unsigned long long)minimumLabelCount;
- (unsigned int)objectContentLevel;
- (bool)quiet;
- (void)setFullStacks:(bool)arg1;
- (void)setInvertCallTrees:(bool)arg1;
- (void)setMinimumLabelCount:(unsigned long long)arg1;
- (void)setObjectContentLevel:(unsigned int)arg1;
- (void)setQuiet:(bool)arg1;
- (void)setShowCallTrees:(bool)arg1;
- (void)setShowRawClassNames:(bool)arg1;
- (void)setShowStacks:(bool)arg1;
- (void)setStringsOnly:(bool)arg1;
- (bool)showCallTrees;
- (bool)showRawClassNames;
- (bool)showStacks;
- (bool)stringsOnly;
- (void)summaryWithGraph:(id)arg1 block:(id /* block */)arg2;

@end
