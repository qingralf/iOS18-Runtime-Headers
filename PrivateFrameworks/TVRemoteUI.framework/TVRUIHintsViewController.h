/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TVRemoteUI.framework/TVRemoteUI
 */

@interface TVRUIHintsViewController : UIViewController <TVRUIContentPresenter, TVRUIRemoteViewControllerDelegate, TVRUITipSourceViewProvider> {
    bool  _allowSiriHint;
    bool  _allowTips;
    bool  _allowVolumeHint;
    UIViewPropertyAnimator * _dismissalAnimator;
    TVRUIDeviceHardwareInfo * _hardwareInfo;
    double  _lastAnimatedTimeInterval;
    UIViewPropertyAnimator * _presentationAnimator;
    bool  _presentingTip;
    TVRUIHintsGlyphView * _siriGlyphView;
    <SBSHardwareButtonHintViewContentVisibilityControlling> * _siriHintVisibilityController;
    TVRUITipManager * _siriTipManager;
    <TVRUIHintsStyleProvider> * _styleProvider;
    bool  _supportsSiri;
    bool  _supportsVolume;
    TVRUIHintsUserIntentButtonView * _userIntentButtonHint;
    TVRUIHintsVolumeButtonsView * _volumeButtonsHint;
    TVRUIHintsGlyphView * _volumeGlyphView;
    <SBSHardwareButtonHintViewContentVisibilityControlling> * _volumeHintVisibilityController;
}

@property (nonatomic) bool allowSiriHint;
@property (nonatomic) bool allowTips;
@property (nonatomic) bool allowVolumeHint;
@property (nonatomic, readonly) bool canPresentTip;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UIViewPropertyAnimator *dismissalAnimator;
@property (nonatomic, retain) TVRUIDeviceHardwareInfo *hardwareInfo;
@property (readonly) unsigned long long hash;
@property (nonatomic) double lastAnimatedTimeInterval;
@property (nonatomic, readonly) unsigned long long permittedArrowDirections;
@property (nonatomic, retain) UIViewPropertyAnimator *presentationAnimator;
@property (getter=isPresentingTip, nonatomic) bool presentingTip;
@property (nonatomic, retain) TVRUIHintsGlyphView *siriGlyphView;
@property (nonatomic, retain) <SBSHardwareButtonHintViewContentVisibilityControlling> *siriHintVisibilityController;
@property (nonatomic, retain) TVRUITipManager *siriTipManager;
@property (nonatomic, retain) <TVRUIHintsStyleProvider> *styleProvider;
@property (readonly) Class superclass;
@property (nonatomic) bool supportsSiri;
@property (nonatomic) bool supportsVolume;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } tipSourceRect;
@property (nonatomic, readonly) bool tipSourceSupportsSiri; /* unknown property attribute: ? */
@property (nonatomic, readonly) UIView *tipSourceView;
@property (nonatomic, retain) TVRUIHintsUserIntentButtonView *userIntentButtonHint;
@property (nonatomic, retain) TVRUIHintsVolumeButtonsView *volumeButtonsHint;
@property (nonatomic, retain) TVRUIHintsGlyphView *volumeGlyphView;
@property (nonatomic, retain) <SBSHardwareButtonHintViewContentVisibilityControlling> *volumeHintVisibilityController;

- (void).cxx_destruct;
- (void)_applyTransformForOrientation:(long long)arg1;
- (bool)_canShowWhileLocked;
- (void)_cleanupHints;
- (void)_dismissHintsWithCompletion:(id /* block */)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForUserIntentButtonPresented:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForVolumeButtonsPresented:(bool)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_gylphTransformForOrientation:(long long)arg1;
- (void)_largeTextEnabledStatusChanged:(id)arg1;
- (unsigned long long)_permittedArrowDirectionsForDevice:(id)arg1;
- (void)_presentVolumeButtonPressWithPresentation:(unsigned long long)arg1;
- (void)_setupDebugUIIfEnabled;
- (void)_setupTipsControllerIfNeeded;
- (void)_setupUserIntentButtonHintWithPresentation:(unsigned long long)arg1;
- (void)_setupVolumeButtonsHintWithPresentation:(unsigned long long)arg1;
- (bool)_shouldAllowHintsToPresent;
- (void)_siriActivated:(id)arg1;
- (void)_siriDeactivated:(id)arg1;
- (bool)_siriHintEnabled;
- (void)_updateUserIntentButtonHintFrameForPresentation:(unsigned long long)arg1;
- (void)_updateVolumeButtonsHintFrameWithPresentation:(unsigned long long)arg1;
- (void)_volumeDownButtonPressed:(id)arg1;
- (bool)_volumeHintEnabled;
- (void)_volumeUpButtonPressed:(id)arg1;
- (bool)allowSiriHint;
- (bool)allowTips;
- (bool)allowVolumeHint;
- (bool)canPresentTip;
- (long long)currentInterfaceOrientation;
- (void)dealloc;
- (void)device:(id)arg1 supportsSiri:(bool)arg2 volume:(bool)arg3;
- (void)device:(id)arg1 supportsVolume:(bool)arg2;
- (void)devicePickerWillExpand;
- (void)dismissHints;
- (void)dismissPresentedContentAnimated:(bool)arg1 completion:(id /* block */)arg2;
- (id)dismissalAnimator;
- (id)hardwareInfo;
- (bool)hasPresentedContent;
- (id)init;
- (bool)isPresentingTip;
- (double)lastAnimatedTimeInterval;
- (unsigned long long)permittedArrowDirections;
- (id)presentationAnimator;
- (void)remoteWillBeDismissed;
- (void)replayHints;
- (void)requestHintsForSiri:(bool)arg1 volume:(bool)arg2;
- (void)setAllowSiriHint:(bool)arg1;
- (void)setAllowTips:(bool)arg1;
- (void)setAllowVolumeHint:(bool)arg1;
- (void)setDismissalAnimator:(id)arg1;
- (void)setHardwareInfo:(id)arg1;
- (void)setLastAnimatedTimeInterval:(double)arg1;
- (void)setPresentationAnimator:(id)arg1;
- (void)setPresentingTip:(bool)arg1;
- (void)setSiriGlyphView:(id)arg1;
- (void)setSiriHintVisibilityController:(id)arg1;
- (void)setSiriTipManager:(id)arg1;
- (void)setStyleProvider:(id)arg1;
- (void)setSupportsSiri:(bool)arg1;
- (void)setSupportsVolume:(bool)arg1;
- (void)setUserIntentButtonHint:(id)arg1;
- (void)setVolumeButtonsHint:(id)arg1;
- (void)setVolumeGlyphView:(id)arg1;
- (void)setVolumeHintVisibilityController:(id)arg1;
- (id)siriGlyphView;
- (id)siriHintVisibilityController;
- (id)siriTipManager;
- (id)styleProvider;
- (bool)supportsSiri;
- (bool)supportsVolume;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })tipSourceRect;
- (id)tipSourceView;
- (id)userIntentButtonHint;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;
- (id)volumeButtonsHint;
- (id)volumeGlyphView;
- (id)volumeHintVisibilityController;

@end
