/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities
 */

@interface TUCall : NSObject <NSSecureCoding> {
    bool  _accessoryButtonEventsEnabled;
    TUParticipant * _activeRemoteParticipant;
    NSString * _announceProviderIdentifier;
    bool  _answeringMachineAvailable;
    long long  _answeringMachineStreamToken;
    NSString * _blockedByExtension;
    long long  _bluetoothAudioFormat;
    NSString * _callDirectoryIdentityExtension;
    TUCallNotificationManager * _callNotificationManager;
    TUCallServicesInterface * _callServicesInterface;
    int  _callSubType;
    NSURL * _channelImageURL;
    id /* block */  _clarityEnabledBlock;
    double  _clientMessageReceiveTime;
    TUProxyCall * _comparativeCall;
    id /* block */  _contactsDataSourceCreationBlock;
    NSUUID * _conversationID;
    NSDate * _dateAnsweredOrDialed;
    NSDate * _dateConnected;
    NSDate * _dateCreated;
    NSDate * _dateEnded;
    NSDate * _dateScreeningEnded;
    NSDate * _dateSentInvitation;
    NSDate * _dateStartedConnecting;
    int  _disconnectedReason;
    bool  _domestic;
    NSSet * _emergencyMediaItems;
    bool  _endpointOnCurrentDevice;
    int  _faceTimeIDStatus;
    bool  _failureExpected;
    <TUFeatureFlags> * _featureFlags;
    int  _filteredOutReason;
    NSString * _hardPauseDigits;
    int  _hardPauseDigitsState;
    bool  _hasEmergencyVideoStream;
    bool  _hasUpdatedAudio;
    double  _hostCreationTime;
    double  _hostMessageSendTime;
    long long  _identificationCategory;
    bool  _identifiedSpamInCallerName;
    TUHandle * _initiator;
    bool  _international;
    bool  _isKnownCaller;
    NSString * _isoCountryCode;
    bool  _joinedFromLink;
    long long  _junkConfidence;
    long long  _liveVoicemailUnavailableReason;
    NSString * _localMemberHandleValue;
    bool  _localUserInHomeCountry;
    bool  _lockdownModeEnabled;
    id /* block */  _lowPowerModeEnabledBlock;
    bool  _mediaPlaybackOnExternalDevice;
    bool  _mixesVoiceWithMedia;
    TUCallModel * _model;
    bool  _needsConversationOrVideoRelaySupport;
    bool  _needsConversationRelaySupport;
    bool  _nondisclosedGreeting;
    int  _originatingUIType;
    bool  _prefersToPlayDuringWombat;
    long long  _priority;
    NSDictionary * _providerContext;
    long long  _providerEndedReason;
    long long  _providerErrorCode;
    long long  _provisionalHoldStatus;
    bool  _ptt;
    NSObject<OS_dispatch_queue> * _queue;
    TUCallRecordingSession * _recordingSession;
    struct CGSize { 
        double width; 
        double height; 
    }  _remoteScreenAspectRatio;
    bool  _ringtoneSuppressedRemotely;
    TUCallScreenShareAttributes * _screenShareAttributes;
    long long  _screenSharingIntention;
    unsigned long long  _screenSharingType;
    bool  _screening;
    bool  _screeningAnnouncementHasFinished;
    bool  _screeningDueToUserInteraction;
    long long  _serviceStatus;
    bool  _sharingScreen;
    bool  _shouldSuppressRingtone;
    long long  _soundRegion;
    NSString * _sourceIdentifier;
    bool  _supportsDTMFUpdates;
    bool  _supportsEmergencyFallback;
    bool  _supportsRecents;
    TUMediaTokens * _tokens;
    int  _transitionStatus;
    long long  _transmissionMode;
    int  _ttyType;
    NSString * _uniqueProxyIdentifier;
    long long  _verificationStatus;
    bool  _video;
    TUVideoCallAttributes * _videoCallAttributes;
    bool  _wantsHoldMusic;
    bool  _wasDialAssisted;
    bool  _wasPulledToCurrentDevice;
    bool  _wasScreened;
}

@property (nonatomic, readonly) int abUID;
@property (nonatomic, readonly) bool accessoryButtonEventsEnabled;
@property (nonatomic, readonly, copy) TUParticipant *activeRemoteParticipant;
@property (nonatomic, copy) NSString *announceProviderIdentifier;
@property (getter=isAnsweringMachineAvailable, nonatomic, readonly) bool answeringMachineAvailable;
@property (nonatomic) long long answeringMachineStreamToken;
@property (nonatomic, readonly, copy) NSString *audioCategory;
@property (nonatomic, readonly, copy) NSString *audioMode;
@property (nonatomic, readonly) TUCallProvider *backingProvider;
@property (getter=isBlocked, nonatomic, readonly) bool blocked;
@property (nonatomic, copy) NSString *blockedByExtension;
@property (nonatomic) long long bluetoothAudioFormat;
@property (nonatomic, readonly) TUCallCenter *callCenter;
@property (nonatomic, copy) NSString *callDirectoryIdentityExtension;
@property (nonatomic, readonly) long long callDirectoryIdentityType;
@property (nonatomic, readonly, copy) NSString *callDirectoryName;
@property (nonatomic, readonly) double callDuration;
@property (nonatomic, readonly, copy) NSString *callDurationString;
@property (nonatomic, readonly, copy) NSUUID *callGroupUUID;
@property (nonatomic, readonly, copy) NSString *callHistoryIdentifier;
@property (nonatomic, readonly) TUCallNotificationManager *callNotificationManager;
@property (nonatomic, readonly) int callRelaySupport;
@property (nonatomic) TUCallServicesInterface *callServicesInterface;
@property (nonatomic, readonly) NSDictionary *callStats;
@property (nonatomic, readonly) int callStatus;
@property (nonatomic) int callSubType;
@property (nonatomic, readonly, copy) NSString *callUUID;
@property (nonatomic, readonly, copy) NSString *callerNameFromNetwork;
@property (nonatomic, readonly) long long cameraType;
@property (nonatomic, retain) NSURL *channelImageURL;
@property (nonatomic, copy) id /* block */ clarityEnabledBlock;
@property (nonatomic) double clientMessageReceiveTime;
@property (nonatomic, readonly, copy) NSString *companyDepartment;
@property (nonatomic, readonly, copy) NSString *companyName;
@property (nonatomic, retain) TUProxyCall *comparativeCall;
@property (getter=isConferenced, nonatomic, readonly) bool conferenced;
@property (getter=isConnected, nonatomic, readonly) bool connected;
@property (getter=isConnecting, nonatomic, readonly) bool connecting;
@property (nonatomic, readonly, copy) NSString *contactIdentifier;
@property (nonatomic, readonly, copy) NSArray *contactIdentifiers;
@property (nonatomic, copy) id /* block */ contactsDataSourceCreationBlock;
@property (getter=isConversation, nonatomic, readonly) bool conversation;
@property (nonatomic, readonly) NSUUID *conversationID;
@property (nonatomic, retain) NSDate *dateAnsweredOrDialed;
@property (nonatomic, retain) NSDate *dateConnected;
@property (nonatomic, readonly) NSDate *dateCreated;
@property (nonatomic, retain) NSDate *dateEnded;
@property (nonatomic, retain) NSDate *dateScreeningEnded;
@property (nonatomic, retain) NSDate *dateSentInvitation;
@property (nonatomic, retain) NSDate *dateStartedConnecting;
@property (nonatomic, readonly, copy) NSString *destinationID;
@property (nonatomic, readonly, copy) TUDialRequest *dialRequestForRedial;
@property (nonatomic) int disconnectedReason;
@property (nonatomic, readonly) bool disconnectedReasonRequiresCallBackUI;
@property (nonatomic, readonly) bool disconnectedReasonRequiresCallFailureUI;
@property (nonatomic, readonly, copy) TUCallDisplayContext *displayContext;
@property (nonatomic, readonly, copy) NSString *displayFirstName;
@property (nonatomic, readonly, copy) NSString *displayName;
@property (nonatomic, readonly) TUCallProvider *displayProvider;
@property (getter=isDomestic, nonatomic, readonly) bool domestic;
@property (getter=isDownlinkMuted, nonatomic) bool downlinkMuted;
@property (getter=isEligibleForScreening, nonatomic, readonly) bool eligibleForScreening;
@property (getter=isEmergency, nonatomic, readonly) bool emergency;
@property (getter=isEmergencyCall, nonatomic, readonly) bool emergencyCall;
@property (nonatomic, copy) NSSet *emergencyMediaItems;
@property (nonatomic, readonly) NSString *endedErrorString;
@property (nonatomic, readonly) NSString *endedReasonString;
@property (nonatomic, readonly, copy) NSDictionary *endedReasonUserInfo;
@property (getter=isEndpointOnCurrentDevice, nonatomic) bool endpointOnCurrentDevice;
@property (nonatomic) int faceTimeIDStatus;
@property (nonatomic, readonly) long long faceTimeTransportType;
@property (getter=isFailureExpected, nonatomic) bool failureExpected;
@property (nonatomic, retain) <TUFeatureFlags> *featureFlags;
@property (nonatomic) int filteredOutReason;
@property (getter=isFromSiri, nonatomic, readonly) bool fromSiri;
@property (nonatomic, readonly) TUHandle *handle;
@property (nonatomic, readonly) NSNumber *handoffRecipientParticipant;
@property (nonatomic, copy) NSString *hardPauseDigits;
@property (nonatomic, readonly) NSString *hardPauseDigitsDisplayString;
@property (nonatomic) int hardPauseDigitsState;
@property (nonatomic, readonly) bool hasBeenRedirected;
@property (nonatomic) bool hasEmergencyVideoStream;
@property (nonatomic, readonly) bool hasSentInvitation;
@property (nonatomic) bool hasUpdatedAudio;
@property (nonatomic) double hostCreationTime;
@property (nonatomic) double hostMessageSendTime;
@property (getter=isHostedOnCurrentDevice, nonatomic, readonly) bool hostedOnCurrentDevice;
@property (nonatomic, readonly) long long identificationCategory;
@property (getter=hasIdentifiedSpamInCallerName, nonatomic, readonly) bool identifiedSpamInCallerName;
@property (nonatomic, readonly) NSURL *imageURL;
@property (getter=isIncoming, nonatomic, readonly) bool incoming;
@property (nonatomic, readonly, copy) TUHandle *initiator;
@property (nonatomic, readonly) long long inputAudioPowerSpectrumToken;
@property (getter=isInternational, nonatomic, readonly) bool international;
@property (nonatomic, readonly) bool isActive;
@property (getter=isEligibleForManualScreening, nonatomic, readonly) bool isEligibleForManualScreening;
@property (nonatomic, readonly) bool isKnownCaller;
@property (nonatomic, readonly) bool isOnHold;
@property (nonatomic, readonly) bool isReRing;
@property (nonatomic, readonly) bool isRecording;
@property (nonatomic, readonly) bool isSendingAudio;
@property (nonatomic) bool isSendingVideo;
@property (nonatomic, copy) NSString *isoCountryCode;
@property (nonatomic) bool joinedFromLink;
@property (getter=isJunk, nonatomic, readonly) bool junk;
@property (nonatomic, readonly) long long junkConfidence;
@property (nonatomic) long long liveVoicemailUnavailableReason;
@property (nonatomic, readonly) NSData *localFrequency;
@property (nonatomic, readonly, copy) NSString *localMemberHandleValue;
@property (nonatomic, readonly) float localMeterLevel;
@property (nonatomic, readonly, copy) TUSenderIdentity *localSenderIdentity;
@property (nonatomic, readonly, copy) NSUUID *localSenderIdentityAccountUUID;
@property (nonatomic, readonly, copy) NSUUID *localSenderIdentityUUID;
@property (getter=isLocalUserInHomeCountry, nonatomic, readonly) bool localUserInHomeCountry;
@property (nonatomic, readonly) NSString *localizedHandoffRecipientDeviceCategory;
@property (nonatomic, readonly, copy) NSString *localizedLabel;
@property (nonatomic, readonly) bool lockdownModeEnabled;
@property (nonatomic, copy) id /* block */ lowPowerModeEnabledBlock;
@property (nonatomic) bool mediaPlaybackOnExternalDevice;
@property (getter=isMediaStalled, nonatomic, readonly) bool mediaStalled;
@property (nonatomic) bool mixesVoiceWithMedia;
@property (nonatomic, copy) TUCallModel *model;
@property (getter=isMutuallyExclusiveCall, nonatomic, readonly) bool mutuallyExclusiveCall;
@property (nonatomic, readonly) bool needsConversationOrVideoRelaySupport;
@property (nonatomic, readonly) bool needsConversationRelaySupport;
@property (nonatomic, readonly) bool needsManualInCallSounds;
@property (getter=hasNondisclosedGreeting, nonatomic, readonly) bool nondisclosedGreeting;
@property (getter=notificationCenter, nonatomic, readonly) NSNotificationCenter *notificationCenter;
@property (nonatomic, readonly) int originatingUIType;
@property (getter=isOutgoing, nonatomic, readonly) bool outgoing;
@property (nonatomic, readonly) long long outputAudioPowerSpectrumToken;
@property (nonatomic, readonly) bool prefersExclusiveAccessToCellularNetwork;
@property (nonatomic) bool prefersToPlayDuringWombat;
@property (nonatomic) long long priority;
@property (nonatomic, readonly) TUCallProvider *provider;
@property (nonatomic, readonly) NSDictionary *providerContext;
@property (nonatomic, readonly) long long providerEndedReason;
@property (nonatomic, readonly) long long providerErrorCode;
@property (nonatomic) long long provisionalHoldStatus;
@property (getter=isPTT, nonatomic, readonly) bool ptt;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (getter=isReceivingTransmission, nonatomic, readonly) bool receivingTransmission;
@property (getter=isRecordingAllowed, nonatomic, readonly) bool recordingAllowed;
@property (nonatomic, readonly) int recordingAvailability;
@property (nonatomic, readonly) TUCallRecordingSession *recordingSession;
@property (nonatomic, readonly) NSString *reminderString;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } remoteAspectRatio;
@property (nonatomic, readonly) long long remoteCameraOrientation;
@property (nonatomic, readonly) NSData *remoteFrequency;
@property (nonatomic, readonly) float remoteMeterLevel;
@property (nonatomic, readonly, copy) NSSet *remoteParticipantHandles;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } remoteScreenAspectRatio;
@property (nonatomic, readonly) long long remoteScreenOrientation;
@property (getter=isRemoteUplinkMuted, nonatomic, readonly) bool remoteUplinkMuted;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } remoteVideoContentRect;
@property (nonatomic) bool requiresRemoteVideo;
@property (nonatomic) bool ringtoneSuppressedRemotely;
@property (getter=isRTT, nonatomic, readonly) bool rtt;
@property (getter=sa_hasFailed, nonatomic, readonly) bool sa_failed;
@property (nonatomic, readonly) TUCallScreenShareAttributes *screenShareAttributes;
@property (nonatomic, readonly) long long screenSharingIntention;
@property (nonatomic) unsigned long long screenSharingType;
@property (getter=isScreening, nonatomic) bool screening;
@property (nonatomic) bool screeningAnnouncementHasFinished;
@property (getter=isScreeningDueToUserInteraction, nonatomic) bool screeningDueToUserInteraction;
@property (getter=isSendingTransmission, nonatomic, readonly) bool sendingTransmission;
@property (nonatomic, readonly) int service;
@property (nonatomic, readonly) long long serviceStatus;
@property (getter=isSharingScreen, nonatomic) bool sharingScreen;
@property (nonatomic, readonly) bool shouldDisplayLocationIfAvailable;
@property (nonatomic, readonly) bool shouldPlayDTMFTone;
@property (nonatomic, readonly) bool shouldSuppressInCallUI;
@property (nonatomic) bool shouldSuppressRingtone;
@property (getter=isSOS, nonatomic, readonly) bool sos;
@property (nonatomic) long long soundRegion;
@property (nonatomic, copy) NSString *sourceIdentifier;
@property (nonatomic, readonly) double startTime;
@property (nonatomic, readonly) int status;
@property (nonatomic, readonly) bool statusIsProvisional;
@property (nonatomic, readonly, copy) NSString *suggestedDisplayName;
@property (nonatomic, readonly) bool supportsDTMFTones;
@property (nonatomic) bool supportsDTMFUpdates;
@property (nonatomic) bool supportsEmergencyFallback;
@property (nonatomic) bool supportsRecents;
@property (nonatomic, readonly) bool supportsScreening;
@property (nonatomic, readonly) bool supportsSimultaneousVoiceAndData;
@property (nonatomic, readonly) bool supportsTTYWithVoice;
@property (setter=tc_setUseUnderlyingRemoteUplinkMuted:, nonatomic) bool tc_useUnderlyingRemoteUplinkMuted;
@property (getter=isThirdPartyVideo, nonatomic, readonly) bool thirdPartyVideo;
@property (nonatomic, readonly, copy) TUMediaTokens *tokens;
@property (nonatomic) int transitionStatus;
@property (nonatomic, readonly) long long transmissionMode;
@property (getter=isTTY, nonatomic, readonly) bool tty;
@property (nonatomic) int ttyType;
@property (nonatomic, copy) NSString *uniqueProxyIdentifier;
@property (nonatomic, readonly, copy) NSUUID *uniqueProxyIdentifierUUID;
@property (getter=isUplinkMuted, nonatomic) bool uplinkMuted;
@property (getter=isUsingBaseband, nonatomic, readonly) bool usingBaseband;
@property (nonatomic) long long verificationStatus;
@property (getter=isVideo, nonatomic) bool video;
@property (nonatomic, retain) TUVideoCallAttributes *videoCallAttributes;
@property (getter=isVideoDegraded, nonatomic, readonly) bool videoDegraded;
@property (getter=isVideoMirrored, nonatomic, readonly) bool videoMirrored;
@property (getter=isVideoPaused, nonatomic, readonly) bool videoPaused;
@property (nonatomic, readonly) long long videoStreamToken;
@property (getter=isVoicemail, nonatomic, readonly) bool voicemail;
@property (getter=isVoIPCall, nonatomic, readonly) bool voipCall;
@property (nonatomic) bool wantsHoldMusic;
@property (nonatomic, readonly) bool wantsStagingArea;
@property (nonatomic, readonly) bool wasDeclined;
@property (nonatomic) bool wasDialAssisted;
@property (nonatomic) bool wasPulledToCurrentDevice;
@property (nonatomic) bool wasScreened;
@property (getter=isWiFiCall, nonatomic, readonly) bool wiFiCall;

// Image: /System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities

+ (id)_supplementalDialTelephonyCallStringForLocString:(id)arg1 destination:(id)arg2 isPhoneNumber:(bool)arg3 includeFaceTimeAudio:(bool)arg4;
+ (long long)acceptableJunkConfidence;
+ (id)faceTimeSupplementalDialTelephonyCallStringIncludingFTA:(bool)arg1;
+ (bool)isJunkConfidenceLevelJunk:(long long)arg1;
+ (long long)maxJunkConfidence;
+ (id)supplementalDialTelephonyCallString;
+ (id)supplementalDialTelephonyCallStringForDestination:(id)arg1 isPhoneNumber:(bool)arg2;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_handleStatusChange;
- (bool)_isEligibleForManualScreening:(bool)arg1 languageIdentifier:(id)arg2;
- (int)abUID;
- (bool)accessoryButtonEventsEnabled;
- (id)activeRemoteParticipant;
- (id)announceProviderIdentifier;
- (void)answerWithRequest:(id)arg1;
- (long long)answeringMachineStreamToken;
- (id)audioCategory;
- (id)audioMode;
- (id)backingProvider;
- (id)blockedByExtension;
- (long long)bluetoothAudioFormat;
- (id)callCenter;
- (id)callDirectoryIdentityExtension;
- (long long)callDirectoryIdentityType;
- (id)callDirectoryName;
- (double)callDuration;
- (id)callDurationString;
- (id)callGroupUUID;
- (id)callHistoryIdentifier;
- (id)callNotificationManager;
- (int)callRelaySupport;
- (id)callServicesInterface;
- (id)callStats;
- (int)callStatus;
- (int)callSubType;
- (id)callUUID;
- (id)callerNameFromNetwork;
- (long long)cameraType;
- (id)channelImageURL;
- (id /* block */)clarityEnabledBlock;
- (double)clientMessageReceiveTime;
- (id)companyDepartment;
- (id)companyName;
- (id)comparativeCall;
- (id)contactIdentifier;
- (id)contactIdentifiers;
- (id /* block */)contactsDataSourceCreationBlock;
- (id)conversationID;
- (id)dateAnsweredOrDialed;
- (id)dateConnected;
- (id)dateCreated;
- (id)dateEnded;
- (id)dateScreeningEnded;
- (id)dateSentInvitation;
- (id)dateStartedConnecting;
- (void)dealloc;
- (id)description;
- (id)destinationID;
- (id)dialRequestForRedial;
- (void)disconnectWithReason:(int)arg1;
- (int)disconnectedReason;
- (id)displayContext;
- (id)displayFirstName;
- (id)displayName;
- (id)displayProvider;
- (id)emergencyMediaItems;
- (void)encodeWithCoder:(id)arg1;
- (id)endedErrorString;
- (id)endedReasonString;
- (id)endedReasonUserInfo;
- (id)errorAlertMessage;
- (id)errorAlertTitle;
- (int)faceTimeIDStatus;
- (long long)faceTimeTransportType;
- (id)featureFlags;
- (int)filteredOutReason;
- (void)groupWithOtherCall:(id)arg1;
- (id)handle;
- (id)handoffRecipientParticipant;
- (id)hardPauseDigits;
- (id)hardPauseDigitsDisplayString;
- (int)hardPauseDigitsState;
- (bool)hasBeenRedirected;
- (bool)hasEmergencyVideoStream;
- (bool)hasIdentifiedSpamInCallerName;
- (bool)hasNondisclosedGreeting;
- (bool)hasRelaySupport:(int)arg1;
- (bool)hasSentInvitation;
- (bool)hasUpdatedAudio;
- (unsigned long long)hash;
- (void)hold;
- (double)hostCreationTime;
- (double)hostMessageSendTime;
- (long long)identificationCategory;
- (id)imageURL;
- (id)init;
- (id)initWithCall:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithNotificationCenter:(id)arg1;
- (id)initWithUniqueProxyIdentifier:(id)arg1;
- (id)initWithUniqueProxyIdentifier:(id)arg1 endpointOnCurrentDevice:(bool)arg2;
- (id)initWithUniqueProxyIdentifier:(id)arg1 endpointOnCurrentDevice:(bool)arg2 notificationCenter:(id)arg3;
- (id)initiator;
- (long long)inputAudioPowerSpectrumToken;
- (bool)isActive;
- (bool)isAnsweringMachineAvailable;
- (bool)isBlocked;
- (bool)isConferenced;
- (bool)isConnected;
- (bool)isConnecting;
- (bool)isConversation;
- (bool)isDialRequestVideoUpgrade:(id)arg1;
- (bool)isDomestic;
- (bool)isDownlinkMuted;
- (bool)isEligibleForManualScreening;
- (bool)isEligibleForManualScreening:(id)arg1;
- (bool)isEligibleForScreening;
- (bool)isEligibleForScreening:(id)arg1;
- (bool)isEmergency;
- (bool)isEmergencyCall;
- (bool)isEndpointOnCurrentDevice;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToCall:(id)arg1;
- (bool)isFailureExpected;
- (bool)isFromSiri;
- (bool)isHostedOnCurrentDevice;
- (bool)isIncoming;
- (bool)isInternational;
- (bool)isJunk;
- (bool)isKnownCaller;
- (bool)isLocalUserInHomeCountry;
- (bool)isMediaStalled;
- (bool)isMuted;
- (bool)isMutuallyExclusiveCall;
- (bool)isOnHold;
- (bool)isOutgoing;
- (bool)isPTT;
- (bool)isRTT;
- (bool)isReRing;
- (bool)isReceivingTransmission;
- (bool)isRecording;
- (bool)isRecordingAllowed;
- (bool)isRemoteUplinkMuted;
- (bool)isSOS;
- (bool)isScreening;
- (bool)isScreeningDueToUserInteraction;
- (bool)isSendingAudio;
- (bool)isSendingTransmission;
- (bool)isSendingVideo;
- (bool)isSharingScreen;
- (bool)isTTY;
- (bool)isThirdPartyVideo;
- (bool)isUplinkMuted;
- (bool)isUsingBaseband;
- (bool)isVideo;
- (bool)isVideoDegraded;
- (bool)isVideoMirrored;
- (bool)isVideoPaused;
- (bool)isVideoUpgradeFromCall:(id)arg1;
- (bool)isVoIPCall;
- (bool)isVoicemail;
- (bool)isWiFiCall;
- (id)isoCountryCode;
- (bool)joinedFromLink;
- (long long)junkConfidence;
- (long long)liveVoicemailUnavailableReason;
- (struct CGSize { double x1; double x2; })localAspectRatioForOrientation:(long long)arg1;
- (id)localFrequency;
- (id)localMemberHandleValue;
- (float)localMeterLevel;
- (id)localSenderIdentity;
- (id)localSenderIdentityAccountUUID;
- (id)localSenderIdentityUUID;
- (id)localizedHandoffRecipientDeviceCategory;
- (id)localizedLabel;
- (bool)lockdownModeEnabled;
- (id /* block */)lowPowerModeEnabledBlock;
- (bool)mediaPlaybackOnExternalDevice;
- (bool)mixesVoiceWithMedia;
- (id)model;
- (bool)needsConversationOrVideoRelaySupport;
- (bool)needsConversationRelaySupport;
- (bool)needsManualInCallSounds;
- (id)notificationCenter;
- (int)originatingUIType;
- (long long)outputAudioPowerSpectrumToken;
- (void)playDTMFToneForKey:(unsigned char)arg1;
- (bool)prefersExclusiveAccessToCellularNetwork;
- (bool)prefersToPlayDuringWombat;
- (long long)priority;
- (id)provider;
- (id)providerContext;
- (long long)providerEndedReason;
- (long long)providerErrorCode;
- (long long)provisionalHoldStatus;
- (id)queue;
- (int)recordingAvailability;
- (id)recordingSession;
- (id)reminderString;
- (struct CGSize { double x1; double x2; })remoteAspectRatio;
- (long long)remoteCameraOrientation;
- (id)remoteFrequency;
- (float)remoteMeterLevel;
- (id)remoteParticipantHandles;
- (struct CGSize { double x1; double x2; })remoteScreenAspectRatio;
- (long long)remoteScreenOrientation;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })remoteVideoContentRect;
- (bool)requiresRemoteVideo;
- (void)resetProvisionalState;
- (void)resetWantsHoldMusic;
- (bool)ringtoneSuppressedRemotely;
- (id)screenShareAttributes;
- (long long)screenSharingIntention;
- (unsigned long long)screenSharingType;
- (bool)screeningAnnouncementHasFinished;
- (void)sendHardPauseDigits;
- (int)service;
- (id)serviceDisplayString;
- (long long)serviceStatus;
- (void)setAnnounceProviderIdentifier:(id)arg1;
- (void)setAnsweringMachineStreamToken:(long long)arg1;
- (void)setBlockedByExtension:(id)arg1;
- (void)setBluetoothAudioFormat:(long long)arg1;
- (void)setCallDirectoryIdentityExtension:(id)arg1;
- (void)setCallServicesInterface:(id)arg1;
- (void)setCallSubType:(int)arg1;
- (void)setChannelImageURL:(id)arg1;
- (void)setClarityEnabledBlock:(id /* block */)arg1;
- (void)setClientMessageReceiveTime:(double)arg1;
- (void)setComparativeCall:(id)arg1;
- (void)setContactsDataSourceCreationBlock:(id /* block */)arg1;
- (void)setDateAnsweredOrDialed:(id)arg1;
- (void)setDateConnected:(id)arg1;
- (void)setDateEnded:(id)arg1;
- (void)setDateScreeningEnded:(id)arg1;
- (void)setDateSentInvitation:(id)arg1;
- (void)setDateStartedConnecting:(id)arg1;
- (void)setDisconnectedReason:(int)arg1;
- (void)setDownlinkMuted:(bool)arg1;
- (void)setEmergencyMediaItems:(id)arg1;
- (void)setEndpointOnCurrentDevice:(bool)arg1;
- (void)setFaceTimeIDStatus:(int)arg1;
- (void)setFailureExpected:(bool)arg1;
- (void)setFeatureFlags:(id)arg1;
- (void)setFilteredOutReason:(int)arg1;
- (void)setHardPauseDigits:(id)arg1;
- (void)setHardPauseDigitsState:(int)arg1;
- (void)setHasEmergencyVideoStream:(bool)arg1;
- (void)setHasUpdatedAudio:(bool)arg1;
- (void)setHostCreationTime:(double)arg1;
- (void)setHostMessageSendTime:(double)arg1;
- (void)setIsOnHold:(bool)arg1;
- (void)setIsSendingVideo:(bool)arg1;
- (void)setIsoCountryCode:(id)arg1;
- (void)setJoinedFromLink:(bool)arg1;
- (void)setLiveVoicemailUnavailableReason:(long long)arg1;
- (void)setLocalVideoLayer:(id)arg1 forMode:(long long)arg2;
- (void)setLowPowerModeEnabledBlock:(id /* block */)arg1;
- (void)setMediaPlaybackOnExternalDevice:(bool)arg1;
- (void)setMixesVoiceWithMedia:(bool)arg1;
- (void)setModel:(id)arg1;
- (bool)setMuted:(bool)arg1;
- (void)setPrefersToPlayDuringWombat:(bool)arg1;
- (void)setPriority:(long long)arg1;
- (void)setProvisionalHoldStatus:(long long)arg1;
- (void)setQueue:(id)arg1;
- (void)setRemoteVideoLayer:(id)arg1 forMode:(long long)arg2;
- (void)setRemoteVideoPresentationSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setRemoteVideoPresentationState:(int)arg1;
- (void)setRequiresRemoteVideo:(bool)arg1;
- (void)setRingtoneSuppressedRemotely:(bool)arg1;
- (void)setScreenShareAttributes:(id)arg1;
- (void)setScreenSharingType:(unsigned long long)arg1;
- (void)setScreening:(bool)arg1;
- (void)setScreeningAnnouncementHasFinished:(bool)arg1;
- (void)setScreeningDueToUserInteraction:(bool)arg1;
- (void)setSharingScreen:(bool)arg1;
- (void)setSharingScreen:(bool)arg1 attributes:(id)arg2;
- (void)setShouldSuppressRingtone:(bool)arg1;
- (void)setSoundRegion:(long long)arg1;
- (void)setSourceIdentifier:(id)arg1;
- (void)setSupportsDTMFUpdates:(bool)arg1;
- (void)setSupportsEmergencyFallback:(bool)arg1;
- (void)setSupportsRecents:(bool)arg1;
- (void)setTransitionStatus:(int)arg1;
- (void)setTtyType:(int)arg1;
- (void)setUniqueProxyIdentifier:(id)arg1;
- (void)setUplinkMuted:(bool)arg1;
- (void)setVerificationStatus:(long long)arg1;
- (void)setVideo:(bool)arg1;
- (void)setVideoCallAttributes:(id)arg1;
- (void)setWantsHoldMusic:(bool)arg1;
- (void)setWasDialAssisted:(bool)arg1;
- (void)setWasPulledToCurrentDevice:(bool)arg1;
- (void)setWasScreened:(bool)arg1;
- (bool)shouldDisplayLocationIfAvailable;
- (bool)shouldPlayDTMFTone;
- (bool)shouldSuppressInCallUI;
- (bool)shouldSuppressRingtone;
- (long long)soundRegion;
- (id)sourceIdentifier;
- (double)startTime;
- (int)status;
- (bool)statusIsProvisional;
- (id)suggestedDisplayName;
- (id)supplementalInCallString;
- (bool)supportsDTMFTones;
- (bool)supportsDTMFUpdates;
- (bool)supportsEmergencyFallback;
- (bool)supportsRecents;
- (bool)supportsScreening;
- (bool)supportsSimultaneousVoiceAndData;
- (bool)supportsTTYWithVoice;
- (void)suppressRingtone;
- (void)suppressRingtoneDueToRemoteSuppression;
- (id)tokens;
- (int)transitionStatus;
- (long long)transmissionMode;
- (int)ttyType;
- (void)ungroup;
- (void)unhold;
- (id)uniqueProxyIdentifier;
- (id)uniqueProxyIdentifierUUID;
- (void)updateComparativeCall;
- (void)updateWithCall:(id)arg1;
- (long long)verificationStatus;
- (id)videoCallAttributes;
- (long long)videoStreamToken;
- (bool)wantsHoldMusic;
- (bool)wantsStagingArea;
- (bool)wasDeclined;
- (bool)wasDialAssisted;
- (bool)wasPulledToCurrentDevice;
- (bool)wasScreened;

// Image: /System/Library/Frameworks/SafetyKit.framework/SafetyKit

- (bool)sa_hasFailed;

// Image: /System/Library/PrivateFrameworks/ConversationKit.framework/ConversationKit

- (bool)canDisplayAlertUI:(bool)arg1;
- (bool)canDisplayRedirectingUI;
- (id)channelDisplayName;
- (bool)disconnectedReasonRequiresCallBackUI;
- (bool)disconnectedReasonRequiresCallFailureUI;

// Image: /System/Library/PrivateFrameworks/TinCanShared.framework/TinCanShared

- (void)tc_setUseUnderlyingRemoteUplinkMuted:(bool)arg1;
- (bool)tc_useUnderlyingRemoteUplinkMuted;

@end
