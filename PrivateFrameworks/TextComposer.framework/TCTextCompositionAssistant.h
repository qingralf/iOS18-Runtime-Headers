/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TextComposer.framework/TextComposer
 */

@interface TCTextCompositionAssistant : NSObject {
    struct _LXLexicon { } * _activeLexicon;
    TCTextCompositionSmartRepliesCache * _cache;
    _TtC12TextComposer40TCTextCompositionCalendarEventGeneration * _calendarEventGeneration;
    NLTagger * _tagger;
}

+ (bool)_canHandleAttributedString:(id)arg1 proposedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 accumulateTokenCount:(unsigned long long)arg3 lookBack:(bool)arg4 tagger:(id)arg5 actualRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg6 contextRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg7 error:(id*)arg8;
+ (unsigned long long)_estimatedTokenCountForString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 tagger:(id)arg3;
+ (id)_loadDetailedIssueTypes;
+ (unsigned long long)_maximumTokenCountForRewritingType:(id)arg1;
+ (id)calendarEventFromModelOutput:(id)arg1 input:(id)arg2;
+ (int)checkString:(id)arg1 forLanguagesInSet:(id)arg2 numTopLanguagesToCheck:(long long)arg3;
+ (unsigned long long)composedCharacterCount:(id)arg1;
+ (id)detailedIssueTypes;
+ (bool)disableRecognizer;
+ (unsigned long long)editDistanceBetweenStrings:(id)arg1 string2:(id)arg2;
+ (id)expectedCharacterContent:(id)arg1;
+ (id)extendedModelIdentifier;
+ (struct _NSRange { unsigned long long x1; unsigned long long x2; })findMisspelledWordInString:(id)arg1 preferredLanguage:(id)arg2;
+ (bool)isInputOutputExactMatch:(id)arg1 output:(id)arg2 threshold:(float)arg3 stopWords:(id)arg4 exemptionRegexStringList:(id)arg5 alwaysAllowOneMistake:(bool)arg6;
+ (bool)isInputOutputFuzzyMatch:(id)arg1 output:(id)arg2 threshold:(float)arg3 stopWords:(id)arg4 exemptionRegexStringList:(id)arg5 alwaysAllowOneMistake:(bool)arg6;
+ (bool)isStringInSupportedLanguage:(id)arg1 contextRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 numTopLanguagesToCheck:(long long)arg3 allowAllCaps:(bool)arg4 tagger:(id)arg5;
+ (bool)isStringInSupportedLanguage:(id)arg1 numTopLanguagesToCheck:(long long)arg2 allowAllCaps:(bool)arg3;
+ (void)lookupTokens:(id)arg1 preferredLanguage:(id)arg2 options:(unsigned long long)arg3 entryEnumerator:(id /* block */)arg4;
+ (id)modelRunner;
+ (id)normalizedOnlyLettersComponentsForString:(id)arg1;
+ (bool)rewritingTypeUsesSingleChunk:(id)arg1;
+ (id)richSmartReplyGen;
+ (id)sharedAssistant;
+ (id)sharedChecker;
+ (id)supportedLanguages;
+ (id)tokenByNormalizingString:(id)arg1;
+ (id)tokenByRemovingLeadingPunctuation:(id)arg1 acceptableLeadingPunctuationMarks:(id)arg2;
+ (id)tokenByRemovingTrailingPunctuation:(id)arg1 acceptableTrailingPunctuationMarks:(id)arg2;
+ (id)userPreferredLanguageWithOptions:(id)arg1;

- (void).cxx_destruct;
- (bool)_additionalPunctuationChangeDescribeDetailForTokenDifferenceManager:(id)arg1 difference:(id)arg2 tagger:(id)arg3 preferredLanguage:(id)arg4 detail:(id)arg5;
- (bool)_additionalPunctuationDeletionDescribeDetailForTokenDifferenceManager:(id)arg1 difference:(id)arg2 tagger:(id)arg3 preferredLanguage:(id)arg4 detail:(id)arg5;
- (bool)_additionalPunctuationInsertionDescribeDetailForTokenDifferenceManager:(id)arg1 difference:(id)arg2 tagger:(id)arg3 preferredLanguage:(id)arg4 detail:(id)arg5;
- (bool)_apostropheDescribeDetailForTokenDifferenceManager:(id)arg1 difference:(id)arg2 tagger:(id)arg3 preferredLanguage:(id)arg4 detail:(id)arg5;
- (id)_cancellationQueue;
- (struct __CFSet { }*)_cancellationSet;
- (bool)_capitalizationDescribeDetailForTokenDifferenceManager:(id)arg1 difference:(id)arg2 tagger:(id)arg3 preferredLanguage:(id)arg4 detail:(id)arg5;
- (void)_defaultDescribeDetailForTokenDifferenceManager:(id)arg1 difference:(id)arg2 tagger:(id)arg3 preferredLanguage:(id)arg4 detail:(id)arg5;
- (bool)_eligibleForSmartRepliesWith:(id)arg1 inputContextHistory:(id)arg2 documentType:(id)arg3 outError:(id*)arg4;
- (id)_fullPromptForShortFormRepliesMessages:(id)arg1 inputContextHistory:(id)arg2 outNormalizedNamesToNames:(id)arg3 options:(id)arg4 outError:(id*)arg5;
- (bool)_furtherWordInsertionDescribeDetailForTokenDifferenceManager:(id)arg1 difference:(id)arg2 tagger:(id)arg3 preferredLanguage:(id)arg4 detail:(id)arg5;
- (bool)_homophoneDescribeDetailForTokenDifferenceManager:(id)arg1 difference:(id)arg2 tagger:(id)arg3 preferredLanguage:(id)arg4 detail:(id)arg5;
- (bool)_hyphenationDescribeDetailForTokenDifferenceManager:(id)arg1 difference:(id)arg2 tagger:(id)arg3 preferredLanguage:(id)arg4 detail:(id)arg5;
- (bool)_lexicalClassDescribeDetailForTokenDifferenceManager:(id)arg1 difference:(id)arg2 tagger:(id)arg3 preferredLanguage:(id)arg4 detail:(id)arg5;
- (bool)_partialReplacementDescribeDetailForTokenDifferenceManager:(id)arg1 difference:(id)arg2 tagger:(id)arg3 preferredLanguage:(id)arg4 detail:(id)arg5;
- (bool)_phraseDeletionDescribeDetailForTokenDifferenceManager:(id)arg1 difference:(id)arg2 tagger:(id)arg3 preferredLanguage:(id)arg4 detail:(id)arg5;
- (bool)_phraseInsertionDescribeDetailForTokenDifferenceManager:(id)arg1 difference:(id)arg2 tagger:(id)arg3 preferredLanguage:(id)arg4 detail:(id)arg5;
- (id)_previousContextHistoryFor:(id)arg1 replyToMessageID:(id)arg2;
- (id)_shortFormRepliesForMailFrom:(id)arg1 inputPreferences:(id)arg2 options:(id)arg3;
- (id)_shortFormRepliesForMessagesFrom:(id)arg1 normalizedNamesToNames:(id)arg2 inputContextHistory:(id)arg3 inputPreferences:(id)arg4 options:(id)arg5;
- (bool)_spellingDescribeDetailForTokenDifferenceManager:(id)arg1 difference:(id)arg2 tagger:(id)arg3 preferredLanguage:(id)arg4 detail:(id)arg5;
- (id)_stringFromString:(id)arg1 byApplyingResults:(id)arg2;
- (id)_stripEmailSignatures:(id)arg1;
- (bool)_trailingPunctuationChangeDescribeDetailForTokenDifferenceManager:(id)arg1 difference:(id)arg2 tagger:(id)arg3 preferredLanguage:(id)arg4 detail:(id)arg5;
- (bool)_transpositionDescribeDetailForTokenDifferenceManager:(id)arg1 difference:(id)arg2 tagger:(id)arg3 preferredLanguage:(id)arg4 detail:(id)arg5;
- (bool)_wordDeletionDescribeDetailForTokenDifferenceManager:(id)arg1 difference:(id)arg2 tagger:(id)arg3 preferredLanguage:(id)arg4 detail:(id)arg5;
- (bool)_wordInsertionDescribeDetailForTokenDifferenceManager:(id)arg1 difference:(id)arg2 tagger:(id)arg3 preferredLanguage:(id)arg4 detail:(id)arg5;
- (void)addDetail:(id)arg1 sentenceRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 toDictionary:(id)arg3;
- (bool)addGrammarCheckingDetailsForRewrittenString:(id)arg1 originalString:(id)arg2 originalAttributedString:(id)arg3 originalSentenceRanges:(id)arg4 tagger:(id)arg5 writingOptions:(id)arg6 toDictionary:(id)arg7;
- (bool)addGrammarCheckingDetailsForRewrittenString:(id)arg1 sentenceRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 originalString:(id)arg3 originalAttributedString:(id)arg4 sentenceRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg5 tagger:(id)arg6 writingOptions:(id)arg7 toDictionary:(id)arg8;
- (id)addOrRemovePeriod:(id)arg1 endRepliesInPeriod:(bool)arg2;
- (bool)areGroupMessagesAllowed:(id)arg1;
- (void)buildNormalizationDictionary:(id)arg1 outNormalizedNamesToNames:(id)arg2 outNamesToNormalizedNames:(id)arg3 outSenderIDtoNormalizedNames:(id)arg4;
- (bool)canHandleAttributedString:(id)arg1 proposedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 actualRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3 contextRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg4 error:(id*)arg5;
- (bool)canHandleAttributedString:(id)arg1 proposedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 actualRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3 error:(id*)arg4;
- (bool)canHandleAttributedString:(id)arg1 proposedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 rewritingType:(id)arg3 options:(id)arg4 actualRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg5 contextRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg6 error:(id*)arg7;
- (bool)canHandleAttributedString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (bool)canHandleAttributedString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 error:(id*)arg3;
- (id)cancellationErrorForToken:(unsigned long long)arg1;
- (id)cancellationErrorIfCancellationRequestedForToken:(unsigned long long)arg1;
- (bool)cancellationRequestedForToken:(unsigned long long)arg1;
- (int)categorizeClassificationResult:(id)arg1 additionalInfo:(id*)arg2;
- (bool)checkLexiconForString:(id)arg1 locale:(id)arg2;
- (id)classificationPromptForRewritingType:(id)arg1 instructions:(id)arg2 options:(id)arg3 needsAdditionalLanguageIdentification:(bool)arg4 error:(id*)arg5;
- (id)cleanedInput:(id)arg1;
- (id)cleanedInputForInput:(id)arg1;
- (id)cleanedOutputForOutput:(id)arg1;
- (id)cleanedStringForString:(id)arg1 results:(id)arg2;
- (void)dealloc;
- (id)detailDictionaryForTokenDifferenceManager:(id)arg1 difference:(id)arg2 originalAttributedString:(id)arg3 sentenceRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 tagger:(id)arg5 writingOptions:(id)arg6;
- (bool)disableMailSRFiltering;
- (id)disallowedStrings:(id)arg1 outputString:(id)arg2;
- (id)disallowedStringsWithUserPayload:(id)arg1 outputString:(id)arg2;
- (bool)enableAllGroupMessageReplies;
- (bool)endRepliesInPeriod:(id)arg1 sortedMessageEntries:(id)arg2;
- (id)extendedPromptForRewritingType:(id)arg1 string:(id)arg2 instructions:(id)arg3 options:(id)arg4 error:(id*)arg5;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })findMisspelledWordInString:(id)arg1 preferredLanguage:(id)arg2;
- (bool)foundAllowedAttributionInString:(id)arg1;
- (bool)foundAttributionInString:(id)arg1 usingGazetteer:(id)arg2;
- (bool)foundBlockedAttributionInString:(id)arg1;
- (bool)foundTag:(id)arg1 inString:(id)arg2 withTagger:(id)arg3 usingOptions:(unsigned long long)arg4;
- (id)fullPromptForExplanationOfReplacingString:(id)arg1 withString:(id)arg2 forDocument:(id)arg3 options:(id)arg4;
- (id)fullPromptForGeneratingUserQuestionnaire:(id)arg1 forDocument:(id)arg2 replyType:(id)arg3 options:(id)arg4 outError:(id*)arg5;
- (id)fullPromptForLongFormReplies:(id)arg1 forDocument:(id)arg2 replyType:(id)arg3 baseResponse:(id)arg4 userFilledQuestionnaire:(id)arg5 options:(id)arg6 outError:(id*)arg7;
- (id)fullPromptForLongFormReplies:(id)arg1 forDocument:(id)arg2 replyType:(id)arg3 options:(id)arg4 outError:(id*)arg5;
- (id)fullPromptForLongFormReplies:(id)arg1 forDocument:(id)arg2 replyType:(id)arg3 userFilledQuestionnaire:(id)arg4 options:(id)arg5 outError:(id*)arg6;
- (id)fullPromptForReviewOfDocument:(id)arg1 options:(id)arg2;
- (id)fullPromptForRewritingType:(id)arg1 options:(id)arg2 forDocument:(id)arg3 leadingContext:(id)arg4 outError:(id*)arg5;
- (id)fullPromptForShortFormReplies:(id)arg1 forDocument:(id)arg2 replyToMessageID:(id)arg3 outNormalizedNamesToNames:(id)arg4 options:(id)arg5 outError:(id*)arg6;
- (bool)generateCandBarEmojis;
- (bool)hasExclamationUsageInRecentContextHistory:(id)arg1;
- (bool)includeUsernameMailPrompt;
- (id)init;
- (id)inputArrayForAttributedString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 options:(id)arg3 error:(id*)arg4;
- (id)inputArrayForAttributedString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 rewritingType:(id)arg3 options:(id)arg4 error:(id*)arg5;
- (id)inputByNormalizingParagraphBoundariesForInput:(id)arg1;
- (id)inputByNormalizingParagraphBoundariesForInput:(id)arg1 collapseRepeatedLineBreaks:(bool)arg2;
- (id)inputByReplacingEmojiForInput:(id)arg1;
- (bool)isEligibleForSmartRepliesQuestionnaire:(id)arg1;
- (bool)isEligibleForSmartRepliesWith:(id)arg1 replyToMessageID:(id)arg2 documentType:(id)arg3 isPrecomputationRequest:(bool)arg4 outError:(id*)arg5;
- (bool)isEligibleMessageSRs:(id)arg1;
- (bool)isFirstWordAlphabetical:(id)arg1 tagger:(id)arg2 inputPreferences:(id)arg3;
- (bool)isFirstWordTitleCase:(id)arg1 tagger:(id)arg2 inputPreferences:(id)arg3;
- (bool)isInlineReplyToPreviousMessage:(id)arg1 lastMessage:(id)arg2;
- (bool)isMessageFromUser:(id)arg1 inputContextHistory:(id)arg2;
- (bool)isUserARecipient:(id)arg1 lastMessage:(id)arg2;
- (bool)isWordTitleCase:(id)arg1;
- (id)longFormRepliesFromModelOutput:(id)arg1 documentType:(id)arg2 inputPreferences:(id)arg3 options:(id)arg4;
- (id)mailSnippetFromCleanedString:(id)arg1;
- (id)matchExclamationUsage:(id)arg1 hasRecentExclamationUsage:(bool)arg2;
- (id)matchStartingCapitalization:(id)arg1 userTitleCasesTexts:(bool)arg2 inputPreferences:(id)arg3;
- (id)mutableOptionsForOptions:(id)arg1;
- (id)nWordsInString:(id)arg1;
- (unsigned long long)nextToken;
- (unsigned long long)nonWhitespaceIndexInString:(id)arg1;
- (id)normalizedMessage:(id)arg1 namesToNormalizedNames:(id)arg2;
- (id)recentMessages:(id)arg1 documentType:(id)arg2;
- (id)regionalVersionOfString:(id)arg1 tagger:(id)arg2 preferredLanguage:(id)arg3;
- (void)releaseCheckerMemory;
- (id)replaceNormalizedNames:(id)arg1 normalizedNamesToNames:(id)arg2;
- (id)replacedVersionOfString:(id)arg1 replacementDictionary:(id)arg2;
- (id)replyTypesFromOutputString:(id)arg1;
- (void)requestAdditionalDescriptionForGrammarDetail:(id)arg1 fromResult:(id)arg2 inAttributedString:(id)arg3 options:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)requestBasicLongFormRepliesAndQuestionnaireWithContextHistory:(id)arg1 documentType:(id)arg2 replyType:(id)arg3 options:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)requestCalendarEventFromOCRInput:(id)arg1 inputOptions:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)requestCalendarEventFromOCRInputDictionary:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)requestCancellationForToken:(unsigned long long)arg1;
- (void)requestCancellationForToken:(unsigned long long)arg1 cancelModelInvocations:(bool)arg2;
- (void)requestClassificationOfInstructionsForInput:(id)arg1 rewritingType:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)requestEmojiRepliesForMessage:(id)arg1 messageText:(id)arg2 options:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)requestEmojiRepliesWithContextHistory:(id)arg1 documentType:(id)arg2 replyToMessageID:(id)arg3 options:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)requestEmojiRepliesWithContextHistory:(id)arg1 documentType:(id)arg2 tapbackMessageGUIDs:(id)arg3 options:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)requestLongFormRepliesWithContextHistory:(id)arg1 documentType:(id)arg2 replyType:(id)arg3 baseResponse:(id)arg4 userFilledQuestionnaire:(id)arg5 options:(id)arg6 completionHandler:(id /* block */)arg7;
- (void)requestLongFormRepliesWithContextHistory:(id)arg1 documentType:(id)arg2 replyType:(id)arg3 options:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)requestLongFormRepliesWithContextHistory:(id)arg1 documentType:(id)arg2 replyType:(id)arg3 userFilledQuestionnaire:(id)arg4 options:(id)arg5 completionHandler:(id /* block */)arg6;
- (void)requestModelInvocationToGenerateUserQuestionnaire:(id)arg1 forString:(id)arg2 documentType:(id)arg3 replyType:(id)arg4 token:(unsigned long long)arg5 pid:(unsigned long long)arg6 requestIdentifier:(id)arg7 completionHandler:(id /* block */)arg8;
- (void)requestModelInvocationToGenerateUserQuestionnaireStubbed:(id)arg1 documentType:(id)arg2 replyType:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)requestModelInvocationWithPrompt:(id)arg1 forString:(id)arg2 documentType:(id)arg3 normalizedNamesToNames:(id)arg4 inputContextHistory:(id)arg5 token:(unsigned long long)arg6 isPrecomputeRequest:(bool)arg7 pid:(unsigned long long)arg8 requestIdentifier:(id)arg9 inputPreferences:(id)arg10 completionHandler:(id /* block */)arg11;
- (void)requestModelInvocationWithPrompt:(id)arg1 forString:(id)arg2 documentType:(id)arg3 replyType:(id)arg4 token:(unsigned long long)arg5 pid:(unsigned long long)arg6 requestIdentifier:(id)arg7 inputPreferences:(id)arg8 completionHandler:(id /* block */)arg9;
- (void)requestModelInvocationWithPrompt:(id)arg1 forString:(id)arg2 documentType:(id)arg3 replyType:(id)arg4 userFilledQuestionnaire:(id)arg5 token:(unsigned long long)arg6 pid:(unsigned long long)arg7 requestIdentifier:(id)arg8 inputPreferences:(id)arg9 completionHandler:(id /* block */)arg10;
- (void)requestModelInvocationWithPrompt:(id)arg1 forString:(id)arg2 rewritingType:(id)arg3 instructions:(id)arg4 userDescription:(id)arg5 token:(unsigned long long)arg6 seed:(unsigned long long)arg7 draftSteps:(unsigned long long)arg8 pid:(unsigned long long)arg9 appPid:(unsigned long long)arg10 requestIdentifier:(id)arg11 completionHandler:(id /* block */)arg12;
- (void)requestModelInvocationWithPrompt:(id)arg1 input:(id)arg2 token:(unsigned long long)arg3 pid:(unsigned long long)arg4 requestIdentifier:(id)arg5 completionHandler:(id /* block */)arg6;
- (void)requestModelInvocationWithPromptStubbed:(id)arg1 documentType:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)requestModelInvocationWithPromptStubbed:(id)arg1 documentType:(id)arg2 replyType:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)requestModelInvocationWithPromptStubbed:(id)arg1 documentType:(id)arg2 replyType:(id)arg3 userFilledQuestionnaire:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)requestOpenEndedRewritingOfInput:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)requestPrewarmingForFeature:(id)arg1 options:(id)arg2;
- (void)requestPrewarmingForInput:(id)arg1 rewritingTypes:(id)arg2;
- (void)requestPrewarmingForRewritingTypes:(id)arg1;
- (void)requestPrewarmingForSmartReplies:(id)arg1;
- (void)requestPrewarmingForSmartReplies:(id)arg1 options:(id)arg2;
- (void)requestProofreadingRewritingOfInput:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)requestReviewOfAttributedString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 options:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)requestReviewOfInput:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)requestReviewOutputForInput:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)requestRewritingOfAttributedString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 rewritingType:(id)arg3 options:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)requestRewritingOfInput:(id)arg1 rewritingType:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)requestShortFormRepliesWithContextHistory:(id)arg1 documentType:(id)arg2 options:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)requestShortFormRepliesWithContextHistory:(id)arg1 replyToMessageID:(id)arg2 documentType:(id)arg3 options:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)requestUserQuestionnaireWithContextHistory:(id)arg1 documentType:(id)arg2 replyType:(id)arg3 baseResponse:(id)arg4 options:(id)arg5 completionHandler:(id /* block */)arg6;
- (void)requestUserQuestionnaireWithContextHistory:(id)arg1 documentType:(id)arg2 replyType:(id)arg3 options:(id)arg4 completionHandler:(id /* block */)arg5;
- (id)resultOptionsForRewritingType:(id)arg1 string:(id)arg2 result:(id)arg3 userFeedbackInputString:(id)arg4 preferredLanguage:(id)arg5 originalResultOptions:(id)arg6;
- (id)sanitizationForLongForm:(id)arg1;
- (id)sanitizationListForRewritingType:(id)arg1 string:(id)arg2;
- (id)sanitizationListForShortFormSmartReplies:(id)arg1;
- (id)shortFormRepliesFromModelOutput:(id)arg1 documentType:(id)arg2 normalizedNamesToNames:(id)arg3 inputContextHistory:(id)arg4 inputPreferences:(id)arg5 options:(id)arg6;
- (bool)shouldAcceptDetailForTokenDifferenceManager:(id)arg1 difference:(id)arg2 originalAttributedString:(id)arg3 tagger:(id)arg4 preferredLanguage:(id)arg5;
- (bool)shouldProcessInstructionClassificationResults:(id)arg1 error:(id*)arg2;
- (bool)shouldProcessInstructions:(id)arg1 rewritingType:(id)arg2 options:(id)arg3 error:(id*)arg4;
- (id)smartQuotesAndDashesVersionOfString:(id)arg1 smartQuotes:(bool)arg2 smartDashes:(bool)arg3 quotesArray:(id)arg4;
- (bool)stringAppearsToContainURLOrPhoneNumber:(id)arg1;
- (id)stringFromString:(id)arg1 byApplyingSmartQuotes:(bool)arg2 smartDashes:(bool)arg3 quotesArray:(id)arg4;
- (bool)stringHasValidLengthWords:(id)arg1;
- (bool)stringLooksLikeJunk:(id)arg1 tagger:(id)arg2 preferredLanguage:(id)arg3;
- (id)stubbedCorrectedStringForString:(id)arg1;
- (id)tagger;
- (id)textCheckingResultsForRewrittenString:(id)arg1 originalString:(id)arg2;
- (id)textCheckingResultsForRewrittenString:(id)arg1 originalString:(id)arg2 originalAttributedString:(id)arg3;
- (id)textCheckingResultsForRewrittenString:(id)arg1 originalString:(id)arg2 originalAttributedString:(id)arg3 offset:(unsigned long long)arg4 options:(id)arg5;
- (id)textCheckingResultsForRewrittenString:(id)arg1 originalString:(id)arg2 originalAttributedString:(id)arg3 offset:(unsigned long long)arg4 writingOptions:(id)arg5 error:(id*)arg6;
- (id)textualRepliesFrom:(id)arg1 options:(id)arg2;
- (id)trimmedReplyType:(id)arg1;
- (bool)useGenerativeModels;
- (bool)useLeadingContext;
- (bool)useRewritingSanitizationAdapter;
- (bool)useRewritingSanitizationClassifier;
- (bool)useServerModelsForMailReplies;
- (bool)useServerModelsForOpenEndedClassifier;
- (bool)useTextSanitizationForSR;
- (id)userFeedbackInputStringForRewritingType:(id)arg1 options:(id)arg2 forDocument:(id)arg3 leadingContext:(id)arg4;
- (bool)userIsPrimaryRecipientfor:(id)arg1 lastMessage:(id)arg2;
- (id)userNameFrom:(id)arg1 lastMessage:(id)arg2;
- (bool)userTitleCasesTexts:(id)arg1 sortedMessageEntries:(id)arg2 inputPreferences:(id)arg3;
- (bool)validateUserFilledQuestionnaire:(id)arg1;
- (id)wordsToBlockInString:(id)arg1 tagger:(id)arg2 preferredLanguage:(id)arg3 offensiveOnly:(bool)arg4;
- (id)wordsToPreserveInString:(id)arg1 tagger:(id)arg2 preferredLanguage:(id)arg3;

@end
