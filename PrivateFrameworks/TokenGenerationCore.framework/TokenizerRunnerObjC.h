/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TokenGenerationCore.framework/TokenGenerationCore
 */

@interface TokenizerRunnerObjC : NSObject {
    NSObject<OS_os_log> * _log;
    struct SentencePieceProcessor { 
        int (**_vptr$SentencePieceProcessor)(); 
        struct unique_ptr<sentencepiece::ModelInterface, std::default_delete<sentencepiece::ModelInterface>> { 
            struct __compressed_pair<sentencepiece::ModelInterface *, std::default_delete<sentencepiece::ModelInterface>> { 
                struct ModelInterface {} *__value_; 
            } __ptr_; 
        } model_; 
        struct unique_ptr<sentencepiece::normalizer::Normalizer, std::default_delete<sentencepiece::normalizer::Normalizer>> { 
            struct __compressed_pair<sentencepiece::normalizer::Normalizer *, std::default_delete<sentencepiece::normalizer::Normalizer>> { 
                struct Normalizer {} *__value_; 
            } __ptr_; 
        } normalizer_; 
        struct unique_ptr<sentencepiece::normalizer::Normalizer, std::default_delete<sentencepiece::normalizer::Normalizer>> { 
            struct __compressed_pair<sentencepiece::normalizer::Normalizer *, std::default_delete<sentencepiece::normalizer::Normalizer>> { 
                struct Normalizer {} *__value_; 
            } __ptr_; 
        } denormalizer_; 
        struct unique_ptr<sentencepiece::ModelProtoBase, std::default_delete<sentencepiece::ModelProtoBase>> { 
            struct __compressed_pair<sentencepiece::ModelProtoBase *, std::default_delete<sentencepiece::ModelProtoBase>> { 
                struct ModelProtoBase {} *__value_; 
            } __ptr_; 
        } model_proto_; 
        struct vector<sentencepiece::SentencePieceProcessor::ExtraOption, std::allocator<sentencepiece::SentencePieceProcessor::ExtraOption>> { 
            int *__begin_; 
            int *__end_; 
            struct __compressed_pair<sentencepiece::SentencePieceProcessor::ExtraOption *, std::allocator<sentencepiece::SentencePieceProcessor::ExtraOption>> { 
                int *__value_; 
            } __end_cap_; 
        } encode_extra_options_; 
        struct vector<sentencepiece::SentencePieceProcessor::ExtraOption, std::allocator<sentencepiece::SentencePieceProcessor::ExtraOption>> { 
            int *__begin_; 
            int *__end_; 
            struct __compressed_pair<sentencepiece::SentencePieceProcessor::ExtraOption *, std::allocator<sentencepiece::SentencePieceProcessor::ExtraOption>> { 
                int *__value_; 
            } __end_cap_; 
        } decode_extra_options_; 
        struct unique_ptr<sentencepiece::Mmap<char>, std::default_delete<sentencepiece::Mmap<char>>> { 
            struct __compressed_pair<sentencepiece::Mmap<char> *, std::default_delete<sentencepiece::Mmap<char>>> { 
                void *__value_; 
            } __ptr_; 
        } mmap_; 
        struct basic_string<char, std::char_traits<char>, std::allocator<char>> { 
            struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { 
                struct __rep { 
                    union { 
                        struct __short { 
                            BOOL __data_[23]; 
                            unsigned char __padding_[0]; 
                            unsigned int __size_ : 7; 
                            unsigned int __is_long_ : 1; 
                        } __s; 
                        struct __long { 
                            char *__data_; 
                            unsigned long long __size_; 
                            unsigned int __cap_ : 63; 
                            unsigned int __is_long_ : 1; 
                        } __l; 
                        struct __raw { 
                            unsigned long long __words[3]; 
                        } __r; 
                    } ; 
                } __value_; 
            } __r_; 
        } mmappable_data_; 
    }  _processor;
}

@property (nonatomic, readonly) long long longestTokenLength;
@property (nonatomic, readonly) long long vocabularyCount;

+ (id)sentencePieceErrorDomain;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)detokenize:(id)arg1 error:(id*)arg2;
- (void)enumeratePrefixTokenIDsForPrefix:(id)arg1 block:(id /* block */)arg2;
- (void)enumerateTokenIDsForDecodedPrefix:(id)arg1 block:(id /* block */)arg2;
- (void)enumerateTokenIDsForRawPrefix:(id)arg1 block:(id /* block */)arg2;
- (id)initWithTokenizerPath:(id)arg1 error:(id*)arg2;
- (bool)isByte:(long long)arg1;
- (long long)longestTokenLength;
- (void)prefixMatchesForText:(id)arg1 block:(id /* block */)arg2;
- (id)textForTokenID:(long long)arg1;
- (long long)tokenIDForText:(id)arg1;
- (id)tokenize:(id)arg1 error:(id*)arg2;
- (id)vocabulary;
- (long long)vocabularyCount;

@end
