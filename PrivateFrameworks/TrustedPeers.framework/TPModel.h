/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TrustedPeers.framework/TrustedPeers
 */

@interface TPModel : NSObject {
    NSMutableDictionary * _custodianRecoveryKeys;
    <TPModelDBAdapterProtocol> * _dbAdapter;
    <TPDecrypter> * _decrypter;
    NSData * _recoveryEncryptionPubKey;
    NSData * _recoverySigningPubKey;
    bool  _suppressInitialInfoLogging;
}

@property (nonatomic, retain) NSMutableDictionary *custodianRecoveryKeys;
@property (nonatomic, retain) <TPModelDBAdapterProtocol> *dbAdapter;
@property (nonatomic, retain) <TPDecrypter> *decrypter;
@property (nonatomic, retain) NSData *recoveryEncryptionPubKey;
@property (nonatomic, retain) NSData *recoverySigningPubKey;
@property bool suppressInitialInfoLogging;

+ (id)pickClock:(id)arg1;
+ (id)preapprovalsFromKeys:(id)arg1;

- (void).cxx_destruct;
- (id)_iterateOverPeersWithBlock:(id /* block */)arg1 error:(id*)arg2;
- (id)actualPeerWithID:(id)arg1 error:(id*)arg2;
- (id)allCustodianRecoveryKeyPeerIDs;
- (id)allCustodianRecoveryKeys;
- (id)allMachineIDsWithError:(id*)arg1;
- (id)allPeerIDs;
- (id)allPolicyVersionsWithError:(id*)arg1;
- (id)allRegisteredPolicyVersionsWithError:(id*)arg1;
- (id)allTrustedPeersWithCurrentRecoveryKeyWithError:(id*)arg1;
- (bool)anyTrustedPeerDistrustsOtherPeer:(id)arg1 error:(id*)arg2;
- (id)bestRecoveryKeyForStableInfo:(id)arg1 vouchers:(id)arg2 error:(id*)arg3;
- (id)bestWalrusAcrossTrustedPeersWithError:(id*)arg1;
- (id)bestWalrusForStableInfo:(id)arg1 walrusStableChanges:(id)arg2 error:(id*)arg3;
- (id)bestWebAccessAcrossTrustedPeersWithError:(id*)arg1;
- (id)bestWebAccessForStableInfo:(id)arg1 webAccessStableChanges:(id)arg2 error:(id*)arg3;
- (id)calculateDynamicInfoForPeerWithID:(id)arg1 addingPeerIDs:(id)arg2 removingPeerIDs:(id)arg3 preapprovedKeys:(id)arg4 signingKeyPair:(id)arg5 currentMachineIDs:(id)arg6 error:(id*)arg7;
- (id)calculateDynamicInfoFromModel:(id)arg1 peer:(id)arg2 peerPermanentInfo:(id)arg3 peerStableInfo:(id)arg4 startingDynamicInfo:(id)arg5 addingPeerIDs:(id)arg6 removingPeerIDs:(id)arg7 preapprovedKeys:(id)arg8 signingKeyPair:(id)arg9 currentMachineIDs:(id)arg10 sponsorPeerID:(id)arg11 error:(id*)arg12;
- (bool)canIntroduceCandidate:(id)arg1 withSponsor:(id)arg2 toEpoch:(unsigned long long)arg3 underPolicy:(id)arg4 disposition:(id)arg5;
- (bool)canTrustCandidate:(id)arg1 inEpoch:(unsigned long long)arg2;
- (bool)checkIntroductionForCandidate:(id)arg1 stableInfo:(id)arg2 withSponsorID:(id)arg3 error:(id*)arg4;
- (id)considerCandidateID:(id)arg1 withSponsorID:(id)arg2 sponsorPermanentInfo:(id)arg3 toExpandIncludedPeerIDs:(id)arg4 andExcludedPeerIDs:(id)arg5 dispositions:(id)arg6 currentMachineIDs:(id)arg7 forEpoch:(unsigned long long)arg8;
- (bool)considerPolicyFromPeerID:(id)arg1 stableInfo:(id)arg2 secrets:(id)arg3 newestPolicyDoc:(id*)arg4 error:(id*)arg5;
- (id)considerPreapprovalsSponsoredByPeer:(id)arg1 toRecursivelyExpandIncludedPeerIDs:(id)arg2 andExcludedPeerIDs:(id)arg3 dispositions:(id)arg4 currentMachineIDs:(id)arg5 forEpoch:(unsigned long long)arg6;
- (void)considerVouchersSponsoredByPeerID:(id)arg1 sponsorPermanentInfo:(id)arg2 toRecursivelyExpandIncludedPeerIDs:(id)arg3 andExcludedPeerIDs:(id)arg4 dispositions:(id)arg5 currentMachineIDs:(id)arg6 forEpoch:(unsigned long long)arg7;
- (id)copyPeerWithNewDynamicInfo:(id)arg1 forPeerWithID:(id)arg2 error:(id*)arg3;
- (id)copyPeerWithNewStableInfo:(id)arg1 forPeerWithID:(id)arg2 error:(id*)arg3;
- (id)createDynamicInfoWithIncludedPeerIDs:(id)arg1 excludedPeerIDs:(id)arg2 dispositions:(id)arg3 preapprovals:(id)arg4 signingKeyPair:(id)arg5 error:(id*)arg6;
- (id)createStableInfoWithFrozenPolicyVersion:(id)arg1 flexiblePolicyVersion:(id)arg2 policySecrets:(id)arg3 syncUserControllableViews:(int)arg4 secureElementIdentity:(id)arg5 walrusSetting:(id)arg6 webAccess:(id)arg7 deviceName:(id)arg8 serialNumber:(id)arg9 osVersion:(id)arg10 signingKeyPair:(id)arg11 recoverySigningPubKey:(id)arg12 recoveryEncryptionPubKey:(id)arg13 isInheritedAccount:(bool)arg14 error:(id*)arg15;
- (id)createVoucherForCandidate:(id)arg1 stableInfo:(id)arg2 withSponsorID:(id)arg3 reason:(unsigned long long)arg4 signingKeyPair:(id)arg5 error:(id*)arg6;
- (bool)currentStatePossiblyMissingDataWithError:(id*)arg1;
- (id)custodianPeerWithID:(id)arg1;
- (id)custodianRecoveryKeys;
- (id)dbAdapter;
- (id)decrypter;
- (bool)doesOctagonContainDistrustedRecoveryKeysWithError:(id*)arg1;
- (id)dynamicInfoForJoiningPeerID:(id)arg1 peerPermanentInfo:(id)arg2 peerStableInfo:(id)arg3 sponsorID:(id)arg4 preapprovedKeys:(id)arg5 signingKeyPair:(id)arg6 currentMachineIDs:(id)arg7 error:(id*)arg8;
- (bool)enumeratePeersUsingBlock:(id /* block */)arg1 error:(id*)arg2;
- (bool)enumerateVouchersUsingBlock:(id /* block */)arg1 error:(id*)arg2;
- (id)filterPeerList:(id)arg1 byMachineIDs:(id)arg2 sponsorPeerID:(id)arg3 dispositions:(id)arg4;
- (id)filterPreapprovals:(id)arg1 forExistingPeers:(id)arg2;
- (id)findCustodianRecoveryKeyWithUUID:(id)arg1;
- (id)getDynamicInfoForPeerWithID:(id)arg1 error:(id*)arg2;
- (id)getPeerIDsTrustedByPeerWithDynamicInfo:(id)arg1 toAccessView:(id)arg2 error:(id*)arg3;
- (id)getPeerIDsTrustedByPeerWithID:(id)arg1 toAccessView:(id)arg2 error:(id*)arg3;
- (id)getStableInfoForPeerWithID:(id)arg1 error:(id*)arg2;
- (id)getViewsForCRK:(id)arg1 donorPermanentInfo:(id)arg2 donorStableInfo:(id)arg3 error:(id*)arg4;
- (id)getViewsForPeer:(id)arg1 stableInfo:(id)arg2 error:(id*)arg3;
- (bool)hasAnyPeersWithError:(id*)arg1;
- (bool)hasPeerWithID:(id)arg1 error:(id*)arg2;
- (bool)hasPotentiallyTrustedPeerPreapprovingKey:(id)arg1 error:(id*)arg2;
- (bool)hasPotentiallyTrustedPeerTestingOnlyWithError:(id*)arg1;
- (bool)hasPotentiallyTrustedPeerWithSigningKey:(id)arg1 error:(id*)arg2;
- (id)initWithDecrypter:(id)arg1 dbAdapter:(id)arg2;
- (bool)isCustodianRecoveryKeyTrusted:(id)arg1 error:(id*)arg2;
- (bool)isRecoveryKeyEnrolledWithError:(id*)arg1;
- (bool)isRecoveryKeyExcluded:(id)arg1 error:(id*)arg2;
- (unsigned long long)latestEpochAmongPeerIDs:(id)arg1 error:(id*)arg2;
- (unsigned long long)maxClockWithError:(id*)arg1;
- (unsigned long long)peerCountWithError:(id*)arg1;
- (id)peerCountsByMachineIDWithError:(id*)arg1;
- (id)peerIDThatTrustsCustodianRecoveryKeys:(id)arg1 canIntroducePeer:(id)arg2 stableInfo:(id)arg3 error:(id*)arg4;
- (id)peerIDThatTrustsRecoveryKeys:(id)arg1 canIntroducePeer:(id)arg2 stableInfo:(id)arg3 error:(id*)arg4;
- (id)peerWithID:(id)arg1 error:(id*)arg2;
- (id)peersWithMachineID:(id)arg1 error:(id*)arg2;
- (id)policyForPeerIDs:(id)arg1 candidatePeerID:(id)arg2 candidateStableInfo:(id)arg3 error:(id*)arg4;
- (id)policyWithVersion:(unsigned long long)arg1 error:(id*)arg2;
- (id)possibleSponsorsForCustodianRecoveryKey:(id)arg1 block:(id /* block */)arg2 error:(id*)arg3;
- (id)possibleSponsorsForRecoveryKey:(id)arg1 block:(id /* block */)arg2 error:(id*)arg3;
- (id)recoveryEncryptionPubKey;
- (id)recoveryEncryptionPublicKey;
- (id)recoveryKeyPeerID:(id)arg1;
- (id)recoverySigningPubKey;
- (id)recoverySigningPublicKey;
- (id)recursivelyExpandIncludedPeerIDs:(id)arg1 andExcludedPeerIDs:(id)arg2 dispositions:(id)arg3 withPeersTrustedBySponsorID:(id)arg4 currentMachineIDs:(id)arg5 forEpoch:(unsigned long long)arg6;
- (void)registerCustodianRecoveryKey:(id)arg1;
- (void)removeCustodianRecoveryKey:(id)arg1;
- (void)removeRecoveryKey;
- (void)setCustodianRecoveryKeys:(id)arg1;
- (void)setDbAdapter:(id)arg1;
- (void)setDecrypter:(id)arg1;
- (void)setRecoveryEncryptionPubKey:(id)arg1;
- (void)setRecoveryKeys:(id)arg1;
- (void)setRecoverySigningPubKey:(id)arg1;
- (void)setSuppressInitialInfoLogging:(bool)arg1;
- (unsigned long long)statusOfPeerWithID:(id)arg1 error:(id*)arg2;
- (bool)suppressInitialInfoLogging;
- (unsigned long long)trustedPeerCountWithError:(id*)arg1;
- (id)untrustedPeerIDsWithError:(id*)arg1;
- (int)userViewSyncabilityConsensusAmongTrustedPeers:(id)arg1 error:(id*)arg2;
- (bool)validatePeerWithPreApproval:(id)arg1 sponsor:(id)arg2;
- (bool)validateVoucherForPeer:(id)arg1 sponsor:(id)arg2;
- (id)vectorClockWithError:(id*)arg1;
- (bool)verifyVoucherSignature:(id)arg1;
- (id)viablePeerCountsByModelIDWithError:(id*)arg1;
- (unsigned long long)voucherCountWithError:(id*)arg1;

@end
