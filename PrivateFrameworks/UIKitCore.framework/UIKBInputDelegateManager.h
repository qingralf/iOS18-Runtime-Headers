/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
 */

@interface UIKBInputDelegateManager : NSObject <UIKeyInput, _UITextSelectionDirectionNavigation_Internal> {
    UIResponder<UIAsyncTextInputClient> * _asyncInputDelegate;
    UIResponder<UIKeyInput> * _forwardingInputDelegate;
    bool  _forwardingInputDelegateConformsToAsyncTextInputClient;
    bool  _forwardingInputDelegateConformsToBETextInput;
    bool  _forwardingInputDelegateConformsToWKInteraction;
    bool  _insideKeyInputDelegateCall;
    UIResponder<UIKeyInput> * _keyInputDelegate;
    <UIKeyboardImplStateProtocol> * _keyboardStateDelegate;
    UITextInteractionSelectableInputDelegate * _selectableDelegate;
    bool  _shouldRespectForwardingInputDelegate;
    unsigned long long  m_delegateConformanceType;
    bool  m_firstResponderAdoptsTextInput;
    unsigned long long  m_originalDelegateConformanceType;
}

@property unsigned long long allowedWritingToolsResultOptions; /* unknown property attribute: ? */
@property (nonatomic, readonly) id asyncCapableInputDelegate;
@property (nonatomic, retain) UIResponder<UIAsyncTextInputClient> *asyncInputDelegate;
@property (nonatomic) long long autocapitalizationType; /* unknown property attribute: ? */
@property (nonatomic) long long autocorrectionType; /* unknown property attribute: ? */
@property (nonatomic, readonly) UIView *automaticallySelectedOverlay;
@property (nonatomic) bool continuousSpellCheckingEnabled;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (nonatomic, readonly) unsigned long long delegateConformanceType;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool enablesReturnKeyAutomatically; /* unknown property attribute: ? */
@property (nonatomic) UIResponder<UIKeyInput> *forwardingInputDelegate;
@property (nonatomic, readonly) bool hasAsyncCapableInputDelegate;
@property (nonatomic, readonly) bool hasText;
@property (readonly) unsigned long long hash;
@property (nonatomic) long long inlinePredictionType; /* unknown property attribute: ? */
@property (nonatomic) bool insideKeyInputDelegateCall;
@property (nonatomic, retain) UIResponder<UIKeyInput> *keyInputDelegate;
@property (nonatomic) long long keyboardAppearance; /* unknown property attribute: ? */
@property (nonatomic) <UIKeyboardImplStateProtocol> *keyboardStateDelegate;
@property (nonatomic) long long keyboardType; /* unknown property attribute: ? */
@property (nonatomic, readonly) <UIKeyboardInput> *legacyInputDelegate;
@property (nonatomic) long long mathExpressionCompletionType; /* unknown property attribute: ? */
@property (nonatomic, copy) UITextInputPasswordRules *passwordRules; /* unknown property attribute: ? */
@property (nonatomic) long long returnKeyType; /* unknown property attribute: ? */
@property (getter=isSecureTextEntry, nonatomic) bool secureTextEntry; /* unknown property attribute: ? */
@property (nonatomic, retain) UITextInteractionSelectableInputDelegate *selectableDelegate;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } selectionClipRect;
@property (nonatomic, readonly) UITextSelectionDisplayInteraction *selectionDisplayInteraction;
@property (nonatomic) bool shouldRespectForwardingInputDelegate;
@property (nonatomic) long long smartDashesType; /* unknown property attribute: ? */
@property (nonatomic) long long smartInsertDeleteType; /* unknown property attribute: ? */
@property (nonatomic) long long smartQuotesType; /* unknown property attribute: ? */
@property (nonatomic) long long spellCheckingType; /* unknown property attribute: ? */
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *textContentType; /* unknown property attribute: ? */
@property (nonatomic, readonly) UITextInputTraits *textInputTraits;
@property (nonatomic, readonly) UITextInteractionAssistant *textInteractionAssistant;
@property long long writingToolsBehavior; /* unknown property attribute: ? */

+ (bool)isAsyncTextInputEnabled;
+ (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeForTextRange:(id)arg1 document:(id)arg2;

- (void).cxx_destruct;
- (id)__content;
- (unsigned int)_characterBeforeCaretSelection;
- (void)_deleteBackwardAndNotify:(bool)arg1 reinsertText:(bool)arg2;
- (void)_deleteBackwardAndNotify:(bool)arg1 reinsertText:(bool)arg2 overrideOriginalContextBeforeInputWith:(id)arg3;
- (void)_deleteBackwardWhileOverridingContextAndNotifyAtEnd:(bool)arg1 deletionCount:(unsigned long long)arg2 reinsertTextInLoop:(bool)arg3;
- (void)_deleteByWord;
- (bool)_deleteForwardAndNotify:(bool)arg1;
- (void)_deleteForwardByWord;
- (void)_deleteToEndOfLine;
- (void)_deleteToEndOfParagraph;
- (void)_deleteToStartOfLine;
- (void)_firstResponderDidChange:(id)arg1;
- (bool)_hasMarkedText;
- (void)_moveCurrentSelection:(int)arg1;
- (id)_moveDown:(bool)arg1 withHistory:(id)arg2;
- (id)_moveLeft:(bool)arg1 withHistory:(id)arg2;
- (id)_moveRight:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfDocument:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfLine:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfParagraph:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfWord:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfDocument:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfLine:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfParagraph:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfWord:(bool)arg1 withHistory:(id)arg2;
- (id)_moveUp:(bool)arg1 withHistory:(id)arg2;
- (id)_rangeOfText:(id)arg1 endingAtPosition:(id)arg2;
- (bool)_selectionAtDocumentStart;
- (void)_setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)_setSelectionToPosition:(id)arg1;
- (unsigned long long)_textLengthToDeleteBeforeSelectedRangeForSmartDelete;
- (id)_textRangeFromNSRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)_textSelectingContainer;
- (void)addTextAlternatives:(id)arg1;
- (void)adjustSelection:(struct { long long x1; long long x2; })arg1 completionHandler:(id /* block */)arg2;
- (void)applyAutocorrection:(id)arg1 toString:(id)arg2 shouldUnderline:(bool)arg3 withCompletionHandler:(id /* block */)arg4;
- (void)applyAutocorrection:(id)arg1 toString:(id)arg2 withCompletionHandler:(id /* block */)arg3;
- (id)asyncCapableInputDelegate;
- (id)asyncInputDelegate;
- (id)asyncWebKitInteractionDelegate;
- (id)attributedMarkedText;
- (id)automaticallySelectedOverlay;
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;
- (id)beginningOfDocument;
- (bool)callKeyboardWillDismiss;
- (bool)callShouldDeleteBackwardWithCount:(unsigned long long)arg1;
- (bool)callShouldReplaceExtendedRange:(long long)arg1 withText:(id)arg2 includeMarkedText:(bool)arg3;
- (bool)canHandleInputDelegateCommandAction:(unsigned long long)arg1;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForPosition:(id)arg1;
- (void)changedSelection;
- (void)clearDelegate;
- (void)clearForwardingInputDelegateAndResign:(bool)arg1;
- (void)collapseSelectionAndAdjustByOffset:(long long)arg1;
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;
- (bool)continuousSpellCheckingEnabled;
- (void)correctedTypedText:(id)arg1 rangeOfReplacement:(id)arg2;
- (bool)delegateAdoptsWebTextInputPrivate;
- (id)delegateAsResponder;
- (unsigned long long)delegateConformanceType;
- (id)delegateRespectingForwardingDelegate:(bool)arg1;
- (bool)delegateRespondsToSelector:(SEL)arg1;
- (void)deleteBackward;
- (id)endOfDocument;
- (id)forwardingInputDelegate;
- (void)handleClearWithInsertBeforeAdvance:(id)arg1;
- (void)handleKeyWebEvent:(id)arg1;
- (void)handleKeyWebEvent:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (bool)hasAsyncCapableInputDelegate;
- (bool)hasMarkedText;
- (bool)hasText;
- (id)init;
- (id)inputSystemSourceSession;
- (void)insertAttributedText:(id)arg1;
- (void)insertDictationResult:(id)arg1;
- (bool)insertSupplementalItem:(id)arg1 candidate:(id)arg2 replacementRange:(id)arg3;
- (void)insertText:(id)arg1;
- (void)insertText:(id)arg1 alternatives:(id)arg2 style:(long long)arg3;
- (void)insertText:(id)arg1 updateInputSource:(bool)arg2;
- (void)insertTextAfterSelection:(id)arg1;
- (bool)insertTextSuggestion:(id)arg1;
- (bool)insideKeyInputDelegateCall;
- (id)keyInputDelegate;
- (id)keyboardStateDelegate;
- (id)legacyInputDelegate;
- (id)markedText;
- (id)markedTextRange;
- (void)moveSelectionToEndOfWord;
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;
- (id)privateInputDelegate;
- (id)privateInputDelegateRespectingForwardingDelegate:(bool)arg1;
- (id)privateKeyInputDelegate;
- (void)replaceRange:(id)arg1 oldText:(id)arg2 withAttributedText:(id)arg3 forReplaceAction:(int)arg4;
- (void)replaceRange:(id)arg1 oldText:(id)arg2 withText:(id)arg3 forReplaceAction:(int)arg4;
- (void)replaceRange:(id)arg1 withText:(id)arg2;
- (void)replaceSelectionOffset:(long long)arg1 length:(unsigned long long)arg2 withAnnotatedString:(id)arg3 relativeReplacementRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
- (void)requestDocumentContext:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)requestTextContextForAutocorrectionWithCompletionHandler:(id /* block */)arg1;
- (void)requestTextRectsForString:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (bool)requiresKeyEvents;
- (id)selectableDelegate;
- (id)selectedText;
- (id)selectedTextRange;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })selectionClipRect;
- (id)selectionDisplayInteraction;
- (bool)selectionIsEndOfWord;
- (bool)selectionIsWord;
- (id)selectionRectsForRange:(id)arg1;
- (SEL)selectorForCommand:(unsigned long long)arg1;
- (void)setAsyncInputDelegate:(id)arg1;
- (void)setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;
- (void)setContinuousSpellCheckingEnabled:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setForwardingInputDelegate:(id)arg1;
- (void)setInsideKeyInputDelegateCall:(bool)arg1;
- (void)setKeyInputDelegate:(id)arg1;
- (void)setKeyboardStateDelegate:(id)arg1;
- (void)setSelectableDelegate:(id)arg1;
- (void)setSelectedTextRange:(id)arg1;
- (void)setShouldRespectForwardingInputDelegate:(bool)arg1;
- (void)setupResponderChangeListeners;
- (void)shiftKeyStateChangedFrom:(int)arg1 to:(int)arg2;
- (bool)shouldDeleteForward;
- (bool)shouldRespectForwardingInputDelegate;
- (bool)shouldSuppressUpdateCandidateView;
- (void)storeDelegateConformance;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })textFirstRect;
- (id)textInRange:(id)arg1;
- (id)textInputDelegate;
- (id)textInputTraits;
- (id)textInputView;
- (id)textInteractionAssistant;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })textLastRect;
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;
- (id)tintColor;
- (void)transposeCharacters;
- (void)unmarkText;
- (void)unmarkText:(id)arg1;
- (void)updateDelegateConformanceForRemoteTraits;
- (void)updateRespectForwardingInputDelegateFlagInDestination;
- (void)updateSelectableInputDelegateIfNecessary;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleTextRect;
- (id)webInputDelegate;

@end
