/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
 */

@interface UIKeyboardImpl : UIView <UIAsyncTextInputDelegate, UIKBRTIPartnerDelegate, UIKeyboardCandidateListDelegate, UIKeyboardLayoutSizeDelegate, UIPopoverPresentationControllerDelegate, UITextInputDelegatePrivate, _UIAssertionControllerSubject, _UIIVCResponseDelegateImpl, _UIKeyboardPresentationDelegate, _UIScrollViewScrollObserver, _UIStickerPickerKeyboardSessionDelegate> {
    UIKeyboardLayout * _activeLayout;
    _UIAssertionController * _assertionController;
    AFUIPanel * _autoFillPanel;
    UIAutocorrectBubbleContainer * _autocorrectBubbleContainer;
    UIKeyboardScheduledTask * _autocorrectPromptTask;
    <UITextCursorAssertion> * _capslockAssertion;
    NSValue * _contentScrollInitialContentOffset;
    UIContinuousPathIntroductionView * _continuousPathIntroductionView;
    <UITextCursorAssertion> * _cursorAssertion;
    UIDictationPopoverController * _dictationPopoverController;
    UIKBEditingGesturesIntroduction * _editingGestureIntroductionView;
    <_UIAssertion> * _emojiKeyboardPrewarmingAssertion;
    UIKeyboardEmojiPopoverController * _emojiPopoverController;
    bool  _emojiPopoverToRestoreAfterRotation;
    NSValue * _environmentScrollInitialContentOffset;
    bool  _geometryIsChanging;
    bool  _hideInlineCandidates;
    long long  _id;
    <UITextCursorAssertion> * _inputModeAssertion;
    UIView * _internationalKeyIntroductionView;
    NSNumber * _isAttachedHardwareKeyboard;
    KFAViewController * _keyboardFeedbackAssistantViewController;
    _UIKeyboardStateManager * _keyboardStateManager;
    bool  _lockFloating;
    UIKBMultilingualKeyboardIntroductionView * _multilingualKeyboardIntroductionView;
    UIKBMultilingualSettingIntroductionView * _multilingualSettingIntroductionView;
    UIView * _overlayContainerObserved;
    UIPressAndHoldPopoverController * _pressAndHoldPopoverController;
    unsigned long long  _requestedInteractionModel;
    bool  _shouldUpdateLayoutAutomatically;
    UIKeyboardStickerEditorViewController * _stickerEditorViewController;
    _UIStickerPickerKeyboardSession * _stickerPickerSession;
    bool  m_animateUpdateBars;
    UIAutocorrectInlinePrompt * m_autocorrectPrompt;
    bool  m_automaticMinimizationEnabled;
    double  m_bottomPadding;
    UIKeyboardCandidateController * m_candidateController;
    UIView * m_capsLockSign;
    UIDelayedAction * m_detachHardwareKeyboardAction;
    <UITextCursorAssertion> * m_dictationIndicatorAssertion;
    UIDelayedAction * m_dictationMenuAction;
    bool  m_dismissingFloatingKeyboard;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  m_editMenuFrame;
    UIEditMenuInteraction * m_editMenuInteraction;
    <_UIKBFeedbackGenerating> * m_feedbackGenerator;
    <UIKeyboardImplGeometryDelegate> * m_geometryDelegate;
    bool  m_inDealloc;
    bool  m_initializationDone;
    bool  m_inputModeSwitcherVisible;
    bool  m_isCapsLocked;
    bool  m_isRotating;
    int  m_keyboardMenuType;
    NSMutableDictionary * m_keyedLayouts;
    UIView * m_languageIndicator;
    UIKeyboardLayout * m_layout;
    UIView * m_markedTextOverlay;
    bool  m_maximizing;
    struct __CFRunLoopObserver { } * m_observer;
    long long  m_originalOrientation;
    bool  m_policyDelegateResult;
    bool  m_preRotateShift;
    bool  m_preRotateShiftLocked;
    int  m_presentingKeyboardMenuType;
    unsigned long long  m_previousReturnKeyBehavior;
    unsigned long long  m_previousSpaceKeyBehavior;
    UILexicon * m_recentInputs;
    UIDelayedAction * m_resumeDictationForResponderChange;
    bool  m_returnKeyEnabledInLayout;
    int  m_returnKeyState;
    bool  m_rivenCenterFilled;
    bool  m_scrolling;
    bool  m_shouldSuppressAssistantBar;
    bool  m_shouldSuppressSoftwareKeyboard;
    bool  m_showInputModeIndicator;
    bool  m_showsCandidateBar;
    bool  m_showsCandidateInline;
    bool  m_suppressUpdateCandidateView;
    UIView * m_tipView;
    bool  m_updateLayoutOnShowKeyboard;
    bool  m_updatingLayout;
}

@property (getter=_isBackdropVisible, nonatomic, readonly) bool _backdropVisible;
@property (nonatomic, readonly) _UITextInteractionEditMenuAssistant *_editMenuAssistant;
@property (nonatomic) bool _mimicShiftBeingHeld;
@property (setter=_setShouldSuppressAssistantBar:, nonatomic) bool _shouldSuppressAssistantBar;
@property (nonatomic, readonly) _UITextChoiceAccelerationAssistant *_textChoicesAssistant;
@property (nonatomic, retain) NSString *activeDictationLanguage;
@property (nonatomic) UIKeyboardLayout *activeLayout;
@property (nonatomic) bool animateUpdateBars;
@property (nonatomic, retain) UIAutocorrectBubbleContainer *autocorrectBubbleContainer;
@property (nonatomic, retain) UIKeyboardScheduledTask *autocorrectPromptTask;
@property (nonatomic, readonly) UIKeyboardAutocorrectionController *autocorrectionController;
@property (nonatomic) bool automaticMinimizationEnabled;
@property (nonatomic) bool canSuggestSupplementalItemsForCurrentSelection;
@property (nonatomic, readonly) UIKeyboardCandidateController *candidateController;
@property (nonatomic, retain) <UITextCursorAssertion> *capslockAssertion;
@property (readonly) bool centerFilled;
@property (nonatomic, copy) NSValue *contentScrollInitialContentOffset;
@property (nonatomic, readonly) bool continuousPathUnderway;
@property (nonatomic, readonly) UIKBTree *currentKey;
@property (nonatomic, retain) <UITextCursorAssertion> *cursorAssertion;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (nonatomic, retain) UIResponder<UIKeyInput> *delegate;
@property (nonatomic, readonly) bool delegateRequiresKeyEvents;
@property (nonatomic) double deleteWordLastDelete;
@property (readonly, copy) NSString *description;
@property (nonatomic, copy) id /* block */ didTeardownExistingDelegate;
@property (nonatomic, readonly) UIViewController *emojiPopoverController;
@property (nonatomic, copy) NSValue *environmentScrollInitialContentOffset;
@property (nonatomic, retain) <_UIKBFeedbackGenerating> *feedbackGenerator;
@property (nonatomic, readonly) bool forCustomInputView;
@property (nonatomic) <UIKeyboardImplGeometryDelegate> *geometryDelegate;
@property (nonatomic) bool geometryIsChanging;
@property (nonatomic) bool hardwareKeyboardIsSeen;
@property (nonatomic) bool hasNextKeyResponder;
@property (nonatomic) bool hasPreviousKeyResponder;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool hideInlineCandidates;
@property (getter=isInHardwareKeyboardMode, nonatomic) bool inHardwareKeyboardMode;
@property (nonatomic, readonly) UIKBInputDelegateManager *inputDelegateManager;
@property (nonatomic, readonly) TIKeyboardInputManagerStub *inputManager;
@property (nonatomic, retain) TIKeyboardInputManagerState *inputManagerState;
@property (nonatomic, retain) <UITextCursorAssertion> *inputModeAssertion;
@property (nonatomic, readonly) UIKeyboardInputModeIndicatorController *inputModeIndicatorController;
@property (nonatomic, retain) UIView *internationalKeyIntroductionView;
@property (nonatomic, retain) NSNumber *isAttachedHardwareKeyboard;
@property (nonatomic) bool isCallingTextChangedDuringInputModeSwitch;
@property (nonatomic, readonly) bool isRotating;
@property (nonatomic, readonly) bool isSettingDelegate;
@property (nonatomic, retain) KFAViewController *keyboardFeedbackAssistantViewController;
@property (nonatomic, readonly) TIKeyboardState *keyboardState;
@property (nonatomic, readonly) _UIKeyboardStateManager *keyboardStateManager;
@property (nonatomic) unsigned long long lastChooseSupplementalItemToInsertCallbackIdentifier;
@property (nonatomic, retain) _UIStringAndPositionPair *lastMatchedSupplementalCandidate;
@property (nonatomic, readonly) UIKeyboardLayout *layout;
@property (nonatomic, retain) TIKeyboardLayout *layoutForKeyHitTest;
@property (getter=isFloatingLocked) bool lockFloating;
@property (nonatomic) bool markedTextFromClient; /* unknown property attribute: ? */
@property (readonly) unsigned long long minimumTouchesForTranslation;
@property (nonatomic, readonly) bool needAutofillLogin;
@property (nonatomic) UIView *overlayContainerObserved;
@property (nonatomic, retain) _UIStringAndPositionPair *pendingSupplementalCandidateToInsert;
@property (nonatomic) bool performingRemoteTextOperations;
@property (nonatomic, readonly) UIPressAndHoldPopoverController *pressAndHoldPopoverController;
@property (nonatomic) bool prewarmsPredictiveCandidates;
@property (nonatomic) bool receivedCandidatesInCurrentInputMode;
@property (nonatomic, readonly) UIKBRTIPartner *remoteTextInputPartner;
@property (nonatomic) unsigned long long requestedInteractionModel;
@property bool rivenSplitLock;
@property (getter=isSelectionChanging, nonatomic, readonly) bool selectionChanging;
@property (nonatomic) unsigned long long serviceRole;
@property (nonatomic) bool shouldIgnoreTextInputChanges;
@property (nonatomic, readonly) bool shouldShowCandidateBar;
@property (nonatomic) bool shouldSkipCandidateSelection;
@property (nonatomic) bool shouldUpdateLayoutAutomatically;
@property (nonatomic) bool showInputModeIndicator;
@property (nonatomic) bool showsCandidateBar;
@property (nonatomic) bool showsCandidateInline;
@property (nonatomic) bool skipRecomputeInputMode;
@property (nonatomic, readonly) bool splitTransitionInProgress;
@property (readonly) Class superclass;
@property (nonatomic) bool suppressUpdateAssistantView;
@property (nonatomic) bool suppressUpdateCandidateView;
@property (nonatomic) bool suppressUpdateInputMode;
@property (nonatomic) bool suppressUpdateLayout;
@property (nonatomic) bool suppressUpdateShiftState;
@property (nonatomic, readonly) UIKeyboardTaskQueue *taskQueue;
@property (nonatomic, readonly) UITextInteractionAssistant *textInteractionAssistant;
@property (nonatomic, readonly) _UIKeyboardTextSelectionController *textSelectionController;
@property (nonatomic) bool updateLayoutOnShowKeyboard;
@property (nonatomic, readonly) bool updatingPreferences;
@property (nonatomic) <_UITextInputUserInteractionDelegate> *userInteractionDelegate;
@property (nonatomic, copy) id /* block */ willSetupNewDelegate;

+ (id)_applicationClientComponent;
+ (struct CGPoint { double x1; double x2; })_normalizedScreenPoint:(struct CGPoint { double x1; double x2; })arg1;
+ (struct CGPoint { double x1; double x2; })_screenPointFromNormalizedPoint:(struct CGPoint { double x1; double x2; })arg1;
+ (id)activeInstance;
+ (double)additionalInstanceHeight;
+ (double)additionalInstanceHeightForInterfaceOrientation:(long long)arg1;
+ (double)additionalInstanceHeightForInterfaceOrientation:(long long)arg1 hasInputView:(bool)arg2;
+ (void)applicationDidBecomeActive:(id)arg1;
+ (void)applicationDidEnterBackground:(id)arg1;
+ (void)applicationDidReceiveMemoryWarning:(id)arg1;
+ (void)applicationWillEnterForeground:(id)arg1;
+ (void)applicationWillResignActive:(id)arg1;
+ (void)applicationWillSuspend:(id)arg1;
+ (bool)canShowInternationalKey;
+ (struct CGSize { double x1; double x2; })defaultSizeForInterfaceOrientation:(long long)arg1;
+ (struct CGPoint { double x1; double x2; })defaultUndockedOffsetForFloating:(bool)arg1;
+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })deviceSpecificPaddingForInterfaceOrientation:(long long)arg1 inputMode:(id)arg2;
+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })deviceSpecificStaticHitBufferForInterfaceOrientation:(long long)arg1 inputMode:(id)arg2;
+ (double)floatingHeight;
+ (long long)floatingIdiom;
+ (struct CGPoint { double x1; double x2; })floatingNormalizedPersistentOffset;
+ (struct CGPoint { double x1; double x2; })floatingPersistentOffset;
+ (double)floatingScreenWidthToEmulate;
+ (double)floatingWidth;
+ (bool)isActivatingForeground;
+ (bool)isDictationPopoverEnabled;
+ (bool)isFloating;
+ (bool)isFloatingForced;
+ (bool)isHardwareCommandKeyBeingHeld;
+ (bool)isHardwareShiftKeyBeingHeld;
+ (bool)isSplit;
+ (bool)keyboardOrientation:(long long)arg1 isEquivalentToOrientation:(long long)arg2;
+ (id)keyboardScreen;
+ (struct CGSize { double x1; double x2; })keyboardSizeForInterfaceOrientation:(long long)arg1;
+ (double)keyboardWidthForScreen:(id)arg1 withOrientation:(long long)arg2;
+ (id)keyboardWindow;
+ (Class)layoutClassForCurrentInputMode;
+ (Class)layoutClassForInputMode:(id)arg1 keyboardType:(long long)arg2 screenTraits:(id)arg3;
+ (id)normalizedInputModesFromPreference;
+ (struct CGPoint { double x1; double x2; })normalizedPersistentOffset;
+ (struct CGPoint { double x1; double x2; })normalizedPersistentOffsetIgnoringState;
+ (bool)overrideNativeScreen;
+ (void)performWithoutFloatingLock:(id /* block */)arg1;
+ (struct CGPoint { double x1; double x2; })persistentOffset;
+ (double)persistentSplitProgress;
+ (void)purgeImageCache;
+ (void)refreshRivenStateWithTraits:(id)arg1 isKeyboard:(bool)arg2;
+ (void)releaseSharedInstance;
+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })requestedFloatingInsets;
+ (bool)rivenInstalled;
+ (bool)rivenPreference;
+ (bool)rivenShouldUndock;
+ (bool)rivenTranslationPreference;
+ (void)sendPerformanceNotification:(id)arg1;
+ (void)sendPerformanceNotification:(id)arg1 userInfo:(id)arg2;
+ (void)setFloating:(bool)arg1;
+ (void)setFloating:(bool)arg1 positionedAtDefaultOffsetAnimated:(bool)arg2;
+ (void)setFloating:(bool)arg1 positionedAtOffset:(struct CGPoint { double x1; double x2; })arg2 animated:(bool)arg3;
+ (void)setFloatingPersistentOffset:(struct CGPoint { double x1; double x2; })arg1;
+ (void)setParentTestForProfiling:(id)arg1;
+ (void)setPersistentOffset:(struct CGPoint { double x1; double x2; })arg1;
+ (void)setPersistentSplitProgress:(double)arg1;
+ (id)sharedInstance;
+ (id)sharedInstanceForCustomInputView:(bool)arg1;
+ (bool)shouldAccessInputManagerService;
+ (bool)shouldMergeAssistantBarWithKeyboardLayout;
+ (bool)showsGlobeAndDictationKeysExternally;
+ (struct CGSize { double x1; double x2; })sizeForInterfaceOrientation:(long long)arg1;
+ (struct CGSize { double x1; double x2; })sizeForInterfaceOrientation:(long long)arg1 ignoreInputView:(bool)arg2;
+ (bool)smartInsertDeleteIsEnabled;
+ (double)splitProgress;
+ (bool)supportsFloating;
+ (bool)supportsSplit;
+ (void)suppressSetPersistentOffset:(bool)arg1;
+ (void)switchControlStatusDidChange:(id)arg1;
+ (double)topMarginForInterfaceOrientation:(long long)arg1;
+ (id)uniqueNumberPadInputModesFromInputModes:(id)arg1 forKeyboardType:(long long)arg2;

- (void).cxx_destruct;
- (id)UILanguagePreference;
- (id)_activeAssertionController;
- (void)_addInputString:(id)arg1 withFlags:(unsigned long long)arg2 withInputManagerHint:(id)arg3 withInputSource:(long long)arg4;
- (void)_attemptAuthenticationWithMessage:(id)arg1;
- (long long)_autoFillModeForPopoverType:(int)arg1;
- (id)_autofillContext;
- (id)_autofillGroup;
- (bool)_canHandleResponderCommand:(SEL)arg1;
- (bool)_cancelOperation:(bool)arg1 testOnly:(bool)arg2;
- (void)_clearAutofillGroup;
- (void)_clearDictationMenuTimer:(bool)arg1;
- (unsigned long long)_clipCornersOfView:(id)arg1;
- (void)_conditionallyNotifyPredictionsAreAvailableForCandidates:(id)arg1 containingProactiveTriggers:(bool)arg2;
- (void)_configureMarkedTextAttributesForConversion:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 highlightRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (bool)_containsUsernamePasswordPairsInAutofillGroup:(id)arg1;
- (void)_deactiveActiveKeys;
- (void)_deleteFromInputWithFlags:(unsigned long long)arg1;
- (void)_dictationDidRecieveDidBeginDictationNotification:(id)arg1;
- (void)_didChangeKeyplaneWithContext:(id)arg1;
- (void)_dispatchInsertionPointExitedRangeWithSupplementalCandidate;
- (void)_dynamicUserInterfaceTraitDidChange;
- (id)_editMenuAssistant;
- (void)_ensureRTIConnection;
- (bool)_everPresentedPasswordAutofillPanel;
- (id)_fallbackAutofillGroup;
- (void)_forwardScrollEventToUIHost:(SEL)arg1 scrollView:(id)arg2;
- (void)_generateTextSuggestionForKeyboardCamera;
- (id)_getAutocorrection;
- (id)_getAutocorrectionList;
- (id)_getCandidateList;
- (id)_getCurrentKeyboardName;
- (id)_getCurrentKeyplaneName;
- (id)_getLocalizedInputMode;
- (void)_handleAutoFillPopoverCommandWithType:(int)arg1 action:(SEL)arg2;
- (void)_handleKeyBehavior:(unsigned long long)arg1 forKeyType:(id)arg2;
- (bool)_handleKeyCommand:(id)arg1;
- (void)_handleKeyEvent:(id)arg1 executionContext:(id)arg2;
- (bool)_handleKeyInputMethodCommandForEvent:(id)arg1 canHandleAppKeyCommand:(bool)arg2;
- (void)_handleWebKeyEvent:(id)arg1 withEventType:(unsigned long long)arg2 withInputString:(id)arg3 withInputStringIgnoringModifiers:(id)arg4;
- (void)_handleWebKeyEvent:(id)arg1 withIndex:(unsigned long long)arg2 inInputString:(id)arg3;
- (bool)_handlesKeyCommandForEvent:(id)arg1;
- (bool)_hasCandidates;
- (bool)_hasMarkedText;
- (bool)_isAutoFillPopoverTypeExplicit:(int)arg1;
- (bool)_isBackdropVisible;
- (bool)_isKeyCommand:(id)arg1;
- (bool)_isShowingCandidateUIWithAvailableCandidates;
- (bool)_isShowingSuggestionForKeyboardCamera;
- (id)_keyboardBehaviorState;
- (id)_layout;
- (id)_markedText;
- (bool)_mimicShiftBeingHeld;
- (void)_moveWithEvent:(id)arg1;
- (long long)_needAutofillCandidate:(id)arg1;
- (bool)_needsCandidates;
- (void)_nop;
- (void)_observeScrollViewDidScroll:(id)arg1;
- (id)_passwordRules;
- (void)_performInputViewControllerOutput:(id)arg1;
- (long long)_positionInCandidateList:(id)arg1;
- (void)_postInputResponderCapabilitiesChangedNotificationWithOutput:(id)arg1 selectionChanged:(bool)arg2;
- (void)_postInputResponderChangedNotification;
- (void)_presentDictationMenuIfAllowed;
- (void)_presentKeyboardPopoverWithType:(int)arg1 keyString:(id)arg2 popoverController:(id)arg3 textInputView:(id)arg4 caretRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5 isVerticalText:(bool)arg6 completion:(id /* block */)arg7;
- (id)_rangeForAutocorrectionText:(id)arg1;
- (id)_remoteAppId;
- (id)_remoteAssociatedDomains;
- (id)_remoteLocalizedAppName;
- (id)_remoteUnlocalizedAppName;
- (void)_requestInputManagerSync;
- (void)_resetCapsLock;
- (void)_selectionScrolling:(bool)arg1 scroller:(id)arg2;
- (id)_sessionIdentifier;
- (unsigned int)_setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inputString:(id)arg3 lastInputString:(id)arg4 searchString:(id)arg5 compareAttributes:(bool)arg6;
- (void)_setAutocorrects:(bool)arg1;
- (void)_setAutofillGroup:(id)arg1;
- (void)_setCandidateController:(id)arg1;
- (void)_setCapsLockIfNeeded:(struct __GSKeyboard { }*)arg1 event:(struct __IOHIDEvent { }*)arg2;
- (void)_setInputManager:(id)arg1;
- (void)_setNeedsCandidates:(bool)arg1;
- (void)_setShiftLockedEnabled:(bool)arg1;
- (void)_setShouldSuppressAssistantBar:(bool)arg1;
- (void)_setShouldSuppressSoftwareKeyboard:(bool)arg1;
- (void)_setTransientSelectionModeEnabled:(bool)arg1 forInputDelegate:(id)arg2;
- (bool)_shouldAcceptAutocorrectionOnSelectionChange;
- (void)_shouldClearTextSuggestions:(bool)arg1;
- (bool)_shouldLoadPredictionsBasedOnCurrentTraits;
- (bool)_shouldMinimizeForHardwareKeyboard;
- (bool)_shouldSuppressAssistantBar;
- (bool)_shouldSuppressSoftwareKeyboard;
- (bool)_shouldSuppressSoftwareKeyboardAndAssistantView;
- (bool)_shouldSuppressSoftwareKeyboardByDictation;
- (bool)_shouldSuppressSoftwareKeyboardByOneness;
- (bool)_shouldSuppressSoftwareKeyboardForResponder:(id)arg1 ignoringPolicyDelegate:(bool)arg2;
- (bool)_shouldSuppressSoftwareKeyboardIgnoringPolicyDelegate:(bool)arg1;
- (void)_showAutofillExtras;
- (void)_showKeyboardIgnoringPolicyDelegate:(bool)arg1;
- (bool)_showsScribbleIconsInAssistantView;
- (id)_supplementalCandidateIcon:(id)arg1;
- (void)_suppressSoftwareKeyboardStateChangedIgnoringPolicyDelegate:(bool)arg1;
- (void)_tagTouchForTypingMenu:(unsigned int)arg1;
- (id)_targetForResponderCommand:(SEL)arg1;
- (id)_textChoicesAssistant;
- (long long)_textInputSourceForDelegate:(id)arg1;
- (void)_textSelectionEditMenuDidShow;
- (void)_updateCanSuggestSupplementalItemsForCurrentSelection;
- (void)_updateDelegateRequiresKeyEventsFromRemoteTextInput;
- (void)_updateExternalDeviceInputSetting;
- (void)_updateExternalDeviceInputSettingForWindow:(id)arg1;
- (void)_updateKeyboardLanguage:(id)arg1;
- (void)_updateKeyboardSuppression:(id)arg1;
- (void)_updateShouldSuppressAssistantBar;
- (void)_updateSoundPreheating;
- (void)_updateSoundPreheatingForWindow:(id)arg1;
- (void)_updateTextInputPencilSource;
- (void)_wheelChangedWithEvent:(id)arg1;
- (void)acceptAutocorrection;
- (void)acceptAutocorrectionAndEndComposition;
- (void)acceptAutocorrectionWithCompletionHandler:(id /* block */)arg1;
- (void)acceptAutocorrectionWithCompletionHandler:(id /* block */)arg1 requestedByRemoteInputDestination:(bool)arg2;
- (void)acceptCandidate:(id)arg1;
- (id)acceptCurrentCandidate;
- (void)acceptCurrentCandidateIfSelected;
- (void)acceptFirstCandidate;
- (void)acceptHandwritingCandidate;
- (id)acceptInlineCandidate;
- (void)acceptInlineCompletionWithCompletionHandler:(id /* block */)arg1;
- (bool)acceptInputString:(id)arg1;
- (void)acceptPredictiveInput:(id)arg1;
- (void)acceptPredictiveInput:(id)arg1 appendSeparator:(bool)arg2 executionContext:(id)arg3;
- (void)acceptRecentInput:(id)arg1;
- (bool)acceptWord:(id)arg1 firstDelete:(unsigned long long)arg2;
- (bool)acceptWord:(id)arg1 firstDelete:(unsigned long long)arg2 forInput:(id)arg3;
- (void)acceptingCandidateWithTrigger:(id)arg1;
- (bool)accessibilityUsesExtendedKeyboardPredictionsEnabled;
- (id)activeDictationLanguage;
- (id)activeLayout;
- (long long)adaptivePresentationStyleForPresentationController:(id)arg1 traitCollection:(id)arg2;
- (void)addInputObject:(id)arg1;
- (void)addInputString:(id)arg1;
- (void)addInputString:(id)arg1 fromVariantKey:(bool)arg2;
- (void)addInputString:(id)arg1 withFlags:(unsigned long long)arg2;
- (void)addInputString:(id)arg1 withFlags:(unsigned long long)arg2 withInputManagerHint:(id)arg3;
- (void)addSupplementalLexicon:(id)arg1;
- (void)adjustAutoDeleteTimerForForce:(double)arg1;
- (void)adjustCapsLockDelayOverride;
- (void)adjustPhraseBoundaryInForwardDirection:(bool)arg1 granularity:(int)arg2 executionContext:(id)arg3;
- (void)adjustSegmentSize:(long long)arg1;
- (void)allowResponderChainFirstChanceToHandleKeyEvent:(id)arg1;
- (bool)allowsReachableKeyboard;
- (void)animateAutocorrectionToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)animateAutocorrectionToText:(id)arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (bool)animateUpdateBars;
- (void)applicationResumed:(id)arg1;
- (void)applicationResumedEventsOnly:(id)arg1;
- (void)applicationSuspendedEventsOnly:(id)arg1;
- (void)applyAssistantItem:(id)arg1;
- (id)arrowKeyHistory;
- (void)assertCursorForForSelectionChange;
- (unsigned int)assertIntermediateText:(id)arg1;
- (void)assertTextForDictation;
- (bool)assertTextForRemoteDocument:(id)arg1 withSelectionDelta:(struct { long long x1; long long x2; })arg2 updatingSelection:(bool)arg3;
- (void)assertionActivationStateChangedToState:(bool)arg1 forType:(unsigned long long)arg2;
- (bool)assertionActivationStateForType:(unsigned long long)arg1;
- (id)asyncCapableInputDelegate;
- (id)asyncInputDelegate;
- (id)asyncWebKitInteractionDelegate;
- (id)autocorrectBubbleContainer;
- (id)autocorrectPrompt;
- (id)autocorrectPromptRectsForInput:(id)arg1;
- (id)autocorrectPromptRectsFromFirstDelegateRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 lastDelegateRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)autocorrectPromptTask;
- (bool)autocorrectSpellingEnabled;
- (void)autocorrectionAnimationDidStopWithAutocorrectionView:(id)arg1;
- (id)autocorrectionController;
- (bool)autocorrectionPreference;
- (unsigned long long)autocorrectionPreferenceForTraits;
- (id)autocorrectionRecordForWord:(id)arg1;
- (bool)automaticMinimizationEnabled;
- (void)becomeFirstResponderAndMakeVisible:(bool)arg1;
- (void)beginAcceptingInlineCompletionByDirectTap;
- (void)beginFloatingTransitionFromPanGestureRecognizer:(id)arg1;
- (void)beginObservingInputOverlayContainerFrame;
- (double)biasedKeyboardWidthRatio;
- (id)buildInputSourceState;
- (bool)callLayoutIsGeometricShiftOrMoreKeyForTouch:(id)arg1;
- (bool)callLayoutIsShiftKeyBeingHeld;
- (void)callLayoutUpdateAllLocalizedKeys;
- (void)callLayoutUpdateLocalizedKeys;
- (void)callLayoutUpdateRecentInputs;
- (void)callLayoutUpdateReturnKey;
- (bool)callShouldDeleteWithWordCountForRapidDelete:(int)arg1 characterCountForRapidDelete:(int)arg2;
- (bool)callShouldInsertText:(id)arg1;
- (bool)callShouldInsertText:(id)arg1 onDelegate:(id)arg2;
- (bool)canHandleDelete;
- (bool)canHandleKeyHitTest;
- (bool)canHandlePresses:(id)arg1 withEvent:(id)arg2;
- (bool)canInsertAdaptiveImageGlyph;
- (bool)canInsertEmojiImageTextAttachment;
- (bool)canInsertStickerAsTextInputPayload;
- (bool)canPasteImage;
- (bool)canPresentDictationMenuWithAnimationStyle:(long long)arg1;
- (bool)canPresentEmojiPopover;
- (bool)canPresentOrDismissEmojiPopover;
- (bool)canShowAppConnections;
- (bool)canShowPredictionBar;
- (bool)canSuggestSupplementalItemsForCurrentSelection;
- (bool)canUseCandidateBarAsSupplementToInlineView;
- (void)cancelAllKeyEvents;
- (void)cancelSplitTransition;
- (void)candidateBarDidExtendWithGesture;
- (id)candidateController;
- (id)candidateList;
- (void)candidateListAcceptCandidate:(id)arg1;
- (void)candidateListInvalidateSelection:(id)arg1;
- (void)candidateListSelectionDidChange:(id)arg1;
- (bool)candidateSelectionPredictionForTraits;
- (bool)capsLockKeyHasLanguageSwitchLabel;
- (id)capslockAssertion;
- (bool)caretBlinks;
- (bool)caretVisible;
- (bool)centerFilled;
- (int)changeCount;
- (void)changingContextWithTrigger:(id)arg1;
- (bool)checkSpellingPreferenceForTraits;
- (void)cleanupKeyboardPopover:(id)arg1;
- (void)clearAnimations;
- (void)clearAutocorrectPromptTimer;
- (void)clearAutofillGroup;
- (void)clearChangeTimeAndCount;
- (void)clearCursorAccessory;
- (void)clearCursorAssertion;
- (void)clearDelegate;
- (void)clearDetachHardwareKeyboardAction;
- (void)clearDictationMenuTimer;
- (void)clearExcessKeyboardMemory;
- (void)clearForwardingInputDelegateAndResign:(bool)arg1;
- (void)clearInput;
- (void)clearInputForMarkedText;
- (void)clearInputModeAssertion;
- (void)clearInputWithCandidatesCleared:(bool)arg1;
- (void)clearKeyboardWindowSnapshot;
- (void)clearLanguageIndicator;
- (void)clearLayouts;
- (void)clearLongPressTimer;
- (void)clearRecentInput;
- (void)clearSelection;
- (void)clearShiftState;
- (void)clearTimers;
- (void)clearTransientState;
- (void)collapseSelection;
- (void)completeDelete;
- (void)completeDeleteFromInput;
- (void)completeDeleteOnceFromInputWithCharacterBefore:(unsigned int)arg1;
- (void)completeHandleKeyEvent:(id)arg1;
- (void)configureTipViewWithTitle:(id)arg1 description:(id)arg2 closeButtonAction:(id)arg3;
- (id)contentScrollInitialContentOffset;
- (bool)continuousPathUnderway;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectToAutocorrectRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 delegateView:(id)arg2 container:(id)arg3;
- (void)copyOperation;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })correctionRect;
- (void)createTypoTrackerReport;
- (long long)currentHandBias;
- (id)currentKey;
- (bool)currentKeyboardTraitsAllowCandidateBarWhileIgnoringHidePredictionTrait:(bool)arg1;
- (id)cursorAssertion;
- (bool)cursorIsAtEndOfMarkedText;
- (void)cutOperation;
- (void)deactivateLayout;
- (void)dealloc;
- (struct CGSize { double x1; double x2; })defaultSizeForInterfaceOrientation:(long long)arg1;
- (void)defaultsDidChange;
- (bool)deferEventHandlingToSystemWithContext:(id)arg1;
- (void)deferReplaceTextActionToSystem:(id)arg1;
- (bool)delayedCandidateList;
- (void)delayedInit;
- (id)delegate;
- (id)delegateAsResponder;
- (unsigned long long)delegateConformanceType;
- (bool)delegateRequiresKeyEvents;
- (bool)delegateSuggestionsForCurrentInput;
- (bool)delegateSupportsCorrectionUI;
- (bool)delegateSupportsImagePaste;
- (void)deleteBackward;
- (void)deleteBackwardAndNotify:(bool)arg1;
- (void)deleteBackwardAndNotifyAtEnd:(bool)arg1 deletionCount:(unsigned long long)arg2 reinsertTextInLoop:(bool)arg3;
- (bool)deleteForwardAndNotify:(bool)arg1;
- (bool)deleteForwardAndNotify:(bool)arg1 producedByDeleteInput:(bool)arg2;
- (void)deleteFromInput;
- (void)deleteFromInputWithFlags:(unsigned long long)arg1;
- (void)deleteHandwritingStrokesAtIndexes:(id)arg1;
- (double)deleteWordLastDelete;
- (void)detach;
- (void)detachHardwareKeyboard;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })deviceSpecificPaddingForInterfaceOrientation:(long long)arg1 inputMode:(id)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })deviceSpecificStaticHitBufferForInterfaceOrientation:(long long)arg1 inputMode:(id)arg2;
- (id)dictationPopoverController;
- (void)didChangeForwardingInputDelegate:(id)arg1;
- (void)didChangePhraseBoundary;
- (void)didClearText;
- (void)didCompleteUpdateDefaults;
- (void)didDismissMemojiCard;
- (void)didMoveToSuperview;
- (void)didMoveToWindow;
- (void)didPresentMemojiCard;
- (id /* block */)didTeardownExistingDelegate;
- (bool)disableInputBars;
- (void)disableTransientSelectionMode;
- (void)dismissAutoFillPopover;
- (void)dismissContinuousPathIntroductionView;
- (void)dismissCursorAccessory;
- (void)dismissDictationMenu;
- (void)dismissDictationPopover;
- (void)dismissDictationPopoverAndCancelDictation;
- (void)dismissDictationTip;
- (void)dismissEditingIntroductionView;
- (void)dismissEducationTip;
- (void)dismissEmojiPopoverBeforeCleanup:(bool)arg1;
- (void)dismissEmojiPopoverIfNecessaryWithCompletion:(id /* block */)arg1;
- (void)dismissFloatingKeyboardFromPencilKitIfNeeded;
- (void)dismissInputModeIndicator;
- (void)dismissKeyboard;
- (void)dismissKeyboardFeedbackAssistantViewController;
- (void)dismissKeyboardPopover:(id)arg1 beforeCleanup:(bool)arg2 completion:(id /* block */)arg3;
- (void)dismissMultilingualKeyboardTip;
- (void)dismissMultilingualSettingTip;
- (void)dismissPressAndHoldPopover;
- (void)dismissStickerEditor:(bool)arg1;
- (void)dismissTextChoicePrompt;
- (void)displayAutoFillPopoverIfAutoFillModeDetected;
- (bool)displaysCandidates;
- (id)documentState;
- (void)documentStateDidChange;
- (void)documentStateFromInputDelegate:(id /* block */)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })dragGestureRectInView:(id)arg1;
- (id)dynamicCaretList;
- (id)editMenuInteraction:(id)arg1 menuForConfiguration:(id)arg2 suggestedActions:(id)arg3;
- (id)editMenuTipView;
- (bool)editingTraitsMarkedDirty;
- (void)ejectKeyDown;
- (id)emojiPopoverController;
- (void)emojiSearchWillInsertEmoji:(id)arg1 forSearchQuery:(id)arg2;
- (void)emojiSearchWillInsertEmoji:(id)arg1 forSearchQuery:(id)arg2 selectionMethod:(id)arg3 inputType:(id)arg4;
- (void)enable;
- (void)enableTransientInputDelegateSelectionMode;
- (void)enableTransientSelectionMode;
- (void)endAcceptingInlineCompletionByDirectTap;
- (void)endObservingInputOverlayContainerFrame;
- (id)environmentScrollInitialContentOffset;
- (void)fadeAutocorrectPrompt;
- (id)feedbackGenerator;
- (void)finishLayoutChangeWithArguments:(id)arg1;
- (void)finishLayoutToCurrentInterfaceOrientation;
- (void)finishSplitTransitionWithProgress:(double)arg1;
- (bool)floatingForced;
- (void)flushDelayedTasks;
- (bool)forCustomInputView;
- (void)forceShiftUpdate;
- (void)forceShiftUpdateIfKeyboardStateChanged;
- (void)forwardDictationEvent_cancelDictation;
- (void)forwardDictationEvent_handleDictationShouldPause:(bool)arg1 withNewDelagate:(bool)arg2;
- (void)forwardDictationEvent_handleTip:(id)arg1 title:(id)arg2;
- (void)forwardDictationEvent_movePopoverView:(id)arg1;
- (void)forwardDictationEvent_resumeDictation;
- (void)forwardDictationEvent_startDictation;
- (void)forwardDictationEvent_stopDictation:(bool)arg1;
- (void)forwardDictationEvent_stopDictationIgnoreFinalizePhrases;
- (void)forwardDictationEvent_switchToDictationInputModeWithOptions:(id)arg1;
- (void)forwardDictationEvent_switchToDictationLanguage:(id)arg1;
- (void)forwardDictationEvent_updateIdleDetection:(long long)arg1;
- (void)forwardKeyboardCameraEvent_selfDestruct;
- (void)forwardKeyboardCameraEvent_startCameraInput:(id)arg1;
- (void)forwardKeyboardCameraEvent_updatePreviewText:(id)arg1 asMarkedText:(bool)arg2;
- (void)forwardStickerEvent_presentCard;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForKeylayoutName:(id)arg1;
- (id)generateAutocorrectionListForSelectedText;
- (id)generateAutocorrectionReplacements:(id)arg1;
- (void)generateAutocorrectionWithExecutionContext:(id)arg1;
- (void)generateCandidates;
- (void)generateCandidatesWithOptions:(int)arg1;
- (void)geometryChangeDone:(bool)arg1;
- (id)geometryDelegate;
- (bool)geometryIsChanging;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })getCorrectionRectIsVertical:(bool*)arg1;
- (bool)globeKeyDisplaysAsEmojiKey;
- (void)handleAutoDeleteContinuationOnDestinationWithDeletionCount:(unsigned long long)arg1;
- (void)handleAutoFillContactDetected;
- (void)handleAutoFillContactPopoverCommand;
- (void)handleAutoFillCreditCardDetected;
- (void)handleAutoFillCreditCardPopoverCommand;
- (void)handleAutoFillPasswordDetected;
- (void)handleAutoFillPasswordPopoverCommand;
- (void)handleAutofillCredentialSaveIfNeeded:(id)arg1;
- (void)handleClear;
- (void)handleClearWithInsertBeforeAdvance:(id)arg1;
- (void)handleDelete;
- (void)handleDeleteWithExecutionContext:(id)arg1;
- (void)handleDeleteWordWithExecutionContext:(id)arg1;
- (void)handleDictationForResponderChange;
- (void)handleEmojiPopoverKeyCommand;
- (void)handleEventCallbackFromRemoteDestination_didChooseSupplementalItem:(id)arg1 toReplaceText:(id)arg2;
- (void)handleEventFromRemoteDestination_canSuggestSupplementalItemsForCurrentSelection:(bool)arg1;
- (void)handleEventFromRemoteSource_autoFillIsMenuPresented:(bool)arg1;
- (void)handleEventFromRemoteSource_cancelChooseSupplementalItemToInsert;
- (void)handleEventFromRemoteSource_chooseSupplementalItem:(id)arg1 toReplaceText:(id)arg2;
- (void)handleEventFromRemoteSource_insertAutofillContent:(id)arg1;
- (void)handleEventFromRemoteSource_insertSupplementalCandidate:(id)arg1 textToCommit:(id)arg2;
- (void)handleEventFromRemoteSource_insertionPointEnteredText:(id)arg1 withSupplementalCandidate:(id)arg2;
- (void)handleEventFromRemoteSource_insertionPointExitedTextWithSupplementalItems;
- (void)handleGrammarCorrectionEntries:(id)arg1;
- (bool)handleKeyAppCommandForCurrentEvent;
- (bool)handleKeyCommand:(id)arg1 repeatOkay:(bool*)arg2 beforePublicKeyCommands:(bool)arg3;
- (void)handleKeyEvent:(id)arg1;
- (bool)handleKeyInputMethodCommandForCurrentEvent;
- (bool)handleKeyTextCommandForCurrentEvent;
- (void)handleKeyboardInput:(id)arg1 executionContext:(id)arg2;
- (bool)handleMoveResponderWithShift:(bool)arg1;
- (void)handleObserverCallback;
- (void)handleRemoteDictationEvent_cancelDictation;
- (void)handleRemoteDictationEvent_handleTip:(id)arg1;
- (void)handleRemoteDictationEvent_movePopoverView:(id)arg1;
- (void)handleRemoteDictationEvent_resumeDictation;
- (void)handleRemoteDictationEvent_setEditMenuFrame:(id)arg1;
- (void)handleRemoteDictationEvent_startDictation;
- (void)handleRemoteDictationEvent_stopDictation:(bool)arg1;
- (void)handleRemoteDictationEvent_stopDictationIgnoreFinalizePhrases;
- (void)handleRemoteDictationEvent_switchToDictationInputModeWithOptions:(id)arg1;
- (void)handleRemoteDictationEvent_switchToDictationLanguage:(id)arg1;
- (void)handleRemoteDictationEvent_updateIdleDetection:(long long)arg1;
- (void)handleRemoteIndirectGestureWithState:(id)arg1;
- (void)handleRemoteKeyboardCameraEvent_startCameraInput:(id)arg1;
- (void)handleStickerEvent_presentCard;
- (bool)handleTabWithShift:(bool)arg1;
- (bool)handleTabWithShift:(bool)arg1 beforePublicKeyCommands:(bool)arg2;
- (bool)handleTabWithShift:(bool)arg1 beforePublicKeyCommands:(bool)arg2 isMoveAction:(bool)arg3 testOnly:(bool)arg4;
- (void)handleWebViewCredentialsSaveForWebsiteURL:(id)arg1 user:(id)arg2 password:(id)arg3 passwordIsAutoGenerated:(bool)arg4;
- (bool)hardwareKeyboardAttached;
- (void)hardwareKeyboardAvailabilityChanged;
- (void)hardwareKeyboardAvailabilityDidChange:(id)arg1;
- (bool)hardwareKeyboardIsSeen;
- (bool)hasAdvancedInputDelegate;
- (bool)hasAsyncCapableInputDelegate;
- (bool)hasAutocorrectPrompt;
- (bool)hasCursorAssertion;
- (bool)hasEditableMarkedText;
- (bool)hasInlineCompletionAsMarkedText;
- (bool)hasLanguageIndicator;
- (bool)hasMarkedText;
- (bool)hasNextKeyResponder;
- (bool)hasPreviousKeyResponder;
- (bool)hideAccessoryViewsDuringSplit;
- (void)hideDictationMenuIfNeeded:(bool)arg1;
- (bool)hideInlineCandidates;
- (void)hideInternationalKeyIntroductionIfNeeded;
- (void)hideKeyboard;
- (void)hideKeyboardIgnoringHardwareLayouts:(bool)arg1;
- (void)hideKeyboardWithoutPreflightChecks;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (bool)imageSuggestionEnabled;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forCustomInputView:(bool)arg2;
- (id)inlineCandidateView;
- (id)inlineCompletionAsMarkedText;
- (id)inlineTextCompletionController;
- (id)inputDelegate;
- (id)inputDelegateManager;
- (id)inputForMarkedText;
- (id)inputManager;
- (id)inputManagerState;
- (id)inputModeAssertion;
- (id)inputModeIndicatorController;
- (id)inputModeLastUsedPreference;
- (id)inputModePreference;
- (bool)inputModeSwitcherVisible;
- (id)inputOverlayContainer;
- (id)inputOverlayContainerForCandidateView:(bool)arg1;
- (id)inputStringFromPhraseBoundary;
- (id)inputSystemSourceSession;
- (void)insertAdaptiveImageGlyph:(id)arg1;
- (void)insertAttributedText:(id)arg1;
- (void)insertCustomTextSuggestion:(id)arg1;
- (void)insertDictationResult:(id)arg1;
- (void)insertEmojiImageTextAttachment:(id)arg1;
- (void)insertSticker:(id)arg1;
- (bool)insertTextIfShould:(id)arg1;
- (void)insertedAccentVariantFromPopover:(id)arg1;
- (void)insertedEmojiFromPopover:(id)arg1 selectionMethod:(id)arg2;
- (bool)insertsSpaceAfterPredictiveInput;
- (id)internationalKeyDisplayStringOnEmojiKeyboard;
- (id)internationalKeyIntroductionView;
- (void)invalidateTextEntryContext;
- (id)isAttachedHardwareKeyboard;
- (bool)isAutoFillMode;
- (bool)isAutoShifted;
- (bool)isCallingInputDelegate;
- (bool)isCallingTextChangedDuringInputModeSwitch;
- (bool)isCapsLockASCIIToggle;
- (bool)isCapsLockSignOn;
- (bool)isCapsLockSwitchEnabled;
- (bool)isCurrentEditResponderInEditingMode;
- (bool)isDictationLanguageMenuPresented;
- (bool)isDictationMenuPresented;
- (bool)isDictationPopoverPresented;
- (bool)isEmojiPopoverBeingDismissed;
- (bool)isEmojiPopoverBeingPresented;
- (bool)isEmojiPopoverPresented;
- (bool)isEmojiPopoverVisibleOrDismissing;
- (bool)isFloatingLocked;
- (bool)isHardwareKeyboardAttachedNow;
- (bool)isInHardwareKeyboardMode;
- (bool)isInitializing;
- (bool)isLongPress;
- (bool)isMemberOfAutofillGroup:(id)arg1;
- (bool)isMemberOfPossibleAutofillGroup:(id)arg1;
- (bool)isMinimized;
- (bool)isPredictionViewControllerVisible;
- (bool)isPressAndHoldPopoverPresented;
- (bool)isRTIClient;
- (bool)isRotating;
- (bool)isSelectionChanging;
- (bool)isSettingDelegate;
- (bool)isShiftKeyBeingHeld;
- (bool)isShiftLocked;
- (bool)isShifted;
- (bool)isSyncingDictationLanguageForInputModeSwitch;
- (bool)isTrackpadMode;
- (bool)isUsingDictationLayout;
- (void)jumpToCompositions;
- (void)keyActivated;
- (void)keyDeactivated;
- (void)keyboardDidHide:(id)arg1;
- (bool)keyboardDrawsOpaque;
- (void)keyboardFeedbackAssistantControllerDidFinish;
- (id)keyboardFeedbackAssistantViewController;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })keyboardIntroductionFrame;
- (bool)keyboardIsInPencilTextInputMode;
- (bool)keyboardIsKeyPad;
- (bool)keyboardLayoutIsInAnotherProcess;
- (id)keyboardMenuElements;
- (id)keyboardMenuTipIdentifier;
- (void)keyboardSceneDelegate:(id)arg1 startedPinningInputViewsOnBehalfOfResponder:(id)arg2;
- (void)keyboardSceneDelegate:(id)arg1 stoppedPinningInputViewsOnBehalfOfResponder:(id)arg2;
- (id)keyboardState;
- (id)keyboardStateManager;
- (id)keyboardViewController;
- (id)keyboardWindowSnapshot;
- (bool)keyboardsExpandedPreference;
- (id)keyedLayouts;
- (id)keyplaneView;
- (id)languageIndicator;
- (unsigned long long)lastChooseSupplementalItemToInsertCallbackIdentifier;
- (id)lastMatchedSupplementalCandidate;
- (double)lastTouchDownTimestamp;
- (id)layout;
- (void)layoutDidResize;
- (id)layoutForKeyHitTest;
- (void)layoutHasChanged;
- (bool)layoutIsResizing;
- (id)layoutState;
- (void)layoutSubviews;
- (bool)liveConversionEnabled;
- (void)longPressAction;
- (void)lookUpResponderChainForCustomInputView;
- (id)markedText;
- (id)markedTextOverlay;
- (bool)maximizing;
- (unsigned long long)minimumTouchesForTranslation;
- (void)modifyTextInputTraits:(id /* block */)arg1 forceSync:(bool)arg2;
- (void)moveCursorByAmount:(long long)arg1;
- (void)moveCursorLeftShifted:(bool)arg1;
- (void)moveCursorRightShifted:(bool)arg1;
- (void)movePhraseBoundaryToDirection:(long long)arg1 granularity:(long long)arg2;
- (bool)needAutofillLogin;
- (bool)nextCharacterIsWordCharacter;
- (bool)nextInputWouldStartSentence;
- (bool)noContent;
- (void)nonDestructivelyDismissKeyboard;
- (void)notifyInputSourceStateChangeIfNeeded;
- (void)notifyShiftState;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)obtainHideInlineCandidatesAssertionForReason:(id)arg1;
- (void)optOutASPInTextField;
- (id)overlayContainerObserved;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })overrideEditMenuTargetRectForConfiguration:(id)arg1;
- (void)pasteOperation;
- (void)pauseDictationForResponderChange;
- (id)pendingSupplementalCandidateToInsert;
- (void)performBlockWithTextInputChangesIgnoredForNonMacOS:(id /* block */)arg1;
- (void)performDelete;
- (void)performHitTestForTouchEvent:(id)arg1 executionContextPassingNSNumber:(id)arg2;
- (void)performHitTestForTouchEvents:(id)arg1 executionContextPassingNSNumber:(id)arg2;
- (void)performKeyBehaviorCommitInline;
- (void)performKeyBehaviorConfirm;
- (void)performKeyBehaviorConfirmFirstCandidate;
- (void)performKeyboardActionButtonAction;
- (bool)performKeyboardEvent:(id)arg1;
- (void)performKeyboardOutput:(id)arg1;
- (void)performKeyboardOutput:(id)arg1 checkingDelegate:(bool)arg2;
- (bool)performKeyboardOutput:(id)arg1 checkingDelegate:(bool)arg2 forwardToRemoteInputSource:(bool)arg3;
- (void)performKeyboardOutputAsInputViewControllerOutput:(id)arg1;
- (void)performOperations:(id /* block */)arg1 withTextInputSource:(long long)arg2;
- (void)performReturn;
- (void)performSendAction;
- (void)performSendCurrentLocation;
- (void)performStopAutoDeleteAtDocumentStart;
- (void)performTextOperationActionSelector:(SEL)arg1;
- (bool)performingRemoteTextOperations;
- (unsigned long long)phraseBoundary;
- (id)physicalKeyboardEventWithInput:(id)arg1 inputFlags:(int)arg2;
- (void)playDeleteKeyFeedbackIfNecessaryRepeat:(bool)arg1 rapid:(bool)arg2;
- (void)playDeleteKeyFeedbackRepeat:(bool)arg1 rapid:(bool)arg2;
- (bool)playInputClick;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 forEvent:(struct __GSEvent { }*)arg2;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (void)popoverPresentationController:(id)arg1 willRepositionPopoverToRect:(inout struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 inView:(inout id*)arg3;
- (void)postInputResponderCapabilitiesChangedNotification;
- (void)postInputViewControllerShouldUpdateNotification:(id)arg1;
- (bool)predictionFromPreference;
- (void)prepareForFloatingTransition:(bool)arg1;
- (void)prepareForGeometryChange;
- (void)prepareKeyboardInputModeFromPreferences:(id)arg1;
- (void)prepareLayoutForInterfaceOrientation:(long long)arg1;
- (void)presentContinuousPathIntroductionView;
- (void)presentDictationMenu;
- (void)presentDictationMenuTip:(id)arg1;
- (void)presentDictationMenuTipWithTitle:(id)arg1 description:(id)arg2;
- (void)presentDictationMenuWithAnimationStyle:(long long)arg1;
- (void)presentDictationPopover;
- (void)presentDictationUndoMenu;
- (void)presentEditingIntroductionView;
- (void)presentEducationTipWithTitle:(id)arg1 description:(id)arg2;
- (void)presentEmojiPopoverViaTrigger:(id)arg1 completion:(id /* block */)arg2;
- (void)presentKeyboardFeedbackAssistantViewControllerForLogURL:(id)arg1;
- (void)presentKeyboardMenu:(int)arg1;
- (void)presentKeyboardPopoverWithType:(int)arg1 keyString:(id)arg2 completion:(id /* block */)arg3;
- (void)presentMultilingualKeyboardTip:(id)arg1;
- (void)presentMultilingualSettingTip:(id)arg1;
- (void)presentPressAndHoldPopoverWithKeyString:(id)arg1;
- (void)presentStickerEditorWithStickerIdentifier:(id)arg1 sourceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)presentTextChoicePromptForRange:(id)arg1;
- (bool)presentTextCompletionAsMarkedText:(id)arg1;
- (void)presentationControllerDidDismiss:(id)arg1;
- (bool)presentationControllerShouldDismiss:(id)arg1;
- (id)pressAndHoldPopoverController;
- (void)prewarmEmojiKeyboardIfNeeded;
- (bool)prewarmsPredictiveCandidates;
- (void)processPayloadInfo:(id)arg1;
- (int)promptTypeForInputString:(id)arg1;
- (void)provideAutoFillTypingUpdatesIfNecessary;
- (void)provideCandidateUISuggestions:(id)arg1;
- (bool)receivedCandidatesInCurrentInputMode;
- (void)recomputeActiveInputModesWithExtensions:(bool)arg1;
- (void)recomputeActiveInputModesWithExtensions:(bool)arg1 allowNonLinguisticInputModes:(bool)arg2;
- (void)refreshRivenPreferences;
- (void)reinitializeAfterInputModeSwitch:(bool)arg1;
- (void)rejectAutocorrection:(id)arg1;
- (void)releaseEmojiKeyboardPrewarmingAssertion;
- (void)releaseInputManager;
- (void)releaseInputManagerIfInactive;
- (void)releaseSuppressUpdateCandidateView;
- (void)reloadCurrentInputMode;
- (void)remoteControlReceivedWithEvent:(id)arg1;
- (id)remoteTextEditingMetadata;
- (id)remoteTextInputPartner;
- (id)remoteTextInputPartnerPrivate;
- (void)removeASPVisualEffectsIfNecessary:(id)arg1;
- (void)removeAllDynamicDictionaries;
- (void)removeAutocorrectPrompt;
- (void)removeAutocorrectPromptAndCandidateList;
- (void)removeAutocorrection;
- (void)removeCandidateList;
- (void)removeCapsLockDelayOverride;
- (void)removeFromSuperview;
- (void)removeInlineTextCompletionPrompt;
- (void)removeRecentInput:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)removeSupplementalLexicon:(id)arg1;
- (void)removeTextChoicePrompt;
- (void)removeTextChoicePromptAndAutocorrection;
- (void)removeTextChoicePromptWithUnderline;
- (void)removeTextChoiceUnderlines;
- (void)removeTextChoiceUnderlinesInRange:(id)arg1;
- (void)replaceRange:(id)arg1 oldText:(id)arg2 withText:(id)arg3;
- (void)replaceText:(id)arg1;
- (id)replacementsFromSelectedText;
- (void)reportSmartRepliesConcern;
- (void)reportSmartReplyFeedbackUIWasPresented;
- (void)representDictationMenu;
- (unsigned long long)requestedInteractionModel;
- (void)resetInputDelegate;
- (void)resetIsPhysicallyAttachedHardwareKeyboard;
- (void)resetSmartReplyFeedbackUIIfAlreadyShown;
- (id)responderForSendCurrentLocation;
- (id)responderStylingTraitsForceEditingMask:(bool)arg1;
- (void)responseContextDidChange;
- (void)restoreFocusFromEntryPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)restoreTextSuggestions;
- (void)resumeDictationForResponderChange;
- (id)returnKeyDisplayName;
- (bool)returnKeyEnabled;
- (bool)returnKeyEnabledInLayout;
- (int)returnKeyState;
- (int)returnKeyType;
- (void)revealHiddenCandidates;
- (bool)rivenPreference;
- (bool)rivenSplitLock;
- (void)saveInputModesPreference:(id)arg1;
- (void)scheduleReplacementsWithOptions:(unsigned long long)arg1;
- (void)scribbleWillBeginWriting:(id)arg1;
- (id)searchStringForMarkedText;
- (void)selectionDidChange:(id)arg1;
- (bool)selectionScrolling;
- (void)selectionScrolling:(id)arg1;
- (void)selectionWillChange:(id)arg1;
- (void)sendCallbacksForPostCorrectionsRemoval;
- (void)sendCallbacksForPreCorrectionsDisplay;
- (void)sendKeyboardDismissalNotification;
- (unsigned long long)serviceRole;
- (void)setActiveDictationLanguage:(id)arg1;
- (void)setActiveLayout:(id)arg1;
- (void)setAnimateUpdateBars:(bool)arg1;
- (void)setArrowKeyHistory:(id)arg1;
- (void)setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inputString:(id)arg3 searchString:(id)arg4;
- (void)setAutocorrectBubbleContainer:(id)arg1;
- (void)setAutocorrectPromptTask:(id)arg1;
- (void)setAutocorrectSpellingEnabled:(bool)arg1;
- (void)setAutocorrection:(id)arg1;
- (void)setAutocorrectionList:(id)arg1;
- (void)setAutomaticMinimizationEnabled:(bool)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCanSuggestSupplementalItemsForCurrentSelection:(bool)arg1;
- (void)setCandidateDisplayIsExtended:(bool)arg1;
- (void)setCandidateList:(id)arg1;
- (void)setCandidates:(id)arg1;
- (void)setCapsLockIfNeeded;
- (void)setCapsLockIfNeededForPhysicalKeyboardEvent:(id)arg1;
- (void)setCapsLockSign;
- (void)setCapslockAssertion:(id)arg1;
- (void)setCaretBlinks:(bool)arg1;
- (void)setCaretVisible:(bool)arg1;
- (void)setContentScrollInitialContentOffset:(id)arg1;
- (void)setCorrectionLearningAllowed:(bool)arg1;
- (void)setCursorAssertion:(id)arg1;
- (void)setDefaultTextInputTraits:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDelegate:(id)arg1 force:(bool)arg2;
- (void)setDelegate:(id)arg1 force:(bool)arg2 delayEndInputSession:(bool)arg3;
- (void)setDeleteWordLastDelete:(double)arg1;
- (void)setDidTeardownExistingDelegate:(id /* block */)arg1;
- (void)setDocumentState:(id)arg1;
- (void)setEditMenuFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setEditingTraitsMarkedDirty:(bool)arg1;
- (void)setEnvironmentScrollInitialContentOffset:(id)arg1;
- (void)setFeedbackGenerator:(id)arg1;
- (void)setForCustomInputView:(bool)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setGeometryDelegate:(id)arg1;
- (void)setGeometryIsChanging:(bool)arg1;
- (void)setHardWareKeyboardAttached:(bool)arg1;
- (void)setHardwareKeyboardIsSeen;
- (void)setHardwareKeyboardIsSeen:(bool)arg1;
- (void)setHasNextKeyResponder:(bool)arg1;
- (void)setHasPreviousKeyResponder:(bool)arg1;
- (void)setHideInlineCandidates:(bool)arg1;
- (void)setInHardwareKeyboardMode:(bool)arg1;
- (void)setInHardwareKeyboardMode:(bool)arg1 forceRebuild:(bool)arg2;
- (void)setInHardwareKeyboardMode:(bool)arg1 forceRebuild:(bool)arg2 shouldMoveKeyboard:(bool)arg3;
- (void)setInHardwareKeyboardMode:(bool)arg1 shouldMoveKeyboard:(bool)arg2;
- (void)setInSplitKeyboardMode:(bool)arg1;
- (void)setInitialDirection;
- (void)setInlineCompletionAsMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inputString:(id)arg3 searchString:(id)arg4;
- (void)setInputManagerState:(id)arg1;
- (void)setInputMode:(id)arg1;
- (void)setInputMode:(id)arg1 userInitiated:(bool)arg2;
- (void)setInputMode:(id)arg1 userInitiated:(bool)arg2 updateIndicator:(bool)arg3 executionContext:(id)arg4;
- (void)setInputModeAssertion:(id)arg1;
- (void)setInputModeAssertionWithReason:(id)arg1;
- (void)setInputModeFromPreferences;
- (void)setInputModeSwitcherVisibleInRemote:(bool)arg1;
- (void)setInputModeToNextInPreferredListWithExecutionContext:(id)arg1;
- (void)setInputPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setInternationalKeyIntroductionView:(id)arg1;
- (void)setIsAttachedHardwareKeyboard:(id)arg1;
- (void)setIsCallingTextChangedDuringInputModeSwitch:(bool)arg1;
- (void)setKeyboardFeedbackAssistantViewController:(id)arg1;
- (void)setKeyboardInputMode:(id)arg1 userInitiated:(bool)arg2;
- (void)setKeyboardMinimizedByDictation:(bool)arg1;
- (void)setKeyboardState:(id)arg1;
- (void)setLabel:(id)arg1 forKey:(id)arg2;
- (void)setLastChooseSupplementalItemToInsertCallbackIdentifier:(unsigned long long)arg1;
- (void)setLastMatchedSupplementalCandidate:(id)arg1;
- (void)setLayoutAllowsContinuousPath:(bool)arg1;
- (void)setLayoutForKeyHitTest:(id)arg1;
- (void)setLayoutRenderConfig:(id)arg1;
- (void)setLockFloating:(bool)arg1;
- (void)setNeedsAutocorrectionRectsUpdate;
- (void)setOverlayContainerObserved:(id)arg1;
- (void)setOverrideTextInputTraits:(id)arg1;
- (void)setPendingSupplementalCandidateToInsert:(id)arg1;
- (void)setPerformingRemoteTextOperations:(bool)arg1;
- (void)setPreviousGlobeKeyEvent:(id)arg1;
- (void)setPrewarmsPredictiveCandidates:(bool)arg1;
- (void)setReceivedCandidatesInCurrentInputMode:(bool)arg1;
- (void)setRemoteDelegateSupportsImagePaste:(bool)arg1;
- (void)setRemoteDictationPopover:(id)arg1;
- (void)setRequestedInteractionModel:(unsigned long long)arg1;
- (void)setRestoresToEmojiInputMode;
- (void)setReturnKeyEnabled:(bool)arg1;
- (void)setRivenSplitLock:(bool)arg1;
- (void)setSelectionWithPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setServiceRole:(unsigned long long)arg1;
- (void)setShift:(bool)arg1;
- (void)setShift:(bool)arg1 autoshift:(bool)arg2;
- (void)setShiftLocked:(bool)arg1;
- (void)setShiftLockedForced:(bool)arg1;
- (void)setShiftNeedsUpdate;
- (void)setShiftOffIfNeeded;
- (void)setShiftPreventAutoshift:(bool)arg1;
- (void)setShiftStatesNeededInDestination:(bool)arg1 autoShifted:(bool)arg2 shiftLocked:(bool)arg3;
- (void)setShouldIgnoreTextInputChanges:(bool)arg1;
- (void)setShouldSkipCandidateSelection:(bool)arg1;
- (void)setShouldSkipCandidateSelection:(bool)arg1 userInitiated:(bool)arg2;
- (void)setShouldUpdateCacheOnInputModesChange:(bool)arg1;
- (void)setShouldUpdateLayoutAutomatically:(bool)arg1;
- (void)setShowInputModeIndicator:(bool)arg1;
- (void)setShowsCandidateBar:(bool)arg1;
- (void)setShowsCandidateInline:(bool)arg1;
- (void)setSkipRecomputeInputMode:(bool)arg1;
- (void)setSplit:(bool)arg1 animated:(bool)arg2;
- (void)setSplitProgress:(double)arg1;
- (void)setSuggestions:(id)arg1;
- (void)setSuppressUpdateAssistantView:(bool)arg1;
- (void)setSuppressUpdateCandidateView:(bool)arg1;
- (void)setSuppressUpdateInputMode:(bool)arg1;
- (void)setSuppressUpdateLayout:(bool)arg1;
- (void)setSuppressUpdateShiftState:(bool)arg1;
- (void)setTextInputChangesIgnored:(bool)arg1;
- (void)setTwoFingerTapTimestamp:(double)arg1;
- (void)setUpdateLayoutOnShowKeyboard:(bool)arg1;
- (void)setUserInteractionDelegate:(id)arg1;
- (void)setUserSelectedCurrentCandidate:(bool)arg1;
- (void)setUsesCandidateSelection:(bool)arg1;
- (void)setWillSetupNewDelegate:(id /* block */)arg1;
- (void)set_mimicShiftBeingHeld:(bool)arg1;
- (bool)shiftLockedEnabled;
- (bool)shouldAllowRepeatEvent:(id)arg1;
- (bool)shouldAllowSelectionGestures:(bool)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 toBegin:(bool)arg3;
- (bool)shouldAllowTwoFingerSelectionGestureOnView:(id)arg1;
- (bool)shouldApplyKeyboardCommandToUIHost;
- (bool)shouldApplyKeyboardInputToUIHost;
- (bool)shouldCollapseButtonBarForFeedbackUI;
- (bool)shouldIgnoreTextInputChanges;
- (bool)shouldLoadAutofillSignUpInputViewController;
- (bool)shouldShowCandidateBar;
- (bool)shouldShowCandidateBarIfReceivedCandidatesInCurrentInputMode:(bool)arg1 ignoreHidePredictionTrait:(bool)arg2;
- (bool)shouldShowContinuousPathIntroductionView;
- (bool)shouldShowDictationKey;
- (bool)shouldShowEditingIntroductionView;
- (bool)shouldShowInternationalKey;
- (bool)shouldShowInternationalKeyIntroduction;
- (bool)shouldShowLongPredictionList;
- (bool)shouldShowModelessInputTip;
- (bool)shouldShowSmartReplyFeedbackInputDashboardViewController;
- (bool)shouldSkipCandidateSelection;
- (bool)shouldSuppressSelectionCommands;
- (bool)shouldUnderlineCandidate:(id)arg1;
- (bool)shouldUpdateLayoutAutomatically;
- (bool)shouldUseAdaptiveDelete;
- (bool)shouldUseCarPlayModes;
- (bool)shouldUsePinyinStyleRowNavigation;
- (void)showDictationMenuIfNeeded;
- (bool)showInputModeIndicator;
- (void)showInternationalKeyIntroductionIfNeededWithPreviousInputMode:(id)arg1;
- (void)showKeyboard;
- (void)showKeyboardIfNeeded;
- (void)showKeyboardWithoutSuppressionPolicy;
- (void)showNextCandidates;
- (void)showNextPage;
- (void)showPreviousCandidate;
- (void)showSelectionCommands;
- (void)showTextChoicesPrompt;
- (bool)showingEmojiSearch;
- (bool)showsCandidateBar;
- (bool)showsCandidateInline;
- (bool)showsDedicatedEmojiKeyAlongsideGlobeButton;
- (void)skipHitTestForTouchEvent:(id)arg1;
- (void)skipHitTestForTouchEvent:(id)arg1 delayed:(bool)arg2;
- (void)skipHitTestForTouchEvents:(id)arg1;
- (bool)skipRecomputeInputMode;
- (bool)smartInsertDeleteIsEnabled;
- (id)smartPunctuationController;
- (void)smartSelectionForTextInDocument:(id)arg1 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 options:(unsigned long long)arg3 completion:(id /* block */)arg4;
- (bool)splitTransitionInProgress;
- (void)startAutoDeleteTimer;
- (void)startAutoDeleteTimerForForce:(double)arg1;
- (void)stickerPickerKeyboardSessionDidFinish;
- (void)stopAutoDelete;
- (id)stopDictationMenuElementsForTextInputView:(id)arg1;
- (id)stopDictationMenuElementsShowingTitle:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })subtractKeyboardFrameFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (bool)suppliesCompletions;
- (bool)supportsNumberKeySelection;
- (bool)suppressUpdateAssistantView;
- (bool)suppressUpdateCandidateView;
- (bool)suppressUpdateInputMode;
- (bool)suppressUpdateLayout;
- (bool)suppressUpdateShiftState;
- (void)syncDocumentStateToInputDelegate;
- (void)syncInputManagerToAcceptedAutocorrection:(id)arg1 forInput:(id)arg2;
- (void)syncInputManagerToKeyboardState;
- (void)takeTextInputTraitsFromDelegate;
- (id)taskQueue;
- (void)textAccepted:(id)arg1;
- (void)textChanged:(id)arg1;
- (id)textContentTypeForCurrentInputDelegate;
- (void)textDidChange:(id)arg1;
- (void)textDidScroll;
- (void)textFrameChanged:(id)arg1;
- (id)textInputTraits;
- (bool)textInputTraitsNeedAutofill;
- (bool)textInputTraitsNeedAutofillExcludeOneTimeCodeAndContact;
- (bool)textInputTraitsNeedContactAutoFill;
- (bool)textInputTraitsNeedOneTimeCode;
- (id)textInteractionAssistant;
- (id)textSelectionController;
- (void)textSelectionInteractionWillBegin:(id)arg1;
- (void)textSuggestionDidChange:(id)arg1;
- (id)textSuggestions;
- (void)textWillChange:(id)arg1;
- (void)textWillScroll;
- (double)timestampOfLastTouchesEnded;
- (void)toggleShift;
- (void)toggleSoftwareKeyboard;
- (void)touchAutocorrectPromptTimer;
- (void)touchDictationMenuTimer;
- (void)touchDictationMenuTimer:(bool)arg1;
- (void)touchLongPressTimer;
- (void)touchLongPressTimerWithDelay:(double)arg1;
- (void)trackUsageForCandidateAcceptedAction:(id)arg1;
- (void)trackUsageForPromptedCorrection:(id)arg1 inputString:(id)arg2 previousPrompt:(id)arg3;
- (void)traitCollectionDidChange;
- (bool)transitionInProgress;
- (void)triggerPendingKeyup;
- (void)underlineCandidate:(id)arg1;
- (void)undoWithKeyboardInput:(id)arg1;
- (void)unmarkText:(id)arg1;
- (void)unsetEmojiPopoverToRestoreAfterRotation;
- (void)unsetPolicyDelegateResult;
- (void)updateActiveAutocorrectionRects;
- (void)updateAssistantView;
- (void)updateAssistantViewInfo:(id)arg1;
- (void)updateAutocorrectContainerWithAutocorrection:(id)arg1 parentView:(id)arg2 correctionRects:(id)arg3;
- (void)updateAutocorrectPrompt:(id)arg1;
- (void)updateAutocorrectPrompt:(id)arg1 correctionRects:(id)arg2;
- (void)updateAutocorrectPrompt:(id)arg1 executionContext:(id)arg2;
- (void)updateCandidateDisplay;
- (void)updateChangeTimeAndIncrementCount;
- (void)updateDefaultsWithResults:(id /* block */)arg1;
- (void)updateDictationButtonForDelegate:(id)arg1;
- (void)updateDictationIgnoreKeyboardDidHideNotification;
- (void)updateDictationPopoverLocationForCandidateInlineView:(id)arg1 yOffset:(double)arg2;
- (void)updateDictationPopoverLocationIfNeeded;
- (void)updateDocumentViewsAfterKeyboardOutput:(id)arg1;
- (void)updateForChangedSelection;
- (void)updateForExpectedRemoteDocumentStateChange:(id)arg1 selectedTextRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 forceSync:(bool)arg3;
- (void)updateForHandBiasChange;
- (void)updateFromTextInputTraits;
- (void)updateHardwareKeyboardLayout;
- (void)updateHardwareKeyboardLayout:(bool)arg1;
- (void)updateHostedInlineCandidateView;
- (void)updateIdleDetection:(long long)arg1;
- (void)updateInputAssistantButtonItems;
- (void)updateInputDelegateForRemoteDocumentStateChange:(id)arg1 selectedTextRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 hasText:(bool)arg3 forceSync:(bool)arg4;
- (void)updateInputDelegateForRemoteTraitChange:(id)arg1 forceSync:(bool)arg2;
- (void)updateInputModeIndicatorOnSingleKeyOnly:(bool)arg1;
- (void)updateInputModeIndicatorOnSingleKeyOnly:(bool)arg1 preserveIfPossible:(bool)arg2;
- (void)updateInputOverlayForContainerFrameChange;
- (void)updateIsAttachedHardwareKeyboard;
- (void)updateKeyboardConfigurations;
- (void)updateKeyboardStateForDeletion;
- (void)updateKeyboardStateForInsertion:(id)arg1;
- (void)updateKeyboardStateForReplacingText:(id)arg1 withText:(id)arg2;
- (void)updateLayout;
- (void)updateLayoutAndSetShift;
- (void)updateLayoutIfNecessary;
- (void)updateLayoutIfNeeded;
- (bool)updateLayoutOnShowKeyboard;
- (void)updateLayoutToCurrentInterfaceOrientation;
- (void)updateLegacyAutocorrectPromptWithAutocorrection:(id)arg1 parentView:(id)arg2 correctionRects:(id)arg3;
- (void)updateNoContentViews;
- (void)updateObserverState;
- (void)updateReturnKey;
- (void)updateReturnKey:(bool)arg1;
- (void)updateShiftState;
- (void)updateShiftStateAfterAsyncSelectionChange;
- (void)updateShowCandidateBar;
- (void)updateStylingTraitsIfNeeded;
- (void)updateTextCandidateView;
- (void)updateTextInputKeyboardSource;
- (void)updateTextInputKeyboardSource:(id)arg1;
- (id)updatedKeyBehaviors;
- (bool)updatingPreferences;
- (id)userInteractionDelegate;
- (bool)userSelectedCurrentCandidate;
- (bool)usesAutocorrectionLists;
- (bool)usesCandidateSelection;
- (bool)usesContinuousPath;
- (bool)usesContinuousPathProgressiveCandidates;
- (id)webInputDelegate;
- (void)willDismissEditMenu;
- (void)willMoveToWindow:(id)arg1;
- (id /* block */)willSetupNewDelegate;
- (id)window;
- (void)writingToolsDidEnd;

@end
