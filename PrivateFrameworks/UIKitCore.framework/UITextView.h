/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
 */

@interface UITextView : UIScrollView <ABText, MULabelViewProtocol, NSCustomTextRenderingDelegate, PKAppearanceObject, UIContentSizeCategoryAdjusting, UIFindInteractionDelegate, UIKeyboardInput, UILetterformAwareAdjusting, UITextAutoscrolling, UITextDragSupporting, UITextDraggable, UITextDropSupporting, UITextDroppable, UITextInput, UITextInputControllerDelegate, UITextInputPrivate, UITextInputTraits_Private, UITextPasteConfigurationSupporting, UITextPasteConfigurationSupporting_Internal, UITextSearching, UIViewGhostedRangeSupporting, UIWritingToolsCoordinatorDelegate, WFInputViewMutable, WTWritingToolsDelegate_Proposed_v3, _UICustomTextRenderController, _UILayoutBaselineUpdating, _UIMultilineTextContentSizing, _UIPassthroughScrollInteractionDelegate, _UITextContainerViewDelegate, _UITextContent, _UITextFormattingResponder, _UITextFormattingViewControllerInternalDelegate, _UITextItemInteracting, _UITextSearching, _UITextViewContentPaddingDelegate, _UIViewBaselineSpacing, _UIViewLanguageAwareAdjusting, _UIWTCTemporaryBridging> {
    _UITextViewAnimatedPlaceholderIdentifier * _activeAnimatedPlaceholder;
    bool  _adjustsFontForContentSizeCategory;
    bool  _allowsTextAnimations;
    _UITextViewAnimatedPlaceholderSupport * _animatedPlaceholderSupport;
    UIAutoscroll * _autoscroll;
    struct CGSize { 
        double width; 
        double height; 
    }  _beforeFreezingFrameSize;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _beforeFreezingTextContainerInset;
    long long  _borderStyle;
    double  _bottomContentInsetAfterTextFormattingAdjustment;
    double  _bottomContentInsetTextFormattingAdjustment;
    _UITextViewContentPadding * _bottomContentPadding;
    UIColor * _cachedTintColor;
    bool  _canShowTextFormattingOptions;
    _UICharacterStreamingManager * _characterStreamingManager;
    bool  _clearsOnInsertion;
    _UITextContainerView * _containerView;
    long long  _contentSizeUpdateSeqNo;
    CUICatalog * _cuiCatalog;
    <NSCustomTextRendering> * _customRenderController;
    unsigned long long  _dataDetectorTypes;
    unsigned long long  _defaultTextPreviewOptions;
    bool  _didDisableAutomaticKeyboardBehaviorForTextFormatting;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _duringFreezingTextContainerInset;
    UIFindInteraction * _findInteraction;
    bool  _findInteractionEnabled;
    double  _firstBaselineOffsetFromTop;
    bool  _forceSelectionDisplayForTextFormatting;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _frameOfTrailingWhitespace;
    _UITextStorageDraggableGeometry * _geometry;
    double  _horizontalTextContainerGeometryAdjustment;
    UIView * _inputAccessoryView;
    UITextInputController * _inputController;
    id  _inputDelegate;
    UIView * _inputView;
    UITextInteractionAssistant * _interactionAssistant;
    _UITextSizeCache * _intrinsicSizeCache;
    double  _lastBaselineOffsetFromBottom;
    _UITextLayoutView * _layoutView;
    NSDictionary * _linkTextAttributes;
    double  _multilineContextWidth;
    double  _offsetFromScrollPosition;
    NSAttributedString * _overriddenPlaceholder;
    long long  _overriddenPlaceholderAlignment;
    <UITextPasteDelegate> * _pasteDelegate;
    UILabel * _placeholderLabel;
    double  _preferredMaxLayoutWidth;
    struct CGPoint { 
        double x; 
        double y; 
    }  _scrollEndDraggingVelocity;
    _UITextViewRestorableScrollPosition * _scrollPosition;
    unsigned long long  _scrollPositionDontRecordCount;
    _UITextViewRestorableScrollPosition * _scrollTarget;
    _UITextViewSearchableObject * _searchableObject;
    UIView * _selectionContainerView;
    NSDictionary * _siriParameters;
    _UITextAssistantManager * _textAssistantManager;
    NSTextContainer * _textContainer;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _textContainerInsetAdjustment;
    <UITextDragDelegate> * _textDragDelegate;
    <UITextDragDropSupport> * _textDragDropSupport;
    long long  _textDragOptions;
    <UITextDropDelegate> * _textDropDelegate;
    _UITextEmphasisBackgroundView * _textEmphasisBackgroundView;
    UITextFormattingViewControllerConfiguration * _textFormattingConfiguration;
    id  _textFormattingKeyboardSuppressionAssertion;
    UITextFormattingViewControllerConfiguration * _textFormattingRestorationConfiguration;
    bool  _textFormattingShouldSkipHidingOnResignFirstResponder;
    bool  _textFormattingShouldSkipRestoringFirstResponderWhenFinished;
    UITextFormattingViewController * _textFormattingViewController;
    UITextInputTraits * _textInputTraits;
    _UITextInteractableItemCache * _textInteractableItemCache;
    long long  _textKitCodingFlavor;
    _UITextLayoutControllerBase<_UITextLayoutController> * _textLayoutController;
    bool  _textLayoutManagerEnabled;
    NSTextStorage * _textStorage;
    _UITextViewContentPadding * _topContentPadding;
    struct { 
        unsigned int needsScrollToSelectionAfterLayout : 1; 
        unsigned int editable : 1; 
        unsigned int reentrancyGuard : 1; 
        unsigned int usesExplicitPreferredMaxLayoutWidth : 1; 
        unsigned int interactiveSelectionDisabled : 1; 
        unsigned int selectable : 1; 
        unsigned int shouldPresentSheetsInAWindowLayeredAboveTheKeyboard : 1; 
        unsigned int shouldAutoscrollAboveBottom : 1; 
        unsigned int containerViewSizeInvalid : 1; 
        unsigned int isAnimatingPaste : 1; 
        unsigned int textSizeCacheEnabled : 1; 
        unsigned int showsEditMenu : 1; 
        unsigned int transitioningFromNSTextLayoutManagerToNSLayoutManager : 1; 
        unsigned int extremeSizingEnabled : 1; 
        unsigned int sizingRule : 1; 
        unsigned int wantsContentAwareTypesettingLanguage : 1; 
        unsigned int customRenderControllerCanEnumerateTextSegments : 1; 
        unsigned int customRenderControllerCanCheckFragmentsValid : 1; 
        unsigned int customRenderControllerCanSetTextDidEditRange : 1; 
        unsigned int customRenderControllerCanConvertPointToTextAnimationsCoordinateSpace : 1; 
        unsigned int customRenderControllerCanConvertPointToRenderSpace : 1; 
        unsigned int customRenderControllerCanConvertPointFromRenderSpace : 1; 
        unsigned int customRenderControllerTextAnimatorForAnimation : 1; 
        unsigned int customRenderControllerCustomTextBounds : 1; 
        unsigned int delegateDidChangeCustomRenderBounds : 1; 
        unsigned int hasOverrideOfInsertTextSuggestion : 1; 
        unsigned int delegateWillBeginTextAssistantSession : 1; 
        unsigned int delegateDidEndTextAssistantSession : 1; 
        unsigned int delegateWritingToolsWillBegin : 1; 
        unsigned int delegateWritingToolsDidEnd : 1; 
        unsigned int delegateWritingToolsIgnoredRanges : 1; 
        unsigned int delegateWritingToolsUndoCoalescingWillBegin : 1; 
        unsigned int delegateWritingToolsUndoCoalescingDidEnd : 1; 
        unsigned int textStorageOverridesReplaceCharactersInRangeWithAttributedString : 1; 
        unsigned int didSetSupportsAdaptiveImageGlyph : 1; 
        unsigned int didCacheSupportsImagePaste : 1; 
        unsigned int supportsImagePasteCached : 1; 
    }  _tvFlags;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _unadjustedTextContainerInset;
    bool  _unfreezingTextContainerSize;
    _UITextViewVisualStyle * _visualStyle;
}

@property (nonatomic, copy) NSIndexSet *PINEntrySeparatorIndexes; /* unknown property attribute: ? */
@property (setter=_setCropDrawingAttachmentsWhenViewIsSmaller:, nonatomic) bool _cropDrawingAttachmentsWhenViewIsSmaller;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _customRenderBounds;
@property (setter=_setCustomRenderDisplayLink:, nonatomic, retain) <_NSCustomTextRenderingDisplayLink> *_customRenderDisplayLink;
@property (setter=_setDrawsDebugBaselines:, nonatomic) bool _drawsDebugBaselines;
@property (getter=_isExtremeSizingEnabled, setter=_setExtremeSizingEnabled:, nonatomic) bool _extremeSizingEnabled;
@property (setter=_setHyphenationFactor:, nonatomic) float _hyphenationFactor;
@property (nonatomic, readonly) Class _intelligenceBaseClass;
@property (setter=_setInteractionState:, nonatomic, copy) id _interactionState;
@property (nonatomic, readonly) bool _isHandwritingToolSelected;
@property (nonatomic, copy) NSAttributedString *_mapsui_attributedText;
@property (nonatomic, copy) NSString *_mapsui_text;
@property (nonatomic, readonly) RTIInputSystemSourceSession *_rtiSourceSession; /* unknown property attribute: ? */
@property (nonatomic) bool _systemCursorAccessoriesDisabled; /* unknown property attribute: ? */
@property (nonatomic, readonly) _UITextAssistantManager *_textAssistantManager;
@property (nonatomic) long long _textInputSource; /* unknown property attribute: ? */
@property (nonatomic, retain) _UITextInteractableItemCache *_textInteractableItemCache;
@property (nonatomic, readonly) bool _textStorageOverridesReplaceCharactersInRangeWithAttributedString;
@property (setter=_setTool:, nonatomic, copy) PKTool *_tool;
@property (setter=_setUniqueWritingToolsAnimatedLayoutInfo:, nonatomic, retain) _UIAnimatedTextLayoutInfo *_uniqueWritingToolsAnimatedLayoutInfo;
@property (getter=_isWritingToolsStreamingReplacements, setter=_setWritingToolsStreamingReplacements:, nonatomic) bool _writingToolsStreamingReplacements;
@property (nonatomic, copy) NSString *ab_text;
@property (nonatomic, copy) NSDictionary *ab_textAttributes;
@property (nonatomic) bool acceptsDictationSearchResults; /* unknown property attribute: ? */
@property (nonatomic) bool acceptsEmoji; /* unknown property attribute: ? */
@property (nonatomic) bool acceptsFloatingKeyboard; /* unknown property attribute: ? */
@property (nonatomic) bool acceptsInitialEmojiKeyboard; /* unknown property attribute: ? */
@property (nonatomic) bool acceptsPayloads; /* unknown property attribute: ? */
@property (nonatomic) bool acceptsSplitKeyboard; /* unknown property attribute: ? */
@property (nonatomic) bool adjustsFontForContentSizeCategory;
@property unsigned long long allowedWritingToolsResultOptions;
@property (nonatomic) bool allowsDefaultTighteningForTruncation;
@property (nonatomic) bool allowsEditingTextAttributes;
@property (nonatomic) bool allowsTextAnimations;
@property (nonatomic) long long allowsTextAnimationsType; /* unknown property attribute: ? */
@property (nonatomic, copy) NSAttributedString *attributedText;
@property (copy) NSAttributedString *attributedText;
@property (nonatomic) long long autocapitalizationType; /* unknown property attribute: ? */
@property (nonatomic, copy) NSString *autocorrectionContext; /* unknown property attribute: ? */
@property (nonatomic) long long autocorrectionType; /* unknown property attribute: ? */
@property (nonatomic, readonly) UITextPosition *beginningOfDocument;
@property (nonatomic) long long borderStyle;
@property (nonatomic) bool clearsOnInsertion;
@property (nonatomic, readonly) UIView *containerViewForAttachments;
@property (nonatomic) struct CGPoint { double x1; double x2; } contentOffsetForSameViewDrops; /* unknown property attribute: ? */
@property (nonatomic) bool contentsIsSingleValue; /* unknown property attribute: ? */
@property (nonatomic, readonly) long long cursorBehavior; /* unknown property attribute: ? */
@property (nonatomic, retain) <NSCustomTextRendering> *customRenderController;
@property (nonatomic) unsigned long long dataDetectorTypes;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (nonatomic) bool deferBecomingResponder; /* unknown property attribute: ? */
@property (nonatomic) <UITextViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=isDevicePasscodeEntry, nonatomic) bool devicePasscodeEntry; /* unknown property attribute: ? */
@property (nonatomic) bool disableHandwritingKeyboard; /* unknown property attribute: ? */
@property (nonatomic) bool disableInputBars; /* unknown property attribute: ? */
@property (nonatomic) bool disablePrediction; /* unknown property attribute: ? */
@property (nonatomic) bool displaySecureEditsUsingPlainText; /* unknown property attribute: ? */
@property (nonatomic) bool displaySecureTextUsingPlainText; /* unknown property attribute: ? */
@property (nonatomic) <UITextViewDrawingDelegate> *drawingDelegate;
@property (getter=isEditable, nonatomic) bool editable;
@property (nonatomic) int emptyContentReturnKeyType; /* unknown property attribute: ? */
@property (nonatomic) bool enablesReturnKeyAutomatically; /* unknown property attribute: ? */
@property (nonatomic) bool enablesReturnKeyOnNonWhiteSpaceContent; /* unknown property attribute: ? */
@property (nonatomic, readonly) UITextPosition *endOfDocument;
@property (nonatomic, readonly) UIFindInteraction *findInteraction;
@property (getter=isFindInteractionEnabled, nonatomic) bool findInteractionEnabled;
@property (getter=isFingerDrawingEnabled, nonatomic) bool fingerDrawingEnabled;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } floatingKeyboardEdgeInsets; /* unknown property attribute: ? */
@property (nonatomic, retain) UIFont *font;
@property (nonatomic) bool forceDefaultDictationInfo; /* unknown property attribute: ? */
@property (nonatomic) long long forceDictationKeyboardType; /* unknown property attribute: ? */
@property (nonatomic) bool forceDisableDictation; /* unknown property attribute: ? */
@property (nonatomic) bool forceEnableDictation; /* unknown property attribute: ? */
@property (nonatomic) bool forceFloatingKeyboard; /* unknown property attribute: ? */
@property (nonatomic) bool forceSpellingDictation; /* unknown property attribute: ? */
@property (nonatomic) bool hasDefaultContents; /* unknown property attribute: ? */
@property (nonatomic, readonly) bool hasText;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool hidePrediction; /* unknown property attribute: ? */
@property (nonatomic, readonly, copy) NSDictionary *ic_markedTextAttributes;
@property (nonatomic, readonly) struct _NSRange { unsigned long long x1; unsigned long long x2; } ic_markedTextRange;
@property (nonatomic, readonly) PKSelectionInteraction *ic_pkSelectionInteraction;
@property (nonatomic, readonly) PKTiledView *ic_pkTiledView;
@property (nonatomic, retain) NSArray *ic_selectedRanges;
@property (nonatomic, readonly) bool ic_shouldEnableBlockQuoteForAttachmentsOnlySelection;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } ic_textContainerOrigin;
@property (nonatomic, readonly) struct _NSRange { unsigned long long x1; unsigned long long x2; } ic_visibleRange;
@property (nonatomic, readonly) double idealWidth;
@property (nonatomic, copy) PKInk *ink;
@property (nonatomic) long long inlineCompletionType; /* unknown property attribute: ? */
@property (nonatomic) long long inlinePredictionType; /* unknown property attribute: ? */
@property (nonatomic, retain) UIView *inputAccessoryView;
@property (retain) UIView *inputAccessoryView;
@property (nonatomic, retain) UIInputContextHistory *inputContextHistory; /* unknown property attribute: ? */
@property (nonatomic) <UITextInputDelegate> *inputDelegate;
@property (nonatomic, retain) UIView *inputView;
@property (retain) UIView *inputView;
@property (nonatomic, readonly) id insertDictationResultPlaceholder; /* unknown property attribute: ? */
@property (nonatomic, retain) UIColor *insertionPointColor; /* unknown property attribute: ? */
@property (nonatomic) unsigned long long insertionPointWidth; /* unknown property attribute: ? */
@property (nonatomic, readonly) UITextInteractionAssistant *interactionAssistant;
@property (nonatomic, copy) id interactionState;
@property (nonatomic) bool isCarPlayIdiom; /* unknown property attribute: ? */
@property (nonatomic, readonly) bool isSingleLineDocument; /* unknown property attribute: ? */
@property (nonatomic) long long keyboardAppearance; /* unknown property attribute: ? */
@property (nonatomic) long long keyboardType; /* unknown property attribute: ? */
@property (nonatomic, readonly) NSLayoutManager *layoutManager;
@property (nonatomic) bool learnsCorrections; /* unknown property attribute: ? */
@property (nonatomic) long long lineBreakMode;
@property (nonatomic, copy) PKLinedPaper *linedPaper;
@property (nonatomic, copy) NSDictionary *linkTextAttributes;
@property (nonatomic) bool loadKeyboardsForSiriLanguage; /* unknown property attribute: ? */
@property (nonatomic, readonly) UITextRange *markedTextRange;
@property (nonatomic, copy) NSDictionary *markedTextStyle;
@property (nonatomic, retain) UIColor *matchHighlightColor; /* unknown property attribute: ? */
@property (nonatomic) long long mathExpressionCompletionType; /* unknown property attribute: ? */
@property (nonatomic) long long numberOfLines;
@property (getter=isPaperEnabled, nonatomic) bool paperEnabled;
@property (nonatomic, retain) UIImage *paperTexture;
@property (nonatomic, copy) UITextInputPasswordRules *passwordRules; /* unknown property attribute: ? */
@property (nonatomic, copy) UIPasteConfiguration *pasteConfiguration;
@property (nonatomic) <UITextPasteDelegate> *pasteDelegate;
@property (nonatomic) bool preferOnlineDictation; /* unknown property attribute: ? */
@property (nonatomic) long long preferredKeyboardStyle; /* unknown property attribute: ? */
@property (nonatomic, copy) NSString *recentInputIdentifier; /* unknown property attribute: ? */
@property (nonatomic, copy) NSString *responseContext; /* unknown property attribute: ? */
@property (nonatomic) bool returnKeyGoesToNextResponder; /* unknown property attribute: ? */
@property (nonatomic) long long returnKeyType; /* unknown property attribute: ? */
@property (nonatomic) bool roundedFont;
@property (getter=isRulerEnabled, nonatomic) bool rulerEnabled;
@property (nonatomic, retain) _UITextViewSearchableObject *searchableObject;
@property (getter=isSecureTextEntry, nonatomic) bool secureTextEntry; /* unknown property attribute: ? */
@property (getter=isSelectable, nonatomic) bool selectable;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } selectedRange;
@property (copy) UITextRange *selectedTextRange;
@property (readonly) <NSCoding><NSCopying> *selectedTextSearchDocument; /* unknown property attribute: ? */
@property (nonatomic) long long selectionAffinity; /* unknown property attribute: ? */
@property (nonatomic, retain) UIColor *selectionBarColor; /* unknown property attribute: ? */
@property (nonatomic, retain) UIColor *selectionBorderColor; /* unknown property attribute: ? */
@property (nonatomic) double selectionBorderWidth; /* unknown property attribute: ? */
@property (nonatomic) double selectionCornerRadius; /* unknown property attribute: ? */
@property (nonatomic, retain) UIImage *selectionDragDotImage; /* unknown property attribute: ? */
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } selectionEdgeInsets; /* unknown property attribute: ? */
@property (nonatomic) long long selectionGranularity; /* unknown property attribute: ? */
@property (nonatomic, retain) UIColor *selectionHighlightColor; /* unknown property attribute: ? */
@property (nonatomic) int shortcutConversionType; /* unknown property attribute: ? */
@property (nonatomic) bool showDictationButton; /* unknown property attribute: ? */
@property (nonatomic) long long sizingRule;
@property (nonatomic) long long smartDashesType; /* unknown property attribute: ? */
@property (nonatomic) long long smartInsertDeleteType; /* unknown property attribute: ? */
@property (nonatomic) long long smartQuotesType; /* unknown property attribute: ? */
@property (nonatomic) long long spellCheckingType; /* unknown property attribute: ? */
@property (getter=isStylusDrawingEnabled, nonatomic) bool stylusDrawingEnabled;
@property (readonly) Class superclass;
@property (nonatomic, retain) _UISupplementalLexicon *supplementalLexicon; /* unknown property attribute: ? */
@property (nonatomic, retain) UIImage *supplementalLexiconAmbiguousItemIcon; /* unknown property attribute: ? */
@property (nonatomic) bool supportsAdaptiveImageGlyph; /* unknown property attribute: ? */
@property (nonatomic, readonly) bool supportsEmojiImageTextAttachments; /* unknown property attribute: ? */
@property (nonatomic, readonly) bool supportsImagePaste; /* unknown property attribute: ? */
@property (nonatomic, readonly) bool supportsTextReplacement; /* unknown property attribute: ? */
@property (nonatomic) bool suppressReturnKeyStyling; /* unknown property attribute: ? */
@property (nonatomic, copy) NSString *text;
@property (nonatomic) long long textAlignment;
@property (nonatomic, copy) UIColor *textColor;
@property (nonatomic, retain) UIColor *textColor;
@property (nonatomic, readonly) NSTextContainer *textContainer;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } textContainerInset;
@property (nonatomic, copy) NSString *textContentType; /* unknown property attribute: ? */
@property (getter=isTextDragActive, nonatomic, readonly) bool textDragActive;
@property (nonatomic) <UITextDragDelegate> *textDragDelegate;
@property (nonatomic, readonly) UIDragInteraction *textDragInteraction;
@property (nonatomic) long long textDragOptions;
@property (getter=isTextDropActive, nonatomic, readonly) bool textDropActive;
@property (nonatomic) <UITextDropDelegate> *textDropDelegate;
@property (nonatomic, readonly) UIDropInteraction *textDropInteraction;
@property (nonatomic, copy) UITextFormattingViewControllerConfiguration *textFormattingConfiguration;
@property (nonatomic, copy) NSDictionary *textHighlightAttributes;
@property (nonatomic, readonly) <UITextInputSuggestionDelegate> *textInputSuggestionDelegate; /* unknown property attribute: ? */
@property (nonatomic, readonly) UIView *textInputView; /* unknown property attribute: ? */
@property (nonatomic, readonly) _UITextLayoutControllerBase<_UITextLayoutController> *textLayoutController;
@property (nonatomic, readonly) NSTextLayoutManager *textLayoutManager;
@property (getter=_isTextLayoutManagerEnabled, nonatomic, readonly) bool textLayoutManagerEnabled;
@property (nonatomic) int textLoupeVisibility; /* unknown property attribute: ? */
@property (nonatomic, readonly) UITextRange *textRangeForServicesInteraction; /* unknown property attribute: ? */
@property (nonatomic) long long textScriptType; /* unknown property attribute: ? */
@property (nonatomic) int textSelectionBehavior; /* unknown property attribute: ? */
@property (nonatomic, readonly) NSTextStorage *textStorage;
@property (nonatomic) id textSuggestionDelegate; /* unknown property attribute: ? */
@property (nonatomic) struct __CFCharacterSet { }*textTrimmingSet; /* unknown property attribute: ? */
@property (nonatomic, retain) UIColor *tintColor; /* unknown property attribute: ? */
@property (nonatomic, readonly) <UITextInputTokenizer> *tokenizer;
@property (setter=ts_setMarginTop:, nonatomic) unsigned long long ts_marginTop;
@property (nonatomic) bool typingAdaptationDisabled; /* unknown property attribute: ? */
@property (nonatomic, copy) NSDictionary *typingAttributes;
@property (nonatomic, retain) UIColor *underlineColorForSpelling; /* unknown property attribute: ? */
@property (nonatomic, retain) UIColor *underlineColorForTextAlternatives; /* unknown property attribute: ? */
@property (nonatomic) bool useAutomaticEndpointing; /* unknown property attribute: ? */
@property (nonatomic) bool useInterfaceLanguageForLocalization; /* unknown property attribute: ? */
@property (nonatomic) bool usesStandardTextScaling;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } validTextRange; /* unknown property attribute: ? */
@property (nonatomic, retain) _UITextViewVisualStyle *visualStyle;
@property (nonatomic) bool wantsWritingToolsInlineEditing; /* unknown property attribute: ? */
@property (nonatomic, readonly) bool wasEverSecureTextEntry; /* unknown property attribute: ? */
@property (getter=isWritingToolsActive, nonatomic, readonly) bool writingToolsActive;
@property unsigned long long writingToolsAllowedInputOptions;
@property long long writingToolsBehavior;
@property (nonatomic, readonly) UIWritingToolsCoordinator *writingToolsCoordinator;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

+ (id)_defaultFont;
+ (id)_defaultTextColor;
+ (bool)_isTextLayoutManagerEnabled;
+ (bool)supportsDynamicallyTogglingAllowsTextAnimations;
+ (id)textViewUsingTextLayoutManager:(bool)arg1;

- (void).cxx_destruct;
- (id)_NSTextRangeFromNSRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)_activityItemsConfigurationAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_addShortcut:(id)arg1;
- (void)_adjustBottomContentInsetForTextFormattingController:(bool)arg1;
- (void)_adjustFontForAccessibilityTraits:(bool)arg1;
- (void)_adjustFontForTypesettingLanguage;
- (bool)_allowAnimatedUpdateSelectionRectViews;
- (bool)_allowHighlightForTextInteractableItem:(id)arg1;
- (bool)_allowInteraction:(long long)arg1 forTextInteractableItem:(id)arg2;
- (id)_allowedTypingAttributes;
- (bool)_allowsOverflowForIntrinsicSizeCalculation;
- (id)_animatedPlaceholderSupport;
- (id)_animatorForTextAnimation:(id)arg1;
- (id)_animatorForTextAnimation:(id)arg1 notify:(id /* block */)arg2;
- (id)_anyTextItemConstrainedToLineAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_applyHighlightStyle:(id)arg1 colorScheme:(id)arg2 toTextRange:(id)arg3;
- (void)_applyHighlightStyle:(id)arg1 toTextRange:(id)arg2;
- (void)_applyOptionsToGeometry;
- (bool)_areDefaultTextFormattingAffordancesAvailable;
- (id)_attributedStringForInsertionOfAttributedString:(id)arg1;
- (id)_attributedTextInRange:(id)arg1;
- (double)_autolayoutSpacingAtEdge:(int)arg1 forAttribute:(long long)arg2 inContainer:(id)arg3 isGuide:(bool)arg4;
- (double)_autolayoutSpacingAtEdge:(int)arg1 forAttribute:(long long)arg2 nextToNeighbor:(id)arg3 edge:(int)arg4 attribute:(long long)arg5 multiplier:(double)arg6;
- (double)_baselineOffsetFromBottom;
- (struct { double x1; double x2; })_baselineOffsetsAtSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_boundingRectForRange:(id)arg1;
- (void)_cancelDataDetectors;
- (void)_clearHighlightView;
- (void)_commonInitWithTextContainer:(id)arg1 decoding:(bool)arg2 editable:(bool)arg3 selectable:(bool)arg4 draggable:(bool)arg5 textLayoutManagerEnabled:(bool)arg6;
- (id)_configurationForTextFormattingOptions;
- (void)_configureForLayoutCalculation:(id)arg1 inSize:(struct CGSize { double x1; double x2; })arg2;
- (void)_configureWithTextContainer:(id)arg1 layoutManager:(id)arg2 textLayoutManagerEnabled:(bool)arg3;
- (void)_constrainTiledRenderingToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })_containerSizeForBoundsSize:(struct CGSize { double x1; double x2; })arg1 allowingOverflow:(bool)arg2;
- (id)_containerView;
- (struct CGPoint { double x1; double x2; })_contentOffsetForScrollToVisible:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct CGPoint { double x1; double x2; })_contentOffsetForScrollingToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_contentView;
- (struct CGPoint { double x1; double x2; })_convertPointFromRenderSpace:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })_convertPointToRenderSpace:(struct CGPoint { double x1; double x2; })arg1 textRange:(id)arg2;
- (void)_createTextEmphasisBackgroundViewIfNeeded;
- (id)_cuiCatalog;
- (id)_cuiStyleEffectConfiguration;
- (id)_currentDefaultAttributes;
- (double)_currentPreferredMaxLayoutWidth;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_customRenderBounds;
- (bool)_customRenderControllerCanCheckFragmentsValid;
- (bool)_customRenderControllerCanConvertPointFromRenderSpace;
- (bool)_customRenderControllerCanConvertPointToRenderSpace;
- (bool)_customRenderControllerCanConvertPointToTextAnimationsCoordinateSpace;
- (bool)_customRenderControllerPermitsSetTextDidEditRange;
- (bool)_customRenderControllerPermitsTextSegmentEnumeration;
- (id)_customRenderDisplayLink;
- (void)_customUndoManagerDidFinishUndoRedoChanges;
- (void)_customUndoManagerUndoRedoDidApplyAttributedText:(id)arg1 toCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (id)_defaultFocusEffect;
- (unsigned long long)_defaultTextPreviewOptions;
- (unsigned long long)_defaultWritingToolsResultOptions;
- (void)_define:(id)arg1;
- (bool)_delegateSuppliesWritingToolsIgnoredRanges;
- (bool)_delegatesAllowingLinkInteraction;
- (bool)_delegatesAllowingTextItemInteractions;
- (bool)_delegatesAllowingTextItemMenuInteraction;
- (bool)_delegatesAllowingTextItemPrimaryActionInteraction;
- (void)_deleteBackwardAndNotify:(bool)arg1;
- (id)_descriptorForTextFormattingOptions;
- (void)_diagnoseFocusabilityForReport:(id)arg1;
- (void)_didFinishSpeechRecognition;
- (void)_didMoveFromWindow:(id)arg1 toWindow:(id)arg2;
- (void)_didRecognizeSpeechStrings:(id)arg1;
- (void)_didRecognizeSpeechTokens:(id)arg1;
- (bool)_disableAutomaticKeyboardBehavior;
- (void)_disableTiledViews;
- (id)_disabledComponentsForTextFormattingOptions;
- (void)_dismissEditMenu;
- (void)_dismissTextFormattingControllerIfNeededWithAnimation:(bool)arg1;
- (bool)_documentRangeEqualToViewportRange;
- (bool)_drawsDebugBaselines;
- (unsigned long long)_effectiveDataDetectorTypes;
- (id)_effectivePasteConfiguration;
- (void)_enableSiriAnimationDictationStyle;
- (long long)_encodedTextKitFlavor;
- (void)_ensureCleanedUp;
- (id)_existingTextAssistantManager;
- (id)_existingWritingToolsCoordinator;
- (void)_findSelected:(id)arg1;
- (bool)_finishResignFirstResponder;
- (double)_firstBaselineOffsetFromTop;
- (id)_fontInfoForBaselineSpacing;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameOfTrailingWhitespace;
- (bool)_freezeTextContainerSize;
- (id)_getDelegateZoomView;
- (bool)_hasBaseline;
- (bool)_hasCustomAutolayoutNeighborSpacingForAttribute:(long long*)arg1;
- (bool)_hasFontInfoForVerticalBaselineSpacing;
- (void)_hideTextFormattingOptions:(id)arg1;
- (bool)_implementsEditMenu;
- (id)_implicitPasteConfigurationClasses;
- (long long)_indexForNonNullUITextPosition:(id)arg1;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textLayoutManagerEnabled:(bool)arg2;
- (id)_inputController;
- (void)_insertAttributedTextWithoutClosingTyping:(id)arg1;
- (void)_installContainerViewAtIndex:(unsigned long long)arg1;
- (Class)_intelligenceBaseClass;
- (void)_intelligenceCollectContentIn:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 collector:(id)arg2;
- (bool)_interactionPossibleWithAttachment:(id)arg1;
- (id)_interactionState;
- (double)_internalFirstBaselineOffsetFromTop;
- (double)_internalLastBaselineOffsetFromBottom;
- (id)_internalTextLayoutController;
- (struct CGSize { double x1; double x2; })_intrinsicSizeWithinSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_invalidateContainerViewSize;
- (void)_invalidateInteractionGeometry;
- (void)_invalidateLayoutForLinkAttributesChange:(bool)arg1;
- (bool)_isDisplayingLookupViewController;
- (bool)_isDisplayingReferenceLibraryViewController;
- (bool)_isDisplayingShareViewController;
- (bool)_isDisplayingShortcutViewController;
- (bool)_isDisplayingTextService;
- (bool)_isExtremeSizingEnabled;
- (bool)_isInCompactHorizontalSizeClass;
- (bool)_isInteractiveTextSelectionDisabled;
- (bool)_isSelectionVisible;
- (bool)_isSystemAttachment:(id)arg1;
- (bool)_isTextFormattingControllerPresented;
- (bool)_isTextFormattingInProgress;
- (bool)_isTextLayoutManagerEnabled;
- (bool)_isTextSizeCacheEnabled;
- (bool)_isWritingToolsStreamingReplacements;
- (void)_keyboardDidShow:(id)arg1;
- (id)_layoutDebuggingTitle;
- (void)_layoutPlaceholder;
- (void)_layoutText;
- (id)_linkTextAttributesForLink:(id)arg1 forCharacterAtIndex:(unsigned long long)arg2;
- (void)_logWarningForMenuControllerUsage;
- (id)_menuConfigurationForTextInteractableItem:(id)arg1 defaultMenu:(id)arg2;
- (bool)_mightHaveInteractableItems;
- (bool)_mightHaveSelection;
- (double)_multilineContextWidth;
- (bool)_needsDoubleUpdateConstraintsPass;
- (id)_newContainerViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textContainer:(id)arg2 textLayoutController:(id)arg3;
- (id)_newTextContainer;
- (id)_newTextKit1LayoutControllerWithTextContainer:(id)arg1 layoutManager:(id)arg2 textStorage:(id)arg3;
- (id)_nonNullIntersectionOfUITextRange:(id)arg1 withOtherUITextRange:(id)arg2;
- (id)_nonNullUITextRangeForTextKitRanges:(id)arg1;
- (id)_nonNullUITextRangeFromNSRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)_notifyDidBeginEditing;
- (void)_notifyDidEndEditing;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_nsRangeForNonNullUITextRange:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_nsRangeForTextKitRanges:(id)arg1;
- (void)_observedTextViewDidChange:(id)arg1;
- (bool)_ownsInputAccessoryView;
- (void)_pasteAttributedString:(id)arg1 pasteAsRichText:(bool)arg2;
- (bool)_performExternalEditsForWritingToolsSessionIdentifier:(id)arg1 action:(long long)arg2 usingBlock:(id /* block */)arg3;
- (void)_performTextFormattingRestoration;
- (void)_performTextFormattingRestorationIfNeeded;
- (void)_performTextKit1LayoutCalculation:(id /* block */)arg1 inSize:(struct CGSize { double x1; double x2; })arg2;
- (void)_performTextKit2LayoutCalculation:(id /* block */)arg1 inSize:(struct CGSize { double x1; double x2; })arg2;
- (id)_placeholderLabel;
- (void)_populateArchivedSubviews:(id)arg1;
- (double)_preferredMaxLayoutWidth;
- (void)_prepareForFirstIntrinsicContentSizeCalculation;
- (void)_prepareForSecondIntrinsicContentSizeCalculationWithLayoutEngineBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_prepareForTextFormattingControllerPresentationWithConfiguration:(id)arg1 sender:(id)arg2;
- (void)_prepareForTextFormattingRestoration;
- (void)_prepareForTextFormattingRestorationIfNeeded;
- (void)_presentEditMenu;
- (void)_presentTextFormattingController;
- (bool)_preserveSelectionDisplayForTextFormatting;
- (id)_previewRendererForRange:(id)arg1 unifyRects:(bool)arg2;
- (id)_primaryActionForTextInteractableItem:(id)arg1 defaultAction:(id)arg2;
- (void)_promptForReplace:(id)arg1;
- (id)_rangeForTextKitRanges:(id)arg1;
- (bool)_reconfigureWithLayoutManager:(id)arg1 triggeredByLayoutManagerAccess:(bool)arg2 triggeringSelector:(SEL)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_rectForScrollToVisible:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_rectToScrollToVisibleInCellInWindow:(id)arg1;
- (void)_registerUndoOperationForReplacementWithActionName:(id)arg1 replacementText:(id)arg2;
- (void)_removeHighlightsFromTextRange:(id)arg1;
- (id)_replaceRange:(id)arg1 withAttributedText:(id)arg2 updatingSelection:(bool)arg3;
- (void)_resetDataDetectorsResults;
- (void)_resetUsesExplicitPreferredMaxLayoutWidth;
- (id)_resolvedTypesettingLanguage:(id)arg1;
- (id)_restorableScrollPosition;
- (id)_restorableScrollPositionForStateRestoration;
- (bool)_restoreFirstResponder;
- (void)_restoreScrollPosition:(id)arg1 animated:(bool)arg2;
- (void)_restoreSize:(struct { bool x1; bool x2; struct CGSize { double x_3_1_1; double x_3_1_2; } x3; })arg1 afterLayoutCalculation:(id)arg2;
- (void)_resyncContainerFrameForNonAutolayout;
- (void)_resyncContainerFrameForNonAutolayoutDeferringSizeToFit:(bool)arg1;
- (struct { bool x1; bool x2; struct CGSize { double x_3_1_1; double x_3_1_2; } x3; })_saveSizeBeforeLayoutCalculation:(id)arg1;
- (void)_scrollRangeToVisible:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 animated:(bool)arg2;
- (void)_scrollRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toVisibleInContainingScrollView:(bool)arg2;
- (void)_scrollSelectionToVisibleInContainingScrollView;
- (void)_scrollSelectionToVisibleInContainingScrollView:(bool)arg1;
- (void)_scrollToCaretIfNeeded;
- (void)_scrollToSelectionIfNeeded;
- (void)_scrollViewAnimationEnded:(id)arg1 finished:(bool)arg2;
- (void)_scrollViewDidEndDraggingWithDeceleration:(bool)arg1;
- (id)_scrollViewToAdjustForTextFormattingController;
- (void)_scrollViewWillEndDraggingWithVelocity:(struct CGPoint { double x1; double x2; })arg1 targetContentOffset:(struct CGPoint { double x1; double x2; }*)arg2;
- (id)_selectionContainerViewAboveText;
- (void)_selectionMayChange:(id)arg1;
- (void)_setAllowedTypingAttributes:(id)arg1;
- (void)_setContentOffsetWithoutRecordingScrollPosition:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setCuiCatalog:(id)arg1;
- (void)_setCuiStyleEffectConfiguration:(id)arg1;
- (void)_setCustomRenderDisplayLink:(id)arg1;
- (void)_setDefaultTextPreviewOptions:(unsigned long long)arg1;
- (void)_setDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2;
- (void)_setDrawsDebugBaselines:(bool)arg1;
- (void)_setEncodedTextKitFlavor:(long long)arg1;
- (void)_setExtremeSizingEnabled:(bool)arg1;
- (void)_setFrameOrBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromOldRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 settingAction:(id /* block */)arg3;
- (void)_setFreezeTextContainerSize:(bool)arg1;
- (void)_setHorizontalMargins:(unsigned long long)arg1;
- (void)_setInteractionState:(id)arg1;
- (void)_setInteractiveTextSelectionDisabled:(bool)arg1;
- (void)_setMultilineContextWidth:(double)arg1;
- (void)_setNeedsFrameUpdateForCustomRendering;
- (void)_setNeedsLayoutForInteraction;
- (void)_setNeedsTextLayout;
- (void)_setOverridePlaceholder:(id)arg1 alignment:(long long)arg2;
- (void)_setPreferredMaxLayoutWidth:(double)arg1;
- (void)_setShowsEditMenu:(bool)arg1;
- (void)_setSiriAnimationDictationStyleWithCharacterInsertionRate:(double)arg1 minimumDurationBetweenHypotheses:(double)arg2;
- (void)_setTextColor:(id)arg1;
- (void)_setTextSizeCacheEnabled:(bool)arg1;
- (void)_setTypingAttributesTextColor:(id)arg1;
- (void)_setUniqueWritingToolsAnimatedLayoutInfo:(id)arg1;
- (void)_setUpWithTextContainer:(id)arg1 textLayoutManagerEnabled:(bool)arg2;
- (void)_setWantsContentAwareTypesettingLanguage:(bool)arg1;
- (void)_setWritingToolsStreamingReplacements:(bool)arg1;
- (void)_setupDefaultStyleEffectConfiguration;
- (void)_share:(id)arg1;
- (bool)_shouldAcceptAutocorrection;
- (bool)_shouldAdjustKeyboardGuidesForTextFormattingIfNeeded;
- (bool)_shouldBecomeEditableUponBecomingTargetOfKeyboardEventDeferringEnvironment;
- (bool)_shouldBecomeEditableUponFocus;
- (bool)_shouldCollectAsKeyView;
- (bool)_shouldHideInputViewsForTextFormatting;
- (bool)_shouldInvalidateBaselineConstraintsForSize:(struct CGSize { double x1; double x2; })arg1 oldSize:(struct CGSize { double x1; double x2; })arg2;
- (bool)_shouldInvalidateLayoutForLinkAttributesChange;
- (bool)_shouldObscureInput;
- (bool)_shouldScrollEnclosingScrollView;
- (bool)_shouldShowEditMenu;
- (bool)_shouldStartDataDetectors;
- (bool)_shouldSuppressEditMenuForTextFormatting;
- (bool)_shouldSuppressSelectionCommands;
- (void)_showTextFormattingAnimationOptions:(id)arg1;
- (void)_showTextFormattingOptions:(id)arg1;
- (bool)_showsEditMenu;
- (void)_startDataDetectors;
- (void)_startDataDetectorsIfNeeded;
- (void)_startSuppressingKeyboardForTextFormatting:(id)arg1;
- (void)_stopSuppressingKeyboardForTextFormatting:(id)arg1;
- (id)_supportedAnimationAccessibilityHintsForTextFormatting;
- (id)_supportedAnimationNamesForTextFormatting;
- (id)_supportedAnimationTitlesForTextFormatting;
- (bool)_supportsImagePasteCached;
- (bool)_supportsTextKit2TextLists;
- (void)_syncTypingAttributesToTextContainerAttributesForExtraLineFragment;
- (id)_systemDefaultFocusGroupIdentifier;
- (id)_targetedPreviewForHighlightRange:(id)arg1;
- (id)_targetedPreviewForRange:(id)arg1 withRenderingAttributes:(id)arg2;
- (id)_targetedPreviewForRange:(id)arg1 withRenderingAttributes:(id)arg2 includeFullDocument:(bool)arg3;
- (id)_targetedPreviewForTextInteractableItem:(id)arg1 dismissing:(bool)arg2;
- (id)_textAssistantManager;
- (void)_textContainerSizeDidChange:(id)arg1;
- (double)_textFormattingControllerOverlapHeight;
- (void)_textFormattingDidDisappear:(id)arg1;
- (void)_textFormattingOptionsNeedUpdate:(id)arg1;
- (void)_textFormattingRequestsFirstResponderResignation:(id)arg1;
- (void)_textFormattingRequestsFirstResponderRestoration:(id)arg1;
- (id)_textGeometry;
- (id)_textInputTraits;
- (id)_textInputViewForAddingGestureRecognizers;
- (void)_textInteractableItem:(id)arg1 willDismissMenuWithAnimator:(id)arg2;
- (void)_textInteractableItem:(id)arg1 willDisplayMenuWithAnimator:(id)arg2;
- (id)_textInteractableItemAtPoint:(struct CGPoint { double x1; double x2; })arg1 precision:(unsigned long long)arg2;
- (id)_textInteractableItemCache;
- (id)_textInteractableItemForTag:(id)arg1;
- (id)_textItemForItem:(id)arg1;
- (unsigned long long)_textLengthToDeleteBeforeSelectedRangeForSmartDelete;
- (id)_textLineRectsForRange:(id)arg1;
- (void)_textStorageDidProcessEditing:(id)arg1;
- (bool)_textStorageOverridesReplaceCharactersInRangeWithAttributedString;
- (void)_textViewContentPaddingDidChange:(id)arg1;
- (void)_textViewWillPresentTextFormattingOptions;
- (unsigned long long)_totalNumberOfTextViewsInLayoutManager;
- (void)_translate:(id)arg1;
- (void)_transliterateChinese:(id)arg1;
- (void)_unconstrainTiledRendering;
- (id)_uniqueWritingToolsAnimatedLayoutInfo;
- (void)_updateBaselineInformationDependentOnBounds;
- (void)_updateContainerTileAndSizingFlags;
- (void)_updateContentSize;
- (void)_updateFrameOfTrailingWhitespace:(struct CGSize { double x1; double x2; })arg1;
- (void)_updatePlaceholderVisibility;
- (void)_updateSelectableInteractions;
- (void)_updateSelectionGestures;
- (void)_updateTextContainerSizeAndSizeToFit;
- (void)_updateTextEffectsConfigurationIfNeeded;
- (void)_updateTextFormattingController;
- (void)_updateTextFormattingControllerPresentationSource;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_visibleRangeWithLayout:(bool)arg1;
- (id)_visualSelectionRangeForExtent:(id)arg1 forPoint:(struct CGPoint { double x1; double x2; })arg2 fromPosition:(id)arg3 inDirection:(long long)arg4;
- (bool)_wantsBaselineUpdatingFollowingConstraintsPass;
- (bool)_wantsContentAwareTypesettingLanguage;
- (void)_willDrawContentOfSurface:(id)arg1 withBlock:(id /* block */)arg2;
- (id)_writingToolsCoordinator;
- (void)_wtc_highlightProofreadingReviewingRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)_wtc_invalidateGrabberSuppression;
- (void)_wtc_invalidateSelectionUIHidden;
- (void)_wtc_removeUnderlineForProofreadingSuggestionID:(id)arg1;
- (void)_wtc_underlineTextInCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 proofreadingSuggestionID:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessibilityFrame;
- (void)addGhostedRange:(id)arg1;
- (void)addInvisibleRange:(id)arg1;
- (void)addTextAlternatives:(id)arg1;
- (void)addTextAlternativesDisplayStyle:(long long)arg1 toRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)adjustedContentInsetDidChange;
- (bool)adjustsFontForContentSizeCategory;
- (void)alignCenter:(id)arg1;
- (void)alignJustified:(id)arg1;
- (void)alignLeft:(id)arg1;
- (void)alignRight:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (unsigned long long)allowedWritingToolsResultOptions;
- (bool)allowsAttachments;
- (bool)allowsDraggingAttachments;
- (bool)allowsEditingTextAttributes;
- (bool)allowsTextAnimations;
- (void)applyGrammarCheckingIndication;
- (id)attributedPlaceholder;
- (id)attributedText;
- (id)attributedTextInRange:(id)arg1;
- (id)automaticallySelectedOverlay;
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;
- (void)becomeDropResponder;
- (bool)becomeFirstResponder;
- (bool)becomesEditableWithGestures;
- (void)beginFloatingCursorAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)beginSelectionChange;
- (id)beginningOfDocument;
- (long long)borderStyle;
- (id)bottomContentPadding;
- (bool)canBecomeDropResponder;
- (bool)canBecomeFirstResponder;
- (bool)canBecomeFocused;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (bool)canResignFirstResponder;
- (void)cancelAutoscroll;
- (void)captureTextFromCamera:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForPosition:(id)arg1;
- (id)characterRangeAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(long long)arg2;
- (void)clearAllDecoratedFoundText;
- (bool)clearsOnInsertion;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1 withinRange:(id)arg2;
- (long long)compareFoundRange:(id)arg1 toRange:(id)arg2 inDocument:(id)arg3;
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;
- (void)compositionSession:(id)arg1 didReceiveText:(id)arg2 replacementRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 inContext:(id)arg4 finished:(bool)arg5;
- (struct CGPoint { double x1; double x2; })contentOffsetForSameViewDrops;
- (void)copy:(id)arg1;
- (id)customRenderController;
- (void)cut:(id)arg1;
- (unsigned long long)dataDetectorTypes;
- (void)dealloc;
- (void)decodeRestorableStateWithCoder:(id)arg1;
- (void)decodeRestorableStateWithCoder:(id)arg1 includingSelectedTextAndDisplayedViewControllers:(bool)arg2;
- (void)decorateFoundTextRange:(id)arg1 inDocument:(id)arg2 usingStyle:(long long)arg3;
- (void)decreaseSize:(id)arg1;
- (void)deleteBackward;
- (void)didBeginTextSearchOperation;
- (void)didBeginWritingToolsSession:(id)arg1 contexts:(id)arg2;
- (void)didEndTextSearchOperation;
- (void)didEndWritingToolsSession:(id)arg1 accepted:(bool)arg2;
- (void)disableClearsOnInsertion;
- (void)draggingFinished:(id)arg1;
- (void)draggingStarted;
- (void)drawTextHighlightBackgroundForTextRange:(id)arg1 origin:(struct CGPoint { double x1; double x2; })arg2;
- (void)droppingFinished;
- (void)droppingStarted;
- (id)editMenuForTextRange:(id)arg1 suggestedActions:(id)arg2;
- (void)encodeRestorableStateWithCoder:(id)arg1;
- (void)encodeRestorableStateWithCoder:(id)arg1 includingSelectedTextAndDisplayedViewControllers:(bool)arg2;
- (void)encodeWithCoder:(id)arg1;
- (void)endFloatingCursor;
- (id)endOfDocument;
- (void)endSelectionChange;
- (id)extractWordArrayFromTokensArray:(id)arg1;
- (void)find:(id)arg1;
- (void)findAndReplace:(id)arg1;
- (id)findInteraction;
- (void)findInteraction:(id)arg1 didBeginFindSession:(id)arg2;
- (void)findInteraction:(id)arg1 didEndFindSession:(id)arg2;
- (id)findInteraction:(id)arg1 sessionForView:(id)arg2;
- (void)findNext:(id)arg1;
- (void)findPrevious:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })firstRectForRange:(id)arg1;
- (id)font;
- (bool)forceDisableDictation;
- (bool)forceEnableDictation;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForDictationResultPlaceholder:(id)arg1;
- (bool)hasText;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (void)increaseSize:(id)arg1;
- (id)initReadonlyAndUnselectableWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textContainer:(id)arg2;
- (id)initReadonlyAndUnselectableWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textContainer:(id)arg2 textLayoutManagerEnabled:(bool)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 font:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textContainer:(id)arg2;
- (id)inputAccessoryView;
- (id)inputDelegate;
- (id)inputView;
- (void)insertAdaptiveImageGlyph:(id)arg1 replacementRange:(id)arg2;
- (void)insertAnimatedTextPlaceholder;
- (void)insertAnimatedTextPlaceholderAtLocation:(id)arg1 numLines:(double)arg2;
- (void)insertAnimatedTextPlaceholderAtLocation:(id)arg1 numLines:(double)arg2 completion:(id /* block */)arg3;
- (void)insertAttributedText:(id)arg1;
- (void)insertAttributedText:(id)arg1 withAnimationStyle:(long long)arg2 completion:(id /* block */)arg3;
- (void)insertDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2;
- (id)insertDictationResultPlaceholder;
- (void)insertEmojiImageTextAttachment:(id)arg1 replacementRange:(id)arg2;
- (void)insertText:(id)arg1;
- (void)insertText:(id)arg1 alternatives:(id)arg2 style:(long long)arg3;
- (void)insertText:(id)arg1 style:(long long)arg2 alternatives:(id)arg3;
- (id)insertTextPlaceholderWithSize:(struct CGSize { double x1; double x2; })arg1;
- (void)insertTextSuggestion:(id)arg1;
- (id)interactionAssistant;
- (id)interactionState;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (void)invalidateDropCaret;
- (void)invalidateIntrinsicContentSize;
- (bool)isAccessibilityElementByDefault;
- (bool)isEditable;
- (bool)isEditableForTextContainerView:(id)arg1;
- (bool)isEditing;
- (bool)isElementAccessibilityExposedToInterfaceBuilder;
- (bool)isFindInteractionEnabled;
- (bool)isSelectable;
- (bool)isTextDragActive;
- (bool)isTextDropActive;
- (bool)isWritingToolsActive;
- (bool)keyboardInput:(id)arg1 shouldInsertText:(id)arg2 isMarkedText:(bool)arg3;
- (bool)keyboardInput:(id)arg1 shouldReplaceTextInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 replacementText:(id)arg3;
- (bool)keyboardInputChanged:(id)arg1;
- (void)keyboardInputChangedSelection:(id)arg1;
- (bool)keyboardInputShouldDelete:(id)arg1;
- (id)largeContentTitle;
- (id)layoutManager;
- (void)layoutSubviews;
- (double)lineHeight;
- (id)linkTextAttributes;
- (id)linkTextAttributesForTextContainerView:(id)arg1;
- (void)makeTextWritingDirectionLeftToRight:(id)arg1;
- (void)makeTextWritingDirectionNatural:(id)arg1;
- (void)makeTextWritingDirectionRightToLeft:(id)arg1;
- (unsigned long long)marginTop;
- (id)markedTextRange;
- (id)markedTextStyle;
- (double)maxTileHeight;
- (id)metadataDictionariesForDictationResults;
- (id)methodSignatureForSelector:(SEL)arg1;
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;
- (void)paste:(id)arg1;
- (void)pasteAndMatchStyle:(id)arg1;
- (id)pasteDelegate;
- (void)pasteItemProviders:(id)arg1;
- (bool)performFinalGrammarChecking;
- (void)performTextSearchWithQueryString:(id)arg1 usingOptions:(id)arg2 resultAggregator:(id)arg3;
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;
- (id)positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;
- (void)proofreadingSession:(id)arg1 didReceiveSuggestions:(id)arg2 processedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 inContext:(id)arg4 finished:(bool)arg5;
- (void)proofreadingSession:(id)arg1 didUpdateState:(long long)arg2 forSuggestionWithUUID:(id)arg3 inContext:(id)arg4;
- (id)rangeWithTextAlternatives:(id*)arg1 atPosition:(id)arg2;
- (void)removeAllGhostedRanges;
- (void)removeAnimatedTextPlaceholders;
- (void)removeDictationResultPlaceholder:(id)arg1 willInsertResult:(bool)arg2;
- (void)removeEmojiAlternatives;
- (void)removeInvisibleRange:(id)arg1;
- (void)removeTextPlaceholder:(id)arg1;
- (void)replace:(id)arg1;
- (void)replaceAllOccurrencesOfQueryString:(id)arg1 usingOptions:(id)arg2 withText:(id)arg3;
- (bool)replaceAnimatedTextPlaceholderWith:(id)arg1;
- (bool)replaceAnimatedTextPlaceholderWith:(id)arg1 completion:(id /* block */)arg2;
- (void)replaceFoundTextInRange:(id)arg1 inDocument:(id)arg2 withText:(id)arg3;
- (void)replaceRange:(id)arg1 withAttributedText:(id)arg2;
- (void)replaceRange:(id)arg1 withText:(id)arg2;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;
- (void)resignDropResponderWithDropPerformed:(bool)arg1;
- (bool)resignFirstResponder;
- (bool)respondsToSelector:(SEL)arg1;
- (void)scrollRangeToVisible:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)scrollRangeToVisible:(id)arg1 inDocument:(id)arg2;
- (void)scrollSelectionToVisible:(bool)arg1;
- (id)searchableObject;
- (void)select:(id)arg1;
- (void)selectAll:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })selectedRange;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })selectedRangeForTextContainerView:(id)arg1;
- (id)selectedText;
- (id)selectedTextRange;
- (long long)selectionAffinity;
- (id)selectionContainerView;
- (id)selectionHighlightColor;
- (id)selectionRectsForRange:(id)arg1;
- (void)setAdjustsFontForContentSizeCategory:(bool)arg1;
- (void)setAllowedWritingToolsResultOptions:(unsigned long long)arg1;
- (void)setAllowsEditingTextAttributes:(bool)arg1;
- (void)setAllowsTextAnimations:(bool)arg1;
- (void)setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setAttributedPlaceholder:(id)arg1;
- (void)setAttributedText:(id)arg1;
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;
- (void)setBecomesEditableWithGestures:(bool)arg1;
- (void)setBorderStyle:(long long)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setClearsOnInsertion:(bool)arg1;
- (void)setContentMode:(long long)arg1;
- (void)setContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setContentOffsetForSameViewDrops:(struct CGPoint { double x1; double x2; })arg1;
- (void)setContentToHTMLString:(id)arg1;
- (void)setContinuousSpellCheckingEnabled:(bool)arg1;
- (void)setCustomRenderController:(id)arg1;
- (void)setDataDetectorTypes:(unsigned long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEditable:(bool)arg1;
- (void)setFindInteractionEnabled:(bool)arg1;
- (void)setFont:(id)arg1;
- (void)setForceDisableDictation:(bool)arg1;
- (void)setForceEnableDictation:(bool)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setInputAccessoryView:(id)arg1;
- (void)setInputDelegate:(id)arg1;
- (void)setInputView:(id)arg1;
- (void)setInteractionState:(id)arg1;
- (void)setLineHeight:(double)arg1;
- (void)setLinkTextAttributes:(id)arg1;
- (void)setMarginTop:(unsigned long long)arg1;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setMarkedTextStyle:(id)arg1;
- (void)setMaxTileHeight:(double)arg1;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setNeedsFrameUpdateForSurface:(id)arg1;
- (void)setNeedsLayout;
- (void)setPasteDelegate:(id)arg1;
- (void)setScrollEnabled:(bool)arg1;
- (void)setSearchableObject:(id)arg1;
- (void)setSecureTextEntry:(bool)arg1;
- (void)setSelectable:(bool)arg1;
- (void)setSelectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setSelectedTextRange:(id)arg1;
- (void)setShouldAutoscrollAboveBottom:(bool)arg1;
- (void)setShouldPresentSheetsInAWindowLayeredAboveTheKeyboard:(bool)arg1;
- (void)setShouldPreserveVisualFontSizeFidelity:(bool)arg1;
- (void)setSizingRule:(long long)arg1;
- (void)setSupportsAdaptiveImageGlyph:(bool)arg1;
- (void)setText:(id)arg1;
- (void)setTextAlignment:(long long)arg1;
- (void)setTextColor:(id)arg1;
- (void)setTextContainerInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setTextDragDelegate:(id)arg1;
- (void)setTextDragOptions:(long long)arg1;
- (void)setTextDropDelegate:(id)arg1;
- (void)setTextFormattingConfiguration:(id)arg1;
- (void)setTextHighlightAttributes:(id)arg1;
- (void)setTiledViewsDrawAsynchronously:(bool)arg1;
- (void)setTypingAttributes:(id)arg1;
- (void)setUsesStandardTextScaling:(bool)arg1;
- (void)setUsesTiledViews:(bool)arg1;
- (void)setVisualStyle:(id)arg1;
- (void)setWritingToolsAllowedInputOptions:(unsigned long long)arg1;
- (void)setWritingToolsBehavior:(long long)arg1;
- (void)set_textInteractableItemCache:(id)arg1;
- (bool)shouldAutoscrollAboveBottom;
- (bool)shouldPresentSheetsInAWindowLayeredAboveTheKeyboard;
- (bool)shouldPreserveVisualFontSizeFidelity;
- (bool)shouldReplaceFoundTextInRange:(id)arg1 inDocument:(id)arg2 withText:(id)arg3;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (long long)sizingRule;
- (void)startAutoscroll:(struct CGPoint { double x1; double x2; })arg1;
- (void)startInteractionWithLinkAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)supportsAdaptiveImageGlyph;
- (bool)supportsEmojiImageTextAttachments;
- (bool)supportsTextReplacement;
- (void)takeTraitsFrom:(id)arg1;
- (id)text;
- (long long)textAlignment;
- (id)textColor;
- (id)textContainer;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })textContainerInset;
- (struct CGPoint { double x1; double x2; })textContainerOrigin;
- (id)textContainerView:(id)arg1 cuiCatalogForTextEffectName:(id)arg2;
- (id)textContainerView:(id)arg1 linkTextAttributesForLink:(id)arg2 forCharacterAtIndex:(unsigned long long)arg3;
- (id)textDragDelegate;
- (id)textDragInteraction;
- (long long)textDragOptions;
- (id)textDropDelegate;
- (id)textDropInteraction;
- (id)textFormattingConfiguration;
- (id)textHighlightAttributes;
- (id)textInRange:(id)arg1;
- (void)textInput:(id)arg1 didApplyAttributedText:(id)arg2 toCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (bool)textInput:(id)arg1 shouldChangeCharactersInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 replacementText:(id)arg3;
- (void)textInput:(id)arg1 undoRedoDidApplyAttributedText:(id)arg2 toCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (void)textInputDidAnimatePaste:(id)arg1;
- (void)textInputDidChange:(id)arg1;
- (void)textInputDidChangeSelection:(id)arg1;
- (void)textInputDidFinishUndoRedoChanges:(id)arg1;
- (bool)textInputShouldExtendCaretHeight:(id)arg1;
- (id)textInputTraits;
- (id)textInputView;
- (void)textInputWillAnimatePaste:(id)arg1;
- (id)textLayoutController;
- (id)textLayoutManager;
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;
- (id)textStorage;
- (id)textStylingAtPosition:(id)arg1 inDirection:(long long)arg2;
- (bool)tiledViewsDrawAsynchronously;
- (void)tintColorDidChange;
- (void)toggleBoldface:(id)arg1;
- (void)toggleItalics:(id)arg1;
- (void)toggleUnderline:(id)arg1;
- (id)tokenizer;
- (id)topContentPadding;
- (void)traitCollectionDidChange:(id)arg1;
- (id)typingAttributes;
- (id)undoManager;
- (void)unmarkText;
- (void)updateAutoscrollAboveBottom;
- (void)updateFloatingCursorAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)updateFloatingCursorAtPoint:(struct CGPoint { double x1; double x2; })arg1 animated:(bool)arg2;
- (void)updateInteractionWithLinkAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)updateSelection;
- (void)updateSelectionForTextContainerView:(id)arg1;
- (void)updateSelectionImmediately;
- (void)updateTextAttributesWithConversionHandler:(id /* block */)arg1;
- (void)useSelectionForFind:(id)arg1;
- (bool)usesStandardTextScaling;
- (bool)usesTiledViews;
- (void)validateCommand:(id)arg1;
- (void)validateInteractionWithLinkAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleRectIgnoringKeyboard;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleTextRect;
- (id)visualStyle;
- (id)webView;
- (void)willBeginWritingToolsSession:(id)arg1 requestContexts:(id /* block */)arg2;
- (void)willDismissEditMenuWithAnimator:(id)arg1;
- (void)willHighlightFoundTextRange:(id)arg1 inDocument:(id)arg2;
- (bool)willInteractWithLinkAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)willPresentEditMenuWithAnimator:(id)arg1;
- (bool)worksWithAnimatedTextSpacer;
- (unsigned long long)writingToolsAllowedInputOptions;
- (long long)writingToolsBehavior;
- (id)writingToolsCoordinator;
- (void)writingToolsCoordinator:(id)arg1 adjustForUpdatedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 forTextAnimation:(long long)arg3 inContext:(id)arg4 completion:(id /* block */)arg5;
- (void)writingToolsCoordinator:(id)arg1 finishTextAnimation:(long long)arg2 forRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 inContext:(id)arg4 completion:(id /* block */)arg5;
- (void)writingToolsCoordinator:(id)arg1 prepareForTextAnimation:(long long)arg2 forRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 inContext:(id)arg4 completion:(id /* block */)arg5;
- (void)writingToolsCoordinator:(id)arg1 replaceRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inContext:(id)arg3 proposedText:(id)arg4 reason:(long long)arg5 animationParameters:(id)arg6 completion:(id /* block */)arg7;
- (void)writingToolsCoordinator:(id)arg1 requestsBoundingBezierPathsForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inContext:(id)arg3 completion:(id /* block */)arg4;
- (void)writingToolsCoordinator:(id)arg1 requestsContextsForScope:(long long)arg2 completion:(id /* block */)arg3;
- (void)writingToolsCoordinator:(id)arg1 requestsPreviewForTextAnimation:(long long)arg2 ofRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 inContext:(id)arg4 completion:(id /* block */)arg5;
- (void)writingToolsCoordinator:(id)arg1 requestsRangeInContextWithIdentifierForPoint:(struct CGPoint { double x1; double x2; })arg2 completion:(id /* block */)arg3;
- (void)writingToolsCoordinator:(id)arg1 requestsUnderlinePathsForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inContext:(id)arg3 completion:(id /* block */)arg4;
- (void)writingToolsCoordinator:(id)arg1 selectRanges:(id)arg2 inContext:(id)arg3 completion:(id /* block */)arg4;
- (void)writingToolsCoordinator:(id)arg1 willChangeToState:(long long)arg2 completion:(id /* block */)arg3;
- (void)writingToolsSession:(id)arg1 didReceiveAction:(long long)arg2;

// Image: /System/Library/Frameworks/ContactsUI.framework/ContactsUI

- (void)_cnui_applyContactStyle;
- (id)ab_text;
- (id)ab_textAttributes;
- (void)setAb_text:(id)arg1;
- (void)setAb_textAttributes:(id)arg1;

// Image: /System/Library/Frameworks/LinkPresentation.framework/LinkPresentation

+ (id)_lp_createInertTextView;

- (void)_lp_setAttributedString:(id)arg1;

// Image: /System/Library/Frameworks/PencilKit.framework/PencilKit

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_boundsForDrawingTextAttachment:(id)arg1 characterIndex:(unsigned long long)arg2 layoutManager:(id)arg3;
- (id)_cacheIdentifierForTextAttachment:(id)arg1;
- (id)_cachedViewProviderForTextAttachment:(id)arg1;
- (bool)_canAddDrawingAtIndex:(unsigned long long)arg1;
- (bool)_canAddStroke;
- (bool)_canInsertDrawing;
- (bool)_canInsertDrawingInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)_canSelectDrawing;
- (void)_canvasViewWillCreateSnapshot;
- (void)_cleanupStaleCachedViewProviders;
- (void)_clearDrawingInfo;
- (bool)_cropDrawingAttachmentsWhenViewIsSmaller;
- (void)_didEndInteractiveResize;
- (void)_didEndStroke;
- (id)_drawingInfo;
- (id)_drawingInfoCreateIfNecessary;
- (bool)_growView:(id)arg1 textAttachment:(id)arg2 atCharacterIndex:(long long)arg3 step:(double)arg4 stop:(id /* block */)arg5;
- (void)_insertDrawing:(id)arg1;
- (id)_insertEmptyDrawingAttachmentAtLocation:(long long)arg1;
- (bool)_isHandwritingToolSelected;
- (id)_pkTiledViewIfEnabled;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_pk_boundsForDrawingTextAttachment:(id)arg1 characterIndex:(unsigned long long)arg2;
- (void)_pk_checkForTK2LostViewProviderInAttachment:(id)arg1 atCharacterIndex:(unsigned long long)arg2;
- (void)_pk_ensureLayoutForCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)_pk_invalidateLayoutForCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 invalidateDisplay:(bool)arg2 ensureLayout:(bool)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_pk_lineFragmentRectForGlyphAtCharacterIndex:(unsigned long long)arg1;
- (id)_pk_textRangeFromCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 textLayoutManager:(id)arg2;
- (id)_pk_viewProviderForAttachment:(id)arg1 atCharacterIndex:(unsigned long long)arg2 createIfNeeded:(bool)arg3;
- (void)_removeDrawingAttachment:(id)arg1 withView:(id)arg2 forDeletion:(bool)arg3;
- (void)_setCachedViewProvider:(id)arg1 textAttachment:(id)arg2;
- (void)_setCropDrawingAttachmentsWhenViewIsSmaller:(bool)arg1;
- (void)_setSelectedInkColor:(id)arg1;
- (void)_setTool:(id)arg1;
- (id)_textRangeFromRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)_tool;
- (void)_undoDrawingBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 viewBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofAttachmentUUID:(id)arg3;
- (void)_updateDrawingBackgroundColor;
- (void)_upgradeDrawingAtCharacterIndex:(long long)arg1 itemProviders:(id)arg2 insertionLocationInDrawing:(struct CGPoint { double x1; double x2; })arg3;
- (void)_willBeginInteractiveResize;
- (void)_willBeginNewStrokeForTouch:(id)arg1;
- (id)drawingDelegate;
- (id)ink;
- (bool)isFingerDrawingEnabled;
- (bool)isPaperEnabled;
- (bool)isRulerEnabled;
- (bool)isStylusDrawingEnabled;
- (id)linedPaper;
- (id)paperTexture;
- (void)setDrawingDelegate:(id)arg1;
- (void)setFingerDrawingEnabled:(bool)arg1;
- (void)setInk:(id)arg1;
- (void)setLinedPaper:(id)arg1;
- (void)setPaperEnabled:(bool)arg1;
- (void)setPaperTexture:(id)arg1;
- (void)setRulerEnabled:(bool)arg1;
- (void)setStylusDrawingEnabled:(bool)arg1;
- (void)setStylusDrawingEnabled:(bool)arg1 drawingClass:(Class)arg2 sixChannelBlending:(bool)arg3;

// Image: /System/Library/PrivateFrameworks/AppSupportUI.framework/AppSupportUI

- (long long)_nui_baselineViewType;
- (bool)isLayoutSizeDependentOnPerpendicularAxis;

// Image: /System/Library/PrivateFrameworks/ChatKit.framework/ChatKit

+ (bool)ck_supportsDynamicallyTogglingAllowsTextAnimations;

- (long long)ck_activeTextEffectTypeInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (unsigned long long)ck_activeTextStylesInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)ck_applyWithTextStyle:(unsigned long long)arg1 toRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 baseFont:(id)arg3;
- (void)ck_applyWithTextStyle:(unsigned long long)arg1 toRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 baseFont:(id)arg3 undo:(id /* block */)arg4;
- (bool)ck_containsStaleEntryViewFont;
- (void)ck_drawVisibleTextInCurrentContextWithContainerView:(id)arg1;
- (id)ck_firstTextAnimation;
- (bool)ck_hasPlayingOrPausedTextAnimator;
- (void)ck_invalidateAllAnimators;
- (bool)ck_isCursorDirectlyAfterBracketCharacter;
- (bool)ck_isLastTextAnimation:(id)arg1;
- (bool)ck_isTextLayoutExclusivelyUsingRTLWritingDirection;
- (void)ck_textKit1_drawVisibleTextInCurrentContextWithContainerView:(id)arg1;
- (void)ck_textKit2_drawVisibleTextInCurrentContextWithContainerView:(id)arg1;
- (void)ck_toggleTextEffect:(long long)arg1 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 getAdded:(bool*)arg3 undo:(id /* block */)arg4;
- (void)ck_toggleTextEffectNamed:(id)arg1 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 getAdded:(bool*)arg3 undo:(id /* block */)arg4;

// Image: /System/Library/PrivateFrameworks/DataDetectorsUI.framework/DataDetectorsUI

- (bool)dd_ignoreSignatures;
- (id)dd_newOperation;

// Image: /System/Library/PrivateFrameworks/EmojiKit.framework/EmojiKit

- (id)newRippleAnimatorForAnimation:(id)arg1 foregroundColor:(id)arg2 notify_emk:(id /* block */)arg3;

// Image: /System/Library/PrivateFrameworks/FeedbackCore.framework/FeedbackCore

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })currentCursorRect;
- (bool)isCursorIsAtEndOfDocument;
- (void)scrollTableToAvoidKeyboardInTableView:(id)arg1 keyboardHeight:(double)arg2 withPadding:(double)arg3;

// Image: /System/Library/PrivateFrameworks/MapsUI.framework/MapsUI

+ (id)_mapsui_defaultTextView;

- (float)_hyphenationFactor;
- (id)_mapsui_attributedText;
- (id)_mapsui_text;
- (void)_setHyphenationFactor:(float)arg1;
- (bool)allowsDefaultTighteningForTruncation;
- (double)idealWidth;
- (long long)lineBreakMode;
- (long long)numberOfLines;
- (void)setAllowsDefaultTighteningForTruncation:(bool)arg1;
- (void)setLineBreakMode:(long long)arg1;
- (void)setNumberOfLines:(long long)arg1;
- (void)set_mapsui_attributedText:(id)arg1;
- (void)set_mapsui_text:(id)arg1;

// Image: /System/Library/PrivateFrameworks/MaterialKit.framework/MaterialKit

- (void)mt_applyVisualStyling:(id)arg1;

// Image: /System/Library/PrivateFrameworks/NotesUI.framework/NotesUI

- (id)containerViewForAttachments;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })ic_characterRangeFromTextPosition:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })ic_characterRangeFromTextRange:(id)arg1;
- (id)ic_imageForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)ic_markedTextAttributes;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })ic_markedTextRange;
- (id)ic_pkSelectionInteraction;
- (id)ic_pkTiledView;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })ic_rangeFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })ic_rectForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)ic_scrollRangeToTop:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)ic_scrollRangeToVisible:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 animated:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)ic_scrollRangeToVisible:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 consideringInsets:(bool)arg2 animated:(bool)arg3;
- (void)ic_scrollRectToVisible:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(bool)arg2 completionHandler:(id /* block */)arg3;
- (id)ic_selectedRanges;
- (bool)ic_shouldEnableBlockQuoteForAttachmentsOnlySelection;
- (struct CGPoint { double x1; double x2; })ic_textContainerOrigin;
- (id)ic_textRangeFromCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })ic_visibleRange;
- (void)setIc_selectedRanges:(id)arg1;

// Image: /System/Library/PrivateFrameworks/PassKitUI.framework/PassKitUI

+ (id)pkui_plainInteractiveTextViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (id)pkui_plainNonInteractiveTextViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (void)pkui_styleTextView:(id)arg1;

- (void)pk_applyAppearance:(id)arg1;
- (id)pk_childrenForAppearance;
- (void)pk_setAttributedTextRespectingTextAndBackgroundColors:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pkui_frameForTextFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pkui_textFrame;

// Image: /System/Library/PrivateFrameworks/PrintKitUI.framework/PrintKitUI

- (Class)_printFormatterClass;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forViewPrintFormatter:(id)arg2;

// Image: /System/Library/PrivateFrameworks/RemindersUICore.framework/RemindersUICore

- (bool)roundedFont;
- (void)setRoundedFont:(bool)arg1;

// Image: /System/Library/PrivateFrameworks/TVRemoteUI.framework/TVRemoteUI

- (double)infoview_computedHeight;

// Image: /System/Library/PrivateFrameworks/TeaUI.framework/TeaUI

- (unsigned long long)ts_marginTop;
- (void)ts_setMarginTop:(unsigned long long)arg1;

// Image: /System/Library/PrivateFrameworks/TestFlightCore.framework/TestFlightCore

- (double)tf_estimatedFirstBaseline;

@end
