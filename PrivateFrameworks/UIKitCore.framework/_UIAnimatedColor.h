/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
 */

@interface _UIAnimatedColor : UIColor <_UIGeometryChangeObserver> {
    bool  _animating;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _bounds;
    CADisplayLink * _displayLink;
    id /* block */  _invalidationHandler;
    UIView * _parentView;
    double  _progress;
    UIViewFloatAnimatableProperty * _progressAnimatableProperty;
    UIColor * _wrappedColor;
}

@property (getter=isAnimating, nonatomic) bool animating;
@property (nonatomic, readonly) UIView *parentView;
@property (nonatomic) double progress;

+ (struct CGPatternCallbacks { unsigned int x1; int (*x2)(); int (*x3)(); })_patternCallbacks;
+ (id)animatedColorForParentView:(id)arg1;

- (void).cxx_destruct;
- (struct CGColor { }*)CGColor;
- (void)_didFireDisplayLink:(id)arg1;
- (void)_drawPatternWithContext:(struct CGContext { }*)arg1;
- (void)_geometryChanged:(const struct { unsigned long long x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; struct CGSize { double x_4_1_1; double x_4_1_2; } x4; struct CGPoint { double x_5_1_1; double x_5_1_2; } x5; struct CATransform3D { double x_6_1_1; double x_6_1_2; double x_6_1_3; double x_6_1_4; double x_6_1_5; double x_6_1_6; double x_6_1_7; double x_6_1_8; double x_6_1_9; double x_6_1_10; double x_6_1_11; double x_6_1_12; double x_6_1_13; double x_6_1_14; double x_6_1_15; double x_6_1_16; } x6; long long x7; id x8; id x9; id x10; id x11; }*)arg1 forAncestor:(id)arg2;
- (bool)_geometryObserverNeedsAncestorOnly;
- (struct CGColor { }*)_patternColorForSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_presentationValueChanged;
- (void)_recreatePatternColorForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)alphaComponent;
- (id)colorSpaceName;
- (id)colorWithAlphaComponent:(double)arg1;
- (void)dealloc;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 usingContext:(struct CGContext { }*)arg2 progress:(double)arg3;
- (bool)getHue:(double*)arg1 saturation:(double*)arg2 brightness:(double*)arg3 alpha:(double*)arg4;
- (bool)getRed:(double*)arg1 green:(double*)arg2 blue:(double*)arg3 alpha:(double*)arg4;
- (bool)getWhite:(double*)arg1 alpha:(double*)arg2;
- (unsigned long long)hash;
- (id)initWithBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 invalidationHandler:(id /* block */)arg2;
- (id)initWithParentView:(id)arg1;
- (bool)isAnimating;
- (bool)isEqual:(id)arg1;
- (bool)isPatternColor;
- (id)parentView;
- (double)progress;
- (void)set;
- (void)setAnimating:(bool)arg1;
- (void)setFill;
- (void)setProgress:(double)arg1;
- (void)setStroke;

@end
