/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
 */

@interface _UITextLayoutCanvasView : UIView <NSTextViewportLayoutControllerDelegate, _UITextKit2Canvas> {
    struct { 
        unsigned int customRenderControllerSupportsSetContentsScale : 1; 
        unsigned int customRenderControllerSupportsSetNeedsDisplay : 1; 
        unsigned int customRenderControllerSupportsInvalidateTemporaryAttributes : 1; 
        unsigned int customRenderControllerSupportPrePostNotify : 1; 
    }  _canvasViewFlags;
    struct CGSize { 
        double width; 
        double height; 
    }  _contentSize;
    <_UITextCanvasContext> * _context;
    NSMutableSet * _currentClientAuxiliaryViews;
    _UITextLayoutCanvasViewHoverEffectContainerLayer * _hoverEffectsLayer;
    bool  _inLayout;
    <NSCustomTextRendering> * _lastCustomRenderController;
    bool  _layoutFragmentViewsNeedDisplay;
    NSMutableSet * _newTextAttachmentViews;
    NSMutableSet * _oldClientAuxiliaryViews;
    UIView * _selectionContainerView;
    NSMutableSet * _textAttachmentViews;
    NSTextContainer * _textContainer;
    unsigned long long  _textContainerIndex;
    _UITextEmphasisBackgroundView * _textEmphasisBackgroundView;
    NSTextLayoutManager * _textLayoutManager;
    <UITraitChangeRegistration> * _traitChangeToken;
    _UIAnimatedTextLayoutInfo * _uniqueWritingToolsAnimatedLayoutInfo;
    NSMapTable * _viewportElementViews;
    NSMutableSet * _viewportElementsToRemove;
    NSTextViewportLayoutController * _viewportLayoutController;
}

@property (nonatomic) <_UITextCanvasContext> *context;
@property (nonatomic, readonly) <NSCustomTextRendering> *customRenderController;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property bool layoutFragmentViewsNeedDisplay;
@property (nonatomic, retain) UIView *selectionContainerView;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSTextContainer *textContainer;
@property (nonatomic, readonly) _UITextEmphasisBackgroundView *textEmphasisBackgroundView;
@property (nonatomic, readonly) NSTextLayoutManager *textLayoutManager;
@property (nonatomic, retain) _UIAnimatedTextLayoutInfo *uniqueWritingToolsAnimatedLayoutInfo;

- (void).cxx_destruct;
- (id)_internalTextLayoutController;
- (void)_performViewportLayout:(bool)arg1;
- (void)_removeUnusedFragmentViews;
- (void)_traitsChanged;
- (void)_updateContentsScaleForCustomRenderController:(double)arg1;
- (void)_updateTextEmphasisBackgroundViewForTextRange:(id)arg1 inTextView:(id)arg2 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)_updateTraitsForCustomTextRenderer:(id)arg1;
- (void)_viewportDidLayout;
- (void)_viewportWillLayout;
- (void)configureCustomTextRenderer;
- (id)context;
- (id)customRenderController;
- (void)drawTextInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)flushFragmentViews;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)initWithTextLayoutManager:(id)arg1 textContainer:(id)arg2;
- (void)invalidateTemporaryAttributesInRange:(id)arg1;
- (void)isEditingDidChange;
- (bool)layoutFragmentViewsNeedDisplay;
- (void)layoutSubviews;
- (id)selectionContainerView;
- (void)setContext:(id)arg1;
- (void)setLayoutFragmentViewsNeedDisplay:(bool)arg1;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setNeedsLayout;
- (void)setSelectionContainerView:(id)arg1;
- (void)setTextEmphasisBackgroundView:(id)arg1 withTextView:(id)arg2;
- (void)setUniqueWritingToolsAnimatedLayoutInfo:(id)arg1;
- (id)textContainer;
- (id)textEmphasisBackgroundView;
- (id)textLayoutManager;
- (id)textRangeAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)textRangeForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 layoutIfNeeded:(bool)arg2;
- (bool)textViewportLayoutController:(id)arg1 addRenderingSurface:(id)arg2 group:(long long)arg3 placement:(long long)arg4;
- (void)textViewportLayoutController:(id)arg1 configureRenderingSurfaceForTextLayoutFragment:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })textViewportLayoutController:(id)arg1 presentationLayoutFragmentFrameForTextLayoutFragment:(id)arg2 proposedOrigin:(struct CGPoint { double x1; double x2; })arg3;
- (id)textViewportLayoutController:(id)arg1 renderingSurfaceForTextLayoutFragment:(id)arg2;
- (void)textViewportLayoutControllerDidLayout:(id)arg1;
- (void)textViewportLayoutControllerWillLayout:(id)arg1;
- (id)uniqueWritingToolsAnimatedLayoutInfo;
- (void)updateContentSizeIfNeeded;
- (void)viewportBoundsDidChange;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })viewportBoundsForTextViewportLayoutController:(id)arg1;

@end
