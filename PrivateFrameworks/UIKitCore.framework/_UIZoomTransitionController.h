/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
 */

@interface _UIZoomTransitionController : NSObject <UIViewControllerAnimatedTransitioning, UIViewControllerAnimatedTransitioning_Internal, UIViewControllerAnimatedTransitioning_Keyboard, UIViewControllerInteractiveTransitioning, UIViewControllerPreemptableAnimatedTransitioning, _UIDismissInteractionDelegate> {
    void activeTransitionContext;
    void backgroundView;
    void clientTransition;
    void dimmingView;
    void dismissInteraction;
    void fallbackSourceView;
    void foregroundView;
    void isForNavigation;
    void isPreempting;
    void isPresentingSheet;
    void isZoomingIn;
    void morphAnimation;
    void morphInteractionAssertion;
    void owningViewController;
    void pendingDismissDestinationView;
    void shimAnimationView;
    void shimPropertyAnimator;
    void showcasePortal;
    void style;
    void toolbarTransitionController;
    void transitionOverlayView;
    void viewToScaleBack;
}

@property (nonatomic, readonly) UIView *_navigationBarTransitionOverlay;
@property (nonatomic, readonly) long long _navigationBarTransitionVariant;
@property (nonatomic, readonly) bool _shouldAnimateBottomBarVisibility;
@property (nonatomic, readonly) bool _shouldCrossFadeBottomBars;
@property (nonatomic, retain) _UIZoomViewControllerTransition *clientTransition;
@property (nonatomic, retain) _UIDismissInteraction *dismissInteraction;
@property (nonatomic) bool isZoomingIn;
@property (nonatomic) UIViewController *owningViewController;
@property (nonatomic, readonly) bool prefersPreemptionEnabledForPresentations;
@property (nonatomic, readonly) bool wantsInteractiveStart;

- (void).cxx_destruct;
- (id)_interactionController;
- (id)_navigationBarTransitionOverlay;
- (long long)_navigationBarTransitionVariant;
- (id)_navigationToolbarTransitionControllerForContext:(id)arg1;
- (bool)_shouldAnimateBottomBarVisibility;
- (bool)_shouldCrossFadeBottomBars;
- (void)animateKeyboard:(id)arg1;
- (void)animateTransition:(id)arg1;
- (id)clientTransition;
- (void)completeKeyboard:(id)arg1;
- (id)dismissInteraction;
- (void)dismissInteraction:(id)arg1 didBeginAtLocation:(struct CGPoint { double x1; double x2; })arg2 withVelocity:(struct CGPoint { double x1; double x2; })arg3;
- (void)dismissInteraction:(id)arg1 didCancelWithVelocity:(struct CGPoint { double x1; double x2; })arg2 originalPosition:(struct CGPoint { double x1; double x2; })arg3;
- (void)dismissInteraction:(id)arg1 didDismissWithVelocity:(struct CGPoint { double x1; double x2; })arg2;
- (void)dismissInteraction:(id)arg1 didIssueUpdate:(id)arg2;
- (bool)dismissInteraction:(id)arg1 shouldBeginWithAxis:(unsigned long long)arg2 location:(struct CGPoint { double x1; double x2; })arg3 velocity:(struct CGPoint { double x1; double x2; })arg4 proposal:(bool)arg5;
- (double)hysteresisForInteraction:(id)arg1;
- (id)init;
- (id)interruptibleAnimatorForTransition:(id)arg1;
- (bool)isZoomingIn;
- (id)owningViewController;
- (id)preemptWithContext:(id)arg1;
- (bool)prefersPreemptionEnabledForPresentations;
- (void)prepareToAnimateKeyboard:(id)arg1;
- (void)setClientTransition:(id)arg1;
- (void)setDismissInteraction:(id)arg1;
- (void)setIsZoomingIn:(bool)arg1;
- (void)setOwningViewController:(id)arg1;
- (bool)shouldPreemptWithContext:(id)arg1;
- (void)startInteractiveTransition:(id)arg1;
- (id)trackingViewForInteraction:(id)arg1;
- (double)transitionDuration:(id)arg1;
- (bool)wantsInteractiveStart;
- (void)willBeginAfterPreemptionWithContext:(id)arg1 data:(id)arg2;

@end
