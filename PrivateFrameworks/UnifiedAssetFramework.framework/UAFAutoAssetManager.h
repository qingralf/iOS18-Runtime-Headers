/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UnifiedAssetFramework.framework/UnifiedAssetFramework
 */

@interface UAFAutoAssetManager : NSObject

+ (id)_createXPCConnection;
+ (void)_logDailyStatusEventForAssetSetArrived:(id)arg1 entries:(id)arg2 assetSetArrived:(bool)arg3;
+ (id)assetSetNamesFromUsages:(id)arg1 configurationManager:(id)arg2;
+ (bool)autoAssetExistsWithEntries:(id)arg1;
+ (id)autoAssetSetForStatus:(id)arg1;
+ (void)conditionallyLockLatestAssetSet:(id)arg1 newestInstance:(id)arg2 checkAtomicError:(id)arg3 completion:(id /* block */)arg4;
+ (id)configureAssetSet:(id)arg1 specifiers:(id)arg2 changed:(bool*)arg3;
+ (void)configureAutoAssetsFromAssetSetUsages:(id)arg1 subscriptions:(id)arg2 configurationManager:(id)arg3 lockIfUnchanged:(bool)arg4 userInitiated:(bool)arg5;
+ (void)eliminateAssetType:(id)arg1;
+ (id)forceRemoveAutoAssetSet:(id)arg1;
+ (id)getAutoAssetSet:(id)arg1 specifiers:(id)arg2 addEntries:(bool)arg3 configured:(bool*)arg4;
+ (id)getAutoSetEntries:(id)arg1 specifiers:(id)arg2;
+ (id)getConcurrentQueue;
+ (id)getCurrentSpecifiers:(id)arg1 expectedAutoAssetType:(id)arg2;
+ (unsigned long long)getDownloadStatusFromAssetSetUsages:(id)arg1 configurationManager:(id)arg2;
+ (void)getDownloadStatusFromAssetSetUsages:(id)arg1 configurationManager:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
+ (unsigned long long)getDownloadStatusFromMAAutoAssetSetStatus:(id)arg1;
+ (id)getReason:(id)arg1 operation:(id)arg2;
+ (id)getSerialQueue;
+ (id)getSpecifiers:(id)arg1 assetSetUsages:(id)arg2;
+ (id)getSpecifiers:(id)arg1 assetSetUsages:(id)arg2 disableExperimentation:(bool)arg3;
+ (void)invalidateAtomicInstance:(id)arg1 assetSetName:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
+ (id)latestAtomicInstanceForClients:(id)arg1 OSSupported:(bool*)arg2 error:(id*)arg3;
+ (id)latestAtomicInstanceFromMA:(id)arg1 error:(id*)arg2;
+ (id)latestStatusForClients:(id)arg1 error:(id*)arg2;
+ (int)listenForUpdates:(id)arg1 updateHandler:(id /* block */)arg2;
+ (id)lockLatestAssetSet:(id)arg1;
+ (void)lockLatestAssetSet:(id)arg1 completion:(id /* block */)arg2;
+ (void)logAtomicInstance:(id)arg1 name:(id)arg2 entries:(id)arg3;
+ (id)manageAssetSet:(id)arg1 specifiers:(id)arg2 lockIfUnchanged:(bool)arg3 userInitiated:(bool)arg4;
+ (void)observeAllAssetSets;
+ (void)observeAssetSet:(id)arg1;
+ (void)observeAssetSetExperimentalNamespace:(id)arg1;
+ (void)removeAutoAssetSet:(id)arg1 completion:(id /* block */)arg2;
+ (void)removeUnusedAutoAssetSets:(id)arg1 usedAutoAssetSets:(id)arg2;
+ (bool)sendNotificationForAssetSet:(id)arg1;
+ (id)setLatestAtomicInstance:(id)arg1 autoAssetSet:(id)arg2;
+ (bool)shouldCheckAssetSet:(id)arg1 autoAssetSet:(id)arg2 changed:(bool)arg3 locked:(bool*)arg4;
+ (bool)shouldWaitForMobileAssetStart:(id)arg1;
+ (id)sizeInBytesForConfig:(id)arg1 key:(id)arg2 error:(id*)arg3;
+ (id)spaceNeededForAssetSetUsages:(id)arg1 key:(id)arg2 configurationManager:(id)arg3 error:(id*)arg4;
+ (void)stageAssetSet:(id)arg1 targets:(id)arg2 autoAssetSet:(id)arg3;
+ (void)stageAssetsWithSubscriptions:(id)arg1 knownAutoAssetSets:(id)arg2 usedAutoAssetSets:(id)arg3 autoAssetSets:(id)arg4;
+ (id)targetForAssetSet:(id)arg1 specifiers:(id)arg2 version:(id)arg3 autoAssetSets:(id)arg4;
+ (void)updateAutoAssetsFromAssetSetUsages:(id)arg1 configurationManager:(id)arg2 expensiveNetworking:(bool)arg3 progress:(id /* block */)arg4 requestId:(id)arg5 completion:(id /* block */)arg6;
+ (void)waitForMobileAssetStart:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;

@end
