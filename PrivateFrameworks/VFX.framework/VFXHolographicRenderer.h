/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VFX.framework/VFX
 */

@interface VFXHolographicRenderer : NSObject <VFXWorldRenderer> {
    VFXNode * _pointOfView;
    bool  _rawQuilt;
    VFXRenderer * _renderer;
    id  _session;
}

@property (nonatomic) bool additiveWritesToAlpha;
@property (nonatomic) unsigned long long antialiasingMode;
@property (nonatomic, readonly) AVAudioEngine *audioEngine;
@property (nonatomic, readonly) AVAudioEnvironmentNode *audioEnvironmentNode;
@property (nonatomic, retain) VFXNode *audioListener;
@property (nonatomic) bool autoenablesDefaultLighting;
@property (nonatomic, readonly) unsigned long long colorPixelFormat;
@property (nonatomic, readonly) <MTLCommandQueue> *commandQueue;
@property (nonatomic, readonly) <MTLRenderCommandEncoder> *currentRenderCommandEncoder;
@property (nonatomic, readonly) MTLRenderPassDescriptor *currentRenderPassDescriptor;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } currentViewport;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (nonatomic) unsigned long long debugOptions;
@property (nonatomic) <VFXWorldRendererDelegate> *delegate;
@property (nonatomic, readonly) unsigned long long depthPixelFormat;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) <MTLDevice> *device;
@property (readonly) unsigned long long hash;
@property (getter=isJitteringEnabled, nonatomic) bool jitteringEnabled;
@property (nonatomic, retain) VFXNode *pointOfView;
@property (nonatomic) bool rawQuilt;
@property (nonatomic, retain) VFXRenderGraph *renderGraph;
@property (nonatomic, retain) VFXRenderer *renderer;
@property (nonatomic, retain) id session;
@property (nonatomic) bool showsStatistics;
@property (nonatomic, readonly) unsigned long long stencilPixelFormat;
@property (readonly) Class superclass;
@property (getter=isTemporalAntialiasingEnabled, nonatomic) bool temporalAntialiasingEnabled;
@property (nonatomic, readonly) struct CGColorSpace { }*workingColorSpace;
@property (nonatomic, retain) VFXWorld *world;

- (id)_commandBufferStatusMonitor;
- (id)_resourceManagerMonitor;
- (bool)_wantsWorldRendererDelegationMessages;
- (bool)additiveWritesToAlpha;
- (unsigned long long)antialiasingMode;
- (id)audioEngine;
- (id)audioEnvironmentNode;
- (id)audioListener;
- (bool)autoenablesDefaultLighting;
- (unsigned long long)colorPixelFormat;
- (id)commandQueue;
- (id)currentRenderCommandEncoder;
- (id)currentRenderPassDescriptor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })currentViewport;
- (void)dealloc;
- (unsigned long long)debugOptions;
- (id)delegate;
- (unsigned long long)depthPixelFormat;
- (id)device;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 options:(id)arg2;
- (id)init;
- (id)initWithDevice:(id)arg1 options:(id)arg2;
- (bool)isJitteringEnabled;
- (bool)isNodeInsideFrustum:(id)arg1 withPointOfView:(id)arg2;
- (bool)isTemporalAntialiasingEnabled;
- (id)nodesInsideFrustumWithPointOfView:(id)arg1;
- (id)pointOfView;
- (bool)prepareObject:(id)arg1 shouldAbortBlock:(id /* block */)arg2;
- (void)prepareObjects:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)projectPoint;
- (bool)rawQuilt;
- (id)renderer;
- (id)session;
- (void)setAdditiveWritesToAlpha:(bool)arg1;
- (void)setAntialiasingMode:(unsigned long long)arg1;
- (void)setAudioListener:(id)arg1;
- (void)setAutoenablesDefaultLighting:(bool)arg1;
- (void)setDebugOptions:(unsigned long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setJitteringEnabled:(bool)arg1;
- (void)setPointOfView:(id)arg1;
- (void)setRawQuilt:(bool)arg1;
- (void)setRenderer:(id)arg1;
- (void)setSession:(id)arg1;
- (void)setShowsStatistics:(bool)arg1;
- (void)setTemporalAntialiasingEnabled:(bool)arg1;
- (void)setWorld:(id)arg1;
- (void)set_commandBufferStatusMonitor:(id)arg1;
- (void)set_resourceManagerMonitor:(id)arg1;
- (void)set_wantsWorldRendererDelegationMessages:(bool)arg1;
- (bool)showsStatistics;
- (unsigned long long)stencilPixelFormat;
- (void)unprojectPoint;
- (void)updateAtTime:(double)arg1;
- (struct CGColorSpace { }*)workingColorSpace;
- (id)world;

@end
