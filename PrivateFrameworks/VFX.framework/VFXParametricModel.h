/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VFX.framework/VFX
 */

@interface VFXParametricModel : VFXModel {
    long long  _capSegmentCount;
    float  _chamferRadius;
    long long  _chamferSegmentCount;
    long long  _cornerSegmentCount;
    float  _height;
    long long  _heightSegmentCount;
    float  _innerRadius;
    float  _length;
    long long  _lengthSegmentCount;
    float  _pipeRadius;
    long long  _pipeSegmentCount;
    long long  _primitiveType;
    long long  _radialSegmentCount;
    float  _radialSpan;
    float  _radius;
    long long  _segmentCount;
    bool  _spheregeodesic;
    bool  _spherehemispheric;
    float  _topRadius;
    long long  _type;
    float  _width;
    long long  _widthSegmentCount;
}

@property (nonatomic, readonly) NSArray *bridgedComponentNames;
@property (nonatomic) long long capSegmentCount;
@property (nonatomic) float chamferRadius;
@property (nonatomic) long long chamferSegmentCount;
@property (nonatomic) float cornerRadius;
@property (nonatomic) long long cornerSegmentCount;
@property (getter=isGeodesic, nonatomic) bool geodesic;
@property (nonatomic) float height;
@property (nonatomic) long long heightSegmentCount;
@property (getter=isHemispheric, nonatomic) bool hemispheric;
@property (nonatomic) float innerRadius;
@property (nonatomic) float length;
@property (nonatomic) long long lengthSegmentCount;
@property (nonatomic) long long parametricType;
@property (nonatomic) float pipeRadius;
@property (nonatomic) long long pipeSegmentCount;
@property (nonatomic) long long radialSegmentCount;
@property (nonatomic) float radialSpan;
@property (nonatomic) float radius;
@property (nonatomic) long long segmentCount;
@property (nonatomic) float topRadius;
@property (nonatomic) float width;
@property (nonatomic) long long widthSegmentCount;

+ (id)capsuleWithCapRadius:(float)arg1 height:(float)arg2;
+ (id)coneWithTopRadius:(float)arg1 bottomRadius:(float)arg2 height:(float)arg3;
+ (id)cubeWithWidth:(float)arg1 height:(float)arg2 length:(float)arg3 chamferRadius:(float)arg4;
+ (id)cylinderWithRadius:(float)arg1 height:(float)arg2;
+ (id)planeWithWidth:(float)arg1 height:(float)arg2;
+ (id)pyramidWithWidth:(float)arg1 height:(float)arg2 length:(float)arg3;
+ (id)sphereWithRadius:(float)arg1;
+ (bool)supportsSecureCoding;
+ (id)torusWithRingRadius:(float)arg1 pipeRadius:(float)arg2;
+ (id)tubeWithInnerRadius:(float)arg1 outerRadius:(float)arg2 height:(float)arg3;
+ (id)unitCube;

- (struct __CFXGeometry { struct __CFXEntity { struct __CFRuntimeBase { unsigned long long x_1_2_1; _Atomic unsigned long long x_1_2_2; } x_1_1_1; void *x_1_1_2; struct __CFString {} *x_1_1_3; struct __CFString {} *x_1_1_4; struct __CFDictionary {} *x_1_1_5; struct __CFXWorld {} *x_1_1_6; long long x_1_1_7; } x1; struct __CFXMesh {} *x2; struct __CFXMaterial {} *x3; struct __CFArray {} *x4; struct __CFSet {} *x5; struct __CFArray {} *x6; struct { /* ? */ } *x7; unsigned int x8 : 1; int (*x9)(); struct { unsigned char x_10_1_1; bool x_10_1_2; struct { bool x_3_2_1; unsigned char x_3_2_2; unsigned char x_3_2_3; unsigned char x_3_2_4; } x_10_1_3; struct __CFXMeshElement {} *x_10_1_4; struct __CFXMeshSource {} *x_10_1_5; struct __CFXMesh {} *x_10_1_6; void *x_10_1_7; void *x_10_1_8; } x10; struct { unsigned char x_11_1_1; float x_11_1_2; unsigned int x_11_1_3; unsigned char x_11_1_4; union { struct { float x_1_3_1; float x_1_3_2; } x_5_2_1; struct { float x_2_3_1; } x_5_2_2; struct { float x_3_3_1; } x_5_2_3; struct { unsigned char x_4_3_1; unsigned int x_4_3_2 : 1; unsigned int x_4_3_3 : 1; } x_5_2_4; } x_11_1_5; } x11; }*)__createCFObject;
- (void)_notifyModelChanged;
- (void)_setupObjCModelFrom:(id)arg1;
- (int)_sphereType;
- (void)_syncObjCModel;
- (void)_syncObjCModel:(struct __CFXParametricGeometry { struct __CFXGeometry { struct __CFXEntity { struct __CFRuntimeBase { unsigned long long x_1_3_1; _Atomic unsigned long long x_1_3_2; } x_1_2_1; void *x_1_2_2; struct __CFString {} *x_1_2_3; struct __CFString {} *x_1_2_4; struct __CFDictionary {} *x_1_2_5; struct __CFXWorld {} *x_1_2_6; long long x_1_2_7; } x_1_1_1; struct __CFXMesh {} *x_1_1_2; struct __CFXMaterial {} *x_1_1_3; struct __CFArray {} *x_1_1_4; struct __CFSet {} *x_1_1_5; struct __CFArray {} *x_1_1_6; struct { /* ? */ } *x_1_1_7; unsigned int x_1_1_8 : 1; int (*x_1_1_9)(); struct { unsigned char x_10_2_1; bool x_10_2_2; struct { bool x_3_3_1; unsigned char x_3_3_2; unsigned char x_3_3_3; unsigned char x_3_3_4; } x_10_2_3; struct __CFXMeshElement {} *x_10_2_4; struct __CFXMeshSource {} *x_10_2_5; struct __CFXMesh {} *x_10_2_6; void *x_10_2_7; void *x_10_2_8; } x_1_1_10; struct { unsigned char x_11_2_1; float x_11_2_2; unsigned int x_11_2_3; unsigned char x_11_2_4; union { struct { float x_1_4_1; float x_1_4_2; } x_5_3_1; struct { float x_2_4_1; } x_5_3_2; struct { float x_3_4_1; } x_5_3_3; struct { unsigned char x_4_4_1; unsigned int x_4_4_2 : 1; unsigned int x_4_4_3 : 1; } x_5_3_4; } x_11_2_5; } x_1_1_11; } x1; }*)arg1;
- (void)_updateSphereType;
- (id)bridgedComponentNames;
- (long long)capSegmentCount;
- (float)chamferRadius;
- (long long)chamferSegmentCount;
- (id)copy;
- (id)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (float)cornerRadius;
- (long long)cornerSegmentCount;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (bool)geodesic;
- (bool)getBoundingBoxMin:(/* Warning: Unrecognized filer type: '1' using 'void*' */ void**)arg1 max:(/* Warning: Unrecognized filer type: '2' using 'void*' */ void**)arg2;
- (bool)getBoundingSphereCenter:(/* Warning: Unrecognized filer type: '1' using 'void*' */ void**)arg1 radius:(float*)arg2;
- (float)height;
- (long long)heightSegmentCount;
- (id)init;
- (id)initPresentationParametricModelWithParametricGeometryRef:(struct __CFXParametricGeometry { struct __CFXGeometry { struct __CFXEntity { struct __CFRuntimeBase { unsigned long long x_1_3_1; _Atomic unsigned long long x_1_3_2; } x_1_2_1; void *x_1_2_2; struct __CFString {} *x_1_2_3; struct __CFString {} *x_1_2_4; struct __CFDictionary {} *x_1_2_5; struct __CFXWorld {} *x_1_2_6; long long x_1_2_7; } x_1_1_1; struct __CFXMesh {} *x_1_1_2; struct __CFXMaterial {} *x_1_1_3; struct __CFArray {} *x_1_1_4; struct __CFSet {} *x_1_1_5; struct __CFArray {} *x_1_1_6; struct { /* ? */ } *x_1_1_7; unsigned int x_1_1_8 : 1; int (*x_1_1_9)(); struct { unsigned char x_10_2_1; bool x_10_2_2; struct { bool x_3_3_1; unsigned char x_3_3_2; unsigned char x_3_3_3; unsigned char x_3_3_4; } x_10_2_3; struct __CFXMeshElement {} *x_10_2_4; struct __CFXMeshSource {} *x_10_2_5; struct __CFXMesh {} *x_10_2_6; void *x_10_2_7; void *x_10_2_8; } x_1_1_10; struct { unsigned char x_11_2_1; float x_11_2_2; unsigned int x_11_2_3; unsigned char x_11_2_4; union { struct { float x_1_4_1; float x_1_4_2; } x_5_3_1; struct { float x_2_4_1; } x_5_3_2; struct { float x_3_4_1; } x_5_3_3; struct { unsigned char x_4_4_1; unsigned int x_4_4_2 : 1; unsigned int x_4_4_3 : 1; } x_5_3_4; } x_11_2_5; } x_1_1_11; } x1; }*)arg1;
- (id)initUninitialized;
- (id)initWithCoder:(id)arg1;
- (id)initWithDefaultMaterial;
- (float)innerRadius;
- (bool)isGeodesic;
- (bool)isHemispheric;
- (float)length;
- (long long)lengthSegmentCount;
- (id)mesh;
- (long long)parametricType;
- (float)pipeRadius;
- (long long)pipeSegmentCount;
- (id)presentationModel;
- (long long)primitiveType;
- (long long)radialSegmentCount;
- (float)radialSpan;
- (float)radius;
- (long long)segmentCount;
- (void)setCapSegmentCount:(long long)arg1;
- (void)setChamferRadius:(float)arg1;
- (void)setChamferSegmentCount:(long long)arg1;
- (void)setCornerRadius:(float)arg1;
- (void)setCornerSegmentCount:(long long)arg1;
- (void)setGeodesic:(bool)arg1;
- (void)setHeight:(float)arg1;
- (void)setHeightSegmentCount:(long long)arg1;
- (void)setHemispheric:(bool)arg1;
- (void)setInnerRadius:(float)arg1;
- (void)setLength:(float)arg1;
- (void)setLengthSegmentCount:(long long)arg1;
- (void)setParametricType:(long long)arg1;
- (void)setPipeRadius:(float)arg1;
- (void)setPipeSegmentCount:(long long)arg1;
- (void)setPrimitiveType:(long long)arg1;
- (void)setRadialSegmentCount:(long long)arg1;
- (void)setRadialSpan:(float)arg1;
- (void)setRadius:(float)arg1;
- (void)setSegmentCount:(long long)arg1;
- (void)setTopRadius:(float)arg1;
- (void)setWidth:(float)arg1;
- (void)setWidthSegmentCount:(long long)arg1;
- (float)topRadius;
- (float)width;
- (long long)widthSegmentCount;

@end
