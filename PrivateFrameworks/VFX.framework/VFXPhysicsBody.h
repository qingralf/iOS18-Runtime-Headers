/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VFX.framework/VFX
 */

@interface VFXPhysicsBody : NSObject <NSCopying, NSSecureCoding> {
    bool  _active;
    bool  _allowsResting;
    float  _angularDamping;
    float  _angularRestingThreshold;
    void _angularVelocity;
    void _angularVelocityFactor;
    void * _body;
    VFXBtShapeWrapper * _btShapeWrapper;
    unsigned long long  _categoryBitMask;
    void _centerOfMassOffset;
    float  _charge;
    unsigned long long  _collisionBitMask;
    unsigned long long  _contactTestBitMask;
    float  _continuousCollisionDetectionThreshold;
    float  _damping;
    bool  _defaultShape;
    bool  _explicitMomentOfInertia;
    float  _friction;
    bool  _ignoreGravity;
    float  _linearRestingThreshold;
    float  _mass;
    void _momentOfInertia;
    VFXNode * _node;
    VFXPhysicsShape * _physicsShape;
    float  _restitution;
    float  _rollingFriction;
    long long  _type;
    void _velocity;
    void _velocityFactor;
}

@property (getter=isAffectedByGravity, nonatomic) bool affectedByGravity;
@property (nonatomic) bool allowsResting;
@property (nonatomic) float angularDamping;
@property (nonatomic) float angularRestingThreshold;
@property (nonatomic) void angularVelocity;
@property (nonatomic) void angularVelocityFactor;
@property (nonatomic) unsigned long long categoryBitMask;
@property (nonatomic) void centerOfMassOffset;
@property (nonatomic) float charge;
@property (nonatomic) unsigned long long collisionBitMask;
@property (nonatomic) unsigned long long contactTestBitMask;
@property (nonatomic) float continuousCollisionDetectionThreshold;
@property (nonatomic) float damping;
@property (nonatomic) float friction;
@property (nonatomic, readonly) bool hasDefaultShape;
@property (nonatomic, readonly) bool isResting;
@property (nonatomic) float linearRestingThreshold;
@property (nonatomic) float mass;
@property (nonatomic) void momentOfInertia;
@property (nonatomic, retain) VFXPhysicsShape *physicsShape;
@property (nonatomic) float restitution;
@property (nonatomic) float rollingFriction;
@property (nonatomic) long long type;
@property (nonatomic) bool usesDefaultMomentOfInertia;
@property (nonatomic) void velocity;
@property (nonatomic) void velocityFactor;

+ (id)_generateDefaultShapeForNode:(id)arg1;
+ (id)bodyWithType:(long long)arg1 shape:(id)arg2;
+ (id)dynamicBody;
+ (id)kinematicBody;
+ (id)staticBody;
+ (bool)supportsSecureCoding;

- (void)_activate;
- (void*)_createBody;
- (void*)_handle;
- (id)_owner;
- (void)_ownerWillDie;
- (void)_removeOwner;
- (void)_setBtShape:(id)arg1;
- (void)_setOwner:(id)arg1;
- (void)_setPhysicsShape:(id)arg1;
- (void)_updateCollisionShape;
- (bool)allowsResting;
- (float)angularDamping;
- (float)angularRestingThreshold;
- (float)angularSleepingThreshold;
- (void)angularVelocity;
- (void)angularVelocityFactor;
- (id)angularVelocityFactorValue;
- (id)angularVelocityValue;
- (void)applyForce:(void *)arg1 atPosition:(void *)arg2 impulse:(void *)arg3; // needs 3 arg types, found 1: bool
- (void)applyForce:(void *)arg1 impulse:(void *)arg2; // needs 2 arg types, found 1: bool
- (void)applyForceValue:(id)arg1 atPosition:(id)arg2 impulse:(bool)arg3;
- (void)applyForceValue:(id)arg1 impulse:(bool)arg2;
- (void)applyTorque:(void *)arg1 impulse:(void *)arg2; // needs 2 arg types, found 1: bool
- (void)applyTorqueValue:(id)arg1 impulse:(bool)arg2;
- (unsigned long long)categoryBitMask;
- (void)centerOfMassOffset;
- (float)charge;
- (void)cleanCollisionCache;
- (void)clearAllForces;
- (unsigned long long)collisionBitMask;
- (unsigned long long)contactTestBitMask;
- (float)continuousCollisionDetection;
- (float)continuousCollisionDetectionThreshold;
- (id)copy;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (float)damping;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (void)flagAsActive:(bool)arg1;
- (float)friction;
- (bool)hasDefaultShape;
- (id)initWithCoder:(id)arg1;
- (id)initWithType:(long long)arg1 shape:(id)arg2;
- (bool)isActive;
- (bool)isAffectedByGravity;
- (bool)isResting;
- (float)linearRestingThreshold;
- (float)linearSleepingThreshold;
- (float)mass;
- (void)momentOfInertia;
- (id)momentOfInertiaValue;
- (void)moveToPosition;
- (void)moveToTransform:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1;
- (id)physicsShape;
- (void)resetToTransform:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1;
- (void)resetTransform;
- (float)restitution;
- (float)rollingFriction;
- (void)rotateToAxisAngle;
- (void)setAffectedByGravity:(bool)arg1;
- (void)setAllowsResting:(bool)arg1;
- (void)setAngularDamping:(float)arg1;
- (void)setAngularRestingThreshold:(float)arg1;
- (void)setAngularSleepingThreshold:(float)arg1;
- (void)setAngularVelocity;
- (void)setAngularVelocityFactor;
- (void)setAngularVelocityFactorValue:(id)arg1;
- (void)setAngularVelocityValue:(id)arg1;
- (void)setCategoryBitMask:(unsigned long long)arg1;
- (void)setCenterOfMassOffset;
- (void)setCharge:(float)arg1;
- (void)setCollisionBitMask:(unsigned long long)arg1;
- (void)setContactTestBitMask:(unsigned long long)arg1;
- (void)setContinuousCollisionDetectionThreshold:(float)arg1;
- (void)setDamping:(float)arg1;
- (void)setFriction:(float)arg1;
- (void)setLinearRestingThreshold:(float)arg1;
- (void)setLinearSleepingThreshold:(float)arg1;
- (void)setMass:(float)arg1;
- (void)setMomentOfInertia;
- (void)setMomentOfInertiaValue:(id)arg1;
- (void)setPhysicsShape:(id)arg1;
- (void)setResting:(bool)arg1;
- (void)setRestitution:(float)arg1;
- (void)setRollingFriction:(float)arg1;
- (void)setType:(long long)arg1;
- (void)setUsesDefaultMomentOfInertia:(bool)arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (void)setVelocity;
- (void)setVelocityFactor;
- (void)setVelocityFactorValue:(id)arg1;
- (void)setVelocityValue:(id)arg1;
- (long long)type;
- (void)updateDefaultShape;
- (void)updateGlobalScale:(double)arg1;
- (bool)usesDefaultMomentOfInertia;
- (id)valueForKey:(id)arg1;
- (void)velocity;
- (void)velocityFactor;
- (id)velocityFactorValue;
- (id)velocityValue;
- (struct __CFXWorld { }*)worldRef;

@end
