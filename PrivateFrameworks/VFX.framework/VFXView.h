/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VFX.framework/VFX
 */

@interface VFXView : UIView <VFXWorldRenderer> {
    unsigned int  _appChangedColorAppearance;
    unsigned int  _appIsDeactivated;
    unsigned int  _autoPausedWorld;
    UIColor * _backgroundColor;
    CAMetalLayer * _backingLayer;
    struct CGSize { 
        double width; 
        double height; 
    }  _boundsSize;
    NSArray * _controllerGestureRecognizers;
    double  _currentSystemTime;
    id  _delegate;
    <MTLDevice> * _device;
    bool  _didTriggerRedrawWhileRendering;
    VFXDisplayLink * _displayLink;
    bool  _displayLinkCreationRequested;
    unsigned int  _drawOnMainThreadPending;
    unsigned int  _firstDrawDone;
    bool  _imguiHandleMouseDown;
    unsigned int  _inRenderQueueForLayerBackedGLRendering;
    bool  _isHidden;
    unsigned int  _isInLiveResize;
    unsigned int  _isOpaque;
    VFXJitterer * _jitterer;
    double  _lastUpdate;
    _TtC3VFX13VFXViewLegacy * _legacyView;
    VFXRecursiveLock * _lock;
    bool  _lowLatency;
    <VFXEventHandler> * _navigationCameraController;
    id  _otherMouseEventMonitor;
    long long  _preferredFramePerSeconds;
    VFXRenderer * _renderer;
    unsigned int  _rendersContinuously;
    bool  _shouldHandleOtherMouseButtonDrag;
    bool  _skipFramesIfNoDrawableAvailable;
    char * _snapshotImageData;
    unsigned long long  _snapshotImageDataLength;
    unsigned int  _usesCustomColorSpace;
    unsigned int  _usesCustomPixelFormat;
    unsigned int  _usesCustomScaleFactor;
    unsigned int  _viewIsOffscreen;
    unsigned int  _wantsHDR;
    VFXWorld * _world;
}

@property (nonatomic) bool additiveWritesToAlpha;
@property (nonatomic) bool allowsCameraControl;
@property (nonatomic) unsigned long long antialiasingMode;
@property (nonatomic, readonly) AVAudioEngine *audioEngine;
@property (nonatomic, readonly) AVAudioEnvironmentNode *audioEnvironmentNode;
@property (nonatomic, retain) VFXNode *audioListener;
@property (nonatomic) bool autoenablesDefaultLighting;
@property (nonatomic, readonly) <VFXCameraControlConfiguration> *cameraControlConfiguration;
@property (nonatomic, readonly) unsigned long long colorPixelFormat;
@property (nonatomic, readonly) <MTLCommandQueue> *commandQueue;
@property (nonatomic, readonly) <MTLRenderCommandEncoder> *currentRenderCommandEncoder;
@property (nonatomic, readonly) MTLRenderPassDescriptor *currentRenderPassDescriptor;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } currentViewport;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (nonatomic) unsigned long long debugOptions;
@property (nonatomic, readonly) VFXCameraController *defaultCameraController;
@property (nonatomic) <VFXWorldRendererDelegate> *delegate;
@property (nonatomic, readonly) unsigned long long depthPixelFormat;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) <MTLDevice> *device;
@property (readonly) unsigned long long hash;
@property (getter=isJitteringEnabled, nonatomic) bool jitteringEnabled;
@property (nonatomic, retain) VFXNode *pointOfView;
@property (nonatomic) long long preferredFramesPerSecond;
@property (nonatomic, retain) VFXRenderGraph *renderGraph;
@property (nonatomic) bool rendersContinuously;
@property (nonatomic) bool showsStatistics;
@property (nonatomic, readonly) unsigned long long stencilPixelFormat;
@property (readonly) Class superclass;
@property (getter=isTemporalAntialiasingEnabled, nonatomic) bool temporalAntialiasingEnabled;
@property (nonatomic) bool wantsExtendedDynamicRange;
@property (nonatomic, readonly) struct CGColorSpace { }*workingColorSpace;
@property (nonatomic, retain) VFXWorld *world;

// Image: /System/Library/PrivateFrameworks/VFX.framework/VFX

+ (id)_currentVFXViewFocusEnvironment;
+ (bool)_isMetalSupported;
+ (id)_kvoKeysForwardedToRenderer;
+ (bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)deviceForOptions:(id)arg1;
+ (bool)displayLinkCallbackShouldReturnImmediately;
+ (bool)displayLinkPolicy;
+ (id)keyPathsForValuesAffectingValueForKey:(id)arg1;
+ (Class)layerClass;
+ (bool)shouldObserveApplicationStateToPreventBackgroundGPUAccess;
+ (bool)usesSeparateWorkGroup;

- (void)VFX_displayLinkCallback:(double)arg1;
- (void*)__CFObject;
- (void)_addGPUFrameCompletedHandler:(id /* block */)arg1;
- (void)_addGPUFramePresentedHandler:(id /* block */)arg1;
- (void)_addGPUFrameScheduledHandler:(id /* block */)arg1;
- (void)_adjustBackingLayerPixelFormat;
- (void)_allowGPUBackgroundExecution;
- (id)_authoringEnvironment;
- (void)_backgroundDidChange;
- (bool)_canJitter;
- (bool)_checkAndUpdateDisplayLinkStateIfNeeded;
- (id)_commandBufferStatusMonitor;
- (void)_commonInit:(id)arg1;
- (bool)_controlsOwnScaleFactor;
- (void)_createDisplayLinkIfNeeded;
- (id)_defaultBackgroundColor;
- (void)_drawAtTime:(double)arg1;
- (bool)_enableARMode;
- (void)_enterBackground:(id)arg1;
- (void)_enterForeground:(id)arg1;
- (float)_flipY:(float)arg1;
- (void)_flushDisplayLink;
- (void)_initializeDisplayLinkWithScreen:(id)arg1 policy:(unsigned long long)arg2 completionHandler:(id /* block */)arg3;
- (bool)_isEditor;
- (void)_jitterRedisplay;
- (id)_legacyView;
- (long long)_preferredFocusMovementStyle;
- (double)_renderThreadPriority;
- (id)_renderingQueue;
- (void)_resetContentsScaleFactor;
- (void)_resizeIfNeeded;
- (id)_resourceManagerMonitor;
- (float)_runFPSTestWithDuration:(double)arg1;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })_screenTransform;
- (void)_setNeedsDisplay;
- (bool)_shouldDelegateARCompositing;
- (bool)_showsAuthoringEnvironment;
- (float)_superSamplingFactor;
- (void)_systemTimeAnimationStarted:(id)arg1;
- (struct CGSize { double x1; double x2; })_updateBackingSize;
- (void)_updateContentsScaleFactor;
- (void)_updateOpacity;
- (void)_updateProbes:(id)arg1 progress:(id)arg2;
- (void)_viewport;
- (bool)_wantsWorldRendererDelegationMessages;
- (void)_worldDidUpdate:(id)arg1;
- (bool)additiveWritesToAlpha;
- (bool)allowsCameraControl;
- (unsigned long long)antialiasingMode;
- (id)audioEngine;
- (id)audioEnvironmentNode;
- (id)audioListener;
- (bool)autoenablesDefaultLighting;
- (id)backgroundColor;
- (struct CGSize { double x1; double x2; })backingSizeForBoundSize:(struct CGSize { double x1; double x2; })arg1;
- (id)cameraControlConfiguration;
- (unsigned long long)colorPixelFormat;
- (struct CGColorSpace { }*)colorSpace;
- (id)commandQueue;
- (id)commandQueue;
- (double)contentScaleFactor;
- (id)currentRenderCommandEncoder;
- (id)currentRenderPassDescriptor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })currentViewport;
- (void)dealloc;
- (unsigned long long)debugOptions;
- (unsigned long long)debugUIOptions;
- (id)defaultCameraController;
- (id)delegate;
- (unsigned long long)depthPixelFormat;
- (id)description;
- (id)device;
- (void)didMoveToWindow;
- (id)displayLink;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)effect;
- (void)encodeWithCoder:(id)arg1;
- (id)eventHandler;
- (void)eventHandlerWantsRedraw;
- (id)focusItemsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)framebufferOnly;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 options:(id)arg2;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)hitTestWithSegmentFromPoint:(void *)arg1 toPoint:(void *)arg2 options:(void *)arg3; // needs 3 arg types, found 1: id
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 options:(id)arg2;
- (void)invalidateDisplayLink;
- (bool)isEmulatingStereo;
- (bool)isJitteringEnabled;
- (bool)isNodeInsideFrustum:(id)arg1 withPointOfView:(id)arg2;
- (bool)isOpaque;
- (bool)isTemporalAntialiasingEnabled;
- (void)layoutSubviews;
- (id)legacyView;
- (void)lock;
- (bool)lowLatency;
- (id)navigationCameraController;
- (id)nodesInsideFrustumWithPointOfView:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)pauseDisplayLink;
- (unsigned long long)pixelFormat;
- (id)pointOfCulling;
- (id)pointOfView;
- (id /* block */)postRenderCallback;
- (long long)preferredFramesPerSecond;
- (bool)prepareObject:(id)arg1 shouldAbortBlock:(id /* block */)arg2;
- (void)prepareObjects:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)projectPoint;
- (id)renderGraph;
- (unsigned long long)renderMode;
- (void)renderWithCompletion:(id /* block */)arg1;
- (void)renderWithPresentWithTransaction:(bool)arg1 completion:(id /* block */)arg2;
- (id)renderer;
- (unsigned long long)rendererKind;
- (bool)rendersContinuously;
- (unsigned char)resizingMode;
- (void)resumeDisplayLink;
- (void)safeAreaInsetsDidChange;
- (double)scaleFactor;
- (id)scene;
- (void)setAdditiveWritesToAlpha:(bool)arg1;
- (void)setAllowsCameraControl:(bool)arg1;
- (void)setAntialiasingMode:(unsigned long long)arg1;
- (void)setAudioListener:(id)arg1;
- (void)setAutoenablesDefaultLighting:(bool)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setColorSpace:(struct CGColorSpace { }*)arg1;
- (void)setContentScaleFactor:(double)arg1;
- (void)setDebugOptions:(unsigned long long)arg1;
- (void)setDebugUIOptions:(unsigned long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisplayLink:(id)arg1;
- (void)setEffect:(id)arg1;
- (void)setEmulateStereo:(bool)arg1;
- (void)setEventHandler:(id)arg1;
- (void)setFramebufferOnly:(bool)arg1;
- (void)setHidden:(bool)arg1;
- (void)setJitteringEnabled:(bool)arg1;
- (void)setLowLatency:(bool)arg1;
- (void)setNavigationCameraController:(id)arg1;
- (void)setNeedsDisplay;
- (void)setPixelFormat:(unsigned long long)arg1;
- (void)setPointOfCulling:(id)arg1;
- (void)setPointOfView:(id)arg1;
- (void)setPointOfView:(id)arg1 animate:(bool)arg2;
- (void)setPostRenderCallback:(id /* block */)arg1;
- (void)setPreferredFramesPerSecond:(long long)arg1;
- (void)setRenderGraph:(id)arg1;
- (void)setRenderMode:(unsigned long long)arg1;
- (void)setRendererKind:(unsigned long long)arg1;
- (void)setRendersContinuously:(bool)arg1;
- (void)setResizingMode:(unsigned char)arg1;
- (void)setScaleFactor:(double)arg1;
- (void)setScene:(id)arg1;
- (void)setShowsStatistics:(bool)arg1;
- (void)setSkipFramesIfNoDrawableAvailable:(bool)arg1;
- (void)setTemporalAntialiasingEnabled:(bool)arg1;
- (void)setTriggersEnabled:(bool)arg1;
- (void)setWantsExtendedDynamicRange:(bool)arg1;
- (void)setWantsHDR:(bool)arg1;
- (void)setWorld:(id)arg1;
- (void)set_commandBufferStatusMonitor:(id)arg1;
- (void)set_enableARMode:(bool)arg1;
- (void)set_legacyView:(id)arg1;
- (void)set_resourceManagerMonitor:(id)arg1;
- (void)set_screenTransform:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1;
- (void)set_shouldDelegateARCompositing:(bool)arg1;
- (void)set_superSamplingFactor:(float)arg1;
- (void)set_wantsWorldRendererDelegationMessages:(bool)arg1;
- (id)setupLegacyView;
- (bool)showsDebugUI;
- (bool)showsStatistics;
- (bool)skipFramesIfNoDrawableAvailable;
- (id)snapshot;
- (unsigned long long)stencilPixelFormat;
- (void)switchToCameraNamed:(id)arg1;
- (void)switchToNextCamera;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)traitCollectionDidChange:(id)arg1;
- (bool)triggersEnabled;
- (void)unlock;
- (void)unprojectPoint;
- (void)updateAtTime:(double)arg1;
- (void)updateLayerLatency;
- (id)vfx_backingLayer;
- (bool)vfx_inLiveResize;
- (void)vfx_setBackingLayer:(id)arg1;
- (void)vfx_setGestureRecognizers:(id)arg1;
- (void)vfx_updateGestureRecognizers;
- (bool)wantsExtendedDynamicRange;
- (bool)wantsHDR;
- (void)willMoveToWindow:(id)arg1;
- (struct CGColorSpace { }*)workingColorSpace;
- (id)world;

// Image: /System/Library/Frameworks/ImagePlayground.framework/ImagePlayground

- (void)_vfx_setColorSpace:(struct CGColorSpace { }*)arg1;
- (void)vfx_resetColorSpace;
- (void)vfx_setClearBackground;
- (void)vfx_setExtendedLinearSRGBColorSpace;
- (void)vfx_setLinearSRGBColorSpace;

@end
