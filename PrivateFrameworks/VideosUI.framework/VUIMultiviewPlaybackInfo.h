/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VideosUI.framework/VideosUI
 */

@interface VUIMultiviewPlaybackInfo : NSObject {
    TVPPlaybackState * _backgroundPlayerState;
    NSString * _broadcastLocale;
    long long  _context;
    int  _disabledAudioTrackId;
    NSObject<VUILivePostPlayController> * _livePostPlayController;
    id  _notificationToken;
    bool  _pausedDueToInterruption;
    VUIPlayer * _player;
    AVPlayerViewController * _playerViewController;
    bool  _playsFromStart;
    NSDate * _resumeDate;
}

@property (nonatomic, retain) TVPPlaybackState *backgroundPlayerState;
@property (nonatomic, readonly) NSString *broadcastLocale;
@property (nonatomic) long long context;
@property (nonatomic) int disabledAudioTrackId;
@property (nonatomic, readonly) bool isAtLiveEdge;
@property (nonatomic, retain) NSObject<VUILivePostPlayController> *livePostPlayController;
@property (nonatomic, retain) id notificationToken;
@property (nonatomic) bool pausedDueToInterruption;
@property (nonatomic, retain) VUIPlayer *player;
@property (nonatomic, retain) AVPlayerViewController *playerViewController;
@property (nonatomic, readonly) bool playsFromStart;
@property (nonatomic, retain) NSDate *resumeDate;

+ (id)prospectivePlaybackInfo;

- (void).cxx_destruct;
- (bool)_audioContainsAirPlayRoute;
- (id)_audioTrackForPlayer:(id)arg1 withIdentifier:(int)arg2;
- (id)_enabledAudioTrackForPlayer:(id)arg1;
- (void)_waitForExternalPlaybackToEndForPlayer:(id)arg1 completion:(id /* block */)arg2;
- (id)backgroundPlayerState;
- (id)broadcastLocale;
- (long long)context;
- (void)dealloc;
- (int)disabledAudioTrackId;
- (id)initWithPlayer:(id)arg1 playerViewController:(id)arg2 playsFromStart:(bool)arg3 broadcastLocale:(id)arg4 livePostPlayController:(id)arg5;
- (bool)isAtLiveEdge;
- (id)livePostPlayController;
- (id)notificationToken;
- (bool)pausedDueToInterruption;
- (id)player;
- (id)playerViewController;
- (bool)playsFromStart;
- (id)resumeDate;
- (void)setBackgroundPlayerState:(id)arg1;
- (void)setContext:(long long)arg1;
- (void)setDisabledAudioTrackId:(int)arg1;
- (void)setLivePostPlayController:(id)arg1;
- (void)setNotificationToken:(id)arg1;
- (void)setPausedDueToInterruption:(bool)arg1;
- (void)setPlayer:(id)arg1;
- (void)setPlayerViewController:(id)arg1;
- (void)setResumeDate:(id)arg1;
- (void)swapActiveAudioWithPlaybackInfo:(id)arg1 completion:(id /* block */)arg2;
- (void)waitForExternalPlaybackToBecomeType:(long long)arg1 forPlayer:(id)arg2 completion:(id /* block */)arg3;

@end
