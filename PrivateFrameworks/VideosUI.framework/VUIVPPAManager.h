/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VideosUI.framework/VideosUI
 */

@interface VUIVPPAManager : NSObject {
    VUIAccessViewController * _accessViewController;
    bool  _alreadyInProgress;
    unsigned long long  _consentCancelButtonType;
}

@property (nonatomic, retain) VUIAccessViewController *accessViewController;
@property (nonatomic) bool alreadyInProgress;
@property (nonatomic) unsigned long long consentCancelButtonType;

+ (id)_getChannelDetailsForID:(id)arg1;
+ (id)_getConsentedBrandsFromSettingsStore;
+ (id)_getConsentedChannels;
+ (id)_getDeniedBrandsFromSettingsStore;
+ (id)_getDeniedChannels;
+ (bool)_isReminderDue:(id)arg1 reminderInterval:(double)arg2;
+ (id)addUniqueChannels:(id)arg1 channels:(id)arg2;
+ (bool)channelAlreadyExists:(id)arg1 channelID:(id)arg2;
+ (id)sharedInstance;

- (void).cxx_destruct;
- (id)_appSettingsForChannelID:(id)arg1 externalID:(id)arg2;
- (void)_fetchConfigurationAndPresentVPPAIfRequired:(id)arg1 shouldForceConsentPrompt:(bool)arg2 completion:(id /* block */)arg3;
- (id)_filterOutNotEligibleVPPAChannels:(id)arg1;
- (id)_getEligibleBulkChannels;
- (id)_getVPPABulkChannels:(long long)arg1;
- (bool)_isChannelVPPAPromptEligible:(id)arg1;
- (bool)_isVPPAPromptDueForConfig:(id)arg1;
- (void)_presentVPPAConsentScreen:(id)arg1 vppaState:(long long)arg2 completion:(id /* block */)arg3;
- (void)_removeNotEligibleChannelFromSettingsStore:(id)arg1;
- (id)_rootViewController;
- (id)_subscribedAppBundleIdentifiers;
- (id)_subscriptionIdentifierForBundleID:(id)arg1;
- (id)_watchlistOrderedChannels;
- (id)accessViewController;
- (bool)alreadyInProgress;
- (void)clearVPPAState;
- (unsigned long long)consentCancelButtonType;
- (id)init;
- (bool)lightweightCheckToSeeIfChannelRequiresConsent:(id)arg1;
- (void)reloadConfigurationAfterVPPAChange;
- (void)setAccessViewController:(id)arg1;
- (void)setAlreadyInProgress:(bool)arg1;
- (void)setConsentCancelButtonType:(unsigned long long)arg1;
- (void)startVPPAConsentFlow:(id)arg1 consentCancelButtonType:(unsigned long long)arg2 shouldForceVPPAPrompt:(bool)arg3 completion:(id /* block */)arg4;
- (void)startVPPAConsentFlowForDeeplink:(id)arg1 completion:(id /* block */)arg2;

@end
