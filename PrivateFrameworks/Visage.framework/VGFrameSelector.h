/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Visage.framework/Visage
 */

@interface VGFrameSelector : NSObject {
    VGFrameSelectorOptions * _options;
    unsigned long long  _remainingPosesCount;
    unsigned long long  _requiredPosesCount;
    float  _simpleSelectorMaxAlignment;
    float  _simpleSelectorMinAlignment;
    struct vector<TargetPoseData, std::allocator<TargetPoseData>> { 
        struct TargetPoseData {} *__begin_; 
        struct TargetPoseData {} *__end_; 
        struct __compressed_pair<TargetPoseData *, std::allocator<TargetPoseData>> { 
            struct TargetPoseData {} *__value_; 
        } __end_cap_; 
    }  _targetPosesData;
    VGUserBodyPoseGuidance * _userBodyPoseGuidance;
}

@property (nonatomic, readonly) bool completed;
@property (nonatomic, readonly) bool completedPitch;
@property (nonatomic, readonly) bool completedYaw;
@property (nonatomic, readonly) NSDictionary *pitchResults;
@property (nonatomic, readonly) unsigned long long remainingPosesCount;
@property (nonatomic, readonly) unsigned long long requiredPosesCount;
@property (nonatomic, readonly) NSDictionary *results;
@property (nonatomic, readonly) NSDictionary *yawResults;

+ (struct optional<std::vector<TargetPoseData>> { union { BOOL x_1_1_1; struct vector<TargetPoseData, std::allocator<TargetPoseData>> { struct TargetPoseData {} *x_2_2_1; struct TargetPoseData {} *x_2_2_2; struct __compressed_pair<TargetPoseData *, std::allocator<TargetPoseData>> { struct TargetPoseData {} *x_3_3_1; } x_2_2_3; } x_1_1_2; } x1; bool x2; })_computeTargetPosesForFrameCount:(unsigned long long)arg1 limit:(float)arg2 desiredFrontPoseFrustumOffsets:(struct optional<const VGFrameSelectorFrustumOffsets> { union { BOOL x_1_1_1; struct VGFrameSelectorFrustumOffsets { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; } x_1_1_2; } x1; bool x2; })arg3 desiredFrontPoseFrustumOffset:(struct optional<const VGFrameSelectorFrustumOffsets> { union { BOOL x_1_1_1; struct VGFrameSelectorFrustumOffsets { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; } x_1_1_2; } x1; bool x2; })arg4 anglesDegrees:(id)arg5 motionType:(int)arg6 detectFrontPose:(bool)arg7 options:(id)arg8;
+ (id)invalidPose;

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct FrameRejectionState { int x1; id x2; float x3; float x4; id x5; })applyExpressionFilters:(const void*)arg1 trackingData:(id)arg2 frameTimestampMS:(unsigned long long)arg3 score:(float*)arg4;
- (struct FrameRejectionState { int x1; id x2; float x3; float x4; id x5; })applyVisionFaceLandmarksFilter:(id)arg1 bestTargetPoseData:(const void*)arg2 frameTimestampMS:(unsigned long long)arg3;
- (struct FrameRejectionState { int x1; id x2; float x3; float x4; id x5; })applyVisionFilters:(id)arg1 bestTargetPoseData:(const void*)arg2 frameTimestampMS:(unsigned long long)arg3;
- (struct FrameRejectionState { int x1; id x2; float x3; float x4; id x5; })checkDepthFoVFilter:(id)arg1 framePose:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg2 bestTargetPoseData:(const void*)arg3 validDataBounds:(const struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4 frameTimestampMS:(unsigned long long)arg5;
- (bool)completed;
- (bool)completedPitch;
- (bool)completedYaw;
- (id)initWithOptions:(id)arg1;
- (struct optional<simd_float4x4> { union { BOOL x_1_1_1; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_2_2_1[4]; } x_1_1_2; } x1; })parseAtlasToCameraTransformation:(id)arg1;
- (id)pitchResults;
- (id)processCaptureData:(id)arg1 trackingData:(id)arg2 framePose:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg3 validDataFrameBounds:(const void*)arg4;
- (id)processHeadPose:(struct HeadPoseData { float x1; float x2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_1_1[4]; } x3; })arg1 captureData:(id)arg2 trackingData:(id)arg3 validDataBounds:(const void*)arg4 frameTimestampMS:(unsigned long long)arg5;
- (id)processHeadPoseSimple:(struct HeadPoseData { float x1; float x2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_1_1[4]; } x3; })arg1 frameTimestampMS:(unsigned long long)arg2;
- (unsigned long long)remainingPosesCount;
- (unsigned long long)requiredPosesCount;
- (id)results;
- (id)resultsForMotionType:(struct optional<vg::frame_selection::MotionType> { union { BOOL x_1_1_1; int x_1_1_2; } x1; bool x2; })arg1;
- (id)selectedPitchValidPoses;
- (id)selectedValidPosesForMotion:(struct optional<vg::frame_selection::MotionType> { union { BOOL x_1_1_1; int x_1_1_2; } x1; bool x2; })arg1;
- (id)selectedYawValidPoses;
- (id)yawResults;

@end
