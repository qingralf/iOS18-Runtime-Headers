/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos
 */

@interface RCComposition : NSObject <NSCopying, NSMutableCopying, RCDictionaryPListRepresentationCoding> {
    bool  _cachedComposedAVURLDerivedValuesAreValid;
    double  _cachedComposedAVURLDuration;
    bool  _cachedHasMultipleTracks;
    struct { 
        double beginTime; 
        double endTime; 
    }  _cachedTrackRanges;
    NSURL * _composedAVURL;
    NSArray * _composedFragments;
    NSObject * _composedFragmentsMutex;
    NSDate * _creationDate;
    NSArray * _decomposedFragments;
    NSDictionary * _musicMemoMetadata;
    NSString * _savedRecordingUUID;
    NSString * _title;
}

@property (nonatomic) bool cachedComposedAVURLDerivedValuesAreValid;
@property (nonatomic) double cachedComposedAVURLDuration;
@property (nonatomic) bool cachedHasMultipleTracks;
@property (nonatomic, retain) NSURL *composedAVURL;
@property (nonatomic, readonly) bool composedAssetIsM4a;
@property (nonatomic, readonly) double composedDuration;
@property (nonatomic, retain) NSArray *composedFragments;
@property (nonatomic, retain) NSObject *composedFragmentsMutex;
@property (nonatomic, readonly) NSArray *composedWaveformURLs;
@property (nonatomic, retain) NSDate *creationDate;
@property (readonly, copy) NSString *debugDescription; /* unknown property attribute: ? */
@property (nonatomic, retain) NSArray *decomposedFragments;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool hasMultipleTracks;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isContentBeingModified;
@property (nonatomic, retain) NSDictionary *musicMemoMetadata;
@property (nonatomic, retain) NSString *savedRecordingUUID;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSString *title;
@property (nonatomic, readonly) bool willMigrateFromM4aToQta;

+ (id)_compositionFragmentsFolderForComposedAVURL:(id)arg1;
+ (id)_compositionLoadedFromMetadataURL:(id)arg1 composedAVURL:(id)arg2 savedRecordingUUID:(id)arg3 creationDate:(id)arg4 createIfNeeded:(bool)arg5;
+ (id)_compositionLoadedFromMetadataURL:(id)arg1 savedRecording:(id)arg2;
+ (id)_compositionMetadataURLForCompositionBundleURL:(id)arg1;
+ (bool)_isSessionWithModificationAccessActiveForComposedAVURL:(id)arg1;
+ (bool)_markCompositionAVURLsBeingModified:(id)arg1;
+ (id)_unitTestingCompositionWithDecomposedFragments:(id)arg1;
+ (id)compositionBundleURLForComposedAVURL:(id)arg1;
+ (id)compositionLoadedForComposedAVURL:(id)arg1 createIfNeeded:(bool)arg2;
+ (id)compositionLoadedForEditingSavedRecording:(id)arg1 error:(id*)arg2;
+ (id)compositionLoadedForSavedRecording:(id)arg1;
+ (id)compositionLoadedFromCompositionBundleURL:(id)arg1;
+ (id)compositionMetadataURLForComposedAVURL:(id)arg1;
+ (void)deleteFromFilesystem:(id)arg1;
+ (bool)excludeFromBackup:(id)arg1 error:(id*)arg2;
+ (bool)migrateBackupExclusionFlag:(id)arg1;
+ (id)uriRepresentationForLegacyComposedAVURL:(id)arg1;

- (void).cxx_destruct;
- (void)_calculateComposedAVURLDerivedValues;
- (id)_calculateComposedFragments;
- (double)_composedDuration;
- (id)_compositionAsset:(id*)arg1;
- (id)_compositionByReplacingDecomposedFragments:(id)arg1;
- (void)_eaccess_repairDecomposedFragmentMetadataIfNecessary:(id /* block */)arg1;
- (bool)_enumerateTracksForInsertion:(id /* block */)arg1 error:(id*)arg2;
- (unsigned long long)_fileSizeOfComposedAssets;
- (id)_initWithComposedAVURL:(id)arg1 savedRecordingUUID:(id)arg2 creationDate:(id)arg3 title:(id)arg4 musicMemoMetadata:(id)arg5 decomposedFragments:(id)arg6 composedFragments:(id)arg7;
- (id)_initWithSavedRecording:(id)arg1 decomposedFragments:(id)arg2 composedFragments:(id)arg3;
- (void)_loadMusicMemoMetadata;
- (id)bufferEnumerator:(id)arg1 startTime:(double)arg2 error:(id*)arg3;
- (bool)cachedComposedAVURLDerivedValuesAreValid;
- (double)cachedComposedAVURLDuration;
- (bool)cachedHasMultipleTracks;
- (id)composedAVURL;
- (bool)composedAssetIsM4a;
- (double)composedDuration;
- (id)composedFragments;
- (id)composedFragmentsIntersectingTimeRange:(struct { double x1; double x2; })arg1;
- (id)composedFragmentsMutex;
- (struct { double x1; double x2; })composedTimeRangeForTrackIndex:(unsigned long long)arg1;
- (id)composedWaveformURLForTrackIndex:(unsigned long long)arg1;
- (id)composedWaveformURLs;
- (id)compositionAssetForExport:(id*)arg1;
- (id)compositionByClippingToComposedTimeRange:(struct { double x1; double x2; })arg1;
- (id)compositionByDeletingAndSplittingAtComposedTimeRange:(struct { double x1; double x2; })arg1;
- (id)compositionByOverdubbingWithFragment:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)creationDate;
- (id)decomposedFragments;
- (void)deleteFromFilesystem;
- (id)description;
- (id)dictionaryPListRepresentation;
- (void)enumerateOrphanedFragmentsWithBlock:(id /* block */)arg1;
- (unsigned long long)fileSizeOfAssets;
- (bool)hasMultipleTracks;
- (id)initWithDictionaryPListRepresentation:(id)arg1;
- (bool)isContentBeingModified;
- (id)moveTo:(id)arg1 recordingID:(id)arg2 error:(id*)arg3;
- (id)musicMemoMetadata;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (id)newRandomFragmentWithInsertionTimeRangeInComposition:(struct { double x1; double x2; })arg1 trackIndex:(unsigned long long)arg2 pathExtension:(id)arg3;
- (id)playableAsset:(id*)arg1;
- (bool)rcs_allAssetsAreMissing;
- (void)rcs_composeToFinalDestinationWithCompletionBlock:(id /* block */)arg1;
- (void)rcs_repairDecomposedFragmentMetadataIfNecessary:(id /* block */)arg1;
- (void)recacheAVURLDerivedValues;
- (bool)saveMetadataToDefaultLocation;
- (id)savedRecordingUUID;
- (void)setCachedComposedAVURLDerivedValuesAreValid:(bool)arg1;
- (void)setCachedComposedAVURLDuration:(double)arg1;
- (void)setCachedHasMultipleTracks:(bool)arg1;
- (void)setComposedAVURL:(id)arg1;
- (void)setComposedFragments:(id)arg1;
- (void)setComposedFragmentsMutex:(id)arg1;
- (void)setCreationDate:(id)arg1;
- (void)setDecomposedFragments:(id)arg1;
- (void)setMusicMemoMetadata:(id)arg1;
- (void)setSavedRecordingUUID:(id)arg1;
- (void)setSavedRecordingUUIDFromRecoveredRecordingUUID:(id)arg1;
- (void)setTitle:(id)arg1;
- (id)title;
- (bool)willMigrateFromM4aToQta;

@end
