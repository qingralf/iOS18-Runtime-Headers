/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/FontServices.framework/libFontParser.dylib
 */

@interface FontParser.AnyVectorFont : NSObject

@property (nonatomic, readonly) NSArray *additionalPostScriptNames;
@property (nonatomic, readonly) NSArray *allNames;
@property (nonatomic, readonly) const struct __CFCharacterSet { }*characterSet;
@property (nonatomic, readonly) long long dataResidence;
@property (nonatomic, readonly) _TtC10FontParser13AnyVectorFont *defaultInstance;
@property (nonatomic, readonly) long long encodingType;
@property (nonatomic, readonly) NSString *familyName;
@property (nonatomic, readonly) struct FPFontInfo { unsigned long long x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; int x10; int x11; bool x12; bool x13; double x14; double x15; double x16; double x17; double x18; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_19_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_19_1_2; } x19; bool x20; } fontInfo;
@property (nonatomic, readonly) NSString *fullName;
@property (nonatomic, readonly) bool hasNamedInstanceWithOpticalSize;
@property (nonatomic, readonly) NSString *instanceName;
@property (nonatomic, readonly) unsigned short instanceNameID;
@property (nonatomic, readonly) bool isBitmapOnly;
@property (nonatomic, readonly) bool isNamedInstance;
@property (nonatomic, readonly) bool isSFNT;
@property (nonatomic, readonly) bool isSuitcase;
@property (nonatomic, readonly) NSDictionary *metadata;
@property (nonatomic, readonly) NSString *nameTablePostScriptName;
@property (nonatomic, readonly) const struct __CFDictionary { }*names;
@property (nonatomic, readonly) unsigned int numberOfGlyphs;
@property (nonatomic, readonly) NSString *postScriptName;
@property (nonatomic, readonly) unsigned int protectionInfo;
@property (nonatomic, readonly) NSData *sfntData;
@property (nonatomic, readonly) NSDictionary *splicedStash;
@property (nonatomic, readonly) NSArray *tableTags;
@property (nonatomic, readonly) NSArray *type1Encoding;
@property (nonatomic, readonly) unsigned short unitsPerEm;
@property (nonatomic, readonly) struct FPFontVMetrics { int x1; int x2; int x3; int x4; int x5; int x6; double x7; double x8; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_9_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_9_1_2; } x9; } vMetrics;
@property (nonatomic, readonly) NSString *variationPostScriptNamePrefix;
@property (nonatomic, readonly) NSArray *variationScalars;

+ (id)anyVectorFontsWithData:(id)arg1 path:(id)arg2;

- (id)additionalPostScriptNames;
- (id)allNames;
- (bool)canCreatePostScriptSubsetWithFormat:(long long)arg1;
- (const struct __CFCharacterSet { }*)characterSet;
- (id)controlPointsWithGlyph:(unsigned int)arg1;
- (id)copyBitmapWithGlyph:(unsigned int)arg1 transform:(const struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg2 options:(unsigned int)arg3 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4 bytesPerRow:(long long*)arg5;
- (id)copyOriginalPathWithGlyph:(unsigned int)arg1;
- (id)copyTableDataWithTag:(unsigned int)arg1;
- (id)createPostScriptEncoding:(const unsigned short*)arg1;
- (id)createPostScriptSubsetWithFormat:(long long)arg1 name:(id)arg2 glyphs:(const unsigned short*)arg3 glyphCount:(long long)arg4 encoding:(const unsigned short*)arg5;
- (void)createSubsetWithName:(const char *)arg1 glyphBits:(unsigned int*)arg2 glyphBitsSize:(long long)arg3 cmap_1_0:(const unsigned short*)arg4 remapArray:(id*)arg5 data:(id*)arg6;
- (long long)dataResidence;
- (id)defaultInstance;
- (long long)encodingType;
- (id)familyName;
- (struct FPFontInfo { unsigned long long x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; int x10; int x11; bool x12; bool x13; double x14; double x15; double x16; double x17; double x18; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_19_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_19_1_2; } x19; bool x20; })fontInfo;
- (id)fullName;
- (bool)getCIDsWithGlyphs:(const unsigned short*)arg1 cids:(unsigned short*)arg2 count:(long long)arg3;
- (struct CGSize { double x1; double x2; })getDeviceAdvanceWithGlyph:(unsigned int)arg1 transform:(const struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })getDeviceBoundsWithGlyph:(unsigned int)arg1 transform:(const struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg2;
- (void)getGlyphIdealAdvanceWidthsWithGlyphs:(const unsigned short*)arg1 advances:(double*)arg2 count:(long long)arg3;
- (void)getGlyphX:(unsigned short*)arg1 o:(unsigned short*)arg2;
- (bool)getGlyphsWithCharacterRange:(struct { long long x1; long long x2; })arg1 glyphs:(unsigned short*)arg2;
- (bool)getGlyphsWithCharacterRange:(struct { long long x1; long long x2; })arg1 longGlyphs:(unsigned int*)arg2;
- (long long)getGlyphsWithCharacters:(const unsigned short*)arg1 glyphs:(unsigned short*)arg2 count:(long long)arg3;
- (long long)getGlyphsWithCharacters:(const unsigned short*)arg1 longGlyphs:(unsigned int*)arg2 count:(long long)arg3;
- (bool)getGlyphsWithCids:(const unsigned short*)arg1 glyphs:(unsigned short*)arg2 count:(long long)arg3;
- (long long)getGlyphsWithEncoding:(struct FPEncoding { unsigned short x1; unsigned short x2; unsigned short x3; })arg1 text:(const char *)arg2 glyphs:(unsigned short*)arg3 count:(long long)arg4;
- (void)getGlyphsWithGlyphNames:(const char **)arg1 glyphs:(unsigned short*)arg2 count:(long long)arg3;
- (struct CGFloat2 { double x1; double x2; })getIdealAdvanceAndSideBearingWithGlyph:(unsigned int)arg1 vertical:(bool)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })getIdealBoundsWithGlyph:(unsigned int)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })getIdealVerticalBoundsWithGlyph:(unsigned int)arg1;
- (struct OS2UnicodeRanges { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; })getOS2UnicodeRangesWithMinCoveragePercent:(float)arg1;
- (bool)getRegistryOrderingSupplement:(id*)arg1 :(id*)arg2 :(int*)arg3;
- (bool)getStemsInto:(struct CGFloat2 { double x1; double x2; }*)arg1;
- (bool)getStrikeoutInto:(struct CGFloat2 { double x1; double x2; }*)arg1;
- (bool)getSubscriptInto:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1;
- (bool)getSuperscriptInto:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1;
- (bool)getTrueTypeEncodingWithPlatform:(unsigned short)arg1 script:(unsigned short)arg2 indexMap:(void*)arg3;
- (bool)getTypoMetricsInto:(struct CGFloat3 { double x1; double x2; double x3; }*)arg1;
- (long long)getUnicharsWithGlyph:(unsigned short)arg1 unicodes:(unsigned short*)arg2 count:(long long)arg3;
- (struct CGSize { double x1; double x2; })getVerticalDeviceAdvanceWithGlyph:(unsigned int)arg1 transform:(const struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })getVerticalDeviceBoundsWithGlyph:(unsigned int)arg1 transform:(const struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg2;
- (struct CGSize { double x1; double x2; })getVerticalTranslateWithGlyph:(unsigned int)arg1;
- (bool)getWindowsMetricsInto:(struct CGFloat2 { double x1; double x2; }*)arg1;
- (id)glyphNameWithGlyph:(unsigned short)arg1;
- (bool)hasNamedInstanceWithOpticalSize;
- (id)init;
- (id)instanceName;
- (unsigned short)instanceNameID;
- (bool)isBitmapOnly;
- (bool)isNamedInstance;
- (bool)isSFNT;
- (bool)isSuitcase;
- (id)metadata;
- (id)nameTablePostScriptName;
- (const struct __CFDictionary { }*)names;
- (unsigned int)numberOfGlyphs;
- (id)postScriptName;
- (unsigned int)protectionInfo;
- (id)sfntData;
- (id)splicedStash;
- (id)tableTags;
- (id)type1Encoding;
- (unsigned short)unitsPerEm;
- (struct FPFontVMetrics { int x1; int x2; int x3; int x4; int x5; int x6; double x7; double x8; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_9_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_9_1_2; } x9; })vMetrics;
- (unsigned short)variationAxisFlagsWithTag:(unsigned int)arg1;
- (unsigned short)variationAxisNameIDWithTag:(unsigned int)arg1;
- (id)variationPostScriptNamePrefix;
- (double)variationScalarWithTupleIndex:(long long)arg1;
- (id)variationScalars;
- (id)variationWithPostScriptNameSuffix:(id)arg1;

@end
